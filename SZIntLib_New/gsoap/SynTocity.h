/* SynTocity.h
   Generated by wsdl2h 2.8.21 from SynTocity.wsdl and typemap.dat
   2021-01-15 05:20:30 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2000-2014 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on SynTocity.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 -j to generate improved proxy and server classes.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following licenses:
GPL or Genivia's license for commercial use.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://synToCity.synchrodata.daniu.com/                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to remove STL dependency)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://synToCity.synchrodata.daniu.com/"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://synToCity.synchrodata.daniu.com/"
//gsoap ns1   schema namespace:	http://synToCity.synchrodata.daniu.com/
//gsoap ns1   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


//  Forward declaration of class ns1__GetYCVehicle.
class ns1__GetYCVehicle;

//  Forward declaration of class ns1__GetYCVehicleResponse.
class ns1__GetYCVehicleResponse;

//  Forward declaration of class ns1__getres.
class ns1__getres;

//  Forward declaration of class ns1__getresResponse.
class ns1__getresResponse;

//  Forward declaration of class ns1__BeginCheck.
class ns1__BeginCheck;

//  Forward declaration of class ns1__BeginCheckResponse.
class ns1__BeginCheckResponse;

//  Forward declaration of class ns1__UploadInspectionResult.
class ns1__UploadInspectionResult;

//  Forward declaration of class ns1__UploadInspectionResultResponse.
class ns1__UploadInspectionResultResponse;

//  Forward declaration of class ns1__GetVehicle.
class ns1__GetVehicle;

//  Forward declaration of class ns1__GetVehicleResponse.
class ns1__GetVehicleResponse;

//  Forward declaration of class ns1__vehiclelogin.
class ns1__vehiclelogin;

//  Forward declaration of class ns1__vehicleloginResponse.
class ns1__vehicleloginResponse;

//  Forward declaration of class ns1__GetCheckList.
class ns1__GetCheckList;

//  Forward declaration of class ns1__GetCheckListResponse.
class ns1__GetCheckListResponse;

//  Forward declaration of class ns1__validateJC.
class ns1__validateJC;

//  Forward declaration of class ns1__validateJCResponse.
class ns1__validateJCResponse;

//  Forward declaration of class ns1__LoginServer.
class ns1__LoginServer;

//  Forward declaration of class ns1__LoginServerResponse.
class ns1__LoginServerResponse;

//  Forward declaration of class ns1__GetBaseTypeInfo.
class ns1__GetBaseTypeInfo;

//  Forward declaration of class ns1__GetBaseTypeInfoResponse.
class ns1__GetBaseTypeInfoResponse;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://synToCity.synchrodata.daniu.com/                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://synToCity.synchrodata.daniu.com/                                  *
 *                                                                            *
\******************************************************************************/

/// @brief "http://synToCity.synchrodata.daniu.com/":GetYCVehicle is a complexType.
///
/// class ns1__GetYCVehicle operations:
/// - soap_new_ns1__GetYCVehicle(soap*) allocate
/// - soap_new_ns1__GetYCVehicle(soap*, int num) allocate array
/// - soap_new_req_ns1__GetYCVehicle(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__GetYCVehicle(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__GetYCVehicle(soap*, ns1__GetYCVehicle*) deserialize from a stream
/// - int soap_write_ns1__GetYCVehicle(soap, ns1__GetYCVehicle*) serialize to a stream
class ns1__GetYCVehicle
{ public:
/// Element "token" of XSD type xs:string.
    std::wstring*                        token                          0;	///< Optional element.
/// Element "plate" of XSD type xs:string.
    std::wstring*                        plate                          0;	///< Optional element.
/// Element "color" of XSD type xs:string.
    std::wstring*                        color                          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://synToCity.synchrodata.daniu.com/":GetYCVehicleResponse is a complexType.
///
/// class ns1__GetYCVehicleResponse operations:
/// - soap_new_ns1__GetYCVehicleResponse(soap*) allocate
/// - soap_new_ns1__GetYCVehicleResponse(soap*, int num) allocate array
/// - soap_new_req_ns1__GetYCVehicleResponse(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__GetYCVehicleResponse(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__GetYCVehicleResponse(soap*, ns1__GetYCVehicleResponse*) deserialize from a stream
/// - int soap_write_ns1__GetYCVehicleResponse(soap, ns1__GetYCVehicleResponse*) serialize to a stream
class ns1__GetYCVehicleResponse
{ public:
/// Element "return" of XSD type xs:string.
    std::wstring*                        return_                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://synToCity.synchrodata.daniu.com/":getres is a complexType.
///
/// class ns1__getres operations:
/// - soap_new_ns1__getres(soap*) allocate
/// - soap_new_ns1__getres(soap*, int num) allocate array
/// - soap_new_req_ns1__getres(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__getres(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__getres(soap*, ns1__getres*) deserialize from a stream
/// - int soap_write_ns1__getres(soap, ns1__getres*) serialize to a stream
class ns1__getres
{ public:
/// Element "token" of XSD type xs:string.
    std::wstring*                        token                          0;	///< Optional element.
/// Element "unitid" of XSD type xs:string.
    std::wstring*                        unitid                         0;	///< Optional element.
/// Element "checkmethod" of XSD type xs:int.
    int                                  checkmethod                    1;	///< Required element.
/// Element "hasover" of XSD type xs:int.
    int                                  hasover                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://synToCity.synchrodata.daniu.com/":getresResponse is a complexType.
///
/// class ns1__getresResponse operations:
/// - soap_new_ns1__getresResponse(soap*) allocate
/// - soap_new_ns1__getresResponse(soap*, int num) allocate array
/// - soap_new_req_ns1__getresResponse(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__getresResponse(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__getresResponse(soap*, ns1__getresResponse*) deserialize from a stream
/// - int soap_write_ns1__getresResponse(soap, ns1__getresResponse*) serialize to a stream
class ns1__getresResponse
{ public:
/// Element "return" of XSD type xs:string.
    std::wstring*                        return_                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://synToCity.synchrodata.daniu.com/":BeginCheck is a complexType.
///
/// class ns1__BeginCheck operations:
/// - soap_new_ns1__BeginCheck(soap*) allocate
/// - soap_new_ns1__BeginCheck(soap*, int num) allocate array
/// - soap_new_req_ns1__BeginCheck(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__BeginCheck(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__BeginCheck(soap*, ns1__BeginCheck*) deserialize from a stream
/// - int soap_write_ns1__BeginCheck(soap, ns1__BeginCheck*) serialize to a stream
class ns1__BeginCheck
{ public:
/// Element "unitid" of XSD type xs:string.
    std::wstring*                        unitid                         0;	///< Optional element.
/// Element "lineid" of XSD type xs:string.
    std::wstring*                        lineid                         0;	///< Optional element.
/// Element "plate" of XSD type xs:string.
    std::wstring*                        plate                          0;	///< Optional element.
/// Element "vin" of XSD type xs:string.
    std::wstring*                        vin                            0;	///< Optional element.
/// Element "qwg" of XSD type xs:string.
    std::wstring*                        qwg                            0;	///< Optional element.
/// Element "hwg" of XSD type xs:string.
    std::wstring*                        hwg                            0;	///< Optional element.
/// Element "hcl" of XSD type xs:string.
    std::wstring*                        hcl                            0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://synToCity.synchrodata.daniu.com/":BeginCheckResponse is a complexType.
///
/// class ns1__BeginCheckResponse operations:
/// - soap_new_ns1__BeginCheckResponse(soap*) allocate
/// - soap_new_ns1__BeginCheckResponse(soap*, int num) allocate array
/// - soap_new_req_ns1__BeginCheckResponse(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__BeginCheckResponse(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__BeginCheckResponse(soap*, ns1__BeginCheckResponse*) deserialize from a stream
/// - int soap_write_ns1__BeginCheckResponse(soap, ns1__BeginCheckResponse*) serialize to a stream
class ns1__BeginCheckResponse
{ public:
/// Element "return" of XSD type xs:string.
    std::wstring*                        return_                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://synToCity.synchrodata.daniu.com/":UploadInspectionResult is a complexType.
///
/// class ns1__UploadInspectionResult operations:
/// - soap_new_ns1__UploadInspectionResult(soap*) allocate
/// - soap_new_ns1__UploadInspectionResult(soap*, int num) allocate array
/// - soap_new_req_ns1__UploadInspectionResult(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__UploadInspectionResult(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__UploadInspectionResult(soap*, ns1__UploadInspectionResult*) deserialize from a stream
/// - int soap_write_ns1__UploadInspectionResult(soap, ns1__UploadInspectionResult*) serialize to a stream
class ns1__UploadInspectionResult
{ public:
/// Element "token" of XSD type xs:string.
    std::wstring*                        token                          0;	///< Optional element.
/// Element "unitid" of XSD type xs:string.
    std::wstring*                        unitid                         0;	///< Optional element.
/// Element "checkresult" of XSD type xs:string.
    std::wstring*                        checkresult                    0;	///< Optional element.
/// Element "checkmethod" of XSD type xs:int.
    int                                  checkmethod                    1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://synToCity.synchrodata.daniu.com/":UploadInspectionResultResponse is a complexType.
///
/// class ns1__UploadInspectionResultResponse operations:
/// - soap_new_ns1__UploadInspectionResultResponse(soap*) allocate
/// - soap_new_ns1__UploadInspectionResultResponse(soap*, int num) allocate array
/// - soap_new_req_ns1__UploadInspectionResultResponse(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__UploadInspectionResultResponse(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__UploadInspectionResultResponse(soap*, ns1__UploadInspectionResultResponse*) deserialize from a stream
/// - int soap_write_ns1__UploadInspectionResultResponse(soap, ns1__UploadInspectionResultResponse*) serialize to a stream
class ns1__UploadInspectionResultResponse
{ public:
/// Element "return" of XSD type xs:string.
    std::wstring*                        return_                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://synToCity.synchrodata.daniu.com/":GetVehicle is a complexType.
///
/// class ns1__GetVehicle operations:
/// - soap_new_ns1__GetVehicle(soap*) allocate
/// - soap_new_ns1__GetVehicle(soap*, int num) allocate array
/// - soap_new_req_ns1__GetVehicle(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__GetVehicle(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__GetVehicle(soap*, ns1__GetVehicle*) deserialize from a stream
/// - int soap_write_ns1__GetVehicle(soap, ns1__GetVehicle*) serialize to a stream
class ns1__GetVehicle
{ public:
/// Element "token" of XSD type xs:string.
    std::wstring*                        token                          0;	///< Optional element.
/// Element "unitid" of XSD type xs:string.
    std::wstring*                        unitid                         0;	///< Optional element.
/// Element "vin" of XSD type xs:string.
    std::wstring*                        vin                            0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://synToCity.synchrodata.daniu.com/":GetVehicleResponse is a complexType.
///
/// class ns1__GetVehicleResponse operations:
/// - soap_new_ns1__GetVehicleResponse(soap*) allocate
/// - soap_new_ns1__GetVehicleResponse(soap*, int num) allocate array
/// - soap_new_req_ns1__GetVehicleResponse(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__GetVehicleResponse(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__GetVehicleResponse(soap*, ns1__GetVehicleResponse*) deserialize from a stream
/// - int soap_write_ns1__GetVehicleResponse(soap, ns1__GetVehicleResponse*) serialize to a stream
class ns1__GetVehicleResponse
{ public:
/// Element "return" of XSD type xs:string.
    std::wstring*                        return_                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://synToCity.synchrodata.daniu.com/":vehiclelogin is a complexType.
///
/// class ns1__vehiclelogin operations:
/// - soap_new_ns1__vehiclelogin(soap*) allocate
/// - soap_new_ns1__vehiclelogin(soap*, int num) allocate array
/// - soap_new_req_ns1__vehiclelogin(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__vehiclelogin(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__vehiclelogin(soap*, ns1__vehiclelogin*) deserialize from a stream
/// - int soap_write_ns1__vehiclelogin(soap, ns1__vehiclelogin*) serialize to a stream
class ns1__vehiclelogin
{ public:
/// Element "vehiclexml" of XSD type xs:string.
    std::wstring*                        vehiclexml                     0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://synToCity.synchrodata.daniu.com/":vehicleloginResponse is a complexType.
///
/// class ns1__vehicleloginResponse operations:
/// - soap_new_ns1__vehicleloginResponse(soap*) allocate
/// - soap_new_ns1__vehicleloginResponse(soap*, int num) allocate array
/// - soap_new_req_ns1__vehicleloginResponse(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__vehicleloginResponse(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__vehicleloginResponse(soap*, ns1__vehicleloginResponse*) deserialize from a stream
/// - int soap_write_ns1__vehicleloginResponse(soap, ns1__vehicleloginResponse*) serialize to a stream
class ns1__vehicleloginResponse
{ public:
/// Element "return" of XSD type xs:string.
    std::wstring*                        return_                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://synToCity.synchrodata.daniu.com/":GetCheckList is a complexType.
///
/// class ns1__GetCheckList operations:
/// - soap_new_ns1__GetCheckList(soap*) allocate
/// - soap_new_ns1__GetCheckList(soap*, int num) allocate array
/// - soap_new_req_ns1__GetCheckList(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__GetCheckList(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__GetCheckList(soap*, ns1__GetCheckList*) deserialize from a stream
/// - int soap_write_ns1__GetCheckList(soap, ns1__GetCheckList*) serialize to a stream
class ns1__GetCheckList
{ public:
/// Element "token" of XSD type xs:string.
    std::wstring*                        token                          0;	///< Optional element.
/// Element "unitid" of XSD type xs:string.
    std::wstring*                        unitid                         0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://synToCity.synchrodata.daniu.com/":GetCheckListResponse is a complexType.
///
/// class ns1__GetCheckListResponse operations:
/// - soap_new_ns1__GetCheckListResponse(soap*) allocate
/// - soap_new_ns1__GetCheckListResponse(soap*, int num) allocate array
/// - soap_new_req_ns1__GetCheckListResponse(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__GetCheckListResponse(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__GetCheckListResponse(soap*, ns1__GetCheckListResponse*) deserialize from a stream
/// - int soap_write_ns1__GetCheckListResponse(soap, ns1__GetCheckListResponse*) serialize to a stream
class ns1__GetCheckListResponse
{ public:
/// Element "return" of XSD type xs:string.
    std::wstring*                        return_                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://synToCity.synchrodata.daniu.com/":validateJC is a complexType.
///
/// class ns1__validateJC operations:
/// - soap_new_ns1__validateJC(soap*) allocate
/// - soap_new_ns1__validateJC(soap*, int num) allocate array
/// - soap_new_req_ns1__validateJC(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__validateJC(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__validateJC(soap*, ns1__validateJC*) deserialize from a stream
/// - int soap_write_ns1__validateJC(soap, ns1__validateJC*) serialize to a stream
class ns1__validateJC
{ public:
/// Element "res" of XSD type xs:string.
    std::wstring*                        res                            0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://synToCity.synchrodata.daniu.com/":validateJCResponse is a complexType.
///
/// class ns1__validateJCResponse operations:
/// - soap_new_ns1__validateJCResponse(soap*) allocate
/// - soap_new_ns1__validateJCResponse(soap*, int num) allocate array
/// - soap_new_req_ns1__validateJCResponse(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__validateJCResponse(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__validateJCResponse(soap*, ns1__validateJCResponse*) deserialize from a stream
/// - int soap_write_ns1__validateJCResponse(soap, ns1__validateJCResponse*) serialize to a stream
class ns1__validateJCResponse
{ public:
/// Element "return" of XSD type xs:string.
    std::wstring*                        return_                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://synToCity.synchrodata.daniu.com/":LoginServer is a complexType.
///
/// class ns1__LoginServer operations:
/// - soap_new_ns1__LoginServer(soap*) allocate
/// - soap_new_ns1__LoginServer(soap*, int num) allocate array
/// - soap_new_req_ns1__LoginServer(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__LoginServer(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__LoginServer(soap*, ns1__LoginServer*) deserialize from a stream
/// - int soap_write_ns1__LoginServer(soap, ns1__LoginServer*) serialize to a stream
class ns1__LoginServer
{ public:
/// Element "unitid" of XSD type xs:string.
    std::wstring*                        unitid                         0;	///< Optional element.
/// Element "lineid" of XSD type xs:string.
    std::wstring*                        lineid                         0;	///< Optional element.
/// Element "username" of XSD type xs:string.
    std::wstring*                        username                       0;	///< Optional element.
/// Element "pwd" of XSD type xs:string.
    std::wstring*                        pwd                            0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://synToCity.synchrodata.daniu.com/":LoginServerResponse is a complexType.
///
/// class ns1__LoginServerResponse operations:
/// - soap_new_ns1__LoginServerResponse(soap*) allocate
/// - soap_new_ns1__LoginServerResponse(soap*, int num) allocate array
/// - soap_new_req_ns1__LoginServerResponse(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__LoginServerResponse(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__LoginServerResponse(soap*, ns1__LoginServerResponse*) deserialize from a stream
/// - int soap_write_ns1__LoginServerResponse(soap, ns1__LoginServerResponse*) serialize to a stream
class ns1__LoginServerResponse
{ public:
/// Element "return" of XSD type xs:string.
    std::wstring*                        return_                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://synToCity.synchrodata.daniu.com/":GetBaseTypeInfo is a complexType.
///
/// class ns1__GetBaseTypeInfo operations:
/// - soap_new_ns1__GetBaseTypeInfo(soap*) allocate
/// - soap_new_ns1__GetBaseTypeInfo(soap*, int num) allocate array
/// - soap_new_req_ns1__GetBaseTypeInfo(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__GetBaseTypeInfo(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__GetBaseTypeInfo(soap*, ns1__GetBaseTypeInfo*) deserialize from a stream
/// - int soap_write_ns1__GetBaseTypeInfo(soap, ns1__GetBaseTypeInfo*) serialize to a stream
class ns1__GetBaseTypeInfo
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://synToCity.synchrodata.daniu.com/":GetBaseTypeInfoResponse is a complexType.
///
/// class ns1__GetBaseTypeInfoResponse operations:
/// - soap_new_ns1__GetBaseTypeInfoResponse(soap*) allocate
/// - soap_new_ns1__GetBaseTypeInfoResponse(soap*, int num) allocate array
/// - soap_new_req_ns1__GetBaseTypeInfoResponse(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__GetBaseTypeInfoResponse(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__GetBaseTypeInfoResponse(soap*, ns1__GetBaseTypeInfoResponse*) deserialize from a stream
/// - int soap_write_ns1__GetBaseTypeInfoResponse(soap, ns1__GetBaseTypeInfoResponse*) serialize to a stream
class ns1__GetBaseTypeInfoResponse
{ public:
/// Element "return" of XSD type xs:string.
    std::wstring*                        return_                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://synToCity.synchrodata.daniu.com/                                  *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://synToCity.synchrodata.daniu.com/":BeginCheck of XSD type "http://synToCity.synchrodata.daniu.com/":BeginCheck.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://synToCity.synchrodata.daniu.com/":BeginCheckResponse of XSD type "http://synToCity.synchrodata.daniu.com/":BeginCheckResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://synToCity.synchrodata.daniu.com/":GetBaseTypeInfo of XSD type "http://synToCity.synchrodata.daniu.com/":GetBaseTypeInfo.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://synToCity.synchrodata.daniu.com/":GetBaseTypeInfoResponse of XSD type "http://synToCity.synchrodata.daniu.com/":GetBaseTypeInfoResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://synToCity.synchrodata.daniu.com/":GetCheckList of XSD type "http://synToCity.synchrodata.daniu.com/":GetCheckList.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://synToCity.synchrodata.daniu.com/":GetCheckListResponse of XSD type "http://synToCity.synchrodata.daniu.com/":GetCheckListResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://synToCity.synchrodata.daniu.com/":GetVehicle of XSD type "http://synToCity.synchrodata.daniu.com/":GetVehicle.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://synToCity.synchrodata.daniu.com/":GetVehicleResponse of XSD type "http://synToCity.synchrodata.daniu.com/":GetVehicleResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://synToCity.synchrodata.daniu.com/":GetYCVehicle of XSD type "http://synToCity.synchrodata.daniu.com/":GetYCVehicle.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://synToCity.synchrodata.daniu.com/":GetYCVehicleResponse of XSD type "http://synToCity.synchrodata.daniu.com/":GetYCVehicleResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://synToCity.synchrodata.daniu.com/":LoginServer of XSD type "http://synToCity.synchrodata.daniu.com/":LoginServer.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://synToCity.synchrodata.daniu.com/":LoginServerResponse of XSD type "http://synToCity.synchrodata.daniu.com/":LoginServerResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://synToCity.synchrodata.daniu.com/":UploadInspectionResult of XSD type "http://synToCity.synchrodata.daniu.com/":UploadInspectionResult.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://synToCity.synchrodata.daniu.com/":UploadInspectionResultResponse of XSD type "http://synToCity.synchrodata.daniu.com/":UploadInspectionResultResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://synToCity.synchrodata.daniu.com/":getres of XSD type "http://synToCity.synchrodata.daniu.com/":getres.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://synToCity.synchrodata.daniu.com/":getresResponse of XSD type "http://synToCity.synchrodata.daniu.com/":getresResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://synToCity.synchrodata.daniu.com/":validateJC of XSD type "http://synToCity.synchrodata.daniu.com/":validateJC.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://synToCity.synchrodata.daniu.com/":validateJCResponse of XSD type "http://synToCity.synchrodata.daniu.com/":validateJCResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://synToCity.synchrodata.daniu.com/":vehiclelogin of XSD type "http://synToCity.synchrodata.daniu.com/":vehiclelogin.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://synToCity.synchrodata.daniu.com/":vehicleloginResponse of XSD type "http://synToCity.synchrodata.daniu.com/":vehicleloginResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://synToCity.synchrodata.daniu.com/                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	IVehicleServiceServiceSoapBinding 
//gsoap ns1  service type:	IVehicleService 
//gsoap ns1  service port:	http://172.141.32.1:9999/synchrodata/webservice//SynTocity 
//gsoap ns1  service namespace:	http://synToCity.synchrodata.daniu.com/ 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage IVehicleServiceService Definitions

@section IVehicleServiceService_bindings Service Bindings

  - @ref IVehicleServiceServiceSoapBinding

@section IVehicleServiceService_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page IVehicleServiceServiceSoapBinding Binding "IVehicleServiceServiceSoapBinding"

@section IVehicleServiceServiceSoapBinding_operations Operations of Binding "IVehicleServiceServiceSoapBinding"

  - @ref __ns1__GetYCVehicle

  - @ref __ns1__getres

  - @ref __ns1__BeginCheck

  - @ref __ns1__UploadInspectionResult

  - @ref __ns1__GetVehicle

  - @ref __ns1__vehiclelogin

  - @ref __ns1__GetCheckList

  - @ref __ns1__validateJC

  - @ref __ns1__LoginServer

  - @ref __ns1__GetBaseTypeInfo

@section IVehicleServiceServiceSoapBinding_ports Endpoints of Binding "IVehicleServiceServiceSoapBinding"

  - http://172.141.32.1:9999/synchrodata/webservice//SynTocity

@note Use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   IVehicleServiceServiceSoapBinding                                        *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetYCVehicle                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetYCVehicle" of service binding "IVehicleServiceServiceSoapBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetYCVehicle(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__GetYCVehicle*                  ns1__GetYCVehicle_,
    // output parameters:
    ns1__GetYCVehicleResponse          &ns1__GetYCVehicleResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetYCVehicle(
    struct soap *soap,
    // input parameters:
    ns1__GetYCVehicle*                  ns1__GetYCVehicle_,
    // output parameters:
    ns1__GetYCVehicleResponse          &ns1__GetYCVehicleResponse_
  );
@endcode

C++ proxy class (defined in soapIVehicleServiceServiceSoapBindingProxy.h):
@code
  class IVehicleServiceServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapIVehicleServiceServiceSoapBindingService.h):
@code
  class IVehicleServiceServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetYCVehicle SOAP
//gsoap ns1  service method-style:	GetYCVehicle document
//gsoap ns1  service method-encoding:	GetYCVehicle literal
//gsoap ns1  service method-action:	GetYCVehicle ""
//gsoap ns1  service method-output-action:	GetYCVehicle Response
int __ns1__GetYCVehicle(
    ns1__GetYCVehicle*                  ns1__GetYCVehicle_,	///< Input parameter
    ns1__GetYCVehicleResponse          &ns1__GetYCVehicleResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getres                                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getres" of service binding "IVehicleServiceServiceSoapBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getres(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__getres*                        ns1__getres_,
    // output parameters:
    ns1__getresResponse                &ns1__getresResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getres(
    struct soap *soap,
    // input parameters:
    ns1__getres*                        ns1__getres_,
    // output parameters:
    ns1__getresResponse                &ns1__getresResponse_
  );
@endcode

C++ proxy class (defined in soapIVehicleServiceServiceSoapBindingProxy.h):
@code
  class IVehicleServiceServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapIVehicleServiceServiceSoapBindingService.h):
@code
  class IVehicleServiceServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getres SOAP
//gsoap ns1  service method-style:	getres document
//gsoap ns1  service method-encoding:	getres literal
//gsoap ns1  service method-action:	getres ""
//gsoap ns1  service method-output-action:	getres Response
int __ns1__getres(
    ns1__getres*                        ns1__getres_,	///< Input parameter
    ns1__getresResponse                &ns1__getresResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__BeginCheck                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__BeginCheck" of service binding "IVehicleServiceServiceSoapBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__BeginCheck(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__BeginCheck*                    ns1__BeginCheck_,
    // output parameters:
    ns1__BeginCheckResponse            &ns1__BeginCheckResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__BeginCheck(
    struct soap *soap,
    // input parameters:
    ns1__BeginCheck*                    ns1__BeginCheck_,
    // output parameters:
    ns1__BeginCheckResponse            &ns1__BeginCheckResponse_
  );
@endcode

C++ proxy class (defined in soapIVehicleServiceServiceSoapBindingProxy.h):
@code
  class IVehicleServiceServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapIVehicleServiceServiceSoapBindingService.h):
@code
  class IVehicleServiceServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	BeginCheck SOAP
//gsoap ns1  service method-style:	BeginCheck document
//gsoap ns1  service method-encoding:	BeginCheck literal
//gsoap ns1  service method-action:	BeginCheck ""
//gsoap ns1  service method-output-action:	BeginCheck Response
int __ns1__BeginCheck(
    ns1__BeginCheck*                    ns1__BeginCheck_,	///< Input parameter
    ns1__BeginCheckResponse            &ns1__BeginCheckResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__UploadInspectionResult                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__UploadInspectionResult" of service binding "IVehicleServiceServiceSoapBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__UploadInspectionResult(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__UploadInspectionResult*        ns1__UploadInspectionResult_,
    // output parameters:
    ns1__UploadInspectionResultResponse&ns1__UploadInspectionResultResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__UploadInspectionResult(
    struct soap *soap,
    // input parameters:
    ns1__UploadInspectionResult*        ns1__UploadInspectionResult_,
    // output parameters:
    ns1__UploadInspectionResultResponse&ns1__UploadInspectionResultResponse_
  );
@endcode

C++ proxy class (defined in soapIVehicleServiceServiceSoapBindingProxy.h):
@code
  class IVehicleServiceServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapIVehicleServiceServiceSoapBindingService.h):
@code
  class IVehicleServiceServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	UploadInspectionResult SOAP
//gsoap ns1  service method-style:	UploadInspectionResult document
//gsoap ns1  service method-encoding:	UploadInspectionResult literal
//gsoap ns1  service method-action:	UploadInspectionResult ""
//gsoap ns1  service method-output-action:	UploadInspectionResult Response
int __ns1__UploadInspectionResult(
    ns1__UploadInspectionResult*        ns1__UploadInspectionResult_,	///< Input parameter
    ns1__UploadInspectionResultResponse&ns1__UploadInspectionResultResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetVehicle                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetVehicle" of service binding "IVehicleServiceServiceSoapBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetVehicle(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__GetVehicle*                    ns1__GetVehicle_,
    // output parameters:
    ns1__GetVehicleResponse            &ns1__GetVehicleResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetVehicle(
    struct soap *soap,
    // input parameters:
    ns1__GetVehicle*                    ns1__GetVehicle_,
    // output parameters:
    ns1__GetVehicleResponse            &ns1__GetVehicleResponse_
  );
@endcode

C++ proxy class (defined in soapIVehicleServiceServiceSoapBindingProxy.h):
@code
  class IVehicleServiceServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapIVehicleServiceServiceSoapBindingService.h):
@code
  class IVehicleServiceServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetVehicle SOAP
//gsoap ns1  service method-style:	GetVehicle document
//gsoap ns1  service method-encoding:	GetVehicle literal
//gsoap ns1  service method-action:	GetVehicle ""
//gsoap ns1  service method-output-action:	GetVehicle Response
int __ns1__GetVehicle(
    ns1__GetVehicle*                    ns1__GetVehicle_,	///< Input parameter
    ns1__GetVehicleResponse            &ns1__GetVehicleResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__vehiclelogin                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__vehiclelogin" of service binding "IVehicleServiceServiceSoapBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__vehiclelogin(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__vehiclelogin*                  ns1__vehiclelogin_,
    // output parameters:
    ns1__vehicleloginResponse          &ns1__vehicleloginResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__vehiclelogin(
    struct soap *soap,
    // input parameters:
    ns1__vehiclelogin*                  ns1__vehiclelogin_,
    // output parameters:
    ns1__vehicleloginResponse          &ns1__vehicleloginResponse_
  );
@endcode

C++ proxy class (defined in soapIVehicleServiceServiceSoapBindingProxy.h):
@code
  class IVehicleServiceServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapIVehicleServiceServiceSoapBindingService.h):
@code
  class IVehicleServiceServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	vehiclelogin SOAP
//gsoap ns1  service method-style:	vehiclelogin document
//gsoap ns1  service method-encoding:	vehiclelogin literal
//gsoap ns1  service method-action:	vehiclelogin ""
//gsoap ns1  service method-output-action:	vehiclelogin Response
int __ns1__vehiclelogin(
    ns1__vehiclelogin*                  ns1__vehiclelogin_,	///< Input parameter
    ns1__vehicleloginResponse          &ns1__vehicleloginResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetCheckList                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetCheckList" of service binding "IVehicleServiceServiceSoapBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetCheckList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__GetCheckList*                  ns1__GetCheckList_,
    // output parameters:
    ns1__GetCheckListResponse          &ns1__GetCheckListResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetCheckList(
    struct soap *soap,
    // input parameters:
    ns1__GetCheckList*                  ns1__GetCheckList_,
    // output parameters:
    ns1__GetCheckListResponse          &ns1__GetCheckListResponse_
  );
@endcode

C++ proxy class (defined in soapIVehicleServiceServiceSoapBindingProxy.h):
@code
  class IVehicleServiceServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapIVehicleServiceServiceSoapBindingService.h):
@code
  class IVehicleServiceServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetCheckList SOAP
//gsoap ns1  service method-style:	GetCheckList document
//gsoap ns1  service method-encoding:	GetCheckList literal
//gsoap ns1  service method-action:	GetCheckList ""
//gsoap ns1  service method-output-action:	GetCheckList Response
int __ns1__GetCheckList(
    ns1__GetCheckList*                  ns1__GetCheckList_,	///< Input parameter
    ns1__GetCheckListResponse          &ns1__GetCheckListResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__validateJC                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__validateJC" of service binding "IVehicleServiceServiceSoapBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__validateJC(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__validateJC*                    ns1__validateJC_,
    // output parameters:
    ns1__validateJCResponse            &ns1__validateJCResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__validateJC(
    struct soap *soap,
    // input parameters:
    ns1__validateJC*                    ns1__validateJC_,
    // output parameters:
    ns1__validateJCResponse            &ns1__validateJCResponse_
  );
@endcode

C++ proxy class (defined in soapIVehicleServiceServiceSoapBindingProxy.h):
@code
  class IVehicleServiceServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapIVehicleServiceServiceSoapBindingService.h):
@code
  class IVehicleServiceServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	validateJC SOAP
//gsoap ns1  service method-style:	validateJC document
//gsoap ns1  service method-encoding:	validateJC literal
//gsoap ns1  service method-action:	validateJC ""
//gsoap ns1  service method-output-action:	validateJC Response
int __ns1__validateJC(
    ns1__validateJC*                    ns1__validateJC_,	///< Input parameter
    ns1__validateJCResponse            &ns1__validateJCResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__LoginServer                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__LoginServer" of service binding "IVehicleServiceServiceSoapBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__LoginServer(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__LoginServer*                   ns1__LoginServer_,
    // output parameters:
    ns1__LoginServerResponse           &ns1__LoginServerResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__LoginServer(
    struct soap *soap,
    // input parameters:
    ns1__LoginServer*                   ns1__LoginServer_,
    // output parameters:
    ns1__LoginServerResponse           &ns1__LoginServerResponse_
  );
@endcode

C++ proxy class (defined in soapIVehicleServiceServiceSoapBindingProxy.h):
@code
  class IVehicleServiceServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapIVehicleServiceServiceSoapBindingService.h):
@code
  class IVehicleServiceServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	LoginServer SOAP
//gsoap ns1  service method-style:	LoginServer document
//gsoap ns1  service method-encoding:	LoginServer literal
//gsoap ns1  service method-action:	LoginServer ""
//gsoap ns1  service method-output-action:	LoginServer Response
int __ns1__LoginServer(
    ns1__LoginServer*                   ns1__LoginServer_,	///< Input parameter
    ns1__LoginServerResponse           &ns1__LoginServerResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetBaseTypeInfo                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetBaseTypeInfo" of service binding "IVehicleServiceServiceSoapBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetBaseTypeInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__GetBaseTypeInfo*               ns1__GetBaseTypeInfo_,
    // output parameters:
    ns1__GetBaseTypeInfoResponse       &ns1__GetBaseTypeInfoResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetBaseTypeInfo(
    struct soap *soap,
    // input parameters:
    ns1__GetBaseTypeInfo*               ns1__GetBaseTypeInfo_,
    // output parameters:
    ns1__GetBaseTypeInfoResponse       &ns1__GetBaseTypeInfoResponse_
  );
@endcode

C++ proxy class (defined in soapIVehicleServiceServiceSoapBindingProxy.h):
@code
  class IVehicleServiceServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapIVehicleServiceServiceSoapBindingService.h):
@code
  class IVehicleServiceServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetBaseTypeInfo SOAP
//gsoap ns1  service method-style:	GetBaseTypeInfo document
//gsoap ns1  service method-encoding:	GetBaseTypeInfo literal
//gsoap ns1  service method-action:	GetBaseTypeInfo ""
//gsoap ns1  service method-output-action:	GetBaseTypeInfo Response
int __ns1__GetBaseTypeInfo(
    ns1__GetBaseTypeInfo*               ns1__GetBaseTypeInfo_,	///< Input parameter
    ns1__GetBaseTypeInfoResponse       &ns1__GetBaseTypeInfoResponse_	///< Output parameter
);

/**

@page IVehicleServiceServiceSoapBinding Binding "IVehicleServiceServiceSoapBinding"

@section IVehicleServiceServiceSoapBinding_policy_enablers Policy Enablers of Binding "IVehicleServiceServiceSoapBinding"

Based on policies, this service imports

  - WS-Policy reminders and enablers:
    - WS-Addressing 1.0 (2005/08, accepts 2004/08):
	@code
	#import "wsa5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-Addressing (2004/08):
	@code
	#import "wsa.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-ReliableMessaging 1.0:
	@code
	#import "wsrm5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-ReliableMessaging 1.1:
	@code
	#import "wsrm.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.0 (accepts 1.1):
	@code
	#import "wsse.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.1 (accepts 1.0):
	@code
	#import "wsse11.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - HTTP Digest Authentication:
	@code
	#include "plugin/httpda.h"
	soap_register_plugin(soap, soap_http_da); // register the HTTP DA plugin in your code
	// See the user guide gsoap/doc/httpda/html/index.html
	@endcode
*/


/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read in XML and deserialized from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

Data can be serialized in XML and written to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section ns1 Top-level root elements of schema "http://synToCity.synchrodata.daniu.com/"

  - <BeginCheck> (use wsdl2h option -g to auto-generate)

  - <BeginCheckResponse> (use wsdl2h option -g to auto-generate)

  - <GetBaseTypeInfo> (use wsdl2h option -g to auto-generate)

  - <GetBaseTypeInfoResponse> (use wsdl2h option -g to auto-generate)

  - <GetCheckList> (use wsdl2h option -g to auto-generate)

  - <GetCheckListResponse> (use wsdl2h option -g to auto-generate)

  - <GetVehicle> (use wsdl2h option -g to auto-generate)

  - <GetVehicleResponse> (use wsdl2h option -g to auto-generate)

  - <GetYCVehicle> (use wsdl2h option -g to auto-generate)

  - <GetYCVehicleResponse> (use wsdl2h option -g to auto-generate)

  - <LoginServer> (use wsdl2h option -g to auto-generate)

  - <LoginServerResponse> (use wsdl2h option -g to auto-generate)

  - <UploadInspectionResult> (use wsdl2h option -g to auto-generate)

  - <UploadInspectionResultResponse> (use wsdl2h option -g to auto-generate)

  - <getres> (use wsdl2h option -g to auto-generate)

  - <getresResponse> (use wsdl2h option -g to auto-generate)

  - <validateJC> (use wsdl2h option -g to auto-generate)

  - <validateJCResponse> (use wsdl2h option -g to auto-generate)

  - <vehiclelogin> (use wsdl2h option -g to auto-generate)

  - <vehicleloginResponse> (use wsdl2h option -g to auto-generate)

*/

/* End of SynTocity.h */
