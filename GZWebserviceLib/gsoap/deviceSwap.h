/* deviceSwap.h
   Generated by wsdl2h 2.8.21 from deviceSwap.wsdl and typemap.dat
   2020-08-24 04:16:35 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2000-2014 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on deviceSwap.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 -j to generate improved proxy and server classes.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following licenses:
GPL or Genivia's license for commercial use.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://iface.server.webservice.zkyt.com/                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to remove STL dependency)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://iface.server.webservice.zkyt.com/"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://iface.server.webservice.zkyt.com/"
//gsoap ns1   schema namespace:	http://iface.server.webservice.zkyt.com/
//gsoap ns1   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


//  Forward declaration of class ns1__argChang.
class ns1__argChang;

//  Forward declaration of class ns1__argChangResponse.
class ns1__argChangResponse;

//  Forward declaration of class ns1__lightproofSmokeLog.
class ns1__lightproofSmokeLog;

//  Forward declaration of class ns1__lightproofSmokeLogResponse.
class ns1__lightproofSmokeLogResponse;

//  Forward declaration of class ns1__getCarInfo.
class ns1__getCarInfo;

//  Forward declaration of class ns1__getCarInfoResponse.
class ns1__getCarInfoResponse;

//  Forward declaration of class ns1__carInfo.
class ns1__carInfo;

//  Forward declaration of class ns1__sendMessage.
class ns1__sendMessage;

//  Forward declaration of class ns1__sendMessageResponse.
class ns1__sendMessageResponse;

//  Forward declaration of class ns1__bgAirHC.
class ns1__bgAirHC;

//  Forward declaration of class ns1__bgAirHCResponse.
class ns1__bgAirHCResponse;

//  Forward declaration of class ns1__doubleIdleData_USCOREFC.
class ns1__doubleIdleData_USCOREFC;

//  Forward declaration of class ns1__doubleIdleDataResponse.
class ns1__doubleIdleDataResponse;

//  Forward declaration of class ns1__cgjLASelfcheck.
class ns1__cgjLASelfcheck;

//  Forward declaration of class ns1__cgjLASelfcheckResponse.
class ns1__cgjLASelfcheckResponse;

//  Forward declaration of class ns1__cgjSelfcheck.
class ns1__cgjSelfcheck;

//  Forward declaration of class ns1__cgjSelfcheckResponse.
class ns1__cgjSelfcheckResponse;

//  Forward declaration of class ns1__obdResult.
class ns1__obdResult;

//  Forward declaration of class ns1__obdResultResponse.
class ns1__obdResultResponse;

//  Forward declaration of class ns1__doubleIdleLog_USCOREFC.
class ns1__doubleIdleLog_USCOREFC;

//  Forward declaration of class ns1__doubleIdleLogResponse.
class ns1__doubleIdleLogResponse;

//  Forward declaration of class ns1__vmasLog.
class ns1__vmasLog;

//  Forward declaration of class ns1__vmasLogResponse.
class ns1__vmasLogResponse;

//  Forward declaration of class ns1__ydjSelfcheck.
class ns1__ydjSelfcheck;

//  Forward declaration of class ns1__ydjSelfcheckResponse.
class ns1__ydjSelfcheckResponse;

//  Forward declaration of class ns1__dyhwSelfcheck.
class ns1__dyhwSelfcheck;

//  Forward declaration of class ns1__dyhwSelfcheckResponse.
class ns1__dyhwSelfcheckResponse;

//  Forward declaration of class ns1__loadDownLog.
class ns1__loadDownLog;

//  Forward declaration of class ns1__loadDownLogResponse.
class ns1__loadDownLogResponse;

//  Forward declaration of class ns1__dyhwAdjust.
class ns1__dyhwAdjust;

//  Forward declaration of class ns1__dyhwAdjustResponse.
class ns1__dyhwAdjustResponse;

//  Forward declaration of class ns1__obdResultLog.
class ns1__obdResultLog;

//  Forward declaration of class ns1__obdResultLogResponse.
class ns1__obdResultLogResponse;

//  Forward declaration of class ns1__getCarInfo_USCOREFC.
class ns1__getCarInfo_USCOREFC;

//  Forward declaration of class ns1__cycdyhwAdjust.
class ns1__cycdyhwAdjust;

//  Forward declaration of class ns1__cycdyhwAdjustResponse.
class ns1__cycdyhwAdjustResponse;

//  Forward declaration of class ns1__hjcsgyqSelfcheck.
class ns1__hjcsgyqSelfcheck;

//  Forward declaration of class ns1__hjcsgyqSelfcheckResponse.
class ns1__hjcsgyqSelfcheckResponse;

//  Forward declaration of class ns1__pqfxySelfcheck.
class ns1__pqfxySelfcheck;

//  Forward declaration of class ns1__pqfxySelfcheckResponse.
class ns1__pqfxySelfcheckResponse;

//  Forward declaration of class ns1__lightproofSmokeDataLog_USCOREFC.
class ns1__lightproofSmokeDataLog_USCOREFC;

//  Forward declaration of class ns1__lightproofSmokeDataLog_USCOREFCResponse.
class ns1__lightproofSmokeDataLog_USCOREFCResponse;

//  Forward declaration of class ns1__loadDownData.
class ns1__loadDownData;

//  Forward declaration of class ns1__loadDownDataResponse.
class ns1__loadDownDataResponse;

//  Forward declaration of class ns1__vmasData.
class ns1__vmasData;

//  Forward declaration of class ns1__vmasDataResponse.
class ns1__vmasDataResponse;

//  Forward declaration of class ns1__motoDbIdleData.
class ns1__motoDbIdleData;

//  Forward declaration of class ns1__motoDbIdleDataResponse.
class ns1__motoDbIdleDataResponse;

//  Forward declaration of class ns1__getSatate.
class ns1__getSatate;

//  Forward declaration of class ns1__getSatateResponse.
class ns1__getSatateResponse;

//  Forward declaration of class ns1__stateInfo.
class ns1__stateInfo;

//  Forward declaration of class ns1__doubleIdleData.
class ns1__doubleIdleData;

//  Forward declaration of class ns1__doubleIdleLog.
class ns1__doubleIdleLog;

//  Forward declaration of class ns1__cgjPLHPSelfcheck.
class ns1__cgjPLHPSelfcheck;

//  Forward declaration of class ns1__cgjPLHPSelfcheckResponse.
class ns1__cgjPLHPSelfcheckResponse;

//  Forward declaration of class ns1__wqfxyAdjust.
class ns1__wqfxyAdjust;

//  Forward declaration of class ns1__wqfxyAdjustResponse.
class ns1__wqfxyAdjustResponse;

//  Forward declaration of class ns1__lightproofSmokeData_USCOREFC.
class ns1__lightproofSmokeData_USCOREFC;

//  Forward declaration of class ns1__lightproofSmokeDataResponse.
class ns1__lightproofSmokeDataResponse;

//  Forward declaration of class ns1__lightproofSmokeData.
class ns1__lightproofSmokeData;

//  Forward declaration of class ns1__qyfxSelfcheck.
class ns1__qyfxSelfcheck;

//  Forward declaration of class ns1__qyfxSelfcheckResponse.
class ns1__qyfxSelfcheckResponse;

//  Forward declaration of class ns1__sdsqtfxySelfcheck.
class ns1__sdsqtfxySelfcheck;

//  Forward declaration of class ns1__sdsqtfxySelfcheckResponse.
class ns1__sdsqtfxySelfcheckResponse;

//  Forward declaration of class ns1__sendMessage_USCOREFC.
class ns1__sendMessage_USCOREFC;

//  Forward declaration of class ns1__wqfxySelfcheck.
class ns1__wqfxySelfcheck;

//  Forward declaration of class ns1__wqfxySelfcheckResponse.
class ns1__wqfxySelfcheckResponse;

//  Forward declaration of class ns1__cgjALPSelfcheck.
class ns1__cgjALPSelfcheck;

//  Forward declaration of class ns1__cgjALPSelfcheckResponse.
class ns1__cgjALPSelfcheckResponse;

//  Forward declaration of class ns1__lljSelfcheck.
class ns1__lljSelfcheck;

//  Forward declaration of class ns1__lljSelfcheckResponse.
class ns1__lljSelfcheckResponse;

//  Forward declaration of class ns1__cgjLSPSelfcheck.
class ns1__cgjLSPSelfcheck;

//  Forward declaration of class ns1__cgjLSPSelfcheckResponse.
class ns1__cgjLSPSelfcheckResponse;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://iface.server.webservice.zkyt.com/                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://iface.server.webservice.zkyt.com/                                 *
 *                                                                            *
\******************************************************************************/

/// @brief "http://iface.server.webservice.zkyt.com/":argChang is a complexType.
///
/// class ns1__argChang operations:
/// - soap_new_ns1__argChang(soap*) allocate
/// - soap_new_ns1__argChang(soap*, int num) allocate array
/// - soap_new_req_ns1__argChang(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__argChang(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__argChang(soap*, ns1__argChang*) deserialize from a stream
/// - int soap_write_ns1__argChang(soap, ns1__argChang*) serialize to a stream
class ns1__argChang
{ public:
/// Element "registCode" of XSD type xs:string.
    std::wstring*                        registCode                     0;	///< Optional element.
/// Element "argName" of XSD type xs:string.
    std::wstring*                        argName                        0;	///< Optional element.
/// Element "oldValue" of XSD type xs:string.
    std::wstring*                        oldValue                       0;	///< Optional element.
/// Element "newValue" of XSD type xs:string.
    std::wstring*                        newValue                       0;	///< Optional element.
/// Element "changeTime" of XSD type xs:string.
    std::wstring*                        changeTime                     0;	///< Optional element.
/// Element "remark" of XSD type xs:string.
    std::wstring*                        remark                         0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":argChangResponse is a complexType.
///
/// class ns1__argChangResponse operations:
/// - soap_new_ns1__argChangResponse(soap*) allocate
/// - soap_new_ns1__argChangResponse(soap*, int num) allocate array
/// - soap_new_req_ns1__argChangResponse(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__argChangResponse(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__argChangResponse(soap*, ns1__argChangResponse*) deserialize from a stream
/// - int soap_write_ns1__argChangResponse(soap, ns1__argChangResponse*) serialize to a stream
class ns1__argChangResponse
{ public:
/// Element "return" of XSD type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":lightproofSmokeLog is a complexType.
///
/// class ns1__lightproofSmokeLog operations:
/// - soap_new_ns1__lightproofSmokeLog(soap*) allocate
/// - soap_new_ns1__lightproofSmokeLog(soap*, int num) allocate array
/// - soap_new_req_ns1__lightproofSmokeLog(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__lightproofSmokeLog(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__lightproofSmokeLog(soap*, ns1__lightproofSmokeLog*) deserialize from a stream
/// - int soap_write_ns1__lightproofSmokeLog(soap, ns1__lightproofSmokeLog*) serialize to a stream
class ns1__lightproofSmokeLog
{ public:
/// Element "businessId" of XSD type xs:string.
    std::wstring*                        businessId                     0;	///< Optional element.
/// Element "registCode" of XSD type xs:string.
    std::wstring*                        registCode                     0;	///< Optional element.
/// Element "logTime" of XSD type xs:string.
    std::wstring*                        logTime                        0;	///< Optional element.
/// Element "type" of XSD type xs:string.
    std::wstring*                        type                           0;	///< Optional element.
/// Element "inspectNum" of XSD type xs:int.
    int                                  inspectNum                     1;	///< Required element.
/// Element "smokeValue" of XSD type xs:double.
    double                               smokeValue                     1;	///< Required element.
/// Element "zs" of XSD type xs:int.
    int                                  zs                             1;	///< Required element.
/// Element "ydjjcswd" of XSD type xs:double.
    double                               ydjjcswd                       1;	///< Required element.
/// Element "ydjjcsqy" of XSD type xs:double.
    double                               ydjjcsqy                       1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":lightproofSmokeLogResponse is a complexType.
///
/// class ns1__lightproofSmokeLogResponse operations:
/// - soap_new_ns1__lightproofSmokeLogResponse(soap*) allocate
/// - soap_new_ns1__lightproofSmokeLogResponse(soap*, int num) allocate array
/// - soap_new_req_ns1__lightproofSmokeLogResponse(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__lightproofSmokeLogResponse(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__lightproofSmokeLogResponse(soap*, ns1__lightproofSmokeLogResponse*) deserialize from a stream
/// - int soap_write_ns1__lightproofSmokeLogResponse(soap, ns1__lightproofSmokeLogResponse*) serialize to a stream
class ns1__lightproofSmokeLogResponse
{ public:
/// Element "return" of XSD type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":getCarInfo is a complexType.
///
/// class ns1__getCarInfo operations:
/// - soap_new_ns1__getCarInfo(soap*) allocate
/// - soap_new_ns1__getCarInfo(soap*, int num) allocate array
/// - soap_new_req_ns1__getCarInfo(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__getCarInfo(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__getCarInfo(soap*, ns1__getCarInfo*) deserialize from a stream
/// - int soap_write_ns1__getCarInfo(soap, ns1__getCarInfo*) serialize to a stream
class ns1__getCarInfo
{ public:
/// Element "businessId" of XSD type xs:string.
    std::wstring*                        businessId                     0;	///< Optional element.
/// Element "registCode" of XSD type xs:string.
    std::wstring*                        registCode                     0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":getCarInfoResponse is a complexType.
///
/// class ns1__getCarInfoResponse operations:
/// - soap_new_ns1__getCarInfoResponse(soap*) allocate
/// - soap_new_ns1__getCarInfoResponse(soap*, int num) allocate array
/// - soap_new_req_ns1__getCarInfoResponse(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__getCarInfoResponse(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__getCarInfoResponse(soap*, ns1__getCarInfoResponse*) deserialize from a stream
/// - int soap_write_ns1__getCarInfoResponse(soap, ns1__getCarInfoResponse*) serialize to a stream
class ns1__getCarInfoResponse
{ public:
/// Element "return" of XSD type "http://iface.server.webservice.zkyt.com/":carInfo.
    ns1__carInfo*                        return_                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":carInfo is a complexType.
///
/// class ns1__carInfo operations:
/// - soap_new_ns1__carInfo(soap*) allocate
/// - soap_new_ns1__carInfo(soap*, int num) allocate array
/// - soap_new_req_ns1__carInfo(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__carInfo(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__carInfo(soap*, ns1__carInfo*) deserialize from a stream
/// - int soap_write_ns1__carInfo(soap, ns1__carInfo*) serialize to a stream
class ns1__carInfo
{ public:
/// Element "carCardNumber" of XSD type xs:string.
    std::wstring*                        carCardNumber                  0;	///< Optional element.
/// Element "airInflow" of XSD type xs:string.
    std::wstring*                        airInflow                      0;	///< Optional element.
/// Element "fuelType" of XSD type xs:string.
    std::wstring*                        fuelType                       0;	///< Optional element.
/// Element "isSYJHQ" of XSD type xs:string.
    std::wstring*                        isSYJHQ                        0;	///< Optional element.
/// Element "maxWeight" of XSD type xs:double.
    double                               maxWeight                      1;	///< Required element.
/// Element "motorPower" of XSD type xs:double.
    double                               motorPower                     1;	///< Required element.
/// Element "motorRate" of XSD type xs:double.
    double                               motorRate                      1;	///< Required element.
/// Element "oilSupply" of XSD type xs:string.
    std::wstring*                        oilSupply                      0;	///< Optional element.
/// Element "speedChanger" of XSD type xs:string.
    std::wstring*                        speedChanger                   0;	///< Optional element.
/// Element "standardWeight" of XSD type xs:double.
    double                               standardWeight                 1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":sendMessage is a complexType.
///
/// class ns1__sendMessage operations:
/// - soap_new_ns1__sendMessage(soap*) allocate
/// - soap_new_ns1__sendMessage(soap*, int num) allocate array
/// - soap_new_req_ns1__sendMessage(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__sendMessage(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__sendMessage(soap*, ns1__sendMessage*) deserialize from a stream
/// - int soap_write_ns1__sendMessage(soap, ns1__sendMessage*) serialize to a stream
class ns1__sendMessage
{ public:
/// Element "businessId" of XSD type xs:string.
    std::wstring*                        businessId                     0;	///< Optional element.
/// Element "registCode" of XSD type xs:string.
    std::wstring*                        registCode                     0;	///< Optional element.
/// Element "code" of XSD type xs:string.
    std::wstring*                        code                           0;	///< Optional element.
/// Element "message" of XSD type xs:string.
    std::wstring*                        message                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":sendMessageResponse is a complexType.
///
/// class ns1__sendMessageResponse operations:
/// - soap_new_ns1__sendMessageResponse(soap*) allocate
/// - soap_new_ns1__sendMessageResponse(soap*, int num) allocate array
/// - soap_new_req_ns1__sendMessageResponse(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__sendMessageResponse(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__sendMessageResponse(soap*, ns1__sendMessageResponse*) deserialize from a stream
/// - int soap_write_ns1__sendMessageResponse(soap, ns1__sendMessageResponse*) serialize to a stream
class ns1__sendMessageResponse
{ public:
/// Element "return" of XSD type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":bgAirHC is a complexType.
///
/// class ns1__bgAirHC operations:
/// - soap_new_ns1__bgAirHC(soap*) allocate
/// - soap_new_ns1__bgAirHC(soap*, int num) allocate array
/// - soap_new_req_ns1__bgAirHC(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__bgAirHC(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__bgAirHC(soap*, ns1__bgAirHC*) deserialize from a stream
/// - int soap_write_ns1__bgAirHC(soap, ns1__bgAirHC*) serialize to a stream
class ns1__bgAirHC
{ public:
/// Element "businessId" of XSD type xs:string.
    std::wstring*                        businessId                     0;	///< Optional element.
/// Element "registCode" of XSD type xs:string.
    std::wstring*                        registCode                     0;	///< Optional element.
/// Element "bgCO" of XSD type xs:double.
    double                               bgCO                           1;	///< Required element.
/// Element "bgNO" of XSD type xs:double.
    double                               bgNO                           1;	///< Required element.
/// Element "bgHC" of XSD type xs:double.
    double                               bgHC                           1;	///< Required element.
/// Element "canliuHC" of XSD type xs:double.
    double                               canliuHC                       1;	///< Required element.
/// Element "lFlowResult" of XSD type xs:string.
    std::wstring*                        lFlowResult                    0;	///< Optional element.
/// Element "o2Avg" of XSD type xs:double.
    double                               o2Avg                          1;	///< Required element.
/// Element "checkResult" of XSD type xs:string.
    std::wstring*                        checkResult                    0;	///< Optional element.
/// Element "checkTimeStart" of XSD type xs:string.
    std::wstring*                        checkTimeStart                 0;	///< Optional element.
/// Element "checkTimeEnd" of XSD type xs:string.
    std::wstring*                        checkTimeEnd                   0;	///< Optional element.
/// Element "remark" of XSD type xs:string.
    std::wstring*                        remark                         0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":bgAirHCResponse is a complexType.
///
/// class ns1__bgAirHCResponse operations:
/// - soap_new_ns1__bgAirHCResponse(soap*) allocate
/// - soap_new_ns1__bgAirHCResponse(soap*, int num) allocate array
/// - soap_new_req_ns1__bgAirHCResponse(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__bgAirHCResponse(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__bgAirHCResponse(soap*, ns1__bgAirHCResponse*) deserialize from a stream
/// - int soap_write_ns1__bgAirHCResponse(soap, ns1__bgAirHCResponse*) serialize to a stream
class ns1__bgAirHCResponse
{ public:
/// Element "return" of XSD type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":doubleIdleData_FC is a complexType.
///
/// class ns1__doubleIdleData_USCOREFC operations:
/// - soap_new_ns1__doubleIdleData_USCOREFC(soap*) allocate
/// - soap_new_ns1__doubleIdleData_USCOREFC(soap*, int num) allocate array
/// - soap_new_req_ns1__doubleIdleData_USCOREFC(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__doubleIdleData_USCOREFC(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__doubleIdleData_USCOREFC(soap*, ns1__doubleIdleData_USCOREFC*) deserialize from a stream
/// - int soap_write_ns1__doubleIdleData_USCOREFC(soap, ns1__doubleIdleData_USCOREFC*) serialize to a stream
class ns1__doubleIdleData_USCOREFC
{ public:
/// Element "businessId" of XSD type xs:string.
    std::wstring*                        businessId                     0;	///< Optional element.
/// Element "registCode" of XSD type xs:string.
    std::wstring*                        registCode                     0;	///< Optional element.
/// Element "lrotateSpeed" of XSD type xs:double.
    double                               lrotateSpeed                   1;	///< Required element.
/// Element "hrotateSpeed" of XSD type xs:double.
    double                               hrotateSpeed                   1;	///< Required element.
/// Element "coLowValue" of XSD type xs:double.
    double                               coLowValue                     1;	///< Required element.
/// Element "hcLowValue" of XSD type xs:double.
    double                               hcLowValue                     1;	///< Required element.
/// Element "coHighValue" of XSD type xs:double.
    double                               coHighValue                    1;	///< Required element.
/// Element "hcHighValue" of XSD type xs:double.
    double                               hcHighValue                    1;	///< Required element.
/// Element "lambdaValue" of XSD type xs:double.
    double                               lambdaValue                    1;	///< Required element.
/// Element "tempreture" of XSD type xs:double.
    double                               tempreture                     1;	///< Required element.
/// Element "humidity" of XSD type xs:double.
    double                               humidity                       1;	///< Required element.
/// Element "airPressure" of XSD type xs:double.
    double                               airPressure                    1;	///< Required element.
/// Element "timeStart" of XSD type xs:string.
    std::wstring*                        timeStart                      0;	///< Optional element.
/// Element "timeEnd" of XSD type xs:string.
    std::wstring*                        timeEnd                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":doubleIdleDataResponse is a complexType.
///
/// class ns1__doubleIdleDataResponse operations:
/// - soap_new_ns1__doubleIdleDataResponse(soap*) allocate
/// - soap_new_ns1__doubleIdleDataResponse(soap*, int num) allocate array
/// - soap_new_req_ns1__doubleIdleDataResponse(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__doubleIdleDataResponse(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__doubleIdleDataResponse(soap*, ns1__doubleIdleDataResponse*) deserialize from a stream
/// - int soap_write_ns1__doubleIdleDataResponse(soap, ns1__doubleIdleDataResponse*) serialize to a stream
class ns1__doubleIdleDataResponse
{ public:
/// Element "return" of XSD type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":cgjLASelfcheck is a complexType.
///
/// class ns1__cgjLASelfcheck operations:
/// - soap_new_ns1__cgjLASelfcheck(soap*) allocate
/// - soap_new_ns1__cgjLASelfcheck(soap*, int num) allocate array
/// - soap_new_req_ns1__cgjLASelfcheck(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__cgjLASelfcheck(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__cgjLASelfcheck(soap*, ns1__cgjLASelfcheck*) deserialize from a stream
/// - int soap_write_ns1__cgjLASelfcheck(soap, ns1__cgjLASelfcheck*) serialize to a stream
class ns1__cgjLASelfcheck
{ public:
/// Element "registCode" of XSD type xs:string.
    std::wstring*                        registCode                     0;	///< Optional element.
/// Element "AvitualTime" of XSD type xs:double.
    double                               AvitualTime                    1;	///< Required element.
/// Element "ArealTime" of XSD type xs:double.
    double                               ArealTime                      1;	///< Required element.
/// Element "BvitualTime" of XSD type xs:double.
    double                               BvitualTime                    1;	///< Required element.
/// Element "BrealTime" of XSD type xs:double.
    double                               BrealTime                      1;	///< Required element.
/// Element "CvitualTime" of XSD type xs:double.
    double                               CvitualTime                    1;	///< Required element.
/// Element "CrealTime" of XSD type xs:double.
    double                               CrealTime                      1;	///< Required element.
/// Element "DvitualTime" of XSD type xs:double.
    double                               DvitualTime                    1;	///< Required element.
/// Element "DrealTime" of XSD type xs:double.
    double                               DrealTime                      1;	///< Required element.
/// Element "checkResult" of XSD type xs:string.
    std::wstring*                        checkResult                    0;	///< Optional element.
/// Element "checkTimeStart" of XSD type xs:string.
    std::wstring*                        checkTimeStart                 0;	///< Optional element.
/// Element "checkTimeEnd" of XSD type xs:string.
    std::wstring*                        checkTimeEnd                   0;	///< Optional element.
/// Element "remark" of XSD type xs:string.
    std::wstring*                        remark                         0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":cgjLASelfcheckResponse is a complexType.
///
/// class ns1__cgjLASelfcheckResponse operations:
/// - soap_new_ns1__cgjLASelfcheckResponse(soap*) allocate
/// - soap_new_ns1__cgjLASelfcheckResponse(soap*, int num) allocate array
/// - soap_new_req_ns1__cgjLASelfcheckResponse(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__cgjLASelfcheckResponse(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__cgjLASelfcheckResponse(soap*, ns1__cgjLASelfcheckResponse*) deserialize from a stream
/// - int soap_write_ns1__cgjLASelfcheckResponse(soap, ns1__cgjLASelfcheckResponse*) serialize to a stream
class ns1__cgjLASelfcheckResponse
{ public:
/// Element "return" of XSD type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":cgjSelfcheck is a complexType.
///
/// class ns1__cgjSelfcheck operations:
/// - soap_new_ns1__cgjSelfcheck(soap*) allocate
/// - soap_new_ns1__cgjSelfcheck(soap*, int num) allocate array
/// - soap_new_req_ns1__cgjSelfcheck(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__cgjSelfcheck(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__cgjSelfcheck(soap*, ns1__cgjSelfcheck*) deserialize from a stream
/// - int soap_write_ns1__cgjSelfcheck(soap, ns1__cgjSelfcheck*) serialize to a stream
class ns1__cgjSelfcheck
{ public:
/// Element "registCode" of XSD type xs:string.
    std::wstring*                        registCode                     0;	///< Optional element.
/// Element "HVitualTime" of XSD type xs:double.
    double                               HVitualTime                    1;	///< Required element.
/// Element "HrealTime" of XSD type xs:double.
    double                               HrealTime                      1;	///< Required element.
/// Element "LvitualTime" of XSD type xs:double.
    double                               LvitualTime                    1;	///< Required element.
/// Element "LrealTime" of XSD type xs:double.
    double                               LrealTime                      1;	///< Required element.
/// Element "Hpower" of XSD type xs:double.
    double                               Hpower                         1;	///< Required element.
/// Element "Lpower" of XSD type xs:double.
    double                               Lpower                         1;	///< Required element.
/// Element "checkResult" of XSD type xs:string.
    std::wstring*                        checkResult                    0;	///< Optional element.
/// Element "checkTimeStart" of XSD type xs:string.
    std::wstring*                        checkTimeStart                 0;	///< Optional element.
/// Element "checkTimeEnd" of XSD type xs:string.
    std::wstring*                        checkTimeEnd                   0;	///< Optional element.
/// Element "remark" of XSD type xs:string.
    std::wstring*                        remark                         0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":cgjSelfcheckResponse is a complexType.
///
/// class ns1__cgjSelfcheckResponse operations:
/// - soap_new_ns1__cgjSelfcheckResponse(soap*) allocate
/// - soap_new_ns1__cgjSelfcheckResponse(soap*, int num) allocate array
/// - soap_new_req_ns1__cgjSelfcheckResponse(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__cgjSelfcheckResponse(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__cgjSelfcheckResponse(soap*, ns1__cgjSelfcheckResponse*) deserialize from a stream
/// - int soap_write_ns1__cgjSelfcheckResponse(soap, ns1__cgjSelfcheckResponse*) serialize to a stream
class ns1__cgjSelfcheckResponse
{ public:
/// Element "return" of XSD type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":obdResult is a complexType.
///
/// class ns1__obdResult operations:
/// - soap_new_ns1__obdResult(soap*) allocate
/// - soap_new_ns1__obdResult(soap*, int num) allocate array
/// - soap_new_req_ns1__obdResult(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__obdResult(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__obdResult(soap*, ns1__obdResult*) deserialize from a stream
/// - int soap_write_ns1__obdResult(soap, ns1__obdResult*) serialize to a stream
class ns1__obdResult
{ public:
/// Element "businessId" of XSD type xs:string.
    std::wstring*                        businessId                     0;	///< Optional element.
/// Element "registCode" of XSD type xs:string.
    std::wstring*                        registCode                     0;	///< Optional element.
/// Element "result" of XSD type xs:string.
    std::wstring*                        result                         0;	///< Optional element.
/// Element "checktime" of XSD type xs:string.
    std::wstring*                        checktime                      0;	///< Optional element.
/// Element "obdgzzsq" of XSD type xs:string.
    std::wstring*                        obdgzzsq                       0;	///< Optional element.
/// Element "objgztx" of XSD type xs:string.
    std::wstring*                        objgztx                        0;	///< Optional element.
/// Element "objgztxyy" of XSD type xs:string.
    std::wstring*                        objgztxyy                      0;	///< Optional element.
/// Element "objgzzsdsfbj" of XSD type xs:string.
    std::wstring*                        objgzzsdsfbj                   0;	///< Optional element.
/// Element "gzdm" of XSD type xs:string.
    std::wstring*                        gzdm                           0;	///< Optional element.
/// Element "gzxx" of XSD type xs:string.
    std::wstring*                        gzxx                           0;	///< Optional element.
/// Element "jxztsfwc" of XSD type xs:string.
    std::wstring*                        jxztsfwc                       0;	///< Optional element.
/// Element "jxztwwcyy" of XSD type xs:string.
    std::wstring*                        jxztwwcyy                      0;	///< Optional element.
/// Element "qtxsgl" of XSD type xs:string.
    std::wstring*                        qtxsgl                         0;	///< Optional element.
/// Element "calidfdjkzdy" of XSD type xs:string.
    std::wstring*                        calidfdjkzdy                   0;	///< Optional element.
/// Element "calidhclkddy" of XSD type xs:string.
    std::wstring*                        calidhclkddy                   0;	///< Optional element.
/// Element "calidqtkzdy" of XSD type xs:string.
    std::wstring*                        calidqtkzdy                    0;	///< Optional element.
/// Element "cvnfdjkzdy" of XSD type xs:string.
    std::wstring*                        cvnfdjkzdy                     0;	///< Optional element.
/// Element "cvnhclkddy" of XSD type xs:string.
    std::wstring*                        cvnhclkddy                     0;	///< Optional element.
/// Element "cvnqtkzdy" of XSD type xs:string.
    std::wstring*                        cvnqtkzdy                      0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":obdResultResponse is a complexType.
///
/// class ns1__obdResultResponse operations:
/// - soap_new_ns1__obdResultResponse(soap*) allocate
/// - soap_new_ns1__obdResultResponse(soap*, int num) allocate array
/// - soap_new_req_ns1__obdResultResponse(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__obdResultResponse(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__obdResultResponse(soap*, ns1__obdResultResponse*) deserialize from a stream
/// - int soap_write_ns1__obdResultResponse(soap, ns1__obdResultResponse*) serialize to a stream
class ns1__obdResultResponse
{ public:
/// Element "return" of XSD type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":doubleIdleLog_FC is a complexType.
///
/// class ns1__doubleIdleLog_USCOREFC operations:
/// - soap_new_ns1__doubleIdleLog_USCOREFC(soap*) allocate
/// - soap_new_ns1__doubleIdleLog_USCOREFC(soap*, int num) allocate array
/// - soap_new_req_ns1__doubleIdleLog_USCOREFC(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__doubleIdleLog_USCOREFC(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__doubleIdleLog_USCOREFC(soap*, ns1__doubleIdleLog_USCOREFC*) deserialize from a stream
/// - int soap_write_ns1__doubleIdleLog_USCOREFC(soap, ns1__doubleIdleLog_USCOREFC*) serialize to a stream
class ns1__doubleIdleLog_USCOREFC
{ public:
/// Element "businessId" of XSD type xs:string.
    std::wstring*                        businessId                     0;	///< Optional element.
/// Element "registCode" of XSD type xs:string.
    std::wstring*                        registCode                     0;	///< Optional element.
/// Element "inspectNum" of XSD type xs:int.
    int                                  inspectNum                     1;	///< Required element.
/// Element "flowHC" of XSD type xs:double.
    double                               flowHC                         1;	///< Required element.
/// Element "flowCO" of XSD type xs:double.
    double                               flowCO                         1;	///< Required element.
/// Element "flowCO2" of XSD type xs:double.
    double                               flowCO2                        1;	///< Required element.
/// Element "analyserO2" of XSD type xs:double.
    double                               analyserO2                     1;	///< Required element.
/// Element "oilTemperature" of XSD type xs:double.
    double                               oilTemperature                 1;	///< Required element.
/// Element "rotateSpeed" of XSD type xs:string.
    std::wstring*                        rotateSpeed                    0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":doubleIdleLogResponse is a complexType.
///
/// class ns1__doubleIdleLogResponse operations:
/// - soap_new_ns1__doubleIdleLogResponse(soap*) allocate
/// - soap_new_ns1__doubleIdleLogResponse(soap*, int num) allocate array
/// - soap_new_req_ns1__doubleIdleLogResponse(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__doubleIdleLogResponse(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__doubleIdleLogResponse(soap*, ns1__doubleIdleLogResponse*) deserialize from a stream
/// - int soap_write_ns1__doubleIdleLogResponse(soap, ns1__doubleIdleLogResponse*) serialize to a stream
class ns1__doubleIdleLogResponse
{ public:
/// Element "return" of XSD type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":vmasLog is a complexType.
///
/// class ns1__vmasLog operations:
/// - soap_new_ns1__vmasLog(soap*) allocate
/// - soap_new_ns1__vmasLog(soap*, int num) allocate array
/// - soap_new_req_ns1__vmasLog(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__vmasLog(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__vmasLog(soap*, ns1__vmasLog*) deserialize from a stream
/// - int soap_write_ns1__vmasLog(soap, ns1__vmasLog*) serialize to a stream
class ns1__vmasLog
{ public:
/// Element "businessId" of XSD type xs:string.
    std::wstring*                        businessId                     0;	///< Optional element.
/// Element "registCode" of XSD type xs:string.
    std::wstring*                        registCode                     0;	///< Optional element.
/// Element "inspectNum" of XSD type xs:int.
    int                                  inspectNum                     1;	///< Required element.
/// Element "flowHC" of XSD type xs:double.
    double                               flowHC                         1;	///< Required element.
/// Element "flowCO" of XSD type xs:double.
    double                               flowCO                         1;	///< Required element.
/// Element "flowCO2" of XSD type xs:double.
    double                               flowCO2                        1;	///< Required element.
/// Element "flowNO" of XSD type xs:double.
    double                               flowNO                         1;	///< Required element.
/// Element "analyserO2" of XSD type xs:double.
    double                               analyserO2                     1;	///< Required element.
/// Element "flowmeterO2" of XSD type xs:double.
    double                               flowmeterO2                    1;	///< Required element.
/// Element "envO2" of XSD type xs:double.
    double                               envO2                          1;	///< Required element.
/// Element "actFlow" of XSD type xs:double.
    double                               actFlow                        1;	///< Required element.
/// Element "stdFlow" of XSD type xs:double.
    double                               stdFlow                        1;	///< Required element.
/// Element "tailFlow" of XSD type xs:double.
    double                               tailFlow                       1;	///< Required element.
/// Element "weightHC" of XSD type xs:double.
    double                               weightHC                       1;	///< Required element.
/// Element "weightCO" of XSD type xs:double.
    double                               weightCO                       1;	///< Required element.
/// Element "weightNO" of XSD type xs:double.
    double                               weightNO                       1;	///< Required element.
/// Element "lineSpeed" of XSD type xs:double.
    double                               lineSpeed                      1;	///< Required element.
/// Element "totalPower" of XSD type xs:double.
    double                               totalPower                     1;	///< Required element.
/// Element "parasPower" of XSD type xs:double.
    double                               parasPower                     1;	///< Required element.
/// Element "indicPower" of XSD type xs:double.
    double                               indicPower                     1;	///< Required element.
/// Element "flowAirPressure" of XSD type xs:double.
    double                               flowAirPressure                1;	///< Required element.
/// Element "flowTemperature" of XSD type xs:double.
    double                               flowTemperature                1;	///< Required element.
/// Element "envirTemperature" of XSD type xs:double.
    double                               envirTemperature               1;	///< Required element.
/// Element "envirAirPressure" of XSD type xs:double.
    double                               envirAirPressure               1;	///< Required element.
/// Element "envirHumidity" of XSD type xs:double.
    double                               envirHumidity                  1;	///< Required element.
/// Element "diluteCorrect" of XSD type xs:double.
    double                               diluteCorrect                  1;	///< Required element.
/// Element "humidityCorrect" of XSD type xs:double.
    double                               humidityCorrect                1;	///< Required element.
/// Element "diluteRatio" of XSD type xs:double.
    double                               diluteRatio                    1;	///< Required element.
/// Element "lambdaValue" of XSD type xs:double.
    double                               lambdaValue                    1;	///< Required element.
/// Element "qtfxyjcswd" of XSD type xs:double.
    double                               qtfxyjcswd                     1;	///< Required element.
/// Element "zhlwd" of XSD type xs:double.
    double                               zhlwd                          1;	///< Required element.
/// Element "weightNO1" of XSD type xs:double.
    double                               weightNO1                      1;	///< Required element.
/// Element "weightNO2" of XSD type xs:double.
    double                               weightNO2                      1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":vmasLogResponse is a complexType.
///
/// class ns1__vmasLogResponse operations:
/// - soap_new_ns1__vmasLogResponse(soap*) allocate
/// - soap_new_ns1__vmasLogResponse(soap*, int num) allocate array
/// - soap_new_req_ns1__vmasLogResponse(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__vmasLogResponse(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__vmasLogResponse(soap*, ns1__vmasLogResponse*) deserialize from a stream
/// - int soap_write_ns1__vmasLogResponse(soap, ns1__vmasLogResponse*) serialize to a stream
class ns1__vmasLogResponse
{ public:
/// Element "return" of XSD type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":ydjSelfcheck is a complexType.
///
/// class ns1__ydjSelfcheck operations:
/// - soap_new_ns1__ydjSelfcheck(soap*) allocate
/// - soap_new_ns1__ydjSelfcheck(soap*, int num) allocate array
/// - soap_new_req_ns1__ydjSelfcheck(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__ydjSelfcheck(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__ydjSelfcheck(soap*, ns1__ydjSelfcheck*) deserialize from a stream
/// - int soap_write_ns1__ydjSelfcheck(soap, ns1__ydjSelfcheck*) serialize to a stream
class ns1__ydjSelfcheck
{ public:
/// Element "registCode" of XSD type xs:string.
    std::wstring*                        registCode                     0;	///< Optional element.
/// Element "zeroResult" of XSD type xs:string.
    std::wstring*                        zeroResult                     0;	///< Optional element.
/// Element "labelValueN30" of XSD type xs:double.
    double                               labelValueN30                  1;	///< Required element.
/// Element "labelValueN50" of XSD type xs:double.
    double                               labelValueN50                  1;	///< Required element.
/// Element "N30" of XSD type xs:double.
    double                               N30                            1;	///< Required element.
/// Element "N50" of XSD type xs:double.
    double                               N50                            1;	///< Required element.
/// Element "error30" of XSD type xs:double.
    double                               error30                        1;	///< Required element.
/// Element "error50" of XSD type xs:double.
    double                               error50                        1;	///< Required element.
/// Element "checkResult" of XSD type xs:string.
    std::wstring*                        checkResult                    0;	///< Optional element.
/// Element "checkTimeStart" of XSD type xs:string.
    std::wstring*                        checkTimeStart                 0;	///< Optional element.
/// Element "checkTimeEnd" of XSD type xs:string.
    std::wstring*                        checkTimeEnd                   0;	///< Optional element.
/// Element "remark" of XSD type xs:string.
    std::wstring*                        remark                         0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":ydjSelfcheckResponse is a complexType.
///
/// class ns1__ydjSelfcheckResponse operations:
/// - soap_new_ns1__ydjSelfcheckResponse(soap*) allocate
/// - soap_new_ns1__ydjSelfcheckResponse(soap*, int num) allocate array
/// - soap_new_req_ns1__ydjSelfcheckResponse(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__ydjSelfcheckResponse(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__ydjSelfcheckResponse(soap*, ns1__ydjSelfcheckResponse*) deserialize from a stream
/// - int soap_write_ns1__ydjSelfcheckResponse(soap, ns1__ydjSelfcheckResponse*) serialize to a stream
class ns1__ydjSelfcheckResponse
{ public:
/// Element "return" of XSD type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":dyhwSelfcheck is a complexType.
///
/// class ns1__dyhwSelfcheck operations:
/// - soap_new_ns1__dyhwSelfcheck(soap*) allocate
/// - soap_new_ns1__dyhwSelfcheck(soap*, int num) allocate array
/// - soap_new_req_ns1__dyhwSelfcheck(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__dyhwSelfcheck(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__dyhwSelfcheck(soap*, ns1__dyhwSelfcheck*) deserialize from a stream
/// - int soap_write_ns1__dyhwSelfcheck(soap, ns1__dyhwSelfcheck*) serialize to a stream
class ns1__dyhwSelfcheck
{ public:
/// Element "registCode" of XSD type xs:string.
    std::wstring*                        registCode                     0;	///< Optional element.
/// Element "checkResult" of XSD type xs:string.
    std::wstring*                        checkResult                    0;	///< Optional element.
/// Element "checkTimeStart" of XSD type xs:string.
    std::wstring*                        checkTimeStart                 0;	///< Optional element.
/// Element "checkTimeEnd" of XSD type xs:string.
    std::wstring*                        checkTimeEnd                   0;	///< Optional element.
/// Element "remark" of XSD type xs:string.
    std::wstring*                        remark                         0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":dyhwSelfcheckResponse is a complexType.
///
/// class ns1__dyhwSelfcheckResponse operations:
/// - soap_new_ns1__dyhwSelfcheckResponse(soap*) allocate
/// - soap_new_ns1__dyhwSelfcheckResponse(soap*, int num) allocate array
/// - soap_new_req_ns1__dyhwSelfcheckResponse(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__dyhwSelfcheckResponse(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__dyhwSelfcheckResponse(soap*, ns1__dyhwSelfcheckResponse*) deserialize from a stream
/// - int soap_write_ns1__dyhwSelfcheckResponse(soap, ns1__dyhwSelfcheckResponse*) serialize to a stream
class ns1__dyhwSelfcheckResponse
{ public:
/// Element "return" of XSD type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":loadDownLog is a complexType.
///
/// class ns1__loadDownLog operations:
/// - soap_new_ns1__loadDownLog(soap*) allocate
/// - soap_new_ns1__loadDownLog(soap*, int num) allocate array
/// - soap_new_req_ns1__loadDownLog(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__loadDownLog(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__loadDownLog(soap*, ns1__loadDownLog*) deserialize from a stream
/// - int soap_write_ns1__loadDownLog(soap, ns1__loadDownLog*) serialize to a stream
class ns1__loadDownLog
{ public:
/// Element "businessId" of XSD type xs:string.
    std::wstring*                        businessId                     0;	///< Optional element.
/// Element "registCode" of XSD type xs:string.
    std::wstring*                        registCode                     0;	///< Optional element.
/// Element "inspectNum" of XSD type xs:int.
    int                                  inspectNum                     1;	///< Required element.
/// Element "calVelMaxHp" of XSD type xs:double.
    double                               calVelMaxHp                    1;	///< Required element.
/// Element "actVelMaxHp" of XSD type xs:double.
    double                               actVelMaxHp                    1;	///< Required element.
/// Element "powerPerSec" of XSD type xs:double.
    double                               powerPerSec                    1;	///< Required element.
/// Element "speedPerSec" of XSD type xs:double.
    double                               speedPerSec                    1;	///< Required element.
/// Element "actMaxPower" of XSD type xs:double.
    double                               actMaxPower                    1;	///< Required element.
/// Element "rotateSpeed" of XSD type xs:double.
    double                               rotateSpeed                    1;	///< Required element.
/// Element "envirTemperature" of XSD type xs:double.
    double                               envirTemperature               1;	///< Required element.
/// Element "envirAirPressure" of XSD type xs:double.
    double                               envirAirPressure               1;	///< Required element.
/// Element "envirHumidity" of XSD type xs:double.
    double                               envirHumidity                  1;	///< Required element.
/// Element "powerCorrect" of XSD type xs:double.
    double                               powerCorrect                   1;	///< Required element.
/// Element "corMaxPower" of XSD type xs:double.
    double                               corMaxPower                    1;	///< Required element.
/// Element "smokeK100" of XSD type xs:double.
    double                               smokeK100                      1;	///< Required element.
/// Element "smokeK90" of XSD type xs:double.
    double                               smokeK90                       1;	///< Required element.
/// Element "smokeK80" of XSD type xs:double.
    double                               smokeK80                       1;	///< Required element.
/// Element "speedK100" of XSD type xs:double.
    double                               speedK100                      1;	///< Required element.
/// Element "speedK90" of XSD type xs:double.
    double                               speedK90                       1;	///< Required element.
/// Element "speedK80" of XSD type xs:double.
    double                               speedK80                       1;	///< Required element.
/// Element "NO80" of XSD type xs:double.
    double                               NO80                           1;	///< Required element.
/// Element "NO280" of XSD type xs:double.
    double                               NO280                          1;	///< Required element.
/// Element "CO280" of XSD type xs:double.
    double                               CO280                          1;	///< Required element.
/// Element "NOX80" of XSD type xs:double.
    double                               NOX80                          1;	///< Required element.
/// Element "ydjjcswd" of XSD type xs:double.
    double                               ydjjcswd                       1;	///< Required element.
/// Element "qtfxyjcswd" of XSD type xs:double.
    double                               qtfxyjcswd                     1;	///< Required element.
/// Element "zhlwd" of XSD type xs:double.
    double                               zhlwd                          1;	///< Required element.
/// Element "ydjjcsqy" of XSD type xs:double.
    double                               ydjjcsqy                       1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":loadDownLogResponse is a complexType.
///
/// class ns1__loadDownLogResponse operations:
/// - soap_new_ns1__loadDownLogResponse(soap*) allocate
/// - soap_new_ns1__loadDownLogResponse(soap*, int num) allocate array
/// - soap_new_req_ns1__loadDownLogResponse(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__loadDownLogResponse(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__loadDownLogResponse(soap*, ns1__loadDownLogResponse*) deserialize from a stream
/// - int soap_write_ns1__loadDownLogResponse(soap, ns1__loadDownLogResponse*) serialize to a stream
class ns1__loadDownLogResponse
{ public:
/// Element "return" of XSD type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":dyhwAdjust is a complexType.
///
/// class ns1__dyhwAdjust operations:
/// - soap_new_ns1__dyhwAdjust(soap*) allocate
/// - soap_new_ns1__dyhwAdjust(soap*, int num) allocate array
/// - soap_new_req_ns1__dyhwAdjust(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__dyhwAdjust(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__dyhwAdjust(soap*, ns1__dyhwAdjust*) deserialize from a stream
/// - int soap_write_ns1__dyhwAdjust(soap, ns1__dyhwAdjust*) serialize to a stream
class ns1__dyhwAdjust
{ public:
/// Element "registCode" of XSD type xs:string.
    std::wstring*                        registCode                     0;	///< Optional element.
/// Element "gasType" of XSD type xs:string.
    std::wstring*                        gasType                        0;	///< Optional element.
/// Element "labelValueNO" of XSD type xs:double.
    double                               labelValueNO                   1;	///< Required element.
/// Element "detectValueNO" of XSD type xs:double.
    double                               detectValueNO                  1;	///< Required element.
/// Element "labelValueNO2" of XSD type xs:double.
    double                               labelValueNO2                  1;	///< Required element.
/// Element "detectValueNO2" of XSD type xs:double.
    double                               detectValueNO2                 1;	///< Required element.
/// Element "adjustResult" of XSD type xs:string.
    std::wstring*                        adjustResult                   0;	///< Optional element.
/// Element "adjustTimeStart" of XSD type xs:string.
    std::wstring*                        adjustTimeStart                0;	///< Optional element.
/// Element "adjustTimeEnd" of XSD type xs:string.
    std::wstring*                        adjustTimeEnd                  0;	///< Optional element.
/// Element "remark" of XSD type xs:string.
    std::wstring*                        remark                         0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":dyhwAdjustResponse is a complexType.
///
/// class ns1__dyhwAdjustResponse operations:
/// - soap_new_ns1__dyhwAdjustResponse(soap*) allocate
/// - soap_new_ns1__dyhwAdjustResponse(soap*, int num) allocate array
/// - soap_new_req_ns1__dyhwAdjustResponse(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__dyhwAdjustResponse(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__dyhwAdjustResponse(soap*, ns1__dyhwAdjustResponse*) deserialize from a stream
/// - int soap_write_ns1__dyhwAdjustResponse(soap, ns1__dyhwAdjustResponse*) serialize to a stream
class ns1__dyhwAdjustResponse
{ public:
/// Element "return" of XSD type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":obdResultLog is a complexType.
///
/// class ns1__obdResultLog operations:
/// - soap_new_ns1__obdResultLog(soap*) allocate
/// - soap_new_ns1__obdResultLog(soap*, int num) allocate array
/// - soap_new_req_ns1__obdResultLog(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__obdResultLog(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__obdResultLog(soap*, ns1__obdResultLog*) deserialize from a stream
/// - int soap_write_ns1__obdResultLog(soap, ns1__obdResultLog*) serialize to a stream
class ns1__obdResultLog
{ public:
/// Element "registCode" of XSD type xs:string.
    std::wstring*                        registCode                     0;	///< Optional element.
/// Element "businessId" of XSD type xs:string.
    std::wstring*                        businessId                     0;	///< Optional element.
/// Element "calidfdjkzdy" of XSD type xs:string.
    std::wstring*                        calidfdjkzdy                   0;	///< Optional element.
/// Element "calidhclkddy" of XSD type xs:string.
    std::wstring*                        calidhclkddy                   0;	///< Optional element.
/// Element "calidqtkzdy" of XSD type xs:string.
    std::wstring*                        calidqtkzdy                    0;	///< Optional element.
/// Element "cvnfdjkzdy" of XSD type xs:string.
    std::wstring*                        cvnfdjkzdy                     0;	///< Optional element.
/// Element "cvnhclkddy" of XSD type xs:string.
    std::wstring*                        cvnhclkddy                     0;	///< Optional element.
/// Element "cvnqtkzdy" of XSD type xs:string.
    std::wstring*                        cvnqtkzdy                      0;	///< Optional element.
/// Element "jqmjdkd" of XSD type xs:double.
    double                               jqmjdkd                        1;	///< Required element.
/// Element "fhz" of XSD type xs:double.
    double                               fhz                            1;	///< Required element.
/// Element "lambdaValue" of XSD type xs:double.
    double                               lambdaValue                    1;	///< Required element.
/// Element "ymkd" of XSD type xs:double.
    double                               ymkd                           1;	///< Required element.
/// Element "fdjscgl" of XSD type xs:double.
    double                               fdjscgl                        1;	///< Required element.
/// Element "zyyl" of XSD type xs:double.
    double                               zyyl                           1;	///< Required element.
/// Element "hyl" of XSD type xs:double.
    double                               hyl                            1;	///< Required element.
/// Element "noxcgqnd" of XSD type xs:double.
    double                               noxcgqnd                       1;	///< Required element.
/// Element "Nspsl" of XSD type xs:double.
    double                               Nspsl                          1;	///< Required element.
/// Element "pqwd" of XSD type xs:double.
    double                               pqwd                           1;	///< Required element.
/// Element "Klpjqyc" of XSD type xs:double.
    double                               Klpjqyc                        1;	///< Required element.
/// Element "Egrkd" of XSD type xs:double.
    double                               Egrkd                          1;	///< Required element.
/// Element "rypsyl" of XSD type xs:double.
    double                               rypsyl                         1;	///< Required element.
/// Element "cs" of XSD type xs:double.
    double                               cs                             1;	///< Required element.
/// Element "zs" of XSD type xs:double.
    double                               zs                             1;	///< Required element.
/// Element "jqyl" of XSD type xs:double.
    double                               jqyl                           1;	///< Required element.
/// Element "fuelType" of XSD type xs:string.
    std::wstring*                        fuelType                       0;	///< Optional element.
/// Element "checkTime" of XSD type xs:string.
    std::wstring*                        checkTime                      0;	///< Optional element.
/// Element "remark" of XSD type xs:string.
    std::wstring*                        remark                         0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":obdResultLogResponse is a complexType.
///
/// class ns1__obdResultLogResponse operations:
/// - soap_new_ns1__obdResultLogResponse(soap*) allocate
/// - soap_new_ns1__obdResultLogResponse(soap*, int num) allocate array
/// - soap_new_req_ns1__obdResultLogResponse(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__obdResultLogResponse(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__obdResultLogResponse(soap*, ns1__obdResultLogResponse*) deserialize from a stream
/// - int soap_write_ns1__obdResultLogResponse(soap, ns1__obdResultLogResponse*) serialize to a stream
class ns1__obdResultLogResponse
{ public:
/// Element "return" of XSD type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":getCarInfo_FC is a complexType.
///
/// class ns1__getCarInfo_USCOREFC operations:
/// - soap_new_ns1__getCarInfo_USCOREFC(soap*) allocate
/// - soap_new_ns1__getCarInfo_USCOREFC(soap*, int num) allocate array
/// - soap_new_req_ns1__getCarInfo_USCOREFC(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__getCarInfo_USCOREFC(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__getCarInfo_USCOREFC(soap*, ns1__getCarInfo_USCOREFC*) deserialize from a stream
/// - int soap_write_ns1__getCarInfo_USCOREFC(soap, ns1__getCarInfo_USCOREFC*) serialize to a stream
class ns1__getCarInfo_USCOREFC
{ public:
/// Element "businessId" of XSD type xs:string.
    std::wstring*                        businessId                     0;	///< Optional element.
/// Element "registCode" of XSD type xs:string.
    std::wstring*                        registCode                     0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":cycdyhwAdjust is a complexType.
///
/// class ns1__cycdyhwAdjust operations:
/// - soap_new_ns1__cycdyhwAdjust(soap*) allocate
/// - soap_new_ns1__cycdyhwAdjust(soap*, int num) allocate array
/// - soap_new_req_ns1__cycdyhwAdjust(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__cycdyhwAdjust(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__cycdyhwAdjust(soap*, ns1__cycdyhwAdjust*) deserialize from a stream
/// - int soap_write_ns1__cycdyhwAdjust(soap, ns1__cycdyhwAdjust*) serialize to a stream
class ns1__cycdyhwAdjust
{ public:
/// Element "registCode" of XSD type xs:string.
    std::wstring*                        registCode                     0;	///< Optional element.
/// Element "gasType" of XSD type xs:string.
    std::wstring*                        gasType                        0;	///< Optional element.
/// Element "labelValueNO" of XSD type xs:double.
    double                               labelValueNO                   1;	///< Required element.
/// Element "detectValueNO" of XSD type xs:double.
    double                               detectValueNO                  1;	///< Required element.
/// Element "labelValueNO2" of XSD type xs:double.
    double                               labelValueNO2                  1;	///< Required element.
/// Element "detectValueNO2" of XSD type xs:double.
    double                               detectValueNO2                 1;	///< Required element.
/// Element "labelValueCO2" of XSD type xs:double.
    double                               labelValueCO2                  1;	///< Required element.
/// Element "detectValueCO2" of XSD type xs:double.
    double                               detectValueCO2                 1;	///< Required element.
/// Element "adjustResult" of XSD type xs:string.
    std::wstring*                        adjustResult                   0;	///< Optional element.
/// Element "adjustTimeStart" of XSD type xs:string.
    std::wstring*                        adjustTimeStart                0;	///< Optional element.
/// Element "adjustTimeEnd" of XSD type xs:string.
    std::wstring*                        adjustTimeEnd                  0;	///< Optional element.
/// Element "remark" of XSD type xs:string.
    std::wstring*                        remark                         0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":cycdyhwAdjustResponse is a complexType.
///
/// class ns1__cycdyhwAdjustResponse operations:
/// - soap_new_ns1__cycdyhwAdjustResponse(soap*) allocate
/// - soap_new_ns1__cycdyhwAdjustResponse(soap*, int num) allocate array
/// - soap_new_req_ns1__cycdyhwAdjustResponse(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__cycdyhwAdjustResponse(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__cycdyhwAdjustResponse(soap*, ns1__cycdyhwAdjustResponse*) deserialize from a stream
/// - int soap_write_ns1__cycdyhwAdjustResponse(soap, ns1__cycdyhwAdjustResponse*) serialize to a stream
class ns1__cycdyhwAdjustResponse
{ public:
/// Element "return" of XSD type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":hjcsgyqSelfcheck is a complexType.
///
/// class ns1__hjcsgyqSelfcheck operations:
/// - soap_new_ns1__hjcsgyqSelfcheck(soap*) allocate
/// - soap_new_ns1__hjcsgyqSelfcheck(soap*, int num) allocate array
/// - soap_new_req_ns1__hjcsgyqSelfcheck(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__hjcsgyqSelfcheck(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__hjcsgyqSelfcheck(soap*, ns1__hjcsgyqSelfcheck*) deserialize from a stream
/// - int soap_write_ns1__hjcsgyqSelfcheck(soap, ns1__hjcsgyqSelfcheck*) serialize to a stream
class ns1__hjcsgyqSelfcheck
{ public:
/// Element "registCode" of XSD type xs:string.
    std::wstring*                        registCode                     0;	///< Optional element.
/// Element "actualTemperature" of XSD type xs:double.
    double                               actualTemperature              1;	///< Required element.
/// Element "temperature" of XSD type xs:double.
    double                               temperature                    1;	///< Required element.
/// Element "actualHumidity" of XSD type xs:double.
    double                               actualHumidity                 1;	///< Required element.
/// Element "humidity" of XSD type xs:double.
    double                               humidity                       1;	///< Required element.
/// Element "actualAirPressure" of XSD type xs:double.
    double                               actualAirPressure              1;	///< Required element.
/// Element "airPressure" of XSD type xs:double.
    double                               airPressure                    1;	///< Required element.
/// Element "checkTimeStart" of XSD type xs:string.
    std::wstring*                        checkTimeStart                 0;	///< Optional element.
/// Element "checkTimeEnd" of XSD type xs:string.
    std::wstring*                        checkTimeEnd                   0;	///< Optional element.
/// Element "remark" of XSD type xs:string.
    std::wstring*                        remark                         0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":hjcsgyqSelfcheckResponse is a complexType.
///
/// class ns1__hjcsgyqSelfcheckResponse operations:
/// - soap_new_ns1__hjcsgyqSelfcheckResponse(soap*) allocate
/// - soap_new_ns1__hjcsgyqSelfcheckResponse(soap*, int num) allocate array
/// - soap_new_req_ns1__hjcsgyqSelfcheckResponse(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__hjcsgyqSelfcheckResponse(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__hjcsgyqSelfcheckResponse(soap*, ns1__hjcsgyqSelfcheckResponse*) deserialize from a stream
/// - int soap_write_ns1__hjcsgyqSelfcheckResponse(soap, ns1__hjcsgyqSelfcheckResponse*) serialize to a stream
class ns1__hjcsgyqSelfcheckResponse
{ public:
/// Element "return" of XSD type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":pqfxySelfcheck is a complexType.
///
/// class ns1__pqfxySelfcheck operations:
/// - soap_new_ns1__pqfxySelfcheck(soap*) allocate
/// - soap_new_ns1__pqfxySelfcheck(soap*, int num) allocate array
/// - soap_new_req_ns1__pqfxySelfcheck(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__pqfxySelfcheck(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__pqfxySelfcheck(soap*, ns1__pqfxySelfcheck*) deserialize from a stream
/// - int soap_write_ns1__pqfxySelfcheck(soap, ns1__pqfxySelfcheck*) serialize to a stream
class ns1__pqfxySelfcheck
{ public:
/// Element "registCode" of XSD type xs:string.
    std::wstring*                        registCode                     0;	///< Optional element.
/// Element "noxRTime1" of XSD type xs:double.
    double                               noxRTime1                      1;	///< Required element.
/// Element "noxRTime1Start" of XSD type xs:string.
    std::wstring*                        noxRTime1Start                 0;	///< Optional element.
/// Element "noxRTime1End" of XSD type xs:string.
    std::wstring*                        noxRTime1End                   0;	///< Optional element.
/// Element "noxRTime2" of XSD type xs:double.
    double                               noxRTime2                      1;	///< Required element.
/// Element "noxRTime2Start" of XSD type xs:string.
    std::wstring*                        noxRTime2Start                 0;	///< Optional element.
/// Element "noxRTime2End" of XSD type xs:string.
    std::wstring*                        noxRTime2End                   0;	///< Optional element.
/// Element "co2RTime1" of XSD type xs:double.
    double                               co2RTime1                      1;	///< Required element.
/// Element "co2RTime1Start" of XSD type xs:string.
    std::wstring*                        co2RTime1Start                 0;	///< Optional element.
/// Element "co2RTime1End" of XSD type xs:string.
    std::wstring*                        co2RTime1End                   0;	///< Optional element.
/// Element "co2RTime2" of XSD type xs:double.
    double                               co2RTime2                      1;	///< Required element.
/// Element "co2RTime2Start" of XSD type xs:string.
    std::wstring*                        co2RTime2Start                 0;	///< Optional element.
/// Element "co2RTime2End" of XSD type xs:string.
    std::wstring*                        co2RTime2End                   0;	///< Optional element.
/// Element "CEconverte" of XSD type xs:double.
    double                               CEconverte                     1;	///< Required element.
/// Element "CETimeStart" of XSD type xs:string.
    std::wstring*                        CETimeStart                    0;	///< Optional element.
/// Element "CETimeEnd" of XSD type xs:string.
    std::wstring*                        CETimeEnd                      0;	///< Optional element.
/// Element "checkResult" of XSD type xs:string.
    std::wstring*                        checkResult                    0;	///< Optional element.
/// Element "checkTimeStart" of XSD type xs:string.
    std::wstring*                        checkTimeStart                 0;	///< Optional element.
/// Element "checkTimeEnd" of XSD type xs:string.
    std::wstring*                        checkTimeEnd                   0;	///< Optional element.
/// Element "remark" of XSD type xs:string.
    std::wstring*                        remark                         0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":pqfxySelfcheckResponse is a complexType.
///
/// class ns1__pqfxySelfcheckResponse operations:
/// - soap_new_ns1__pqfxySelfcheckResponse(soap*) allocate
/// - soap_new_ns1__pqfxySelfcheckResponse(soap*, int num) allocate array
/// - soap_new_req_ns1__pqfxySelfcheckResponse(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__pqfxySelfcheckResponse(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__pqfxySelfcheckResponse(soap*, ns1__pqfxySelfcheckResponse*) deserialize from a stream
/// - int soap_write_ns1__pqfxySelfcheckResponse(soap, ns1__pqfxySelfcheckResponse*) serialize to a stream
class ns1__pqfxySelfcheckResponse
{ public:
/// Element "return" of XSD type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":lightproofSmokeDataLog_FC is a complexType.
///
/// class ns1__lightproofSmokeDataLog_USCOREFC operations:
/// - soap_new_ns1__lightproofSmokeDataLog_USCOREFC(soap*) allocate
/// - soap_new_ns1__lightproofSmokeDataLog_USCOREFC(soap*, int num) allocate array
/// - soap_new_req_ns1__lightproofSmokeDataLog_USCOREFC(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__lightproofSmokeDataLog_USCOREFC(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__lightproofSmokeDataLog_USCOREFC(soap*, ns1__lightproofSmokeDataLog_USCOREFC*) deserialize from a stream
/// - int soap_write_ns1__lightproofSmokeDataLog_USCOREFC(soap, ns1__lightproofSmokeDataLog_USCOREFC*) serialize to a stream
class ns1__lightproofSmokeDataLog_USCOREFC
{ public:
/// Element "businessId" of XSD type xs:string.
    std::wstring*                        businessId                     0;	///< Optional element.
/// Element "registCode" of XSD type xs:string.
    std::wstring*                        registCode                     0;	///< Optional element.
/// Element "cytimestart" of XSD type xs:string.
    std::wstring*                        cytimestart                    0;	///< Optional element.
/// Element "labelvalue" of XSD type xs:double.
    double                               labelvalue                     1;	///< Required element.
/// Element "zs" of XSD type xs:double.
    double                               zs                             1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":lightproofSmokeDataLog_FCResponse is a complexType.
///
/// class ns1__lightproofSmokeDataLog_USCOREFCResponse operations:
/// - soap_new_ns1__lightproofSmokeDataLog_USCOREFCResponse(soap*) allocate
/// - soap_new_ns1__lightproofSmokeDataLog_USCOREFCResponse(soap*, int num) allocate array
/// - soap_new_req_ns1__lightproofSmokeDataLog_USCOREFCResponse(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__lightproofSmokeDataLog_USCOREFCResponse(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__lightproofSmokeDataLog_USCOREFCResponse(soap*, ns1__lightproofSmokeDataLog_USCOREFCResponse*) deserialize from a stream
/// - int soap_write_ns1__lightproofSmokeDataLog_USCOREFCResponse(soap, ns1__lightproofSmokeDataLog_USCOREFCResponse*) serialize to a stream
class ns1__lightproofSmokeDataLog_USCOREFCResponse
{ public:
/// Element "return" of XSD type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":loadDownData is a complexType.
///
/// class ns1__loadDownData operations:
/// - soap_new_ns1__loadDownData(soap*) allocate
/// - soap_new_ns1__loadDownData(soap*, int num) allocate array
/// - soap_new_req_ns1__loadDownData(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__loadDownData(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__loadDownData(soap*, ns1__loadDownData*) deserialize from a stream
/// - int soap_write_ns1__loadDownData(soap, ns1__loadDownData*) serialize to a stream
class ns1__loadDownData
{ public:
/// Element "businessId" of XSD type xs:string.
    std::wstring*                        businessId                     0;	///< Optional element.
/// Element "registCode" of XSD type xs:string.
    std::wstring*                        registCode                     0;	///< Optional element.
/// Element "smokeK100" of XSD type xs:double.
    double                               smokeK100                      1;	///< Required element.
/// Element "smokeK90" of XSD type xs:double.
    double                               smokeK90                       1;	///< Required element.
/// Element "smokeK80" of XSD type xs:double.
    double                               smokeK80                       1;	///< Required element.
/// Element "power" of XSD type xs:double.
    double                               power                          1;	///< Required element.
/// Element "speed" of XSD type xs:double.
    double                               speed                          1;	///< Required element.
/// Element "mortorSpeed" of XSD type xs:double.
    double                               mortorSpeed                    1;	///< Required element.
/// Element "idleRotateSpeed" of XSD type xs:double.
    double                               idleRotateSpeed                1;	///< Required element.
/// Element "valueNO" of XSD type xs:double.
    double                               valueNO                        1;	///< Required element.
/// Element "tempreture" of XSD type xs:double.
    double                               tempreture                     1;	///< Required element.
/// Element "humidity" of XSD type xs:double.
    double                               humidity                       1;	///< Required element.
/// Element "airPressure" of XSD type xs:double.
    double                               airPressure                    1;	///< Required element.
/// Element "timeStart" of XSD type xs:string.
    std::wstring*                        timeStart                      0;	///< Optional element.
/// Element "timeEnd" of XSD type xs:string.
    std::wstring*                        timeEnd                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":loadDownDataResponse is a complexType.
///
/// class ns1__loadDownDataResponse operations:
/// - soap_new_ns1__loadDownDataResponse(soap*) allocate
/// - soap_new_ns1__loadDownDataResponse(soap*, int num) allocate array
/// - soap_new_req_ns1__loadDownDataResponse(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__loadDownDataResponse(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__loadDownDataResponse(soap*, ns1__loadDownDataResponse*) deserialize from a stream
/// - int soap_write_ns1__loadDownDataResponse(soap, ns1__loadDownDataResponse*) serialize to a stream
class ns1__loadDownDataResponse
{ public:
/// Element "return" of XSD type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":vmasData is a complexType.
///
/// class ns1__vmasData operations:
/// - soap_new_ns1__vmasData(soap*) allocate
/// - soap_new_ns1__vmasData(soap*, int num) allocate array
/// - soap_new_req_ns1__vmasData(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__vmasData(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__vmasData(soap*, ns1__vmasData*) deserialize from a stream
/// - int soap_write_ns1__vmasData(soap, ns1__vmasData*) serialize to a stream
class ns1__vmasData
{ public:
/// Element "businessId" of XSD type xs:string.
    std::wstring*                        businessId                     0;	///< Optional element.
/// Element "registCode" of XSD type xs:string.
    std::wstring*                        registCode                     0;	///< Optional element.
/// Element "valueCO" of XSD type xs:double.
    double                               valueCO                        1;	///< Required element.
/// Element "valueHC" of XSD type xs:double.
    double                               valueHC                        1;	///< Required element.
/// Element "valueNO" of XSD type xs:double.
    double                               valueNO                        1;	///< Required element.
/// Element "testSetPower" of XSD type xs:double.
    double                               testSetPower                   1;	///< Required element.
/// Element "totalDistance" of XSD type xs:double.
    double                               totalDistance                  1;	///< Required element.
/// Element "tempreture" of XSD type xs:double.
    double                               tempreture                     1;	///< Required element.
/// Element "humidity" of XSD type xs:double.
    double                               humidity                       1;	///< Required element.
/// Element "airPressure" of XSD type xs:double.
    double                               airPressure                    1;	///< Required element.
/// Element "timeStart" of XSD type xs:string.
    std::wstring*                        timeStart                      0;	///< Optional element.
/// Element "timeEnd" of XSD type xs:string.
    std::wstring*                        timeEnd                        0;	///< Optional element.
/// Element "lambdaValue" of XSD type xs:double.
    double                               lambdaValue                    1;	///< Required element.
/// Element "valueNO1" of XSD type xs:double.
    double                               valueNO1                       1;	///< Required element.
/// Element "valueNO2" of XSD type xs:double.
    double                               valueNO2                       1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":vmasDataResponse is a complexType.
///
/// class ns1__vmasDataResponse operations:
/// - soap_new_ns1__vmasDataResponse(soap*) allocate
/// - soap_new_ns1__vmasDataResponse(soap*, int num) allocate array
/// - soap_new_req_ns1__vmasDataResponse(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__vmasDataResponse(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__vmasDataResponse(soap*, ns1__vmasDataResponse*) deserialize from a stream
/// - int soap_write_ns1__vmasDataResponse(soap, ns1__vmasDataResponse*) serialize to a stream
class ns1__vmasDataResponse
{ public:
/// Element "return" of XSD type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":motoDbIdleData is a complexType.
///
/// class ns1__motoDbIdleData operations:
/// - soap_new_ns1__motoDbIdleData(soap*) allocate
/// - soap_new_ns1__motoDbIdleData(soap*, int num) allocate array
/// - soap_new_req_ns1__motoDbIdleData(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__motoDbIdleData(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__motoDbIdleData(soap*, ns1__motoDbIdleData*) deserialize from a stream
/// - int soap_write_ns1__motoDbIdleData(soap, ns1__motoDbIdleData*) serialize to a stream
class ns1__motoDbIdleData
{ public:
/// Element "businessId" of XSD type xs:string.
    std::wstring*                        businessId                     0;	///< Optional element.
/// Element "registCode" of XSD type xs:string.
    std::wstring*                        registCode                     0;	///< Optional element.
/// Element "hHC" of XSD type xs:double.
    double                               hHC                            1;	///< Required element.
/// Element "hCO" of XSD type xs:double.
    double                               hCO                            1;	///< Required element.
/// Element "hCO2" of XSD type xs:double.
    double                               hCO2                           1;	///< Required element.
/// Element "hIdleSpeed" of XSD type xs:double.
    double                               hIdleSpeed                     1;	///< Required element.
/// Element "HC" of XSD type xs:double.
    double                               HC                             1;	///< Required element.
/// Element "CO" of XSD type xs:double.
    double                               CO                             1;	///< Required element.
/// Element "CO2" of XSD type xs:double.
    double                               CO2                            1;	///< Required element.
/// Element "idleSpeed" of XSD type xs:double.
    double                               idleSpeed                      1;	///< Required element.
/// Element "tempreture" of XSD type xs:double.
    double                               tempreture                     1;	///< Required element.
/// Element "humidity" of XSD type xs:double.
    double                               humidity                       1;	///< Required element.
/// Element "airPressure" of XSD type xs:double.
    double                               airPressure                    1;	///< Required element.
/// Element "timeStart" of XSD type xs:string.
    std::wstring*                        timeStart                      0;	///< Optional element.
/// Element "timeEnd" of XSD type xs:string.
    std::wstring*                        timeEnd                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":motoDbIdleDataResponse is a complexType.
///
/// class ns1__motoDbIdleDataResponse operations:
/// - soap_new_ns1__motoDbIdleDataResponse(soap*) allocate
/// - soap_new_ns1__motoDbIdleDataResponse(soap*, int num) allocate array
/// - soap_new_req_ns1__motoDbIdleDataResponse(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__motoDbIdleDataResponse(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__motoDbIdleDataResponse(soap*, ns1__motoDbIdleDataResponse*) deserialize from a stream
/// - int soap_write_ns1__motoDbIdleDataResponse(soap, ns1__motoDbIdleDataResponse*) serialize to a stream
class ns1__motoDbIdleDataResponse
{ public:
/// Element "return" of XSD type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":getSatate is a complexType.
///
/// class ns1__getSatate operations:
/// - soap_new_ns1__getSatate(soap*) allocate
/// - soap_new_ns1__getSatate(soap*, int num) allocate array
/// - soap_new_req_ns1__getSatate(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__getSatate(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__getSatate(soap*, ns1__getSatate*) deserialize from a stream
/// - int soap_write_ns1__getSatate(soap, ns1__getSatate*) serialize to a stream
class ns1__getSatate
{ public:
/// Element "registCode" of XSD type xs:string.
    std::wstring*                        registCode                     0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":getSatateResponse is a complexType.
///
/// class ns1__getSatateResponse operations:
/// - soap_new_ns1__getSatateResponse(soap*) allocate
/// - soap_new_ns1__getSatateResponse(soap*, int num) allocate array
/// - soap_new_req_ns1__getSatateResponse(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__getSatateResponse(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__getSatateResponse(soap*, ns1__getSatateResponse*) deserialize from a stream
/// - int soap_write_ns1__getSatateResponse(soap, ns1__getSatateResponse*) serialize to a stream
class ns1__getSatateResponse
{ public:
/// Element "return" of XSD type "http://iface.server.webservice.zkyt.com/":stateInfo.
    ns1__stateInfo*                      return_                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":stateInfo is a complexType.
///
/// class ns1__stateInfo operations:
/// - soap_new_ns1__stateInfo(soap*) allocate
/// - soap_new_ns1__stateInfo(soap*, int num) allocate array
/// - soap_new_req_ns1__stateInfo(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__stateInfo(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__stateInfo(soap*, ns1__stateInfo*) deserialize from a stream
/// - int soap_write_ns1__stateInfo(soap, ns1__stateInfo*) serialize to a stream
class ns1__stateInfo
{ public:
/// Element "businessId" of XSD type xs:string.
    std::wstring*                        businessId                     0;	///< Optional element.
/// Element "methodId" of XSD type xs:string.
    std::wstring*                        methodId                       0;	///< Optional element.
/// Element "state" of XSD type xs:string.
    std::wstring*                        state                          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":doubleIdleData is a complexType.
///
/// class ns1__doubleIdleData operations:
/// - soap_new_ns1__doubleIdleData(soap*) allocate
/// - soap_new_ns1__doubleIdleData(soap*, int num) allocate array
/// - soap_new_req_ns1__doubleIdleData(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__doubleIdleData(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__doubleIdleData(soap*, ns1__doubleIdleData*) deserialize from a stream
/// - int soap_write_ns1__doubleIdleData(soap, ns1__doubleIdleData*) serialize to a stream
class ns1__doubleIdleData
{ public:
/// Element "businessId" of XSD type xs:string.
    std::wstring*                        businessId                     0;	///< Optional element.
/// Element "registCode" of XSD type xs:string.
    std::wstring*                        registCode                     0;	///< Optional element.
/// Element "lrotateSpeed" of XSD type xs:double.
    double                               lrotateSpeed                   1;	///< Required element.
/// Element "hrotateSpeed" of XSD type xs:double.
    double                               hrotateSpeed                   1;	///< Required element.
/// Element "coLowValue" of XSD type xs:double.
    double                               coLowValue                     1;	///< Required element.
/// Element "hcLowValue" of XSD type xs:double.
    double                               hcLowValue                     1;	///< Required element.
/// Element "coHighValue" of XSD type xs:double.
    double                               coHighValue                    1;	///< Required element.
/// Element "hcHighValue" of XSD type xs:double.
    double                               hcHighValue                    1;	///< Required element.
/// Element "lambdaValue" of XSD type xs:double.
    double                               lambdaValue                    1;	///< Required element.
/// Element "tempreture" of XSD type xs:double.
    double                               tempreture                     1;	///< Required element.
/// Element "humidity" of XSD type xs:double.
    double                               humidity                       1;	///< Required element.
/// Element "airPressure" of XSD type xs:double.
    double                               airPressure                    1;	///< Required element.
/// Element "timeStart" of XSD type xs:string.
    std::wstring*                        timeStart                      0;	///< Optional element.
/// Element "timeEnd" of XSD type xs:string.
    std::wstring*                        timeEnd                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":doubleIdleLog is a complexType.
///
/// class ns1__doubleIdleLog operations:
/// - soap_new_ns1__doubleIdleLog(soap*) allocate
/// - soap_new_ns1__doubleIdleLog(soap*, int num) allocate array
/// - soap_new_req_ns1__doubleIdleLog(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__doubleIdleLog(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__doubleIdleLog(soap*, ns1__doubleIdleLog*) deserialize from a stream
/// - int soap_write_ns1__doubleIdleLog(soap, ns1__doubleIdleLog*) serialize to a stream
class ns1__doubleIdleLog
{ public:
/// Element "businessId" of XSD type xs:string.
    std::wstring*                        businessId                     0;	///< Optional element.
/// Element "registCode" of XSD type xs:string.
    std::wstring*                        registCode                     0;	///< Optional element.
/// Element "inspectNum" of XSD type xs:int.
    int                                  inspectNum                     1;	///< Required element.
/// Element "flowHC" of XSD type xs:double.
    double                               flowHC                         1;	///< Required element.
/// Element "flowCO" of XSD type xs:double.
    double                               flowCO                         1;	///< Required element.
/// Element "flowCO2" of XSD type xs:double.
    double                               flowCO2                        1;	///< Required element.
/// Element "analyserO2" of XSD type xs:double.
    double                               analyserO2                     1;	///< Required element.
/// Element "oilTemperature" of XSD type xs:double.
    double                               oilTemperature                 1;	///< Required element.
/// Element "rotateSpeed" of XSD type xs:string.
    std::wstring*                        rotateSpeed                    0;	///< Optional element.
/// Element "lambdaValue" of XSD type xs:double.
    double                               lambdaValue                    1;	///< Required element.
/// Element "qtfxyjcswd" of XSD type xs:double.
    double                               qtfxyjcswd                     1;	///< Required element.
/// Element "zhlwd" of XSD type xs:double.
    double                               zhlwd                          1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":cgjPLHPSelfcheck is a complexType.
///
/// class ns1__cgjPLHPSelfcheck operations:
/// - soap_new_ns1__cgjPLHPSelfcheck(soap*) allocate
/// - soap_new_ns1__cgjPLHPSelfcheck(soap*, int num) allocate array
/// - soap_new_req_ns1__cgjPLHPSelfcheck(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__cgjPLHPSelfcheck(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__cgjPLHPSelfcheck(soap*, ns1__cgjPLHPSelfcheck*) deserialize from a stream
/// - int soap_write_ns1__cgjPLHPSelfcheck(soap, ns1__cgjPLHPSelfcheck*) serialize to a stream
class ns1__cgjPLHPSelfcheck
{ public:
/// Element "registCode" of XSD type xs:string.
    std::wstring*                        registCode                     0;	///< Optional element.
/// Element "speedQJ1" of XSD type xs:string.
    std::wstring*                        speedQJ1                       0;	///< Optional element.
/// Element "nameSpeed1" of XSD type xs:double.
    double                               nameSpeed1                     1;	///< Required element.
/// Element "PLHP1" of XSD type xs:double.
    double                               PLHP1                          1;	///< Required element.
/// Element "speedQJ2" of XSD type xs:string.
    std::wstring*                        speedQJ2                       0;	///< Optional element.
/// Element "nameSpeed2" of XSD type xs:double.
    double                               nameSpeed2                     1;	///< Required element.
/// Element "PLHP2" of XSD type xs:double.
    double                               PLHP2                          1;	///< Required element.
/// Element "speedQJ3" of XSD type xs:string.
    std::wstring*                        speedQJ3                       0;	///< Optional element.
/// Element "nameSpeed3" of XSD type xs:double.
    double                               nameSpeed3                     1;	///< Required element.
/// Element "PLHP3" of XSD type xs:double.
    double                               PLHP3                          1;	///< Required element.
/// Element "speedQJ4" of XSD type xs:string.
    std::wstring*                        speedQJ4                       0;	///< Optional element.
/// Element "nameSpeed4" of XSD type xs:double.
    double                               nameSpeed4                     1;	///< Required element.
/// Element "PLHP4" of XSD type xs:double.
    double                               PLHP4                          1;	///< Required element.
/// Element "maxSpeed" of XSD type xs:double.
    double                               maxSpeed                       1;	///< Required element.
/// Element "ALpower1" of XSD type xs:double.
    double                               ALpower1                       1;	///< Required element.
/// Element "ALpower2" of XSD type xs:double.
    double                               ALpower2                       1;	///< Required element.
/// Element "checkResult" of XSD type xs:string.
    std::wstring*                        checkResult                    0;	///< Optional element.
/// Element "checkTimeStart" of XSD type xs:string.
    std::wstring*                        checkTimeStart                 0;	///< Optional element.
/// Element "checkTimeEnd" of XSD type xs:string.
    std::wstring*                        checkTimeEnd                   0;	///< Optional element.
/// Element "remark" of XSD type xs:string.
    std::wstring*                        remark                         0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":cgjPLHPSelfcheckResponse is a complexType.
///
/// class ns1__cgjPLHPSelfcheckResponse operations:
/// - soap_new_ns1__cgjPLHPSelfcheckResponse(soap*) allocate
/// - soap_new_ns1__cgjPLHPSelfcheckResponse(soap*, int num) allocate array
/// - soap_new_req_ns1__cgjPLHPSelfcheckResponse(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__cgjPLHPSelfcheckResponse(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__cgjPLHPSelfcheckResponse(soap*, ns1__cgjPLHPSelfcheckResponse*) deserialize from a stream
/// - int soap_write_ns1__cgjPLHPSelfcheckResponse(soap, ns1__cgjPLHPSelfcheckResponse*) serialize to a stream
class ns1__cgjPLHPSelfcheckResponse
{ public:
/// Element "return" of XSD type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":wqfxyAdjust is a complexType.
///
/// class ns1__wqfxyAdjust operations:
/// - soap_new_ns1__wqfxyAdjust(soap*) allocate
/// - soap_new_ns1__wqfxyAdjust(soap*, int num) allocate array
/// - soap_new_req_ns1__wqfxyAdjust(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__wqfxyAdjust(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__wqfxyAdjust(soap*, ns1__wqfxyAdjust*) deserialize from a stream
/// - int soap_write_ns1__wqfxyAdjust(soap, ns1__wqfxyAdjust*) serialize to a stream
class ns1__wqfxyAdjust
{ public:
/// Element "registCode" of XSD type xs:string.
    std::wstring*                        registCode                     0;	///< Optional element.
/// Element "gasType" of XSD type xs:string.
    std::wstring*                        gasType                        0;	///< Optional element.
/// Element "labelValueCO2" of XSD type xs:double.
    double                               labelValueCO2                  1;	///< Required element.
/// Element "detectValueCO2" of XSD type xs:double.
    double                               detectValueCO2                 1;	///< Required element.
/// Element "labelValueCO" of XSD type xs:double.
    double                               labelValueCO                   1;	///< Required element.
/// Element "detectValueCO" of XSD type xs:double.
    double                               detectValueCO                  1;	///< Required element.
/// Element "labelValueNO" of XSD type xs:double.
    double                               labelValueNO                   1;	///< Required element.
/// Element "detectValueNO" of XSD type xs:double.
    double                               detectValueNO                  1;	///< Required element.
/// Element "labelValueNO2" of XSD type xs:double.
    double                               labelValueNO2                  1;	///< Required element.
/// Element "detectValueNO2" of XSD type xs:double.
    double                               detectValueNO2                 1;	///< Required element.
/// Element "labelValueHC" of XSD type xs:double.
    double                               labelValueHC                   1;	///< Required element.
/// Element "detectValueHC" of XSD type xs:double.
    double                               detectValueHC                  1;	///< Required element.
/// Element "labelValueO2" of XSD type xs:double.
    double                               labelValueO2                   1;	///< Required element.
/// Element "detectValueO2" of XSD type xs:double.
    double                               detectValueO2                  1;	///< Required element.
/// Element "labelValuePEF" of XSD type xs:double.
    double                               labelValuePEF                  1;	///< Required element.
/// Element "labelValueC3H8" of XSD type xs:double.
    double                               labelValueC3H8                 1;	///< Required element.
/// Element "adjustResult" of XSD type xs:string.
    std::wstring*                        adjustResult                   0;	///< Optional element.
/// Element "adjustTimeStart" of XSD type xs:string.
    std::wstring*                        adjustTimeStart                0;	///< Optional element.
/// Element "adjustTimeEnd" of XSD type xs:string.
    std::wstring*                        adjustTimeEnd                  0;	///< Optional element.
/// Element "remark" of XSD type xs:string.
    std::wstring*                        remark                         0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":wqfxyAdjustResponse is a complexType.
///
/// class ns1__wqfxyAdjustResponse operations:
/// - soap_new_ns1__wqfxyAdjustResponse(soap*) allocate
/// - soap_new_ns1__wqfxyAdjustResponse(soap*, int num) allocate array
/// - soap_new_req_ns1__wqfxyAdjustResponse(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__wqfxyAdjustResponse(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__wqfxyAdjustResponse(soap*, ns1__wqfxyAdjustResponse*) deserialize from a stream
/// - int soap_write_ns1__wqfxyAdjustResponse(soap, ns1__wqfxyAdjustResponse*) serialize to a stream
class ns1__wqfxyAdjustResponse
{ public:
/// Element "return" of XSD type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":lightproofSmokeData_FC is a complexType.
///
/// class ns1__lightproofSmokeData_USCOREFC operations:
/// - soap_new_ns1__lightproofSmokeData_USCOREFC(soap*) allocate
/// - soap_new_ns1__lightproofSmokeData_USCOREFC(soap*, int num) allocate array
/// - soap_new_req_ns1__lightproofSmokeData_USCOREFC(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__lightproofSmokeData_USCOREFC(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__lightproofSmokeData_USCOREFC(soap*, ns1__lightproofSmokeData_USCOREFC*) deserialize from a stream
/// - int soap_write_ns1__lightproofSmokeData_USCOREFC(soap, ns1__lightproofSmokeData_USCOREFC*) serialize to a stream
class ns1__lightproofSmokeData_USCOREFC
{ public:
/// Element "businessId" of XSD type xs:string.
    std::wstring*                        businessId                     0;	///< Optional element.
/// Element "registCode" of XSD type xs:string.
    std::wstring*                        registCode                     0;	///< Optional element.
/// Element "smokeValue1" of XSD type xs:double.
    double                               smokeValue1                    1;	///< Required element.
/// Element "smokeValue2" of XSD type xs:double.
    double                               smokeValue2                    1;	///< Required element.
/// Element "smokeValue3" of XSD type xs:double.
    double                               smokeValue3                    1;	///< Required element.
/// Element "tempreture" of XSD type xs:double.
    double                               tempreture                     1;	///< Required element.
/// Element "humidity" of XSD type xs:double.
    double                               humidity                       1;	///< Required element.
/// Element "airPressure" of XSD type xs:double.
    double                               airPressure                    1;	///< Required element.
/// Element "timeStart" of XSD type xs:string.
    std::wstring*                        timeStart                      0;	///< Optional element.
/// Element "timeEnd" of XSD type xs:string.
    std::wstring*                        timeEnd                        0;	///< Optional element.
/// Element "zs1" of XSD type xs:int.
    int                                  zs1                            1;	///< Required element.
/// Element "zs2" of XSD type xs:int.
    int                                  zs2                            1;	///< Required element.
/// Element "zs3" of XSD type xs:int.
    int                                  zs3                            1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":lightproofSmokeDataResponse is a complexType.
///
/// class ns1__lightproofSmokeDataResponse operations:
/// - soap_new_ns1__lightproofSmokeDataResponse(soap*) allocate
/// - soap_new_ns1__lightproofSmokeDataResponse(soap*, int num) allocate array
/// - soap_new_req_ns1__lightproofSmokeDataResponse(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__lightproofSmokeDataResponse(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__lightproofSmokeDataResponse(soap*, ns1__lightproofSmokeDataResponse*) deserialize from a stream
/// - int soap_write_ns1__lightproofSmokeDataResponse(soap, ns1__lightproofSmokeDataResponse*) serialize to a stream
class ns1__lightproofSmokeDataResponse
{ public:
/// Element "return" of XSD type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":lightproofSmokeData is a complexType.
///
/// class ns1__lightproofSmokeData operations:
/// - soap_new_ns1__lightproofSmokeData(soap*) allocate
/// - soap_new_ns1__lightproofSmokeData(soap*, int num) allocate array
/// - soap_new_req_ns1__lightproofSmokeData(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__lightproofSmokeData(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__lightproofSmokeData(soap*, ns1__lightproofSmokeData*) deserialize from a stream
/// - int soap_write_ns1__lightproofSmokeData(soap, ns1__lightproofSmokeData*) serialize to a stream
class ns1__lightproofSmokeData
{ public:
/// Element "businessId" of XSD type xs:string.
    std::wstring*                        businessId                     0;	///< Optional element.
/// Element "registCode" of XSD type xs:string.
    std::wstring*                        registCode                     0;	///< Optional element.
/// Element "smokeValue1" of XSD type xs:double.
    double                               smokeValue1                    1;	///< Required element.
/// Element "smokeValue2" of XSD type xs:double.
    double                               smokeValue2                    1;	///< Required element.
/// Element "smokeValue3" of XSD type xs:double.
    double                               smokeValue3                    1;	///< Required element.
/// Element "tempreture" of XSD type xs:double.
    double                               tempreture                     1;	///< Required element.
/// Element "humidity" of XSD type xs:double.
    double                               humidity                       1;	///< Required element.
/// Element "airPressure" of XSD type xs:double.
    double                               airPressure                    1;	///< Required element.
/// Element "timeStart" of XSD type xs:string.
    std::wstring*                        timeStart                      0;	///< Optional element.
/// Element "timeEnd" of XSD type xs:string.
    std::wstring*                        timeEnd                        0;	///< Optional element.
/// Element "zs1" of XSD type xs:int.
    int                                  zs1                            1;	///< Required element.
/// Element "zs2" of XSD type xs:int.
    int                                  zs2                            1;	///< Required element.
/// Element "zs3" of XSD type xs:int.
    int                                  zs3                            1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":qyfxSelfcheck is a complexType.
///
/// class ns1__qyfxSelfcheck operations:
/// - soap_new_ns1__qyfxSelfcheck(soap*) allocate
/// - soap_new_ns1__qyfxSelfcheck(soap*, int num) allocate array
/// - soap_new_req_ns1__qyfxSelfcheck(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__qyfxSelfcheck(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__qyfxSelfcheck(soap*, ns1__qyfxSelfcheck*) deserialize from a stream
/// - int soap_write_ns1__qyfxSelfcheck(soap, ns1__qyfxSelfcheck*) serialize to a stream
class ns1__qyfxSelfcheck
{ public:
/// Element "registCode" of XSD type xs:string.
    std::wstring*                        registCode                     0;	///< Optional element.
/// Element "carryTimeStart" of XSD type xs:string.
    std::wstring*                        carryTimeStart                 0;	///< Optional element.
/// Element "carryTimeEnd" of XSD type xs:string.
    std::wstring*                        carryTimeEnd                   0;	///< Optional element.
/// Element "carryTimenumber" of XSD type xs:double.
    double                               carryTimenumber                1;	///< Required element.
/// Element "respondTimeStartHC_1" of XSD type xs:string.
    std::wstring*                        respondTimeStartHC_USCORE1     0;	///< Optional element.
/// Element "respondTimeEndHC_1" of XSD type xs:string.
    std::wstring*                        respondTimeEndHC_USCORE1       0;	///< Optional element.
/// Element "respondTimeStartCO_1" of XSD type xs:string.
    std::wstring*                        respondTimeStartCO_USCORE1     0;	///< Optional element.
/// Element "respondTimeEndCO_1" of XSD type xs:string.
    std::wstring*                        respondTimeEndCO_USCORE1       0;	///< Optional element.
/// Element "respondTimeStartCO2_1" of XSD type xs:string.
    std::wstring*                        respondTimeStartCO2_USCORE1    0;	///< Optional element.
/// Element "respondTimeEndCO2_1" of XSD type xs:string.
    std::wstring*                        respondTimeEndCO2_USCORE1      0;	///< Optional element.
/// Element "respondTimeStartNO_1" of XSD type xs:string.
    std::wstring*                        respondTimeStartNO_USCORE1     0;	///< Optional element.
/// Element "respondTimeEndNO_1" of XSD type xs:string.
    std::wstring*                        respondTimeEndNO_USCORE1       0;	///< Optional element.
/// Element "respondTimeStartNO2_1" of XSD type xs:string.
    std::wstring*                        respondTimeStartNO2_USCORE1    0;	///< Optional element.
/// Element "respondTimeEndNO2_1" of XSD type xs:string.
    std::wstring*                        respondTimeEndNO2_USCORE1      0;	///< Optional element.
/// Element "respondTimeStartO2_1" of XSD type xs:string.
    std::wstring*                        respondTimeStartO2_USCORE1     0;	///< Optional element.
/// Element "respondTimeEndO2_1" of XSD type xs:string.
    std::wstring*                        respondTimeEndO2_USCORE1       0;	///< Optional element.
/// Element "respondTimeStartHC_2" of XSD type xs:string.
    std::wstring*                        respondTimeStartHC_USCORE2     0;	///< Optional element.
/// Element "respondTimeEndHC_2" of XSD type xs:string.
    std::wstring*                        respondTimeEndHC_USCORE2       0;	///< Optional element.
/// Element "respondTimeStartCO_2" of XSD type xs:string.
    std::wstring*                        respondTimeStartCO_USCORE2     0;	///< Optional element.
/// Element "respondTimeEndCO_2" of XSD type xs:string.
    std::wstring*                        respondTimeEndCO_USCORE2       0;	///< Optional element.
/// Element "respondTimeStartCO2_2" of XSD type xs:string.
    std::wstring*                        respondTimeStartCO2_USCORE2    0;	///< Optional element.
/// Element "respondTimeEndCO2_2" of XSD type xs:string.
    std::wstring*                        respondTimeEndCO2_USCORE2      0;	///< Optional element.
/// Element "respondTimeStartNO_2" of XSD type xs:string.
    std::wstring*                        respondTimeStartNO_USCORE2     0;	///< Optional element.
/// Element "respondTimeEndNO_2" of XSD type xs:string.
    std::wstring*                        respondTimeEndNO_USCORE2       0;	///< Optional element.
/// Element "respondTimeStartNO2_2" of XSD type xs:string.
    std::wstring*                        respondTimeStartNO2_USCORE2    0;	///< Optional element.
/// Element "respondTimeEndNO2_2" of XSD type xs:string.
    std::wstring*                        respondTimeEndNO2_USCORE2      0;	///< Optional element.
/// Element "respondTimeStartO2_2" of XSD type xs:string.
    std::wstring*                        respondTimeStartO2_USCORE2     0;	///< Optional element.
/// Element "respondTimeEndO2_2" of XSD type xs:string.
    std::wstring*                        respondTimeEndO2_USCORE2       0;	///< Optional element.
/// Element "checkTimeStart" of XSD type xs:string.
    std::wstring*                        checkTimeStart                 0;	///< Optional element.
/// Element "checkTimeEnd" of XSD type xs:string.
    std::wstring*                        checkTimeEnd                   0;	///< Optional element.
/// Element "remark" of XSD type xs:string.
    std::wstring*                        remark                         0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":qyfxSelfcheckResponse is a complexType.
///
/// class ns1__qyfxSelfcheckResponse operations:
/// - soap_new_ns1__qyfxSelfcheckResponse(soap*) allocate
/// - soap_new_ns1__qyfxSelfcheckResponse(soap*, int num) allocate array
/// - soap_new_req_ns1__qyfxSelfcheckResponse(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__qyfxSelfcheckResponse(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__qyfxSelfcheckResponse(soap*, ns1__qyfxSelfcheckResponse*) deserialize from a stream
/// - int soap_write_ns1__qyfxSelfcheckResponse(soap, ns1__qyfxSelfcheckResponse*) serialize to a stream
class ns1__qyfxSelfcheckResponse
{ public:
/// Element "return" of XSD type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":sdsqtfxySelfcheck is a complexType.
///
/// class ns1__sdsqtfxySelfcheck operations:
/// - soap_new_ns1__sdsqtfxySelfcheck(soap*) allocate
/// - soap_new_ns1__sdsqtfxySelfcheck(soap*, int num) allocate array
/// - soap_new_req_ns1__sdsqtfxySelfcheck(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__sdsqtfxySelfcheck(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__sdsqtfxySelfcheck(soap*, ns1__sdsqtfxySelfcheck*) deserialize from a stream
/// - int soap_write_ns1__sdsqtfxySelfcheck(soap, ns1__sdsqtfxySelfcheck*) serialize to a stream
class ns1__sdsqtfxySelfcheck
{ public:
/// Element "registCode" of XSD type xs:string.
    std::wstring*                        registCode                     0;	///< Optional element.
/// Element "tightnessResult" of XSD type xs:string.
    std::wstring*                        tightnessResult                0;	///< Optional element.
/// Element "lFlowResult" of XSD type xs:string.
    std::wstring*                        lFlowResult                    0;	///< Optional element.
/// Element "canliuHC" of XSD type xs:double.
    double                               canliuHC                       1;	///< Required element.
/// Element "checkResult" of XSD type xs:string.
    std::wstring*                        checkResult                    0;	///< Optional element.
/// Element "checkTimeStart" of XSD type xs:string.
    std::wstring*                        checkTimeStart                 0;	///< Optional element.
/// Element "checkTimeEnd" of XSD type xs:string.
    std::wstring*                        checkTimeEnd                   0;	///< Optional element.
/// Element "remark" of XSD type xs:string.
    std::wstring*                        remark                         0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":sdsqtfxySelfcheckResponse is a complexType.
///
/// class ns1__sdsqtfxySelfcheckResponse operations:
/// - soap_new_ns1__sdsqtfxySelfcheckResponse(soap*) allocate
/// - soap_new_ns1__sdsqtfxySelfcheckResponse(soap*, int num) allocate array
/// - soap_new_req_ns1__sdsqtfxySelfcheckResponse(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__sdsqtfxySelfcheckResponse(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__sdsqtfxySelfcheckResponse(soap*, ns1__sdsqtfxySelfcheckResponse*) deserialize from a stream
/// - int soap_write_ns1__sdsqtfxySelfcheckResponse(soap, ns1__sdsqtfxySelfcheckResponse*) serialize to a stream
class ns1__sdsqtfxySelfcheckResponse
{ public:
/// Element "return" of XSD type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":sendMessage_FC is a complexType.
///
/// class ns1__sendMessage_USCOREFC operations:
/// - soap_new_ns1__sendMessage_USCOREFC(soap*) allocate
/// - soap_new_ns1__sendMessage_USCOREFC(soap*, int num) allocate array
/// - soap_new_req_ns1__sendMessage_USCOREFC(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__sendMessage_USCOREFC(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__sendMessage_USCOREFC(soap*, ns1__sendMessage_USCOREFC*) deserialize from a stream
/// - int soap_write_ns1__sendMessage_USCOREFC(soap, ns1__sendMessage_USCOREFC*) serialize to a stream
class ns1__sendMessage_USCOREFC
{ public:
/// Element "businessId" of XSD type xs:string.
    std::wstring*                        businessId                     0;	///< Optional element.
/// Element "registCode" of XSD type xs:string.
    std::wstring*                        registCode                     0;	///< Optional element.
/// Element "code" of XSD type xs:string.
    std::wstring*                        code                           0;	///< Optional element.
/// Element "message" of XSD type xs:string.
    std::wstring*                        message                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":wqfxySelfcheck is a complexType.
///
/// class ns1__wqfxySelfcheck operations:
/// - soap_new_ns1__wqfxySelfcheck(soap*) allocate
/// - soap_new_ns1__wqfxySelfcheck(soap*, int num) allocate array
/// - soap_new_req_ns1__wqfxySelfcheck(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__wqfxySelfcheck(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__wqfxySelfcheck(soap*, ns1__wqfxySelfcheck*) deserialize from a stream
/// - int soap_write_ns1__wqfxySelfcheck(soap, ns1__wqfxySelfcheck*) serialize to a stream
class ns1__wqfxySelfcheck
{ public:
/// Element "registCode" of XSD type xs:string.
    std::wstring*                        registCode                     0;	///< Optional element.
/// Element "tightnessResult" of XSD type xs:string.
    std::wstring*                        tightnessResult                0;	///< Optional element.
/// Element "checkTimeStart" of XSD type xs:string.
    std::wstring*                        checkTimeStart                 0;	///< Optional element.
/// Element "checkTimeEnd" of XSD type xs:string.
    std::wstring*                        checkTimeEnd                   0;	///< Optional element.
/// Element "remark" of XSD type xs:string.
    std::wstring*                        remark                         0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":wqfxySelfcheckResponse is a complexType.
///
/// class ns1__wqfxySelfcheckResponse operations:
/// - soap_new_ns1__wqfxySelfcheckResponse(soap*) allocate
/// - soap_new_ns1__wqfxySelfcheckResponse(soap*, int num) allocate array
/// - soap_new_req_ns1__wqfxySelfcheckResponse(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__wqfxySelfcheckResponse(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__wqfxySelfcheckResponse(soap*, ns1__wqfxySelfcheckResponse*) deserialize from a stream
/// - int soap_write_ns1__wqfxySelfcheckResponse(soap, ns1__wqfxySelfcheckResponse*) serialize to a stream
class ns1__wqfxySelfcheckResponse
{ public:
/// Element "return" of XSD type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":cgjALPSelfcheck is a complexType.
///
/// class ns1__cgjALPSelfcheck operations:
/// - soap_new_ns1__cgjALPSelfcheck(soap*) allocate
/// - soap_new_ns1__cgjALPSelfcheck(soap*, int num) allocate array
/// - soap_new_req_ns1__cgjALPSelfcheck(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__cgjALPSelfcheck(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__cgjALPSelfcheck(soap*, ns1__cgjALPSelfcheck*) deserialize from a stream
/// - int soap_write_ns1__cgjALPSelfcheck(soap, ns1__cgjALPSelfcheck*) serialize to a stream
class ns1__cgjALPSelfcheck
{ public:
/// Element "registCode" of XSD type xs:string.
    std::wstring*                        registCode                     0;	///< Optional element.
/// Element "AvitualTime" of XSD type xs:double.
    double                               AvitualTime                    1;	///< Required element.
/// Element "ArealTime" of XSD type xs:double.
    double                               ArealTime                      1;	///< Required element.
/// Element "BvitualTime" of XSD type xs:double.
    double                               BvitualTime                    1;	///< Required element.
/// Element "BrealTime" of XSD type xs:double.
    double                               BrealTime                      1;	///< Required element.
/// Element "CvitualTime" of XSD type xs:double.
    double                               CvitualTime                    1;	///< Required element.
/// Element "CrealTime" of XSD type xs:double.
    double                               CrealTime                      1;	///< Required element.
/// Element "ALpower1" of XSD type xs:double.
    double                               ALpower1                       1;	///< Required element.
/// Element "ALpower2" of XSD type xs:double.
    double                               ALpower2                       1;	///< Required element.
/// Element "checkResult" of XSD type xs:string.
    std::wstring*                        checkResult                    0;	///< Optional element.
/// Element "checkTimeStart" of XSD type xs:string.
    std::wstring*                        checkTimeStart                 0;	///< Optional element.
/// Element "checkTimeEnd" of XSD type xs:string.
    std::wstring*                        checkTimeEnd                   0;	///< Optional element.
/// Element "remark" of XSD type xs:string.
    std::wstring*                        remark                         0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":cgjALPSelfcheckResponse is a complexType.
///
/// class ns1__cgjALPSelfcheckResponse operations:
/// - soap_new_ns1__cgjALPSelfcheckResponse(soap*) allocate
/// - soap_new_ns1__cgjALPSelfcheckResponse(soap*, int num) allocate array
/// - soap_new_req_ns1__cgjALPSelfcheckResponse(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__cgjALPSelfcheckResponse(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__cgjALPSelfcheckResponse(soap*, ns1__cgjALPSelfcheckResponse*) deserialize from a stream
/// - int soap_write_ns1__cgjALPSelfcheckResponse(soap, ns1__cgjALPSelfcheckResponse*) serialize to a stream
class ns1__cgjALPSelfcheckResponse
{ public:
/// Element "return" of XSD type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":lljSelfcheck is a complexType.
///
/// class ns1__lljSelfcheck operations:
/// - soap_new_ns1__lljSelfcheck(soap*) allocate
/// - soap_new_ns1__lljSelfcheck(soap*, int num) allocate array
/// - soap_new_req_ns1__lljSelfcheck(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__lljSelfcheck(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__lljSelfcheck(soap*, ns1__lljSelfcheck*) deserialize from a stream
/// - int soap_write_ns1__lljSelfcheck(soap, ns1__lljSelfcheck*) serialize to a stream
class ns1__lljSelfcheck
{ public:
/// Element "registCode" of XSD type xs:string.
    std::wstring*                        registCode                     0;	///< Optional element.
/// Element "avgFlow" of XSD type xs:double.
    double                               avgFlow                        1;	///< Required element.
/// Element "O2Avg" of XSD type xs:double.
    double                               O2Avg                          1;	///< Required element.
/// Element "checkResult" of XSD type xs:string.
    std::wstring*                        checkResult                    0;	///< Optional element.
/// Element "checkTimeStart" of XSD type xs:string.
    std::wstring*                        checkTimeStart                 0;	///< Optional element.
/// Element "checkTimeEnd" of XSD type xs:string.
    std::wstring*                        checkTimeEnd                   0;	///< Optional element.
/// Element "remark" of XSD type xs:string.
    std::wstring*                        remark                         0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":lljSelfcheckResponse is a complexType.
///
/// class ns1__lljSelfcheckResponse operations:
/// - soap_new_ns1__lljSelfcheckResponse(soap*) allocate
/// - soap_new_ns1__lljSelfcheckResponse(soap*, int num) allocate array
/// - soap_new_req_ns1__lljSelfcheckResponse(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__lljSelfcheckResponse(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__lljSelfcheckResponse(soap*, ns1__lljSelfcheckResponse*) deserialize from a stream
/// - int soap_write_ns1__lljSelfcheckResponse(soap, ns1__lljSelfcheckResponse*) serialize to a stream
class ns1__lljSelfcheckResponse
{ public:
/// Element "return" of XSD type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":cgjLSPSelfcheck is a complexType.
///
/// class ns1__cgjLSPSelfcheck operations:
/// - soap_new_ns1__cgjLSPSelfcheck(soap*) allocate
/// - soap_new_ns1__cgjLSPSelfcheck(soap*, int num) allocate array
/// - soap_new_req_ns1__cgjLSPSelfcheck(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__cgjLSPSelfcheck(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__cgjLSPSelfcheck(soap*, ns1__cgjLSPSelfcheck*) deserialize from a stream
/// - int soap_write_ns1__cgjLSPSelfcheck(soap, ns1__cgjLSPSelfcheck*) serialize to a stream
class ns1__cgjLSPSelfcheck
{ public:
/// Element "registCode" of XSD type xs:string.
    std::wstring*                        registCode                     0;	///< Optional element.
/// Element "AvitualTime" of XSD type xs:double.
    double                               AvitualTime                    1;	///< Required element.
/// Element "ArealTime" of XSD type xs:double.
    double                               ArealTime                      1;	///< Required element.
/// Element "BvitualTime" of XSD type xs:double.
    double                               BvitualTime                    1;	///< Required element.
/// Element "BrealTime" of XSD type xs:double.
    double                               BrealTime                      1;	///< Required element.
/// Element "CvitualTime" of XSD type xs:double.
    double                               CvitualTime                    1;	///< Required element.
/// Element "CrealTime" of XSD type xs:double.
    double                               CrealTime                      1;	///< Required element.
/// Element "DvitualTime" of XSD type xs:double.
    double                               DvitualTime                    1;	///< Required element.
/// Element "DrealTime" of XSD type xs:double.
    double                               DrealTime                      1;	///< Required element.
/// Element "ALSpower" of XSD type xs:double.
    double                               ALSpower                       1;	///< Required element.
/// Element "BLSpower" of XSD type xs:double.
    double                               BLSpower                       1;	///< Required element.
/// Element "CLSpower" of XSD type xs:double.
    double                               CLSpower                       1;	///< Required element.
/// Element "DLSpower" of XSD type xs:double.
    double                               DLSpower                       1;	///< Required element.
/// Element "checkResult" of XSD type xs:string.
    std::wstring*                        checkResult                    0;	///< Optional element.
/// Element "checkTimeStart" of XSD type xs:string.
    std::wstring*                        checkTimeStart                 0;	///< Optional element.
/// Element "checkTimeEnd" of XSD type xs:string.
    std::wstring*                        checkTimeEnd                   0;	///< Optional element.
/// Element "remark" of XSD type xs:string.
    std::wstring*                        remark                         0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":cgjLSPSelfcheckResponse is a complexType.
///
/// class ns1__cgjLSPSelfcheckResponse operations:
/// - soap_new_ns1__cgjLSPSelfcheckResponse(soap*) allocate
/// - soap_new_ns1__cgjLSPSelfcheckResponse(soap*, int num) allocate array
/// - soap_new_req_ns1__cgjLSPSelfcheckResponse(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__cgjLSPSelfcheckResponse(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__cgjLSPSelfcheckResponse(soap*, ns1__cgjLSPSelfcheckResponse*) deserialize from a stream
/// - int soap_write_ns1__cgjLSPSelfcheckResponse(soap, ns1__cgjLSPSelfcheckResponse*) serialize to a stream
class ns1__cgjLSPSelfcheckResponse
{ public:
/// Element "return" of XSD type xs:boolean.
    bool                                 return_                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://iface.server.webservice.zkyt.com/                                 *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":argChang of XSD type "http://iface.server.webservice.zkyt.com/":argChang.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":argChangResponse of XSD type "http://iface.server.webservice.zkyt.com/":argChangResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":bgAirHC of XSD type "http://iface.server.webservice.zkyt.com/":bgAirHC.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":bgAirHCResponse of XSD type "http://iface.server.webservice.zkyt.com/":bgAirHCResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":cgjALPSelfcheck of XSD type "http://iface.server.webservice.zkyt.com/":cgjALPSelfcheck.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":cgjALPSelfcheckResponse of XSD type "http://iface.server.webservice.zkyt.com/":cgjALPSelfcheckResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":cgjLASelfcheck of XSD type "http://iface.server.webservice.zkyt.com/":cgjLASelfcheck.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":cgjLASelfcheckResponse of XSD type "http://iface.server.webservice.zkyt.com/":cgjLASelfcheckResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":cgjLSPSelfcheck of XSD type "http://iface.server.webservice.zkyt.com/":cgjLSPSelfcheck.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":cgjLSPSelfcheckResponse of XSD type "http://iface.server.webservice.zkyt.com/":cgjLSPSelfcheckResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":cgjPLHPSelfcheck of XSD type "http://iface.server.webservice.zkyt.com/":cgjPLHPSelfcheck.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":cgjPLHPSelfcheckResponse of XSD type "http://iface.server.webservice.zkyt.com/":cgjPLHPSelfcheckResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":cgjSelfcheck of XSD type "http://iface.server.webservice.zkyt.com/":cgjSelfcheck.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":cgjSelfcheckResponse of XSD type "http://iface.server.webservice.zkyt.com/":cgjSelfcheckResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":cycdyhwAdjust of XSD type "http://iface.server.webservice.zkyt.com/":cycdyhwAdjust.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":cycdyhwAdjustResponse of XSD type "http://iface.server.webservice.zkyt.com/":cycdyhwAdjustResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":doubleIdleData of XSD type "http://iface.server.webservice.zkyt.com/":doubleIdleData.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":doubleIdleDataResponse of XSD type "http://iface.server.webservice.zkyt.com/":doubleIdleDataResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":doubleIdleData_FC of XSD type "http://iface.server.webservice.zkyt.com/":doubleIdleData_FC.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":doubleIdleLog of XSD type "http://iface.server.webservice.zkyt.com/":doubleIdleLog.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":doubleIdleLogResponse of XSD type "http://iface.server.webservice.zkyt.com/":doubleIdleLogResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":doubleIdleLog_FC of XSD type "http://iface.server.webservice.zkyt.com/":doubleIdleLog_FC.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":getCarInfo of XSD type "http://iface.server.webservice.zkyt.com/":getCarInfo.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":getCarInfoResponse of XSD type "http://iface.server.webservice.zkyt.com/":getCarInfoResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":getCarInfo_FC of XSD type "http://iface.server.webservice.zkyt.com/":getCarInfo_FC.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":getSatate of XSD type "http://iface.server.webservice.zkyt.com/":getSatate.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":getSatateResponse of XSD type "http://iface.server.webservice.zkyt.com/":getSatateResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":hjcsgyqSelfcheck of XSD type "http://iface.server.webservice.zkyt.com/":hjcsgyqSelfcheck.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":hjcsgyqSelfcheckResponse of XSD type "http://iface.server.webservice.zkyt.com/":hjcsgyqSelfcheckResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":lightproofSmokeData of XSD type "http://iface.server.webservice.zkyt.com/":lightproofSmokeData.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":lightproofSmokeDataLog_FC of XSD type "http://iface.server.webservice.zkyt.com/":lightproofSmokeDataLog_FC.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":lightproofSmokeDataLog_FCResponse of XSD type "http://iface.server.webservice.zkyt.com/":lightproofSmokeDataLog_FCResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":lightproofSmokeDataResponse of XSD type "http://iface.server.webservice.zkyt.com/":lightproofSmokeDataResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":lightproofSmokeData_FC of XSD type "http://iface.server.webservice.zkyt.com/":lightproofSmokeData_FC.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":lightproofSmokeLog of XSD type "http://iface.server.webservice.zkyt.com/":lightproofSmokeLog.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":lljSelfcheck of XSD type "http://iface.server.webservice.zkyt.com/":lljSelfcheck.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":lljSelfcheckResponse of XSD type "http://iface.server.webservice.zkyt.com/":lljSelfcheckResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":loadDownData of XSD type "http://iface.server.webservice.zkyt.com/":loadDownData.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":loadDownDataResponse of XSD type "http://iface.server.webservice.zkyt.com/":loadDownDataResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":loadDownLog of XSD type "http://iface.server.webservice.zkyt.com/":loadDownLog.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":loadDownLogResponse of XSD type "http://iface.server.webservice.zkyt.com/":loadDownLogResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":motoDbIdleData of XSD type "http://iface.server.webservice.zkyt.com/":motoDbIdleData.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":motoDbIdleDataResponse of XSD type "http://iface.server.webservice.zkyt.com/":motoDbIdleDataResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":obdResult of XSD type "http://iface.server.webservice.zkyt.com/":obdResult.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":obdResultLog of XSD type "http://iface.server.webservice.zkyt.com/":obdResultLog.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":obdResultLogResponse of XSD type "http://iface.server.webservice.zkyt.com/":obdResultLogResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":obdResultResponse of XSD type "http://iface.server.webservice.zkyt.com/":obdResultResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":pqfxySelfcheck of XSD type "http://iface.server.webservice.zkyt.com/":pqfxySelfcheck.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":pqfxySelfcheckResponse of XSD type "http://iface.server.webservice.zkyt.com/":pqfxySelfcheckResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":qyfxSelfcheck of XSD type "http://iface.server.webservice.zkyt.com/":qyfxSelfcheck.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":qyfxSelfcheckResponse of XSD type "http://iface.server.webservice.zkyt.com/":qyfxSelfcheckResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":sdsqtfxySelfcheck of XSD type "http://iface.server.webservice.zkyt.com/":sdsqtfxySelfcheck.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":sdsqtfxySelfcheckResponse of XSD type "http://iface.server.webservice.zkyt.com/":sdsqtfxySelfcheckResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":sendMessage of XSD type "http://iface.server.webservice.zkyt.com/":sendMessage.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":sendMessageResponse of XSD type "http://iface.server.webservice.zkyt.com/":sendMessageResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":sendMessage_FC of XSD type "http://iface.server.webservice.zkyt.com/":sendMessage_FC.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":vmasData of XSD type "http://iface.server.webservice.zkyt.com/":vmasData.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":vmasDataResponse of XSD type "http://iface.server.webservice.zkyt.com/":vmasDataResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":vmasLog of XSD type "http://iface.server.webservice.zkyt.com/":vmasLog.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":vmasLogResponse of XSD type "http://iface.server.webservice.zkyt.com/":vmasLogResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":wqfxyAdjust of XSD type "http://iface.server.webservice.zkyt.com/":wqfxyAdjust.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":wqfxyAdjustResponse of XSD type "http://iface.server.webservice.zkyt.com/":wqfxyAdjustResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":wqfxySelfcheck of XSD type "http://iface.server.webservice.zkyt.com/":wqfxySelfcheck.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":wqfxySelfcheckResponse of XSD type "http://iface.server.webservice.zkyt.com/":wqfxySelfcheckResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":ydjSelfcheck of XSD type "http://iface.server.webservice.zkyt.com/":ydjSelfcheck.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":ydjSelfcheckResponse of XSD type "http://iface.server.webservice.zkyt.com/":ydjSelfcheckResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":lightproofSmokeLogResponse of XSD type "http://iface.server.webservice.zkyt.com/":lightproofSmokeLogResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":doubleIdleData_FCResponse of XSD type "http://iface.server.webservice.zkyt.com/":doubleIdleDataResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":doubleIdleLog_FCResponse of XSD type "http://iface.server.webservice.zkyt.com/":doubleIdleLogResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":dyhwSelfcheck of XSD type "http://iface.server.webservice.zkyt.com/":dyhwSelfcheck.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":dyhwSelfcheckResponse of XSD type "http://iface.server.webservice.zkyt.com/":dyhwSelfcheckResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":dyhwAdjust of XSD type "http://iface.server.webservice.zkyt.com/":dyhwAdjust.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":dyhwAdjustResponse of XSD type "http://iface.server.webservice.zkyt.com/":dyhwAdjustResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":getCarInfo_FCResponse of XSD type "http://iface.server.webservice.zkyt.com/":getCarInfoResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":lightproofSmokeData_FCResponse of XSD type "http://iface.server.webservice.zkyt.com/":lightproofSmokeDataResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":sendMessage_FCResponse of XSD type "http://iface.server.webservice.zkyt.com/":sendMessageResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://iface.server.webservice.zkyt.com/                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	DeviceSwapIfaceImplServiceSoapBinding 
//gsoap ns1  service type:	DeviceSwapIface 
//gsoap ns1  service port:	http://10.111.102.91:8130/interface/services/deviceSwap 
//gsoap ns1  service namespace:	http://iface.server.webservice.zkyt.com/ 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage DeviceSwapIfaceImplService Definitions

@section DeviceSwapIfaceImplService_bindings Service Bindings

  - @ref DeviceSwapIfaceImplServiceSoapBinding

@section DeviceSwapIfaceImplService_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page DeviceSwapIfaceImplServiceSoapBinding Binding "DeviceSwapIfaceImplServiceSoapBinding"

@section DeviceSwapIfaceImplServiceSoapBinding_operations Operations of Binding "DeviceSwapIfaceImplServiceSoapBinding"

  - @ref __ns1__argChang

  - @ref __ns1__lightproofSmokeLog

  - @ref __ns1__getCarInfo

  - @ref __ns1__sendMessage

  - @ref __ns1__bgAirHC

  - @ref __ns1__doubleIdleData_USCOREFC

  - @ref __ns1__cgjLASelfcheck

  - @ref __ns1__cgjSelfcheck

  - @ref __ns1__obdResult

  - @ref __ns1__doubleIdleLog_USCOREFC

  - @ref __ns1__vmasLog

  - @ref __ns1__ydjSelfcheck

  - @ref __ns1__dyhwSelfcheck

  - @ref __ns1__loadDownLog

  - @ref __ns1__dyhwAdjust

  - @ref __ns1__obdResultLog

  - @ref __ns1__getCarInfo_USCOREFC

  - @ref __ns1__cycdyhwAdjust

  - @ref __ns1__hjcsgyqSelfcheck

  - @ref __ns1__pqfxySelfcheck

  - @ref __ns1__lightproofSmokeDataLog_USCOREFC

  - @ref __ns1__loadDownData

  - @ref __ns1__vmasData

  - @ref __ns1__motoDbIdleData

  - @ref __ns1__getSatate

  - @ref __ns1__doubleIdleData

  - @ref __ns1__doubleIdleLog

  - @ref __ns1__cgjPLHPSelfcheck

  - @ref __ns1__wqfxyAdjust

  - @ref __ns1__lightproofSmokeData_USCOREFC

  - @ref __ns1__lightproofSmokeData

  - @ref __ns1__qyfxSelfcheck

  - @ref __ns1__sdsqtfxySelfcheck

  - @ref __ns1__sendMessage_USCOREFC

  - @ref __ns1__wqfxySelfcheck

  - @ref __ns1__cgjALPSelfcheck

  - @ref __ns1__lljSelfcheck

  - @ref __ns1__cgjLSPSelfcheck

@section DeviceSwapIfaceImplServiceSoapBinding_ports Endpoints of Binding "DeviceSwapIfaceImplServiceSoapBinding"

  - http://10.111.102.91:8130/interface/services/deviceSwap

@note Use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   DeviceSwapIfaceImplServiceSoapBinding                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__argChang                                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__argChang" of service binding "DeviceSwapIfaceImplServiceSoapBinding".

  - SOAP document/literal style messaging

  - Action: "http://iface.server.webservice.zkyt.com/argChang"

  - Addressing input action: "http://iface.server.webservice.zkyt.com/argChang"

  - Addressing output action: "http://iface.server.webservice.zkyt.com/argChangResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__argChang(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__argChang*                      ns1__argChang_,
    // output parameters:
    ns1__argChangResponse              &ns1__argChangResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__argChang(
    struct soap *soap,
    // input parameters:
    ns1__argChang*                      ns1__argChang_,
    // output parameters:
    ns1__argChangResponse              &ns1__argChangResponse_
  );
@endcode

C++ proxy class (defined in soapDeviceSwapIfaceImplServiceSoapBindingProxy.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceSwapIfaceImplServiceSoapBindingService.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	argChang SOAP
//gsoap ns1  service method-style:	argChang document
//gsoap ns1  service method-encoding:	argChang literal
//gsoap ns1  service method-input-action:	argChang http://iface.server.webservice.zkyt.com/argChang
//gsoap ns1  service method-output-action:	argChang http://iface.server.webservice.zkyt.com/argChangResponse
int __ns1__argChang(
    ns1__argChang*                      ns1__argChang_,	///< Input parameter
    ns1__argChangResponse              &ns1__argChangResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__lightproofSmokeLog                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__lightproofSmokeLog" of service binding "DeviceSwapIfaceImplServiceSoapBinding".

  - SOAP document/literal style messaging

  - Action: "http://iface.server.webservice.zkyt.com/LightproofSmokeLog"

  - Addressing input action: "http://iface.server.webservice.zkyt.com/LightproofSmokeLog"

  - Addressing output action: "http://iface.server.webservice.zkyt.com/LightproofSmokeLogResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__lightproofSmokeLog(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__lightproofSmokeLog*            ns1__lightproofSmokeLog_,
    // output parameters:
    ns1__lightproofSmokeLogResponse    &ns1__lightproofSmokeLogResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__lightproofSmokeLog(
    struct soap *soap,
    // input parameters:
    ns1__lightproofSmokeLog*            ns1__lightproofSmokeLog_,
    // output parameters:
    ns1__lightproofSmokeLogResponse    &ns1__lightproofSmokeLogResponse_
  );
@endcode

C++ proxy class (defined in soapDeviceSwapIfaceImplServiceSoapBindingProxy.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceSwapIfaceImplServiceSoapBindingService.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	lightproofSmokeLog SOAP
//gsoap ns1  service method-style:	lightproofSmokeLog document
//gsoap ns1  service method-encoding:	lightproofSmokeLog literal
//gsoap ns1  service method-input-action:	lightproofSmokeLog http://iface.server.webservice.zkyt.com/LightproofSmokeLog
//gsoap ns1  service method-output-action:	lightproofSmokeLog http://iface.server.webservice.zkyt.com/LightproofSmokeLogResponse
int __ns1__lightproofSmokeLog(
    ns1__lightproofSmokeLog*            ns1__lightproofSmokeLog_,	///< Input parameter
    ns1__lightproofSmokeLogResponse    &ns1__lightproofSmokeLogResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getCarInfo                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getCarInfo" of service binding "DeviceSwapIfaceImplServiceSoapBinding".

  - SOAP document/literal style messaging

  - Action: "http://iface.server.webservice.zkyt.com/getCarInfo"

  - Addressing input action: "http://iface.server.webservice.zkyt.com/getCarInfo"

  - Addressing output action: "http://iface.server.webservice.zkyt.com/getCarInfoResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getCarInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__getCarInfo*                    ns1__getCarInfo_,
    // output parameters:
    ns1__getCarInfoResponse            &ns1__getCarInfoResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getCarInfo(
    struct soap *soap,
    // input parameters:
    ns1__getCarInfo*                    ns1__getCarInfo_,
    // output parameters:
    ns1__getCarInfoResponse            &ns1__getCarInfoResponse_
  );
@endcode

C++ proxy class (defined in soapDeviceSwapIfaceImplServiceSoapBindingProxy.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceSwapIfaceImplServiceSoapBindingService.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getCarInfo SOAP
//gsoap ns1  service method-style:	getCarInfo document
//gsoap ns1  service method-encoding:	getCarInfo literal
//gsoap ns1  service method-input-action:	getCarInfo http://iface.server.webservice.zkyt.com/getCarInfo
//gsoap ns1  service method-output-action:	getCarInfo http://iface.server.webservice.zkyt.com/getCarInfoResponse
int __ns1__getCarInfo(
    ns1__getCarInfo*                    ns1__getCarInfo_,	///< Input parameter
    ns1__getCarInfoResponse            &ns1__getCarInfoResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__sendMessage                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__sendMessage" of service binding "DeviceSwapIfaceImplServiceSoapBinding".

  - SOAP document/literal style messaging

  - Action: "http://iface.server.webservice.zkyt.com/sendMessage"

  - Addressing input action: "http://iface.server.webservice.zkyt.com/sendMessage"

  - Addressing output action: "http://iface.server.webservice.zkyt.com/sendMessageResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__sendMessage(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__sendMessage*                   ns1__sendMessage_,
    // output parameters:
    ns1__sendMessageResponse           &ns1__sendMessageResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__sendMessage(
    struct soap *soap,
    // input parameters:
    ns1__sendMessage*                   ns1__sendMessage_,
    // output parameters:
    ns1__sendMessageResponse           &ns1__sendMessageResponse_
  );
@endcode

C++ proxy class (defined in soapDeviceSwapIfaceImplServiceSoapBindingProxy.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceSwapIfaceImplServiceSoapBindingService.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	sendMessage SOAP
//gsoap ns1  service method-style:	sendMessage document
//gsoap ns1  service method-encoding:	sendMessage literal
//gsoap ns1  service method-input-action:	sendMessage http://iface.server.webservice.zkyt.com/sendMessage
//gsoap ns1  service method-output-action:	sendMessage http://iface.server.webservice.zkyt.com/sendMessageResponse
int __ns1__sendMessage(
    ns1__sendMessage*                   ns1__sendMessage_,	///< Input parameter
    ns1__sendMessageResponse           &ns1__sendMessageResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__bgAirHC                                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__bgAirHC" of service binding "DeviceSwapIfaceImplServiceSoapBinding".

  - SOAP document/literal style messaging

  - Action: "http://iface.server.webservice.zkyt.com/bgAirHC"

  - Addressing input action: "http://iface.server.webservice.zkyt.com/bgAirHC"

  - Addressing output action: "http://iface.server.webservice.zkyt.com/bgAirHCResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__bgAirHC(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__bgAirHC*                       ns1__bgAirHC_,
    // output parameters:
    ns1__bgAirHCResponse               &ns1__bgAirHCResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__bgAirHC(
    struct soap *soap,
    // input parameters:
    ns1__bgAirHC*                       ns1__bgAirHC_,
    // output parameters:
    ns1__bgAirHCResponse               &ns1__bgAirHCResponse_
  );
@endcode

C++ proxy class (defined in soapDeviceSwapIfaceImplServiceSoapBindingProxy.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceSwapIfaceImplServiceSoapBindingService.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	bgAirHC SOAP
//gsoap ns1  service method-style:	bgAirHC document
//gsoap ns1  service method-encoding:	bgAirHC literal
//gsoap ns1  service method-input-action:	bgAirHC http://iface.server.webservice.zkyt.com/bgAirHC
//gsoap ns1  service method-output-action:	bgAirHC http://iface.server.webservice.zkyt.com/bgAirHCResponse
int __ns1__bgAirHC(
    ns1__bgAirHC*                       ns1__bgAirHC_,	///< Input parameter
    ns1__bgAirHCResponse               &ns1__bgAirHCResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__doubleIdleData_USCOREFC                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__doubleIdleData_USCOREFC" of service binding "DeviceSwapIfaceImplServiceSoapBinding".

  - SOAP document/literal style messaging

  - Action: "http://iface.server.webservice.zkyt.com/doubleIdleData_FC"

  - Addressing input action: "http://iface.server.webservice.zkyt.com/doubleIdleData_FC"

  - Addressing output action: "http://iface.server.webservice.zkyt.com/doubleIdleData_FCResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__doubleIdleData_USCOREFC(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__doubleIdleData_USCOREFC*       ns1__doubleIdleData_USCOREFC_,
    // output parameters:
    ns1__doubleIdleDataResponse        &ns1__doubleIdleData_USCOREFCResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__doubleIdleData_USCOREFC(
    struct soap *soap,
    // input parameters:
    ns1__doubleIdleData_USCOREFC*       ns1__doubleIdleData_USCOREFC_,
    // output parameters:
    ns1__doubleIdleDataResponse        &ns1__doubleIdleData_USCOREFCResponse
  );
@endcode

C++ proxy class (defined in soapDeviceSwapIfaceImplServiceSoapBindingProxy.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceSwapIfaceImplServiceSoapBindingService.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	doubleIdleData_USCOREFC SOAP
//gsoap ns1  service method-style:	doubleIdleData_USCOREFC document
//gsoap ns1  service method-encoding:	doubleIdleData_USCOREFC literal
//gsoap ns1  service method-input-action:	doubleIdleData_USCOREFC http://iface.server.webservice.zkyt.com/doubleIdleData_FC
//gsoap ns1  service method-output-action:	doubleIdleData_USCOREFC http://iface.server.webservice.zkyt.com/doubleIdleData_FCResponse
int __ns1__doubleIdleData_USCOREFC(
    ns1__doubleIdleData_USCOREFC*       ns1__doubleIdleData_USCOREFC_,	///< Input parameter
    ns1__doubleIdleDataResponse        &ns1__doubleIdleData_USCOREFCResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__cgjLASelfcheck                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__cgjLASelfcheck" of service binding "DeviceSwapIfaceImplServiceSoapBinding".

  - SOAP document/literal style messaging

  - Action: "http://iface.server.webservice.zkyt.com/cgjLASelfcheck"

  - Addressing input action: "http://iface.server.webservice.zkyt.com/cgjLASelfcheck"

  - Addressing output action: "http://iface.server.webservice.zkyt.com/cgjLASelfcheckResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__cgjLASelfcheck(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__cgjLASelfcheck*                ns1__cgjLASelfcheck_,
    // output parameters:
    ns1__cgjLASelfcheckResponse        &ns1__cgjLASelfcheckResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__cgjLASelfcheck(
    struct soap *soap,
    // input parameters:
    ns1__cgjLASelfcheck*                ns1__cgjLASelfcheck_,
    // output parameters:
    ns1__cgjLASelfcheckResponse        &ns1__cgjLASelfcheckResponse_
  );
@endcode

C++ proxy class (defined in soapDeviceSwapIfaceImplServiceSoapBindingProxy.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceSwapIfaceImplServiceSoapBindingService.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	cgjLASelfcheck SOAP
//gsoap ns1  service method-style:	cgjLASelfcheck document
//gsoap ns1  service method-encoding:	cgjLASelfcheck literal
//gsoap ns1  service method-input-action:	cgjLASelfcheck http://iface.server.webservice.zkyt.com/cgjLASelfcheck
//gsoap ns1  service method-output-action:	cgjLASelfcheck http://iface.server.webservice.zkyt.com/cgjLASelfcheckResponse
int __ns1__cgjLASelfcheck(
    ns1__cgjLASelfcheck*                ns1__cgjLASelfcheck_,	///< Input parameter
    ns1__cgjLASelfcheckResponse        &ns1__cgjLASelfcheckResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__cgjSelfcheck                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__cgjSelfcheck" of service binding "DeviceSwapIfaceImplServiceSoapBinding".

  - SOAP document/literal style messaging

  - Action: "http://iface.server.webservice.zkyt.com/cgjSelfcheck"

  - Addressing input action: "http://iface.server.webservice.zkyt.com/cgjSelfcheck"

  - Addressing output action: "http://iface.server.webservice.zkyt.com/cgjSelfcheckResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__cgjSelfcheck(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__cgjSelfcheck*                  ns1__cgjSelfcheck_,
    // output parameters:
    ns1__cgjSelfcheckResponse          &ns1__cgjSelfcheckResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__cgjSelfcheck(
    struct soap *soap,
    // input parameters:
    ns1__cgjSelfcheck*                  ns1__cgjSelfcheck_,
    // output parameters:
    ns1__cgjSelfcheckResponse          &ns1__cgjSelfcheckResponse_
  );
@endcode

C++ proxy class (defined in soapDeviceSwapIfaceImplServiceSoapBindingProxy.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceSwapIfaceImplServiceSoapBindingService.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	cgjSelfcheck SOAP
//gsoap ns1  service method-style:	cgjSelfcheck document
//gsoap ns1  service method-encoding:	cgjSelfcheck literal
//gsoap ns1  service method-input-action:	cgjSelfcheck http://iface.server.webservice.zkyt.com/cgjSelfcheck
//gsoap ns1  service method-output-action:	cgjSelfcheck http://iface.server.webservice.zkyt.com/cgjSelfcheckResponse
int __ns1__cgjSelfcheck(
    ns1__cgjSelfcheck*                  ns1__cgjSelfcheck_,	///< Input parameter
    ns1__cgjSelfcheckResponse          &ns1__cgjSelfcheckResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__obdResult                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__obdResult" of service binding "DeviceSwapIfaceImplServiceSoapBinding".

  - SOAP document/literal style messaging

  - Action: "http://iface.server.webservice.zkyt.com/obdResult"

  - Addressing input action: "http://iface.server.webservice.zkyt.com/obdResult"

  - Addressing output action: "http://iface.server.webservice.zkyt.com/obdResultResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__obdResult(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__obdResult*                     ns1__obdResult_,
    // output parameters:
    ns1__obdResultResponse             &ns1__obdResultResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__obdResult(
    struct soap *soap,
    // input parameters:
    ns1__obdResult*                     ns1__obdResult_,
    // output parameters:
    ns1__obdResultResponse             &ns1__obdResultResponse_
  );
@endcode

C++ proxy class (defined in soapDeviceSwapIfaceImplServiceSoapBindingProxy.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceSwapIfaceImplServiceSoapBindingService.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	obdResult SOAP
//gsoap ns1  service method-style:	obdResult document
//gsoap ns1  service method-encoding:	obdResult literal
//gsoap ns1  service method-input-action:	obdResult http://iface.server.webservice.zkyt.com/obdResult
//gsoap ns1  service method-output-action:	obdResult http://iface.server.webservice.zkyt.com/obdResultResponse
int __ns1__obdResult(
    ns1__obdResult*                     ns1__obdResult_,	///< Input parameter
    ns1__obdResultResponse             &ns1__obdResultResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__doubleIdleLog_USCOREFC                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__doubleIdleLog_USCOREFC" of service binding "DeviceSwapIfaceImplServiceSoapBinding".

  - SOAP document/literal style messaging

  - Action: "http://iface.server.webservice.zkyt.com/doubleIdleLog_FC"

  - Addressing input action: "http://iface.server.webservice.zkyt.com/doubleIdleLog_FC"

  - Addressing output action: "http://iface.server.webservice.zkyt.com/doubleIdleLog_FCResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__doubleIdleLog_USCOREFC(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__doubleIdleLog_USCOREFC*        ns1__doubleIdleLog_USCOREFC_,
    // output parameters:
    ns1__doubleIdleLogResponse         &ns1__doubleIdleLog_USCOREFCResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__doubleIdleLog_USCOREFC(
    struct soap *soap,
    // input parameters:
    ns1__doubleIdleLog_USCOREFC*        ns1__doubleIdleLog_USCOREFC_,
    // output parameters:
    ns1__doubleIdleLogResponse         &ns1__doubleIdleLog_USCOREFCResponse
  );
@endcode

C++ proxy class (defined in soapDeviceSwapIfaceImplServiceSoapBindingProxy.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceSwapIfaceImplServiceSoapBindingService.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	doubleIdleLog_USCOREFC SOAP
//gsoap ns1  service method-style:	doubleIdleLog_USCOREFC document
//gsoap ns1  service method-encoding:	doubleIdleLog_USCOREFC literal
//gsoap ns1  service method-input-action:	doubleIdleLog_USCOREFC http://iface.server.webservice.zkyt.com/doubleIdleLog_FC
//gsoap ns1  service method-output-action:	doubleIdleLog_USCOREFC http://iface.server.webservice.zkyt.com/doubleIdleLog_FCResponse
int __ns1__doubleIdleLog_USCOREFC(
    ns1__doubleIdleLog_USCOREFC*        ns1__doubleIdleLog_USCOREFC_,	///< Input parameter
    ns1__doubleIdleLogResponse         &ns1__doubleIdleLog_USCOREFCResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__vmasLog                                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__vmasLog" of service binding "DeviceSwapIfaceImplServiceSoapBinding".

  - SOAP document/literal style messaging

  - Action: "http://iface.server.webservice.zkyt.com/vmasLog"

  - Addressing input action: "http://iface.server.webservice.zkyt.com/vmasLog"

  - Addressing output action: "http://iface.server.webservice.zkyt.com/vmasLogResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__vmasLog(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__vmasLog*                       ns1__vmasLog_,
    // output parameters:
    ns1__vmasLogResponse               &ns1__vmasLogResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__vmasLog(
    struct soap *soap,
    // input parameters:
    ns1__vmasLog*                       ns1__vmasLog_,
    // output parameters:
    ns1__vmasLogResponse               &ns1__vmasLogResponse_
  );
@endcode

C++ proxy class (defined in soapDeviceSwapIfaceImplServiceSoapBindingProxy.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceSwapIfaceImplServiceSoapBindingService.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	vmasLog SOAP
//gsoap ns1  service method-style:	vmasLog document
//gsoap ns1  service method-encoding:	vmasLog literal
//gsoap ns1  service method-input-action:	vmasLog http://iface.server.webservice.zkyt.com/vmasLog
//gsoap ns1  service method-output-action:	vmasLog http://iface.server.webservice.zkyt.com/vmasLogResponse
int __ns1__vmasLog(
    ns1__vmasLog*                       ns1__vmasLog_,	///< Input parameter
    ns1__vmasLogResponse               &ns1__vmasLogResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__ydjSelfcheck                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__ydjSelfcheck" of service binding "DeviceSwapIfaceImplServiceSoapBinding".

  - SOAP document/literal style messaging

  - Action: "http://iface.server.webservice.zkyt.com/ydjSelfcheck"

  - Addressing input action: "http://iface.server.webservice.zkyt.com/ydjSelfcheck"

  - Addressing output action: "http://iface.server.webservice.zkyt.com/ydjSelfcheckResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__ydjSelfcheck(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__ydjSelfcheck*                  ns1__ydjSelfcheck_,
    // output parameters:
    ns1__ydjSelfcheckResponse          &ns1__ydjSelfcheckResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__ydjSelfcheck(
    struct soap *soap,
    // input parameters:
    ns1__ydjSelfcheck*                  ns1__ydjSelfcheck_,
    // output parameters:
    ns1__ydjSelfcheckResponse          &ns1__ydjSelfcheckResponse_
  );
@endcode

C++ proxy class (defined in soapDeviceSwapIfaceImplServiceSoapBindingProxy.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceSwapIfaceImplServiceSoapBindingService.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	ydjSelfcheck SOAP
//gsoap ns1  service method-style:	ydjSelfcheck document
//gsoap ns1  service method-encoding:	ydjSelfcheck literal
//gsoap ns1  service method-input-action:	ydjSelfcheck http://iface.server.webservice.zkyt.com/ydjSelfcheck
//gsoap ns1  service method-output-action:	ydjSelfcheck http://iface.server.webservice.zkyt.com/ydjSelfcheckResponse
int __ns1__ydjSelfcheck(
    ns1__ydjSelfcheck*                  ns1__ydjSelfcheck_,	///< Input parameter
    ns1__ydjSelfcheckResponse          &ns1__ydjSelfcheckResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__dyhwSelfcheck                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__dyhwSelfcheck" of service binding "DeviceSwapIfaceImplServiceSoapBinding".

  - SOAP document/literal style messaging

  - Action: "http://iface.server.webservice.zkyt.com/dyhwSelfcheck"

  - Addressing input action: "http://iface.server.webservice.zkyt.com/dyhwSelfcheck"

  - Addressing output action: "http://iface.server.webservice.zkyt.com/dyhwSelfcheckResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__dyhwSelfcheck(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__dyhwSelfcheck*                 ns1__dyhwSelfcheck_,
    // output parameters:
    ns1__dyhwSelfcheckResponse         &ns1__dyhwSelfcheckResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__dyhwSelfcheck(
    struct soap *soap,
    // input parameters:
    ns1__dyhwSelfcheck*                 ns1__dyhwSelfcheck_,
    // output parameters:
    ns1__dyhwSelfcheckResponse         &ns1__dyhwSelfcheckResponse_
  );
@endcode

C++ proxy class (defined in soapDeviceSwapIfaceImplServiceSoapBindingProxy.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceSwapIfaceImplServiceSoapBindingService.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	dyhwSelfcheck SOAP
//gsoap ns1  service method-style:	dyhwSelfcheck document
//gsoap ns1  service method-encoding:	dyhwSelfcheck literal
//gsoap ns1  service method-input-action:	dyhwSelfcheck http://iface.server.webservice.zkyt.com/dyhwSelfcheck
//gsoap ns1  service method-output-action:	dyhwSelfcheck http://iface.server.webservice.zkyt.com/dyhwSelfcheckResponse
int __ns1__dyhwSelfcheck(
    ns1__dyhwSelfcheck*                 ns1__dyhwSelfcheck_,	///< Input parameter
    ns1__dyhwSelfcheckResponse         &ns1__dyhwSelfcheckResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__loadDownLog                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__loadDownLog" of service binding "DeviceSwapIfaceImplServiceSoapBinding".

  - SOAP document/literal style messaging

  - Action: "http://iface.server.webservice.zkyt.com/loadDownLog"

  - Addressing input action: "http://iface.server.webservice.zkyt.com/loadDownLog"

  - Addressing output action: "http://iface.server.webservice.zkyt.com/loadDownLogResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__loadDownLog(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__loadDownLog*                   ns1__loadDownLog_,
    // output parameters:
    ns1__loadDownLogResponse           &ns1__loadDownLogResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__loadDownLog(
    struct soap *soap,
    // input parameters:
    ns1__loadDownLog*                   ns1__loadDownLog_,
    // output parameters:
    ns1__loadDownLogResponse           &ns1__loadDownLogResponse_
  );
@endcode

C++ proxy class (defined in soapDeviceSwapIfaceImplServiceSoapBindingProxy.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceSwapIfaceImplServiceSoapBindingService.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	loadDownLog SOAP
//gsoap ns1  service method-style:	loadDownLog document
//gsoap ns1  service method-encoding:	loadDownLog literal
//gsoap ns1  service method-input-action:	loadDownLog http://iface.server.webservice.zkyt.com/loadDownLog
//gsoap ns1  service method-output-action:	loadDownLog http://iface.server.webservice.zkyt.com/loadDownLogResponse
int __ns1__loadDownLog(
    ns1__loadDownLog*                   ns1__loadDownLog_,	///< Input parameter
    ns1__loadDownLogResponse           &ns1__loadDownLogResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__dyhwAdjust                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__dyhwAdjust" of service binding "DeviceSwapIfaceImplServiceSoapBinding".

  - SOAP document/literal style messaging

  - Action: "http://iface.server.webservice.zkyt.com/dyhwAdjust"

  - Addressing input action: "http://iface.server.webservice.zkyt.com/dyhwAdjust"

  - Addressing output action: "http://iface.server.webservice.zkyt.com/dyhwAdjustResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__dyhwAdjust(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__dyhwAdjust*                    ns1__dyhwAdjust_,
    // output parameters:
    ns1__dyhwAdjustResponse            &ns1__dyhwAdjustResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__dyhwAdjust(
    struct soap *soap,
    // input parameters:
    ns1__dyhwAdjust*                    ns1__dyhwAdjust_,
    // output parameters:
    ns1__dyhwAdjustResponse            &ns1__dyhwAdjustResponse_
  );
@endcode

C++ proxy class (defined in soapDeviceSwapIfaceImplServiceSoapBindingProxy.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceSwapIfaceImplServiceSoapBindingService.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	dyhwAdjust SOAP
//gsoap ns1  service method-style:	dyhwAdjust document
//gsoap ns1  service method-encoding:	dyhwAdjust literal
//gsoap ns1  service method-input-action:	dyhwAdjust http://iface.server.webservice.zkyt.com/dyhwAdjust
//gsoap ns1  service method-output-action:	dyhwAdjust http://iface.server.webservice.zkyt.com/dyhwAdjustResponse
int __ns1__dyhwAdjust(
    ns1__dyhwAdjust*                    ns1__dyhwAdjust_,	///< Input parameter
    ns1__dyhwAdjustResponse            &ns1__dyhwAdjustResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__obdResultLog                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__obdResultLog" of service binding "DeviceSwapIfaceImplServiceSoapBinding".

  - SOAP document/literal style messaging

  - Action: "http://iface.server.webservice.zkyt.com/obdResultLog"

  - Addressing input action: "http://iface.server.webservice.zkyt.com/obdResultLog"

  - Addressing output action: "http://iface.server.webservice.zkyt.com/obdResultLogResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__obdResultLog(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__obdResultLog*                  ns1__obdResultLog_,
    // output parameters:
    ns1__obdResultLogResponse          &ns1__obdResultLogResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__obdResultLog(
    struct soap *soap,
    // input parameters:
    ns1__obdResultLog*                  ns1__obdResultLog_,
    // output parameters:
    ns1__obdResultLogResponse          &ns1__obdResultLogResponse_
  );
@endcode

C++ proxy class (defined in soapDeviceSwapIfaceImplServiceSoapBindingProxy.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceSwapIfaceImplServiceSoapBindingService.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	obdResultLog SOAP
//gsoap ns1  service method-style:	obdResultLog document
//gsoap ns1  service method-encoding:	obdResultLog literal
//gsoap ns1  service method-input-action:	obdResultLog http://iface.server.webservice.zkyt.com/obdResultLog
//gsoap ns1  service method-output-action:	obdResultLog http://iface.server.webservice.zkyt.com/obdResultLogResponse
int __ns1__obdResultLog(
    ns1__obdResultLog*                  ns1__obdResultLog_,	///< Input parameter
    ns1__obdResultLogResponse          &ns1__obdResultLogResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getCarInfo_USCOREFC                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getCarInfo_USCOREFC" of service binding "DeviceSwapIfaceImplServiceSoapBinding".

  - SOAP document/literal style messaging

  - Action: "http://iface.server.webservice.zkyt.com/getCarInfo_FC"

  - Addressing input action: "http://iface.server.webservice.zkyt.com/getCarInfo_FC"

  - Addressing output action: "http://iface.server.webservice.zkyt.com/getCarInfo_FCResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getCarInfo_USCOREFC(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__getCarInfo_USCOREFC*           ns1__getCarInfo_USCOREFC_,
    // output parameters:
    ns1__getCarInfoResponse            &ns1__getCarInfo_USCOREFCResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getCarInfo_USCOREFC(
    struct soap *soap,
    // input parameters:
    ns1__getCarInfo_USCOREFC*           ns1__getCarInfo_USCOREFC_,
    // output parameters:
    ns1__getCarInfoResponse            &ns1__getCarInfo_USCOREFCResponse
  );
@endcode

C++ proxy class (defined in soapDeviceSwapIfaceImplServiceSoapBindingProxy.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceSwapIfaceImplServiceSoapBindingService.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getCarInfo_USCOREFC SOAP
//gsoap ns1  service method-style:	getCarInfo_USCOREFC document
//gsoap ns1  service method-encoding:	getCarInfo_USCOREFC literal
//gsoap ns1  service method-input-action:	getCarInfo_USCOREFC http://iface.server.webservice.zkyt.com/getCarInfo_FC
//gsoap ns1  service method-output-action:	getCarInfo_USCOREFC http://iface.server.webservice.zkyt.com/getCarInfo_FCResponse
int __ns1__getCarInfo_USCOREFC(
    ns1__getCarInfo_USCOREFC*           ns1__getCarInfo_USCOREFC_,	///< Input parameter
    ns1__getCarInfoResponse            &ns1__getCarInfo_USCOREFCResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__cycdyhwAdjust                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__cycdyhwAdjust" of service binding "DeviceSwapIfaceImplServiceSoapBinding".

  - SOAP document/literal style messaging

  - Action: "http://iface.server.webservice.zkyt.com/cycdyhwAdjust"

  - Addressing input action: "http://iface.server.webservice.zkyt.com/cycdyhwAdjust"

  - Addressing output action: "http://iface.server.webservice.zkyt.com/cycdyhwAdjustResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__cycdyhwAdjust(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__cycdyhwAdjust*                 ns1__cycdyhwAdjust_,
    // output parameters:
    ns1__cycdyhwAdjustResponse         &ns1__cycdyhwAdjustResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__cycdyhwAdjust(
    struct soap *soap,
    // input parameters:
    ns1__cycdyhwAdjust*                 ns1__cycdyhwAdjust_,
    // output parameters:
    ns1__cycdyhwAdjustResponse         &ns1__cycdyhwAdjustResponse_
  );
@endcode

C++ proxy class (defined in soapDeviceSwapIfaceImplServiceSoapBindingProxy.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceSwapIfaceImplServiceSoapBindingService.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	cycdyhwAdjust SOAP
//gsoap ns1  service method-style:	cycdyhwAdjust document
//gsoap ns1  service method-encoding:	cycdyhwAdjust literal
//gsoap ns1  service method-input-action:	cycdyhwAdjust http://iface.server.webservice.zkyt.com/cycdyhwAdjust
//gsoap ns1  service method-output-action:	cycdyhwAdjust http://iface.server.webservice.zkyt.com/cycdyhwAdjustResponse
int __ns1__cycdyhwAdjust(
    ns1__cycdyhwAdjust*                 ns1__cycdyhwAdjust_,	///< Input parameter
    ns1__cycdyhwAdjustResponse         &ns1__cycdyhwAdjustResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__hjcsgyqSelfcheck                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__hjcsgyqSelfcheck" of service binding "DeviceSwapIfaceImplServiceSoapBinding".

  - SOAP document/literal style messaging

  - Action: "http://iface.server.webservice.zkyt.com/hjcsgyqSelfcheck"

  - Addressing input action: "http://iface.server.webservice.zkyt.com/hjcsgyqSelfcheck"

  - Addressing output action: "http://iface.server.webservice.zkyt.com/hjcsgyqSelfcheckResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__hjcsgyqSelfcheck(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__hjcsgyqSelfcheck*              ns1__hjcsgyqSelfcheck_,
    // output parameters:
    ns1__hjcsgyqSelfcheckResponse      &ns1__hjcsgyqSelfcheckResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__hjcsgyqSelfcheck(
    struct soap *soap,
    // input parameters:
    ns1__hjcsgyqSelfcheck*              ns1__hjcsgyqSelfcheck_,
    // output parameters:
    ns1__hjcsgyqSelfcheckResponse      &ns1__hjcsgyqSelfcheckResponse_
  );
@endcode

C++ proxy class (defined in soapDeviceSwapIfaceImplServiceSoapBindingProxy.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceSwapIfaceImplServiceSoapBindingService.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	hjcsgyqSelfcheck SOAP
//gsoap ns1  service method-style:	hjcsgyqSelfcheck document
//gsoap ns1  service method-encoding:	hjcsgyqSelfcheck literal
//gsoap ns1  service method-input-action:	hjcsgyqSelfcheck http://iface.server.webservice.zkyt.com/hjcsgyqSelfcheck
//gsoap ns1  service method-output-action:	hjcsgyqSelfcheck http://iface.server.webservice.zkyt.com/hjcsgyqSelfcheckResponse
int __ns1__hjcsgyqSelfcheck(
    ns1__hjcsgyqSelfcheck*              ns1__hjcsgyqSelfcheck_,	///< Input parameter
    ns1__hjcsgyqSelfcheckResponse      &ns1__hjcsgyqSelfcheckResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__pqfxySelfcheck                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__pqfxySelfcheck" of service binding "DeviceSwapIfaceImplServiceSoapBinding".

  - SOAP document/literal style messaging

  - Action: "http://iface.server.webservice.zkyt.com/pqfxySelfcheck"

  - Addressing input action: "http://iface.server.webservice.zkyt.com/pqfxySelfcheck"

  - Addressing output action: "http://iface.server.webservice.zkyt.com/pqfxySelfcheckResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__pqfxySelfcheck(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__pqfxySelfcheck*                ns1__pqfxySelfcheck_,
    // output parameters:
    ns1__pqfxySelfcheckResponse        &ns1__pqfxySelfcheckResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__pqfxySelfcheck(
    struct soap *soap,
    // input parameters:
    ns1__pqfxySelfcheck*                ns1__pqfxySelfcheck_,
    // output parameters:
    ns1__pqfxySelfcheckResponse        &ns1__pqfxySelfcheckResponse_
  );
@endcode

C++ proxy class (defined in soapDeviceSwapIfaceImplServiceSoapBindingProxy.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceSwapIfaceImplServiceSoapBindingService.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	pqfxySelfcheck SOAP
//gsoap ns1  service method-style:	pqfxySelfcheck document
//gsoap ns1  service method-encoding:	pqfxySelfcheck literal
//gsoap ns1  service method-input-action:	pqfxySelfcheck http://iface.server.webservice.zkyt.com/pqfxySelfcheck
//gsoap ns1  service method-output-action:	pqfxySelfcheck http://iface.server.webservice.zkyt.com/pqfxySelfcheckResponse
int __ns1__pqfxySelfcheck(
    ns1__pqfxySelfcheck*                ns1__pqfxySelfcheck_,	///< Input parameter
    ns1__pqfxySelfcheckResponse        &ns1__pqfxySelfcheckResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__lightproofSmokeDataLog_USCOREFC                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__lightproofSmokeDataLog_USCOREFC" of service binding "DeviceSwapIfaceImplServiceSoapBinding".

  - SOAP document/literal style messaging

  - Action: "http://iface.server.webservice.zkyt.com/lightproofSmokeDataLog_FC"

  - Addressing input action: "http://iface.server.webservice.zkyt.com/lightproofSmokeDataLog_FC"

  - Addressing output action: "http://iface.server.webservice.zkyt.com/lightproofSmokeDataLog_FCResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__lightproofSmokeDataLog_USCOREFC(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__lightproofSmokeDataLog_USCOREFC* ns1__lightproofSmokeDataLog_USCOREFC_,
    // output parameters:
    ns1__lightproofSmokeDataLog_USCOREFCResponse&ns1__lightproofSmokeDataLog_USCOREFCResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__lightproofSmokeDataLog_USCOREFC(
    struct soap *soap,
    // input parameters:
    ns1__lightproofSmokeDataLog_USCOREFC* ns1__lightproofSmokeDataLog_USCOREFC_,
    // output parameters:
    ns1__lightproofSmokeDataLog_USCOREFCResponse&ns1__lightproofSmokeDataLog_USCOREFCResponse_
  );
@endcode

C++ proxy class (defined in soapDeviceSwapIfaceImplServiceSoapBindingProxy.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceSwapIfaceImplServiceSoapBindingService.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	lightproofSmokeDataLog_USCOREFC SOAP
//gsoap ns1  service method-style:	lightproofSmokeDataLog_USCOREFC document
//gsoap ns1  service method-encoding:	lightproofSmokeDataLog_USCOREFC literal
//gsoap ns1  service method-input-action:	lightproofSmokeDataLog_USCOREFC http://iface.server.webservice.zkyt.com/lightproofSmokeDataLog_FC
//gsoap ns1  service method-output-action:	lightproofSmokeDataLog_USCOREFC http://iface.server.webservice.zkyt.com/lightproofSmokeDataLog_FCResponse
int __ns1__lightproofSmokeDataLog_USCOREFC(
    ns1__lightproofSmokeDataLog_USCOREFC* ns1__lightproofSmokeDataLog_USCOREFC_,	///< Input parameter
    ns1__lightproofSmokeDataLog_USCOREFCResponse&ns1__lightproofSmokeDataLog_USCOREFCResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__loadDownData                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__loadDownData" of service binding "DeviceSwapIfaceImplServiceSoapBinding".

  - SOAP document/literal style messaging

  - Action: "http://iface.server.webservice.zkyt.com/loadDownData"

  - Addressing input action: "http://iface.server.webservice.zkyt.com/loadDownData"

  - Addressing output action: "http://iface.server.webservice.zkyt.com/loadDownDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__loadDownData(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__loadDownData*                  ns1__loadDownData_,
    // output parameters:
    ns1__loadDownDataResponse          &ns1__loadDownDataResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__loadDownData(
    struct soap *soap,
    // input parameters:
    ns1__loadDownData*                  ns1__loadDownData_,
    // output parameters:
    ns1__loadDownDataResponse          &ns1__loadDownDataResponse_
  );
@endcode

C++ proxy class (defined in soapDeviceSwapIfaceImplServiceSoapBindingProxy.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceSwapIfaceImplServiceSoapBindingService.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	loadDownData SOAP
//gsoap ns1  service method-style:	loadDownData document
//gsoap ns1  service method-encoding:	loadDownData literal
//gsoap ns1  service method-input-action:	loadDownData http://iface.server.webservice.zkyt.com/loadDownData
//gsoap ns1  service method-output-action:	loadDownData http://iface.server.webservice.zkyt.com/loadDownDataResponse
int __ns1__loadDownData(
    ns1__loadDownData*                  ns1__loadDownData_,	///< Input parameter
    ns1__loadDownDataResponse          &ns1__loadDownDataResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__vmasData                                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__vmasData" of service binding "DeviceSwapIfaceImplServiceSoapBinding".

  - SOAP document/literal style messaging

  - Action: "http://iface.server.webservice.zkyt.com/vmasData"

  - Addressing input action: "http://iface.server.webservice.zkyt.com/vmasData"

  - Addressing output action: "http://iface.server.webservice.zkyt.com/vmasDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__vmasData(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__vmasData*                      ns1__vmasData_,
    // output parameters:
    ns1__vmasDataResponse              &ns1__vmasDataResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__vmasData(
    struct soap *soap,
    // input parameters:
    ns1__vmasData*                      ns1__vmasData_,
    // output parameters:
    ns1__vmasDataResponse              &ns1__vmasDataResponse_
  );
@endcode

C++ proxy class (defined in soapDeviceSwapIfaceImplServiceSoapBindingProxy.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceSwapIfaceImplServiceSoapBindingService.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	vmasData SOAP
//gsoap ns1  service method-style:	vmasData document
//gsoap ns1  service method-encoding:	vmasData literal
//gsoap ns1  service method-input-action:	vmasData http://iface.server.webservice.zkyt.com/vmasData
//gsoap ns1  service method-output-action:	vmasData http://iface.server.webservice.zkyt.com/vmasDataResponse
int __ns1__vmasData(
    ns1__vmasData*                      ns1__vmasData_,	///< Input parameter
    ns1__vmasDataResponse              &ns1__vmasDataResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__motoDbIdleData                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__motoDbIdleData" of service binding "DeviceSwapIfaceImplServiceSoapBinding".

  - SOAP document/literal style messaging

  - Action: "http://iface.server.webservice.zkyt.com/motoDbIdleData"

  - Addressing input action: "http://iface.server.webservice.zkyt.com/motoDbIdleData"

  - Addressing output action: "http://iface.server.webservice.zkyt.com/motoDbIdleDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__motoDbIdleData(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__motoDbIdleData*                ns1__motoDbIdleData_,
    // output parameters:
    ns1__motoDbIdleDataResponse        &ns1__motoDbIdleDataResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__motoDbIdleData(
    struct soap *soap,
    // input parameters:
    ns1__motoDbIdleData*                ns1__motoDbIdleData_,
    // output parameters:
    ns1__motoDbIdleDataResponse        &ns1__motoDbIdleDataResponse_
  );
@endcode

C++ proxy class (defined in soapDeviceSwapIfaceImplServiceSoapBindingProxy.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceSwapIfaceImplServiceSoapBindingService.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	motoDbIdleData SOAP
//gsoap ns1  service method-style:	motoDbIdleData document
//gsoap ns1  service method-encoding:	motoDbIdleData literal
//gsoap ns1  service method-input-action:	motoDbIdleData http://iface.server.webservice.zkyt.com/motoDbIdleData
//gsoap ns1  service method-output-action:	motoDbIdleData http://iface.server.webservice.zkyt.com/motoDbIdleDataResponse
int __ns1__motoDbIdleData(
    ns1__motoDbIdleData*                ns1__motoDbIdleData_,	///< Input parameter
    ns1__motoDbIdleDataResponse        &ns1__motoDbIdleDataResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getSatate                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getSatate" of service binding "DeviceSwapIfaceImplServiceSoapBinding".

  - SOAP document/literal style messaging

  - Action: "http://iface.server.webservice.zkyt.com/getSatate"

  - Addressing input action: "http://iface.server.webservice.zkyt.com/getSatate"

  - Addressing output action: "http://iface.server.webservice.zkyt.com/getSatateResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getSatate(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__getSatate*                     ns1__getSatate_,
    // output parameters:
    ns1__getSatateResponse             &ns1__getSatateResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getSatate(
    struct soap *soap,
    // input parameters:
    ns1__getSatate*                     ns1__getSatate_,
    // output parameters:
    ns1__getSatateResponse             &ns1__getSatateResponse_
  );
@endcode

C++ proxy class (defined in soapDeviceSwapIfaceImplServiceSoapBindingProxy.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceSwapIfaceImplServiceSoapBindingService.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getSatate SOAP
//gsoap ns1  service method-style:	getSatate document
//gsoap ns1  service method-encoding:	getSatate literal
//gsoap ns1  service method-input-action:	getSatate http://iface.server.webservice.zkyt.com/getSatate
//gsoap ns1  service method-output-action:	getSatate http://iface.server.webservice.zkyt.com/getSatateResponse
int __ns1__getSatate(
    ns1__getSatate*                     ns1__getSatate_,	///< Input parameter
    ns1__getSatateResponse             &ns1__getSatateResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__doubleIdleData                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__doubleIdleData" of service binding "DeviceSwapIfaceImplServiceSoapBinding".

  - SOAP document/literal style messaging

  - Action: "http://iface.server.webservice.zkyt.com/doubleIdleData"

  - Addressing input action: "http://iface.server.webservice.zkyt.com/doubleIdleData"

  - Addressing output action: "http://iface.server.webservice.zkyt.com/doubleIdleDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__doubleIdleData(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__doubleIdleData*                ns1__doubleIdleData_,
    // output parameters:
    ns1__doubleIdleDataResponse        &ns1__doubleIdleDataResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__doubleIdleData(
    struct soap *soap,
    // input parameters:
    ns1__doubleIdleData*                ns1__doubleIdleData_,
    // output parameters:
    ns1__doubleIdleDataResponse        &ns1__doubleIdleDataResponse_
  );
@endcode

C++ proxy class (defined in soapDeviceSwapIfaceImplServiceSoapBindingProxy.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceSwapIfaceImplServiceSoapBindingService.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	doubleIdleData SOAP
//gsoap ns1  service method-style:	doubleIdleData document
//gsoap ns1  service method-encoding:	doubleIdleData literal
//gsoap ns1  service method-input-action:	doubleIdleData http://iface.server.webservice.zkyt.com/doubleIdleData
//gsoap ns1  service method-output-action:	doubleIdleData http://iface.server.webservice.zkyt.com/doubleIdleDataResponse
int __ns1__doubleIdleData(
    ns1__doubleIdleData*                ns1__doubleIdleData_,	///< Input parameter
    ns1__doubleIdleDataResponse        &ns1__doubleIdleDataResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__doubleIdleLog                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__doubleIdleLog" of service binding "DeviceSwapIfaceImplServiceSoapBinding".

  - SOAP document/literal style messaging

  - Action: "http://iface.server.webservice.zkyt.com/doubleIdleLog"

  - Addressing input action: "http://iface.server.webservice.zkyt.com/doubleIdleLog"

  - Addressing output action: "http://iface.server.webservice.zkyt.com/doubleIdleLogResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__doubleIdleLog(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__doubleIdleLog*                 ns1__doubleIdleLog_,
    // output parameters:
    ns1__doubleIdleLogResponse         &ns1__doubleIdleLogResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__doubleIdleLog(
    struct soap *soap,
    // input parameters:
    ns1__doubleIdleLog*                 ns1__doubleIdleLog_,
    // output parameters:
    ns1__doubleIdleLogResponse         &ns1__doubleIdleLogResponse_
  );
@endcode

C++ proxy class (defined in soapDeviceSwapIfaceImplServiceSoapBindingProxy.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceSwapIfaceImplServiceSoapBindingService.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	doubleIdleLog SOAP
//gsoap ns1  service method-style:	doubleIdleLog document
//gsoap ns1  service method-encoding:	doubleIdleLog literal
//gsoap ns1  service method-input-action:	doubleIdleLog http://iface.server.webservice.zkyt.com/doubleIdleLog
//gsoap ns1  service method-output-action:	doubleIdleLog http://iface.server.webservice.zkyt.com/doubleIdleLogResponse
int __ns1__doubleIdleLog(
    ns1__doubleIdleLog*                 ns1__doubleIdleLog_,	///< Input parameter
    ns1__doubleIdleLogResponse         &ns1__doubleIdleLogResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__cgjPLHPSelfcheck                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__cgjPLHPSelfcheck" of service binding "DeviceSwapIfaceImplServiceSoapBinding".

  - SOAP document/literal style messaging

  - Action: "http://iface.server.webservice.zkyt.com/cgjPLHPSelfcheck"

  - Addressing input action: "http://iface.server.webservice.zkyt.com/cgjPLHPSelfcheck"

  - Addressing output action: "http://iface.server.webservice.zkyt.com/cgjPLHPSelfcheckResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__cgjPLHPSelfcheck(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__cgjPLHPSelfcheck*              ns1__cgjPLHPSelfcheck_,
    // output parameters:
    ns1__cgjPLHPSelfcheckResponse      &ns1__cgjPLHPSelfcheckResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__cgjPLHPSelfcheck(
    struct soap *soap,
    // input parameters:
    ns1__cgjPLHPSelfcheck*              ns1__cgjPLHPSelfcheck_,
    // output parameters:
    ns1__cgjPLHPSelfcheckResponse      &ns1__cgjPLHPSelfcheckResponse_
  );
@endcode

C++ proxy class (defined in soapDeviceSwapIfaceImplServiceSoapBindingProxy.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceSwapIfaceImplServiceSoapBindingService.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	cgjPLHPSelfcheck SOAP
//gsoap ns1  service method-style:	cgjPLHPSelfcheck document
//gsoap ns1  service method-encoding:	cgjPLHPSelfcheck literal
//gsoap ns1  service method-input-action:	cgjPLHPSelfcheck http://iface.server.webservice.zkyt.com/cgjPLHPSelfcheck
//gsoap ns1  service method-output-action:	cgjPLHPSelfcheck http://iface.server.webservice.zkyt.com/cgjPLHPSelfcheckResponse
int __ns1__cgjPLHPSelfcheck(
    ns1__cgjPLHPSelfcheck*              ns1__cgjPLHPSelfcheck_,	///< Input parameter
    ns1__cgjPLHPSelfcheckResponse      &ns1__cgjPLHPSelfcheckResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__wqfxyAdjust                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__wqfxyAdjust" of service binding "DeviceSwapIfaceImplServiceSoapBinding".

  - SOAP document/literal style messaging

  - Action: "http://iface.server.webservice.zkyt.com/wqfxyAdjust"

  - Addressing input action: "http://iface.server.webservice.zkyt.com/wqfxyAdjust"

  - Addressing output action: "http://iface.server.webservice.zkyt.com/wqfxyAdjustResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__wqfxyAdjust(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__wqfxyAdjust*                   ns1__wqfxyAdjust_,
    // output parameters:
    ns1__wqfxyAdjustResponse           &ns1__wqfxyAdjustResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__wqfxyAdjust(
    struct soap *soap,
    // input parameters:
    ns1__wqfxyAdjust*                   ns1__wqfxyAdjust_,
    // output parameters:
    ns1__wqfxyAdjustResponse           &ns1__wqfxyAdjustResponse_
  );
@endcode

C++ proxy class (defined in soapDeviceSwapIfaceImplServiceSoapBindingProxy.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceSwapIfaceImplServiceSoapBindingService.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	wqfxyAdjust SOAP
//gsoap ns1  service method-style:	wqfxyAdjust document
//gsoap ns1  service method-encoding:	wqfxyAdjust literal
//gsoap ns1  service method-input-action:	wqfxyAdjust http://iface.server.webservice.zkyt.com/wqfxyAdjust
//gsoap ns1  service method-output-action:	wqfxyAdjust http://iface.server.webservice.zkyt.com/wqfxyAdjustResponse
int __ns1__wqfxyAdjust(
    ns1__wqfxyAdjust*                   ns1__wqfxyAdjust_,	///< Input parameter
    ns1__wqfxyAdjustResponse           &ns1__wqfxyAdjustResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__lightproofSmokeData_USCOREFC                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__lightproofSmokeData_USCOREFC" of service binding "DeviceSwapIfaceImplServiceSoapBinding".

  - SOAP document/literal style messaging

  - Action: "http://iface.server.webservice.zkyt.com/lightproofSmokeData_FC"

  - Addressing input action: "http://iface.server.webservice.zkyt.com/lightproofSmokeData_FC"

  - Addressing output action: "http://iface.server.webservice.zkyt.com/lightproofSmokeData_FCResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__lightproofSmokeData_USCOREFC(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__lightproofSmokeData_USCOREFC*  ns1__lightproofSmokeData_USCOREFC_,
    // output parameters:
    ns1__lightproofSmokeDataResponse   &ns1__lightproofSmokeData_USCOREFCResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__lightproofSmokeData_USCOREFC(
    struct soap *soap,
    // input parameters:
    ns1__lightproofSmokeData_USCOREFC*  ns1__lightproofSmokeData_USCOREFC_,
    // output parameters:
    ns1__lightproofSmokeDataResponse   &ns1__lightproofSmokeData_USCOREFCResponse
  );
@endcode

C++ proxy class (defined in soapDeviceSwapIfaceImplServiceSoapBindingProxy.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceSwapIfaceImplServiceSoapBindingService.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	lightproofSmokeData_USCOREFC SOAP
//gsoap ns1  service method-style:	lightproofSmokeData_USCOREFC document
//gsoap ns1  service method-encoding:	lightproofSmokeData_USCOREFC literal
//gsoap ns1  service method-input-action:	lightproofSmokeData_USCOREFC http://iface.server.webservice.zkyt.com/lightproofSmokeData_FC
//gsoap ns1  service method-output-action:	lightproofSmokeData_USCOREFC http://iface.server.webservice.zkyt.com/lightproofSmokeData_FCResponse
int __ns1__lightproofSmokeData_USCOREFC(
    ns1__lightproofSmokeData_USCOREFC*  ns1__lightproofSmokeData_USCOREFC_,	///< Input parameter
    ns1__lightproofSmokeDataResponse   &ns1__lightproofSmokeData_USCOREFCResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__lightproofSmokeData                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__lightproofSmokeData" of service binding "DeviceSwapIfaceImplServiceSoapBinding".

  - SOAP document/literal style messaging

  - Action: "http://iface.server.webservice.zkyt.com/lightproofSmokeData"

  - Addressing input action: "http://iface.server.webservice.zkyt.com/lightproofSmokeData"

  - Addressing output action: "http://iface.server.webservice.zkyt.com/lightproofSmokeDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__lightproofSmokeData(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__lightproofSmokeData*           ns1__lightproofSmokeData_,
    // output parameters:
    ns1__lightproofSmokeDataResponse   &ns1__lightproofSmokeDataResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__lightproofSmokeData(
    struct soap *soap,
    // input parameters:
    ns1__lightproofSmokeData*           ns1__lightproofSmokeData_,
    // output parameters:
    ns1__lightproofSmokeDataResponse   &ns1__lightproofSmokeDataResponse_
  );
@endcode

C++ proxy class (defined in soapDeviceSwapIfaceImplServiceSoapBindingProxy.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceSwapIfaceImplServiceSoapBindingService.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	lightproofSmokeData SOAP
//gsoap ns1  service method-style:	lightproofSmokeData document
//gsoap ns1  service method-encoding:	lightproofSmokeData literal
//gsoap ns1  service method-input-action:	lightproofSmokeData http://iface.server.webservice.zkyt.com/lightproofSmokeData
//gsoap ns1  service method-output-action:	lightproofSmokeData http://iface.server.webservice.zkyt.com/lightproofSmokeDataResponse
int __ns1__lightproofSmokeData(
    ns1__lightproofSmokeData*           ns1__lightproofSmokeData_,	///< Input parameter
    ns1__lightproofSmokeDataResponse   &ns1__lightproofSmokeDataResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__qyfxSelfcheck                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__qyfxSelfcheck" of service binding "DeviceSwapIfaceImplServiceSoapBinding".

  - SOAP document/literal style messaging

  - Action: "http://iface.server.webservice.zkyt.com/qyfxSelfcheck"

  - Addressing input action: "http://iface.server.webservice.zkyt.com/qyfxSelfcheck"

  - Addressing output action: "http://iface.server.webservice.zkyt.com/qyfxSelfcheckResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__qyfxSelfcheck(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__qyfxSelfcheck*                 ns1__qyfxSelfcheck_,
    // output parameters:
    ns1__qyfxSelfcheckResponse         &ns1__qyfxSelfcheckResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__qyfxSelfcheck(
    struct soap *soap,
    // input parameters:
    ns1__qyfxSelfcheck*                 ns1__qyfxSelfcheck_,
    // output parameters:
    ns1__qyfxSelfcheckResponse         &ns1__qyfxSelfcheckResponse_
  );
@endcode

C++ proxy class (defined in soapDeviceSwapIfaceImplServiceSoapBindingProxy.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceSwapIfaceImplServiceSoapBindingService.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	qyfxSelfcheck SOAP
//gsoap ns1  service method-style:	qyfxSelfcheck document
//gsoap ns1  service method-encoding:	qyfxSelfcheck literal
//gsoap ns1  service method-input-action:	qyfxSelfcheck http://iface.server.webservice.zkyt.com/qyfxSelfcheck
//gsoap ns1  service method-output-action:	qyfxSelfcheck http://iface.server.webservice.zkyt.com/qyfxSelfcheckResponse
int __ns1__qyfxSelfcheck(
    ns1__qyfxSelfcheck*                 ns1__qyfxSelfcheck_,	///< Input parameter
    ns1__qyfxSelfcheckResponse         &ns1__qyfxSelfcheckResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__sdsqtfxySelfcheck                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__sdsqtfxySelfcheck" of service binding "DeviceSwapIfaceImplServiceSoapBinding".

  - SOAP document/literal style messaging

  - Action: "http://iface.server.webservice.zkyt.com/sdsqtfxySelfcheck"

  - Addressing input action: "http://iface.server.webservice.zkyt.com/sdsqtfxySelfcheck"

  - Addressing output action: "http://iface.server.webservice.zkyt.com/sdsqtfxySelfcheckResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__sdsqtfxySelfcheck(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__sdsqtfxySelfcheck*             ns1__sdsqtfxySelfcheck_,
    // output parameters:
    ns1__sdsqtfxySelfcheckResponse     &ns1__sdsqtfxySelfcheckResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__sdsqtfxySelfcheck(
    struct soap *soap,
    // input parameters:
    ns1__sdsqtfxySelfcheck*             ns1__sdsqtfxySelfcheck_,
    // output parameters:
    ns1__sdsqtfxySelfcheckResponse     &ns1__sdsqtfxySelfcheckResponse_
  );
@endcode

C++ proxy class (defined in soapDeviceSwapIfaceImplServiceSoapBindingProxy.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceSwapIfaceImplServiceSoapBindingService.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	sdsqtfxySelfcheck SOAP
//gsoap ns1  service method-style:	sdsqtfxySelfcheck document
//gsoap ns1  service method-encoding:	sdsqtfxySelfcheck literal
//gsoap ns1  service method-input-action:	sdsqtfxySelfcheck http://iface.server.webservice.zkyt.com/sdsqtfxySelfcheck
//gsoap ns1  service method-output-action:	sdsqtfxySelfcheck http://iface.server.webservice.zkyt.com/sdsqtfxySelfcheckResponse
int __ns1__sdsqtfxySelfcheck(
    ns1__sdsqtfxySelfcheck*             ns1__sdsqtfxySelfcheck_,	///< Input parameter
    ns1__sdsqtfxySelfcheckResponse     &ns1__sdsqtfxySelfcheckResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__sendMessage_USCOREFC                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__sendMessage_USCOREFC" of service binding "DeviceSwapIfaceImplServiceSoapBinding".

  - SOAP document/literal style messaging

  - Action: "http://iface.server.webservice.zkyt.com/sendMessage_FC"

  - Addressing input action: "http://iface.server.webservice.zkyt.com/sendMessage_FC"

  - Addressing output action: "http://iface.server.webservice.zkyt.com/sendMessage_FCResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__sendMessage_USCOREFC(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__sendMessage_USCOREFC*          ns1__sendMessage_USCOREFC_,
    // output parameters:
    ns1__sendMessageResponse           &ns1__sendMessage_USCOREFCResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__sendMessage_USCOREFC(
    struct soap *soap,
    // input parameters:
    ns1__sendMessage_USCOREFC*          ns1__sendMessage_USCOREFC_,
    // output parameters:
    ns1__sendMessageResponse           &ns1__sendMessage_USCOREFCResponse
  );
@endcode

C++ proxy class (defined in soapDeviceSwapIfaceImplServiceSoapBindingProxy.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceSwapIfaceImplServiceSoapBindingService.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	sendMessage_USCOREFC SOAP
//gsoap ns1  service method-style:	sendMessage_USCOREFC document
//gsoap ns1  service method-encoding:	sendMessage_USCOREFC literal
//gsoap ns1  service method-input-action:	sendMessage_USCOREFC http://iface.server.webservice.zkyt.com/sendMessage_FC
//gsoap ns1  service method-output-action:	sendMessage_USCOREFC http://iface.server.webservice.zkyt.com/sendMessage_FCResponse
int __ns1__sendMessage_USCOREFC(
    ns1__sendMessage_USCOREFC*          ns1__sendMessage_USCOREFC_,	///< Input parameter
    ns1__sendMessageResponse           &ns1__sendMessage_USCOREFCResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__wqfxySelfcheck                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__wqfxySelfcheck" of service binding "DeviceSwapIfaceImplServiceSoapBinding".

  - SOAP document/literal style messaging

  - Action: "http://iface.server.webservice.zkyt.com/wqfxySelfcheck"

  - Addressing input action: "http://iface.server.webservice.zkyt.com/wqfxySelfcheck"

  - Addressing output action: "http://iface.server.webservice.zkyt.com/wqfxySelfcheckResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__wqfxySelfcheck(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__wqfxySelfcheck*                ns1__wqfxySelfcheck_,
    // output parameters:
    ns1__wqfxySelfcheckResponse        &ns1__wqfxySelfcheckResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__wqfxySelfcheck(
    struct soap *soap,
    // input parameters:
    ns1__wqfxySelfcheck*                ns1__wqfxySelfcheck_,
    // output parameters:
    ns1__wqfxySelfcheckResponse        &ns1__wqfxySelfcheckResponse_
  );
@endcode

C++ proxy class (defined in soapDeviceSwapIfaceImplServiceSoapBindingProxy.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceSwapIfaceImplServiceSoapBindingService.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	wqfxySelfcheck SOAP
//gsoap ns1  service method-style:	wqfxySelfcheck document
//gsoap ns1  service method-encoding:	wqfxySelfcheck literal
//gsoap ns1  service method-input-action:	wqfxySelfcheck http://iface.server.webservice.zkyt.com/wqfxySelfcheck
//gsoap ns1  service method-output-action:	wqfxySelfcheck http://iface.server.webservice.zkyt.com/wqfxySelfcheckResponse
int __ns1__wqfxySelfcheck(
    ns1__wqfxySelfcheck*                ns1__wqfxySelfcheck_,	///< Input parameter
    ns1__wqfxySelfcheckResponse        &ns1__wqfxySelfcheckResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__cgjALPSelfcheck                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__cgjALPSelfcheck" of service binding "DeviceSwapIfaceImplServiceSoapBinding".

  - SOAP document/literal style messaging

  - Action: "http://iface.server.webservice.zkyt.com/cgjALPSelfcheck"

  - Addressing input action: "http://iface.server.webservice.zkyt.com/cgjALPSelfcheck"

  - Addressing output action: "http://iface.server.webservice.zkyt.com/cgjALPSelfcheckResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__cgjALPSelfcheck(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__cgjALPSelfcheck*               ns1__cgjALPSelfcheck_,
    // output parameters:
    ns1__cgjALPSelfcheckResponse       &ns1__cgjALPSelfcheckResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__cgjALPSelfcheck(
    struct soap *soap,
    // input parameters:
    ns1__cgjALPSelfcheck*               ns1__cgjALPSelfcheck_,
    // output parameters:
    ns1__cgjALPSelfcheckResponse       &ns1__cgjALPSelfcheckResponse_
  );
@endcode

C++ proxy class (defined in soapDeviceSwapIfaceImplServiceSoapBindingProxy.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceSwapIfaceImplServiceSoapBindingService.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	cgjALPSelfcheck SOAP
//gsoap ns1  service method-style:	cgjALPSelfcheck document
//gsoap ns1  service method-encoding:	cgjALPSelfcheck literal
//gsoap ns1  service method-input-action:	cgjALPSelfcheck http://iface.server.webservice.zkyt.com/cgjALPSelfcheck
//gsoap ns1  service method-output-action:	cgjALPSelfcheck http://iface.server.webservice.zkyt.com/cgjALPSelfcheckResponse
int __ns1__cgjALPSelfcheck(
    ns1__cgjALPSelfcheck*               ns1__cgjALPSelfcheck_,	///< Input parameter
    ns1__cgjALPSelfcheckResponse       &ns1__cgjALPSelfcheckResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__lljSelfcheck                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__lljSelfcheck" of service binding "DeviceSwapIfaceImplServiceSoapBinding".

  - SOAP document/literal style messaging

  - Action: "http://iface.server.webservice.zkyt.com/lljSelfcheck"

  - Addressing input action: "http://iface.server.webservice.zkyt.com/lljSelfcheck"

  - Addressing output action: "http://iface.server.webservice.zkyt.com/lljSelfcheckResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__lljSelfcheck(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__lljSelfcheck*                  ns1__lljSelfcheck_,
    // output parameters:
    ns1__lljSelfcheckResponse          &ns1__lljSelfcheckResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__lljSelfcheck(
    struct soap *soap,
    // input parameters:
    ns1__lljSelfcheck*                  ns1__lljSelfcheck_,
    // output parameters:
    ns1__lljSelfcheckResponse          &ns1__lljSelfcheckResponse_
  );
@endcode

C++ proxy class (defined in soapDeviceSwapIfaceImplServiceSoapBindingProxy.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceSwapIfaceImplServiceSoapBindingService.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	lljSelfcheck SOAP
//gsoap ns1  service method-style:	lljSelfcheck document
//gsoap ns1  service method-encoding:	lljSelfcheck literal
//gsoap ns1  service method-input-action:	lljSelfcheck http://iface.server.webservice.zkyt.com/lljSelfcheck
//gsoap ns1  service method-output-action:	lljSelfcheck http://iface.server.webservice.zkyt.com/lljSelfcheckResponse
int __ns1__lljSelfcheck(
    ns1__lljSelfcheck*                  ns1__lljSelfcheck_,	///< Input parameter
    ns1__lljSelfcheckResponse          &ns1__lljSelfcheckResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__cgjLSPSelfcheck                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__cgjLSPSelfcheck" of service binding "DeviceSwapIfaceImplServiceSoapBinding".

  - SOAP document/literal style messaging

  - Action: "http://iface.server.webservice.zkyt.com/cgjLSPSelfcheck"

  - Addressing input action: "http://iface.server.webservice.zkyt.com/cgjLSPSelfcheck"

  - Addressing output action: "http://iface.server.webservice.zkyt.com/cgjLSPSelfcheckResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__cgjLSPSelfcheck(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__cgjLSPSelfcheck*               ns1__cgjLSPSelfcheck_,
    // output parameters:
    ns1__cgjLSPSelfcheckResponse       &ns1__cgjLSPSelfcheckResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__cgjLSPSelfcheck(
    struct soap *soap,
    // input parameters:
    ns1__cgjLSPSelfcheck*               ns1__cgjLSPSelfcheck_,
    // output parameters:
    ns1__cgjLSPSelfcheckResponse       &ns1__cgjLSPSelfcheckResponse_
  );
@endcode

C++ proxy class (defined in soapDeviceSwapIfaceImplServiceSoapBindingProxy.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceSwapIfaceImplServiceSoapBindingService.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	cgjLSPSelfcheck SOAP
//gsoap ns1  service method-style:	cgjLSPSelfcheck document
//gsoap ns1  service method-encoding:	cgjLSPSelfcheck literal
//gsoap ns1  service method-input-action:	cgjLSPSelfcheck http://iface.server.webservice.zkyt.com/cgjLSPSelfcheck
//gsoap ns1  service method-output-action:	cgjLSPSelfcheck http://iface.server.webservice.zkyt.com/cgjLSPSelfcheckResponse
int __ns1__cgjLSPSelfcheck(
    ns1__cgjLSPSelfcheck*               ns1__cgjLSPSelfcheck_,	///< Input parameter
    ns1__cgjLSPSelfcheckResponse       &ns1__cgjLSPSelfcheckResponse_	///< Output parameter
);

/**

@page DeviceSwapIfaceImplServiceSoapBinding Binding "DeviceSwapIfaceImplServiceSoapBinding"

@section DeviceSwapIfaceImplServiceSoapBinding_policy_enablers Policy Enablers of Binding "DeviceSwapIfaceImplServiceSoapBinding"

Based on policies, this service imports

  - WS-Policy reminders and enablers:
    - WS-Addressing 1.0 (2005/08, accepts 2004/08):
	@code
	#import "wsa5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-Addressing (2004/08):
	@code
	#import "wsa.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-ReliableMessaging 1.0:
	@code
	#import "wsrm5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-ReliableMessaging 1.1:
	@code
	#import "wsrm.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.0 (accepts 1.1):
	@code
	#import "wsse.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.1 (accepts 1.0):
	@code
	#import "wsse11.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - HTTP Digest Authentication:
	@code
	#include "plugin/httpda.h"
	soap_register_plugin(soap, soap_http_da); // register the HTTP DA plugin in your code
	// See the user guide gsoap/doc/httpda/html/index.html
	@endcode
*/


/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read in XML and deserialized from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

Data can be serialized in XML and written to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section ns1 Top-level root elements of schema "http://iface.server.webservice.zkyt.com/"

  - <argChang> (use wsdl2h option -g to auto-generate)

  - <argChangResponse> (use wsdl2h option -g to auto-generate)

  - <bgAirHC> (use wsdl2h option -g to auto-generate)

  - <bgAirHCResponse> (use wsdl2h option -g to auto-generate)

  - <cgjALPSelfcheck> (use wsdl2h option -g to auto-generate)

  - <cgjALPSelfcheckResponse> (use wsdl2h option -g to auto-generate)

  - <cgjLASelfcheck> (use wsdl2h option -g to auto-generate)

  - <cgjLASelfcheckResponse> (use wsdl2h option -g to auto-generate)

  - <cgjLSPSelfcheck> (use wsdl2h option -g to auto-generate)

  - <cgjLSPSelfcheckResponse> (use wsdl2h option -g to auto-generate)

  - <cgjPLHPSelfcheck> (use wsdl2h option -g to auto-generate)

  - <cgjPLHPSelfcheckResponse> (use wsdl2h option -g to auto-generate)

  - <cgjSelfcheck> (use wsdl2h option -g to auto-generate)

  - <cgjSelfcheckResponse> (use wsdl2h option -g to auto-generate)

  - <cycdyhwAdjust> (use wsdl2h option -g to auto-generate)

  - <cycdyhwAdjustResponse> (use wsdl2h option -g to auto-generate)

  - <doubleIdleData> (use wsdl2h option -g to auto-generate)

  - <doubleIdleDataResponse> (use wsdl2h option -g to auto-generate)

  - <doubleIdleData_FC> (use wsdl2h option -g to auto-generate)

  - <doubleIdleLog> (use wsdl2h option -g to auto-generate)

  - <doubleIdleLogResponse> (use wsdl2h option -g to auto-generate)

  - <doubleIdleLog_FC> (use wsdl2h option -g to auto-generate)

  - <getCarInfo> (use wsdl2h option -g to auto-generate)

  - <getCarInfoResponse> (use wsdl2h option -g to auto-generate)

  - <getCarInfo_FC> (use wsdl2h option -g to auto-generate)

  - <getSatate> (use wsdl2h option -g to auto-generate)

  - <getSatateResponse> (use wsdl2h option -g to auto-generate)

  - <hjcsgyqSelfcheck> (use wsdl2h option -g to auto-generate)

  - <hjcsgyqSelfcheckResponse> (use wsdl2h option -g to auto-generate)

  - <lightproofSmokeData> (use wsdl2h option -g to auto-generate)

  - <lightproofSmokeDataLog_FC> (use wsdl2h option -g to auto-generate)

  - <lightproofSmokeDataLog_FCResponse> (use wsdl2h option -g to auto-generate)

  - <lightproofSmokeDataResponse> (use wsdl2h option -g to auto-generate)

  - <lightproofSmokeData_FC> (use wsdl2h option -g to auto-generate)

  - <lightproofSmokeLog> (use wsdl2h option -g to auto-generate)

  - <lljSelfcheck> (use wsdl2h option -g to auto-generate)

  - <lljSelfcheckResponse> (use wsdl2h option -g to auto-generate)

  - <loadDownData> (use wsdl2h option -g to auto-generate)

  - <loadDownDataResponse> (use wsdl2h option -g to auto-generate)

  - <loadDownLog> (use wsdl2h option -g to auto-generate)

  - <loadDownLogResponse> (use wsdl2h option -g to auto-generate)

  - <motoDbIdleData> (use wsdl2h option -g to auto-generate)

  - <motoDbIdleDataResponse> (use wsdl2h option -g to auto-generate)

  - <obdResult> (use wsdl2h option -g to auto-generate)

  - <obdResultLog> (use wsdl2h option -g to auto-generate)

  - <obdResultLogResponse> (use wsdl2h option -g to auto-generate)

  - <obdResultResponse> (use wsdl2h option -g to auto-generate)

  - <pqfxySelfcheck> (use wsdl2h option -g to auto-generate)

  - <pqfxySelfcheckResponse> (use wsdl2h option -g to auto-generate)

  - <qyfxSelfcheck> (use wsdl2h option -g to auto-generate)

  - <qyfxSelfcheckResponse> (use wsdl2h option -g to auto-generate)

  - <sdsqtfxySelfcheck> (use wsdl2h option -g to auto-generate)

  - <sdsqtfxySelfcheckResponse> (use wsdl2h option -g to auto-generate)

  - <sendMessage> (use wsdl2h option -g to auto-generate)

  - <sendMessageResponse> (use wsdl2h option -g to auto-generate)

  - <sendMessage_FC> (use wsdl2h option -g to auto-generate)

  - <vmasData> (use wsdl2h option -g to auto-generate)

  - <vmasDataResponse> (use wsdl2h option -g to auto-generate)

  - <vmasLog> (use wsdl2h option -g to auto-generate)

  - <vmasLogResponse> (use wsdl2h option -g to auto-generate)

  - <wqfxyAdjust> (use wsdl2h option -g to auto-generate)

  - <wqfxyAdjustResponse> (use wsdl2h option -g to auto-generate)

  - <wqfxySelfcheck> (use wsdl2h option -g to auto-generate)

  - <wqfxySelfcheckResponse> (use wsdl2h option -g to auto-generate)

  - <ydjSelfcheck> (use wsdl2h option -g to auto-generate)

  - <ydjSelfcheckResponse> (use wsdl2h option -g to auto-generate)

  - <lightproofSmokeLogResponse> (use wsdl2h option -g to auto-generate)

  - <doubleIdleData_FCResponse> (use wsdl2h option -g to auto-generate)

  - <doubleIdleLog_FCResponse> (use wsdl2h option -g to auto-generate)

  - <dyhwSelfcheck> (use wsdl2h option -g to auto-generate)

  - <dyhwSelfcheckResponse> (use wsdl2h option -g to auto-generate)

  - <dyhwAdjust> (use wsdl2h option -g to auto-generate)

  - <dyhwAdjustResponse> (use wsdl2h option -g to auto-generate)

  - <getCarInfo_FCResponse> (use wsdl2h option -g to auto-generate)

  - <lightproofSmokeData_FCResponse> (use wsdl2h option -g to auto-generate)

  - <sendMessage_FCResponse> (use wsdl2h option -g to auto-generate)

*/

/* End of deviceSwap.h */
