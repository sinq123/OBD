/* soapC.cpp
   Generated by gSOAP 2.8.21 from GasServiceNew.h

Copyright(C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.21 2020-09-03 08:04:06 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_std__wstring:
		return soap_in_std__wstring(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerTo_ns1__AddDeviceCheckData:
		return soap_in_PointerTo_ns1__AddDeviceCheckData(soap, NULL, NULL, "ns1:AddDeviceCheckData");
	case SOAP_TYPE_PointerTo_ns1__AddWGJCData:
		return soap_in_PointerTo_ns1__AddWGJCData(soap, NULL, NULL, "ns1:AddWGJCData");
	case SOAP_TYPE_PointerTo_ns1__LokeJudge:
		return soap_in_PointerTo_ns1__LokeJudge(soap, NULL, NULL, "ns1:LokeJudge");
	case SOAP_TYPE_PointerTo_ns1__PrintUp:
		return soap_in_PointerTo_ns1__PrintUp(soap, NULL, NULL, "ns1:PrintUp");
	case SOAP_TYPE_PointerTo_ns1__PrintJudge:
		return soap_in_PointerTo_ns1__PrintJudge(soap, NULL, NULL, "ns1:PrintJudge");
	case SOAP_TYPE_PointerTo_ns1__AddVerify:
		return soap_in_PointerTo_ns1__AddVerify(soap, NULL, NULL, "ns1:AddVerify");
	case SOAP_TYPE_PointerTo_ns1__RyzfControl:
		return soap_in_PointerTo_ns1__RyzfControl(soap, NULL, NULL, "ns1:RyzfControl");
	case SOAP_TYPE_PointerTo_ns1__AddIuprData:
		return soap_in_PointerTo_ns1__AddIuprData(soap, NULL, NULL, "ns1:AddIuprData");
	case SOAP_TYPE_PointerTo_ns1__AddObdData:
		return soap_in_PointerTo_ns1__AddObdData(soap, NULL, NULL, "ns1:AddObdData");
	case SOAP_TYPE_PointerTo_ns1__AddCheckData:
		return soap_in_PointerTo_ns1__AddCheckData(soap, NULL, NULL, "ns1:AddCheckData");
	case SOAP_TYPE_PointerTo_ns1__OnlineJudge:
		return soap_in_PointerTo_ns1__OnlineJudge(soap, NULL, NULL, "ns1:OnlineJudge");
	case SOAP_TYPE_PointerTo_ns1__VehicleRegJudge:
		return soap_in_PointerTo_ns1__VehicleRegJudge(soap, NULL, NULL, "ns1:VehicleRegJudge");
	case SOAP_TYPE_PointerTostd__wstring:
		return soap_in_PointerTostd__wstring(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__wstring;
			return soap_in_std__wstring(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:AddDeviceCheckDataResponse"))
		{	*type = SOAP_TYPE__ns1__AddDeviceCheckDataResponse;
			return soap_in__ns1__AddDeviceCheckDataResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AddDeviceCheckData"))
		{	*type = SOAP_TYPE__ns1__AddDeviceCheckData;
			return soap_in__ns1__AddDeviceCheckData(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AddWGJCDataResponse"))
		{	*type = SOAP_TYPE__ns1__AddWGJCDataResponse;
			return soap_in__ns1__AddWGJCDataResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AddWGJCData"))
		{	*type = SOAP_TYPE__ns1__AddWGJCData;
			return soap_in__ns1__AddWGJCData(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:LokeJudgeResponse"))
		{	*type = SOAP_TYPE__ns1__LokeJudgeResponse;
			return soap_in__ns1__LokeJudgeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:LokeJudge"))
		{	*type = SOAP_TYPE__ns1__LokeJudge;
			return soap_in__ns1__LokeJudge(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:PrintUpResponse"))
		{	*type = SOAP_TYPE__ns1__PrintUpResponse;
			return soap_in__ns1__PrintUpResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:PrintUp"))
		{	*type = SOAP_TYPE__ns1__PrintUp;
			return soap_in__ns1__PrintUp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:PrintJudgeResponse"))
		{	*type = SOAP_TYPE__ns1__PrintJudgeResponse;
			return soap_in__ns1__PrintJudgeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:PrintJudge"))
		{	*type = SOAP_TYPE__ns1__PrintJudge;
			return soap_in__ns1__PrintJudge(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AddVerifyResponse"))
		{	*type = SOAP_TYPE__ns1__AddVerifyResponse;
			return soap_in__ns1__AddVerifyResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AddVerify"))
		{	*type = SOAP_TYPE__ns1__AddVerify;
			return soap_in__ns1__AddVerify(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:RyzfControlResponse"))
		{	*type = SOAP_TYPE__ns1__RyzfControlResponse;
			return soap_in__ns1__RyzfControlResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:RyzfControl"))
		{	*type = SOAP_TYPE__ns1__RyzfControl;
			return soap_in__ns1__RyzfControl(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AddIuprDataResponse"))
		{	*type = SOAP_TYPE__ns1__AddIuprDataResponse;
			return soap_in__ns1__AddIuprDataResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AddIuprData"))
		{	*type = SOAP_TYPE__ns1__AddIuprData;
			return soap_in__ns1__AddIuprData(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AddObdDataResponse"))
		{	*type = SOAP_TYPE__ns1__AddObdDataResponse;
			return soap_in__ns1__AddObdDataResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AddObdData"))
		{	*type = SOAP_TYPE__ns1__AddObdData;
			return soap_in__ns1__AddObdData(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AddCheckDataResponse"))
		{	*type = SOAP_TYPE__ns1__AddCheckDataResponse;
			return soap_in__ns1__AddCheckDataResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AddCheckData"))
		{	*type = SOAP_TYPE__ns1__AddCheckData;
			return soap_in__ns1__AddCheckData(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:OnlineJudgeResponse"))
		{	*type = SOAP_TYPE__ns1__OnlineJudgeResponse;
			return soap_in__ns1__OnlineJudgeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:OnlineJudge"))
		{	*type = SOAP_TYPE__ns1__OnlineJudge;
			return soap_in__ns1__OnlineJudge(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:VehicleRegJudgeResponse"))
		{	*type = SOAP_TYPE__ns1__VehicleRegJudgeResponse;
			return soap_in__ns1__VehicleRegJudgeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:VehicleRegJudge"))
		{	*type = SOAP_TYPE__ns1__VehicleRegJudge;
			return soap_in__ns1__VehicleRegJudge(soap, NULL, NULL, NULL);
		}
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level = %u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_std__wstring:
		return soap_out_std__wstring(soap, tag, id, (const std::wstring *)ptr, "xsd:string");
	case SOAP_TYPE__ns1__AddDeviceCheckDataResponse:
		return ((_ns1__AddDeviceCheckDataResponse *)ptr)->soap_out(soap, "ns1:AddDeviceCheckDataResponse", id, NULL);
	case SOAP_TYPE__ns1__AddDeviceCheckData:
		return ((_ns1__AddDeviceCheckData *)ptr)->soap_out(soap, "ns1:AddDeviceCheckData", id, NULL);
	case SOAP_TYPE__ns1__AddWGJCDataResponse:
		return ((_ns1__AddWGJCDataResponse *)ptr)->soap_out(soap, "ns1:AddWGJCDataResponse", id, NULL);
	case SOAP_TYPE__ns1__AddWGJCData:
		return ((_ns1__AddWGJCData *)ptr)->soap_out(soap, "ns1:AddWGJCData", id, NULL);
	case SOAP_TYPE__ns1__LokeJudgeResponse:
		return ((_ns1__LokeJudgeResponse *)ptr)->soap_out(soap, "ns1:LokeJudgeResponse", id, NULL);
	case SOAP_TYPE__ns1__LokeJudge:
		return ((_ns1__LokeJudge *)ptr)->soap_out(soap, "ns1:LokeJudge", id, NULL);
	case SOAP_TYPE__ns1__PrintUpResponse:
		return ((_ns1__PrintUpResponse *)ptr)->soap_out(soap, "ns1:PrintUpResponse", id, NULL);
	case SOAP_TYPE__ns1__PrintUp:
		return ((_ns1__PrintUp *)ptr)->soap_out(soap, "ns1:PrintUp", id, NULL);
	case SOAP_TYPE__ns1__PrintJudgeResponse:
		return ((_ns1__PrintJudgeResponse *)ptr)->soap_out(soap, "ns1:PrintJudgeResponse", id, NULL);
	case SOAP_TYPE__ns1__PrintJudge:
		return ((_ns1__PrintJudge *)ptr)->soap_out(soap, "ns1:PrintJudge", id, NULL);
	case SOAP_TYPE__ns1__AddVerifyResponse:
		return ((_ns1__AddVerifyResponse *)ptr)->soap_out(soap, "ns1:AddVerifyResponse", id, NULL);
	case SOAP_TYPE__ns1__AddVerify:
		return ((_ns1__AddVerify *)ptr)->soap_out(soap, "ns1:AddVerify", id, NULL);
	case SOAP_TYPE__ns1__RyzfControlResponse:
		return ((_ns1__RyzfControlResponse *)ptr)->soap_out(soap, "ns1:RyzfControlResponse", id, NULL);
	case SOAP_TYPE__ns1__RyzfControl:
		return ((_ns1__RyzfControl *)ptr)->soap_out(soap, "ns1:RyzfControl", id, NULL);
	case SOAP_TYPE__ns1__AddIuprDataResponse:
		return ((_ns1__AddIuprDataResponse *)ptr)->soap_out(soap, "ns1:AddIuprDataResponse", id, NULL);
	case SOAP_TYPE__ns1__AddIuprData:
		return ((_ns1__AddIuprData *)ptr)->soap_out(soap, "ns1:AddIuprData", id, NULL);
	case SOAP_TYPE__ns1__AddObdDataResponse:
		return ((_ns1__AddObdDataResponse *)ptr)->soap_out(soap, "ns1:AddObdDataResponse", id, NULL);
	case SOAP_TYPE__ns1__AddObdData:
		return ((_ns1__AddObdData *)ptr)->soap_out(soap, "ns1:AddObdData", id, NULL);
	case SOAP_TYPE__ns1__AddCheckDataResponse:
		return ((_ns1__AddCheckDataResponse *)ptr)->soap_out(soap, "ns1:AddCheckDataResponse", id, NULL);
	case SOAP_TYPE__ns1__AddCheckData:
		return ((_ns1__AddCheckData *)ptr)->soap_out(soap, "ns1:AddCheckData", id, NULL);
	case SOAP_TYPE__ns1__OnlineJudgeResponse:
		return ((_ns1__OnlineJudgeResponse *)ptr)->soap_out(soap, "ns1:OnlineJudgeResponse", id, NULL);
	case SOAP_TYPE__ns1__OnlineJudge:
		return ((_ns1__OnlineJudge *)ptr)->soap_out(soap, "ns1:OnlineJudge", id, NULL);
	case SOAP_TYPE__ns1__VehicleRegJudgeResponse:
		return ((_ns1__VehicleRegJudgeResponse *)ptr)->soap_out(soap, "ns1:VehicleRegJudgeResponse", id, NULL);
	case SOAP_TYPE__ns1__VehicleRegJudge:
		return ((_ns1__VehicleRegJudge *)ptr)->soap_out(soap, "ns1:VehicleRegJudge", id, NULL);
	case SOAP_TYPE_PointerTo_ns1__AddDeviceCheckData:
		return soap_out_PointerTo_ns1__AddDeviceCheckData(soap, tag, id, (_ns1__AddDeviceCheckData *const*)ptr, "ns1:AddDeviceCheckData");
	case SOAP_TYPE_PointerTo_ns1__AddWGJCData:
		return soap_out_PointerTo_ns1__AddWGJCData(soap, tag, id, (_ns1__AddWGJCData *const*)ptr, "ns1:AddWGJCData");
	case SOAP_TYPE_PointerTo_ns1__LokeJudge:
		return soap_out_PointerTo_ns1__LokeJudge(soap, tag, id, (_ns1__LokeJudge *const*)ptr, "ns1:LokeJudge");
	case SOAP_TYPE_PointerTo_ns1__PrintUp:
		return soap_out_PointerTo_ns1__PrintUp(soap, tag, id, (_ns1__PrintUp *const*)ptr, "ns1:PrintUp");
	case SOAP_TYPE_PointerTo_ns1__PrintJudge:
		return soap_out_PointerTo_ns1__PrintJudge(soap, tag, id, (_ns1__PrintJudge *const*)ptr, "ns1:PrintJudge");
	case SOAP_TYPE_PointerTo_ns1__AddVerify:
		return soap_out_PointerTo_ns1__AddVerify(soap, tag, id, (_ns1__AddVerify *const*)ptr, "ns1:AddVerify");
	case SOAP_TYPE_PointerTo_ns1__RyzfControl:
		return soap_out_PointerTo_ns1__RyzfControl(soap, tag, id, (_ns1__RyzfControl *const*)ptr, "ns1:RyzfControl");
	case SOAP_TYPE_PointerTo_ns1__AddIuprData:
		return soap_out_PointerTo_ns1__AddIuprData(soap, tag, id, (_ns1__AddIuprData *const*)ptr, "ns1:AddIuprData");
	case SOAP_TYPE_PointerTo_ns1__AddObdData:
		return soap_out_PointerTo_ns1__AddObdData(soap, tag, id, (_ns1__AddObdData *const*)ptr, "ns1:AddObdData");
	case SOAP_TYPE_PointerTo_ns1__AddCheckData:
		return soap_out_PointerTo_ns1__AddCheckData(soap, tag, id, (_ns1__AddCheckData *const*)ptr, "ns1:AddCheckData");
	case SOAP_TYPE_PointerTo_ns1__OnlineJudge:
		return soap_out_PointerTo_ns1__OnlineJudge(soap, tag, id, (_ns1__OnlineJudge *const*)ptr, "ns1:OnlineJudge");
	case SOAP_TYPE_PointerTo_ns1__VehicleRegJudge:
		return soap_out_PointerTo_ns1__VehicleRegJudge(soap, tag, id, (_ns1__VehicleRegJudge *const*)ptr, "ns1:VehicleRegJudge");
	case SOAP_TYPE_PointerTostd__wstring:
		return soap_out_PointerTostd__wstring(soap, tag, id, (std::wstring *const*)ptr, "xsd:string");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__wstring:
		soap_serialize_std__wstring(soap, (const std::wstring *)ptr);
		break;
	case SOAP_TYPE__ns1__AddDeviceCheckDataResponse:
		((_ns1__AddDeviceCheckDataResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AddDeviceCheckData:
		((_ns1__AddDeviceCheckData *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AddWGJCDataResponse:
		((_ns1__AddWGJCDataResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AddWGJCData:
		((_ns1__AddWGJCData *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__LokeJudgeResponse:
		((_ns1__LokeJudgeResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__LokeJudge:
		((_ns1__LokeJudge *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__PrintUpResponse:
		((_ns1__PrintUpResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__PrintUp:
		((_ns1__PrintUp *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__PrintJudgeResponse:
		((_ns1__PrintJudgeResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__PrintJudge:
		((_ns1__PrintJudge *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AddVerifyResponse:
		((_ns1__AddVerifyResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AddVerify:
		((_ns1__AddVerify *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__RyzfControlResponse:
		((_ns1__RyzfControlResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__RyzfControl:
		((_ns1__RyzfControl *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AddIuprDataResponse:
		((_ns1__AddIuprDataResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AddIuprData:
		((_ns1__AddIuprData *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AddObdDataResponse:
		((_ns1__AddObdDataResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AddObdData:
		((_ns1__AddObdData *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AddCheckDataResponse:
		((_ns1__AddCheckDataResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AddCheckData:
		((_ns1__AddCheckData *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__OnlineJudgeResponse:
		((_ns1__OnlineJudgeResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__OnlineJudge:
		((_ns1__OnlineJudge *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__VehicleRegJudgeResponse:
		((_ns1__VehicleRegJudgeResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__VehicleRegJudge:
		((_ns1__VehicleRegJudge *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ns1__AddDeviceCheckData_:
		soap_serialize___ns1__AddDeviceCheckData_(soap, (const struct __ns1__AddDeviceCheckData_ *)ptr);
		break;
	case SOAP_TYPE___ns1__AddWGJCData_:
		soap_serialize___ns1__AddWGJCData_(soap, (const struct __ns1__AddWGJCData_ *)ptr);
		break;
	case SOAP_TYPE___ns1__LokeJudge_:
		soap_serialize___ns1__LokeJudge_(soap, (const struct __ns1__LokeJudge_ *)ptr);
		break;
	case SOAP_TYPE___ns1__PrintUp_:
		soap_serialize___ns1__PrintUp_(soap, (const struct __ns1__PrintUp_ *)ptr);
		break;
	case SOAP_TYPE___ns1__PrintJudge_:
		soap_serialize___ns1__PrintJudge_(soap, (const struct __ns1__PrintJudge_ *)ptr);
		break;
	case SOAP_TYPE___ns1__AddVerify_:
		soap_serialize___ns1__AddVerify_(soap, (const struct __ns1__AddVerify_ *)ptr);
		break;
	case SOAP_TYPE___ns1__RyzfControl_:
		soap_serialize___ns1__RyzfControl_(soap, (const struct __ns1__RyzfControl_ *)ptr);
		break;
	case SOAP_TYPE___ns1__AddIuprData_:
		soap_serialize___ns1__AddIuprData_(soap, (const struct __ns1__AddIuprData_ *)ptr);
		break;
	case SOAP_TYPE___ns1__AddObdData_:
		soap_serialize___ns1__AddObdData_(soap, (const struct __ns1__AddObdData_ *)ptr);
		break;
	case SOAP_TYPE___ns1__AddCheckData_:
		soap_serialize___ns1__AddCheckData_(soap, (const struct __ns1__AddCheckData_ *)ptr);
		break;
	case SOAP_TYPE___ns1__OnlineJudge_:
		soap_serialize___ns1__OnlineJudge_(soap, (const struct __ns1__OnlineJudge_ *)ptr);
		break;
	case SOAP_TYPE___ns1__VehicleRegJudge_:
		soap_serialize___ns1__VehicleRegJudge_(soap, (const struct __ns1__VehicleRegJudge_ *)ptr);
		break;
	case SOAP_TYPE___ns1__AddDeviceCheckData:
		soap_serialize___ns1__AddDeviceCheckData(soap, (const struct __ns1__AddDeviceCheckData *)ptr);
		break;
	case SOAP_TYPE___ns1__AddWGJCData:
		soap_serialize___ns1__AddWGJCData(soap, (const struct __ns1__AddWGJCData *)ptr);
		break;
	case SOAP_TYPE___ns1__LokeJudge:
		soap_serialize___ns1__LokeJudge(soap, (const struct __ns1__LokeJudge *)ptr);
		break;
	case SOAP_TYPE___ns1__PrintUp:
		soap_serialize___ns1__PrintUp(soap, (const struct __ns1__PrintUp *)ptr);
		break;
	case SOAP_TYPE___ns1__PrintJudge:
		soap_serialize___ns1__PrintJudge(soap, (const struct __ns1__PrintJudge *)ptr);
		break;
	case SOAP_TYPE___ns1__AddVerify:
		soap_serialize___ns1__AddVerify(soap, (const struct __ns1__AddVerify *)ptr);
		break;
	case SOAP_TYPE___ns1__RyzfControl:
		soap_serialize___ns1__RyzfControl(soap, (const struct __ns1__RyzfControl *)ptr);
		break;
	case SOAP_TYPE___ns1__AddIuprData:
		soap_serialize___ns1__AddIuprData(soap, (const struct __ns1__AddIuprData *)ptr);
		break;
	case SOAP_TYPE___ns1__AddObdData:
		soap_serialize___ns1__AddObdData(soap, (const struct __ns1__AddObdData *)ptr);
		break;
	case SOAP_TYPE___ns1__AddCheckData:
		soap_serialize___ns1__AddCheckData(soap, (const struct __ns1__AddCheckData *)ptr);
		break;
	case SOAP_TYPE___ns1__OnlineJudge:
		soap_serialize___ns1__OnlineJudge(soap, (const struct __ns1__OnlineJudge *)ptr);
		break;
	case SOAP_TYPE___ns1__VehicleRegJudge:
		soap_serialize___ns1__VehicleRegJudge(soap, (const struct __ns1__VehicleRegJudge *)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__AddDeviceCheckData:
		soap_serialize_PointerTo_ns1__AddDeviceCheckData(soap, (_ns1__AddDeviceCheckData *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__AddWGJCData:
		soap_serialize_PointerTo_ns1__AddWGJCData(soap, (_ns1__AddWGJCData *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__LokeJudge:
		soap_serialize_PointerTo_ns1__LokeJudge(soap, (_ns1__LokeJudge *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__PrintUp:
		soap_serialize_PointerTo_ns1__PrintUp(soap, (_ns1__PrintUp *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__PrintJudge:
		soap_serialize_PointerTo_ns1__PrintJudge(soap, (_ns1__PrintJudge *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__AddVerify:
		soap_serialize_PointerTo_ns1__AddVerify(soap, (_ns1__AddVerify *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__RyzfControl:
		soap_serialize_PointerTo_ns1__RyzfControl(soap, (_ns1__RyzfControl *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__AddIuprData:
		soap_serialize_PointerTo_ns1__AddIuprData(soap, (_ns1__AddIuprData *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__AddObdData:
		soap_serialize_PointerTo_ns1__AddObdData(soap, (_ns1__AddObdData *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__AddCheckData:
		soap_serialize_PointerTo_ns1__AddCheckData(soap, (_ns1__AddCheckData *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__OnlineJudge:
		soap_serialize_PointerTo_ns1__OnlineJudge(soap, (_ns1__OnlineJudge *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__VehicleRegJudge:
		soap_serialize_PointerTo_ns1__VehicleRegJudge(soap, (_ns1__VehicleRegJudge *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__wstring:
		soap_serialize_PointerTostd__wstring(soap, (std::wstring *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_std__wstring:
		return (void*)soap_instantiate_std__wstring(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__VehicleRegJudge:
		return (void*)soap_instantiate__ns1__VehicleRegJudge(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__VehicleRegJudgeResponse:
		return (void*)soap_instantiate__ns1__VehicleRegJudgeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__OnlineJudge:
		return (void*)soap_instantiate__ns1__OnlineJudge(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__OnlineJudgeResponse:
		return (void*)soap_instantiate__ns1__OnlineJudgeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AddCheckData:
		return (void*)soap_instantiate__ns1__AddCheckData(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AddCheckDataResponse:
		return (void*)soap_instantiate__ns1__AddCheckDataResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AddObdData:
		return (void*)soap_instantiate__ns1__AddObdData(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AddObdDataResponse:
		return (void*)soap_instantiate__ns1__AddObdDataResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AddIuprData:
		return (void*)soap_instantiate__ns1__AddIuprData(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AddIuprDataResponse:
		return (void*)soap_instantiate__ns1__AddIuprDataResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__RyzfControl:
		return (void*)soap_instantiate__ns1__RyzfControl(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__RyzfControlResponse:
		return (void*)soap_instantiate__ns1__RyzfControlResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AddVerify:
		return (void*)soap_instantiate__ns1__AddVerify(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AddVerifyResponse:
		return (void*)soap_instantiate__ns1__AddVerifyResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__PrintJudge:
		return (void*)soap_instantiate__ns1__PrintJudge(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__PrintJudgeResponse:
		return (void*)soap_instantiate__ns1__PrintJudgeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__PrintUp:
		return (void*)soap_instantiate__ns1__PrintUp(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__PrintUpResponse:
		return (void*)soap_instantiate__ns1__PrintUpResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__LokeJudge:
		return (void*)soap_instantiate__ns1__LokeJudge(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__LokeJudgeResponse:
		return (void*)soap_instantiate__ns1__LokeJudgeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AddWGJCData:
		return (void*)soap_instantiate__ns1__AddWGJCData(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AddWGJCDataResponse:
		return (void*)soap_instantiate__ns1__AddWGJCDataResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AddDeviceCheckData:
		return (void*)soap_instantiate__ns1__AddDeviceCheckData(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AddDeviceCheckDataResponse:
		return (void*)soap_instantiate__ns1__AddDeviceCheckDataResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__VehicleRegJudge:
		return (void*)soap_instantiate___ns1__VehicleRegJudge(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__OnlineJudge:
		return (void*)soap_instantiate___ns1__OnlineJudge(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AddCheckData:
		return (void*)soap_instantiate___ns1__AddCheckData(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AddObdData:
		return (void*)soap_instantiate___ns1__AddObdData(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AddIuprData:
		return (void*)soap_instantiate___ns1__AddIuprData(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__RyzfControl:
		return (void*)soap_instantiate___ns1__RyzfControl(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AddVerify:
		return (void*)soap_instantiate___ns1__AddVerify(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__PrintJudge:
		return (void*)soap_instantiate___ns1__PrintJudge(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__PrintUp:
		return (void*)soap_instantiate___ns1__PrintUp(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__LokeJudge:
		return (void*)soap_instantiate___ns1__LokeJudge(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AddWGJCData:
		return (void*)soap_instantiate___ns1__AddWGJCData(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AddDeviceCheckData:
		return (void*)soap_instantiate___ns1__AddDeviceCheckData(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__VehicleRegJudge_:
		return (void*)soap_instantiate___ns1__VehicleRegJudge_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__OnlineJudge_:
		return (void*)soap_instantiate___ns1__OnlineJudge_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AddCheckData_:
		return (void*)soap_instantiate___ns1__AddCheckData_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AddObdData_:
		return (void*)soap_instantiate___ns1__AddObdData_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AddIuprData_:
		return (void*)soap_instantiate___ns1__AddIuprData_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__RyzfControl_:
		return (void*)soap_instantiate___ns1__RyzfControl_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AddVerify_:
		return (void*)soap_instantiate___ns1__AddVerify_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__PrintJudge_:
		return (void*)soap_instantiate___ns1__PrintJudge_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__PrintUp_:
		return (void*)soap_instantiate___ns1__PrintUp_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__LokeJudge_:
		return (void*)soap_instantiate___ns1__LokeJudge_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AddWGJCData_:
		return (void*)soap_instantiate___ns1__AddWGJCData_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AddDeviceCheckData_:
		return (void*)soap_instantiate___ns1__AddDeviceCheckData_(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__wstring:
		if (p->size < 0)
			SOAP_DELETE((std::wstring*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::wstring*)p->ptr);
		break;
	case SOAP_TYPE__ns1__VehicleRegJudge:
		if (p->size < 0)
			SOAP_DELETE((_ns1__VehicleRegJudge*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__VehicleRegJudge*)p->ptr);
		break;
	case SOAP_TYPE__ns1__VehicleRegJudgeResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__VehicleRegJudgeResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__VehicleRegJudgeResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__OnlineJudge:
		if (p->size < 0)
			SOAP_DELETE((_ns1__OnlineJudge*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__OnlineJudge*)p->ptr);
		break;
	case SOAP_TYPE__ns1__OnlineJudgeResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__OnlineJudgeResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__OnlineJudgeResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AddCheckData:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AddCheckData*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AddCheckData*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AddCheckDataResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AddCheckDataResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AddCheckDataResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AddObdData:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AddObdData*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AddObdData*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AddObdDataResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AddObdDataResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AddObdDataResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AddIuprData:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AddIuprData*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AddIuprData*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AddIuprDataResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AddIuprDataResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AddIuprDataResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__RyzfControl:
		if (p->size < 0)
			SOAP_DELETE((_ns1__RyzfControl*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__RyzfControl*)p->ptr);
		break;
	case SOAP_TYPE__ns1__RyzfControlResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__RyzfControlResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__RyzfControlResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AddVerify:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AddVerify*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AddVerify*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AddVerifyResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AddVerifyResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AddVerifyResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__PrintJudge:
		if (p->size < 0)
			SOAP_DELETE((_ns1__PrintJudge*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__PrintJudge*)p->ptr);
		break;
	case SOAP_TYPE__ns1__PrintJudgeResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__PrintJudgeResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__PrintJudgeResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__PrintUp:
		if (p->size < 0)
			SOAP_DELETE((_ns1__PrintUp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__PrintUp*)p->ptr);
		break;
	case SOAP_TYPE__ns1__PrintUpResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__PrintUpResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__PrintUpResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__LokeJudge:
		if (p->size < 0)
			SOAP_DELETE((_ns1__LokeJudge*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__LokeJudge*)p->ptr);
		break;
	case SOAP_TYPE__ns1__LokeJudgeResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__LokeJudgeResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__LokeJudgeResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AddWGJCData:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AddWGJCData*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AddWGJCData*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AddWGJCDataResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AddWGJCDataResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AddWGJCDataResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AddDeviceCheckData:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AddDeviceCheckData*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AddDeviceCheckData*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AddDeviceCheckDataResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AddDeviceCheckDataResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AddDeviceCheckDataResponse*)p->ptr);
		break;
	case SOAP_TYPE___ns1__VehicleRegJudge:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__VehicleRegJudge*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__VehicleRegJudge*)p->ptr);
		break;
	case SOAP_TYPE___ns1__OnlineJudge:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__OnlineJudge*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__OnlineJudge*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AddCheckData:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AddCheckData*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AddCheckData*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AddObdData:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AddObdData*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AddObdData*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AddIuprData:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AddIuprData*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AddIuprData*)p->ptr);
		break;
	case SOAP_TYPE___ns1__RyzfControl:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__RyzfControl*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__RyzfControl*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AddVerify:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AddVerify*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AddVerify*)p->ptr);
		break;
	case SOAP_TYPE___ns1__PrintJudge:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__PrintJudge*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__PrintJudge*)p->ptr);
		break;
	case SOAP_TYPE___ns1__PrintUp:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__PrintUp*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__PrintUp*)p->ptr);
		break;
	case SOAP_TYPE___ns1__LokeJudge:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__LokeJudge*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__LokeJudge*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AddWGJCData:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AddWGJCData*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AddWGJCData*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AddDeviceCheckData:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AddDeviceCheckData*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AddDeviceCheckData*)p->ptr);
		break;
	case SOAP_TYPE___ns1__VehicleRegJudge_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__VehicleRegJudge_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__VehicleRegJudge_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__OnlineJudge_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__OnlineJudge_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__OnlineJudge_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AddCheckData_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AddCheckData_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AddCheckData_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AddObdData_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AddObdData_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AddObdData_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AddIuprData_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AddIuprData_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AddIuprData_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__RyzfControl_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__RyzfControl_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__RyzfControl_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AddVerify_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AddVerify_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AddVerify_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__PrintJudge_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__PrintJudge_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__PrintJudge_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__PrintUp_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__PrintUp_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__PrintUp_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__LokeJudge_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__LokeJudge_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__LokeJudge_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AddWGJCData_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AddWGJCData_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AddWGJCData_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AddDeviceCheckData_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AddDeviceCheckData_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AddDeviceCheckData_*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{
	(void)soap; (void)st; (void)p; (void)len; (void)q; (void)n; /* appease -Wall -Werror */
	switch (tt)
	{
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type = %d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__wstring(struct soap *soap, std::wstring *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__wstring(struct soap *soap, const std::wstring *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__wstring(struct soap *soap, const char *tag, int id, const std::wstring *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__wstring), type) || soap_wstring_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_std__wstring(struct soap *soap, const char *tag, std::wstring *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__wstring(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	wchar_t *t;
		s = (std::wstring*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__wstring, sizeof(std::wstring), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_wstring_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::wstring*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__wstring, sizeof(std::wstring), soap->type, soap->arrayType), 0, SOAP_TYPE_std__wstring, 0, sizeof(std::wstring), 0, soap_copy_std__wstring);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__wstring(struct soap *soap, const std::wstring *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_std__wstring);
	if (soap_out_std__wstring(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_std__wstring(struct soap *soap, std::wstring *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__wstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::wstring * SOAP_FMAC2 soap_instantiate_std__wstring(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__wstring(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__wstring, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::wstring);
		if (size)
			*size = sizeof(std::wstring);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::wstring, n);
		if (size)
			*size = n * sizeof(std::wstring);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::wstring*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__wstring(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::wstring %p -> %p\n", q, p));
	*(std::wstring*)p = *(std::wstring*)q;
}

void _ns1__AddDeviceCheckDataResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__AddDeviceCheckDataResponse::AddDeviceCheckDataResult = NULL;
	/* transient soap skipped */
}

void _ns1__AddDeviceCheckDataResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__AddDeviceCheckDataResponse::AddDeviceCheckDataResult);
	/* transient soap skipped */
#endif
}

int _ns1__AddDeviceCheckDataResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AddDeviceCheckDataResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AddDeviceCheckDataResponse(struct soap *soap, const char *tag, int id, const _ns1__AddDeviceCheckDataResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AddDeviceCheckDataResponse), type))
		return soap->error;
	if (a->AddDeviceCheckDataResult)
		soap_element_result(soap, "ns1:AddDeviceCheckDataResult");
	if (soap_out_PointerTostd__wstring(soap, "ns1:AddDeviceCheckDataResult", -1, &(a->_ns1__AddDeviceCheckDataResponse::AddDeviceCheckDataResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AddDeviceCheckDataResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AddDeviceCheckDataResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AddDeviceCheckDataResponse * SOAP_FMAC4 soap_in__ns1__AddDeviceCheckDataResponse(struct soap *soap, const char *tag, _ns1__AddDeviceCheckDataResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AddDeviceCheckDataResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AddDeviceCheckDataResponse, sizeof(_ns1__AddDeviceCheckDataResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AddDeviceCheckDataResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AddDeviceCheckDataResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_AddDeviceCheckDataResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AddDeviceCheckDataResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:AddDeviceCheckDataResult", &(a->_ns1__AddDeviceCheckDataResponse::AddDeviceCheckDataResult), "xsd:string"))
				{	soap_flag_AddDeviceCheckDataResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:AddDeviceCheckDataResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AddDeviceCheckDataResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AddDeviceCheckDataResponse, 0, sizeof(_ns1__AddDeviceCheckDataResponse), 0, soap_copy__ns1__AddDeviceCheckDataResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__AddDeviceCheckDataResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AddDeviceCheckDataResponse);
	if (this->soap_out(soap, tag?tag:"ns1:AddDeviceCheckDataResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AddDeviceCheckDataResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AddDeviceCheckDataResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AddDeviceCheckDataResponse * SOAP_FMAC4 soap_get__ns1__AddDeviceCheckDataResponse(struct soap *soap, _ns1__AddDeviceCheckDataResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AddDeviceCheckDataResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AddDeviceCheckDataResponse * SOAP_FMAC2 soap_instantiate__ns1__AddDeviceCheckDataResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AddDeviceCheckDataResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AddDeviceCheckDataResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AddDeviceCheckDataResponse);
		if (size)
			*size = sizeof(_ns1__AddDeviceCheckDataResponse);
		((_ns1__AddDeviceCheckDataResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AddDeviceCheckDataResponse, n);
		if (size)
			*size = n * sizeof(_ns1__AddDeviceCheckDataResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AddDeviceCheckDataResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AddDeviceCheckDataResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AddDeviceCheckDataResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AddDeviceCheckDataResponse %p -> %p\n", q, p));
	*(_ns1__AddDeviceCheckDataResponse*)p = *(_ns1__AddDeviceCheckDataResponse*)q;
}

void _ns1__AddDeviceCheckData::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__AddDeviceCheckData::addDeviceCheckData = NULL;
	/* transient soap skipped */
}

void _ns1__AddDeviceCheckData::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__AddDeviceCheckData::addDeviceCheckData);
	/* transient soap skipped */
#endif
}

int _ns1__AddDeviceCheckData::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AddDeviceCheckData(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AddDeviceCheckData(struct soap *soap, const char *tag, int id, const _ns1__AddDeviceCheckData *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AddDeviceCheckData), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:addDeviceCheckData", -1, &(a->_ns1__AddDeviceCheckData::addDeviceCheckData), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AddDeviceCheckData::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AddDeviceCheckData(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AddDeviceCheckData * SOAP_FMAC4 soap_in__ns1__AddDeviceCheckData(struct soap *soap, const char *tag, _ns1__AddDeviceCheckData *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AddDeviceCheckData *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AddDeviceCheckData, sizeof(_ns1__AddDeviceCheckData), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AddDeviceCheckData)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AddDeviceCheckData *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_addDeviceCheckData1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_addDeviceCheckData1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:addDeviceCheckData", &(a->_ns1__AddDeviceCheckData::addDeviceCheckData), "xsd:string"))
				{	soap_flag_addDeviceCheckData1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AddDeviceCheckData *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AddDeviceCheckData, 0, sizeof(_ns1__AddDeviceCheckData), 0, soap_copy__ns1__AddDeviceCheckData);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__AddDeviceCheckData::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AddDeviceCheckData);
	if (this->soap_out(soap, tag?tag:"ns1:AddDeviceCheckData", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AddDeviceCheckData::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AddDeviceCheckData(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AddDeviceCheckData * SOAP_FMAC4 soap_get__ns1__AddDeviceCheckData(struct soap *soap, _ns1__AddDeviceCheckData *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AddDeviceCheckData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AddDeviceCheckData * SOAP_FMAC2 soap_instantiate__ns1__AddDeviceCheckData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AddDeviceCheckData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AddDeviceCheckData, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AddDeviceCheckData);
		if (size)
			*size = sizeof(_ns1__AddDeviceCheckData);
		((_ns1__AddDeviceCheckData*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AddDeviceCheckData, n);
		if (size)
			*size = n * sizeof(_ns1__AddDeviceCheckData);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AddDeviceCheckData*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AddDeviceCheckData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AddDeviceCheckData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AddDeviceCheckData %p -> %p\n", q, p));
	*(_ns1__AddDeviceCheckData*)p = *(_ns1__AddDeviceCheckData*)q;
}

void _ns1__AddWGJCDataResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__AddWGJCDataResponse::AddWGJCDataResult = NULL;
	/* transient soap skipped */
}

void _ns1__AddWGJCDataResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__AddWGJCDataResponse::AddWGJCDataResult);
	/* transient soap skipped */
#endif
}

int _ns1__AddWGJCDataResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AddWGJCDataResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AddWGJCDataResponse(struct soap *soap, const char *tag, int id, const _ns1__AddWGJCDataResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AddWGJCDataResponse), type))
		return soap->error;
	if (a->AddWGJCDataResult)
		soap_element_result(soap, "ns1:AddWGJCDataResult");
	if (soap_out_PointerTostd__wstring(soap, "ns1:AddWGJCDataResult", -1, &(a->_ns1__AddWGJCDataResponse::AddWGJCDataResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AddWGJCDataResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AddWGJCDataResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AddWGJCDataResponse * SOAP_FMAC4 soap_in__ns1__AddWGJCDataResponse(struct soap *soap, const char *tag, _ns1__AddWGJCDataResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AddWGJCDataResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AddWGJCDataResponse, sizeof(_ns1__AddWGJCDataResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AddWGJCDataResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AddWGJCDataResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_AddWGJCDataResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AddWGJCDataResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:AddWGJCDataResult", &(a->_ns1__AddWGJCDataResponse::AddWGJCDataResult), "xsd:string"))
				{	soap_flag_AddWGJCDataResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:AddWGJCDataResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AddWGJCDataResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AddWGJCDataResponse, 0, sizeof(_ns1__AddWGJCDataResponse), 0, soap_copy__ns1__AddWGJCDataResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__AddWGJCDataResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AddWGJCDataResponse);
	if (this->soap_out(soap, tag?tag:"ns1:AddWGJCDataResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AddWGJCDataResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AddWGJCDataResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AddWGJCDataResponse * SOAP_FMAC4 soap_get__ns1__AddWGJCDataResponse(struct soap *soap, _ns1__AddWGJCDataResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AddWGJCDataResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AddWGJCDataResponse * SOAP_FMAC2 soap_instantiate__ns1__AddWGJCDataResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AddWGJCDataResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AddWGJCDataResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AddWGJCDataResponse);
		if (size)
			*size = sizeof(_ns1__AddWGJCDataResponse);
		((_ns1__AddWGJCDataResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AddWGJCDataResponse, n);
		if (size)
			*size = n * sizeof(_ns1__AddWGJCDataResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AddWGJCDataResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AddWGJCDataResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AddWGJCDataResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AddWGJCDataResponse %p -> %p\n", q, p));
	*(_ns1__AddWGJCDataResponse*)p = *(_ns1__AddWGJCDataResponse*)q;
}

void _ns1__AddWGJCData::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__AddWGJCData::WgjcDataItems = NULL;
	/* transient soap skipped */
}

void _ns1__AddWGJCData::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__AddWGJCData::WgjcDataItems);
	/* transient soap skipped */
#endif
}

int _ns1__AddWGJCData::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AddWGJCData(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AddWGJCData(struct soap *soap, const char *tag, int id, const _ns1__AddWGJCData *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AddWGJCData), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:WgjcDataItems", -1, &(a->_ns1__AddWGJCData::WgjcDataItems), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AddWGJCData::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AddWGJCData(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AddWGJCData * SOAP_FMAC4 soap_in__ns1__AddWGJCData(struct soap *soap, const char *tag, _ns1__AddWGJCData *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AddWGJCData *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AddWGJCData, sizeof(_ns1__AddWGJCData), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AddWGJCData)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AddWGJCData *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_WgjcDataItems1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WgjcDataItems1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:WgjcDataItems", &(a->_ns1__AddWGJCData::WgjcDataItems), "xsd:string"))
				{	soap_flag_WgjcDataItems1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AddWGJCData *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AddWGJCData, 0, sizeof(_ns1__AddWGJCData), 0, soap_copy__ns1__AddWGJCData);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__AddWGJCData::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AddWGJCData);
	if (this->soap_out(soap, tag?tag:"ns1:AddWGJCData", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AddWGJCData::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AddWGJCData(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AddWGJCData * SOAP_FMAC4 soap_get__ns1__AddWGJCData(struct soap *soap, _ns1__AddWGJCData *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AddWGJCData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AddWGJCData * SOAP_FMAC2 soap_instantiate__ns1__AddWGJCData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AddWGJCData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AddWGJCData, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AddWGJCData);
		if (size)
			*size = sizeof(_ns1__AddWGJCData);
		((_ns1__AddWGJCData*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AddWGJCData, n);
		if (size)
			*size = n * sizeof(_ns1__AddWGJCData);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AddWGJCData*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AddWGJCData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AddWGJCData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AddWGJCData %p -> %p\n", q, p));
	*(_ns1__AddWGJCData*)p = *(_ns1__AddWGJCData*)q;
}

void _ns1__LokeJudgeResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__LokeJudgeResponse::LokeJudgeResult = NULL;
	/* transient soap skipped */
}

void _ns1__LokeJudgeResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__LokeJudgeResponse::LokeJudgeResult);
	/* transient soap skipped */
#endif
}

int _ns1__LokeJudgeResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__LokeJudgeResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__LokeJudgeResponse(struct soap *soap, const char *tag, int id, const _ns1__LokeJudgeResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__LokeJudgeResponse), type))
		return soap->error;
	if (a->LokeJudgeResult)
		soap_element_result(soap, "ns1:LokeJudgeResult");
	if (soap_out_PointerTostd__wstring(soap, "ns1:LokeJudgeResult", -1, &(a->_ns1__LokeJudgeResponse::LokeJudgeResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__LokeJudgeResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__LokeJudgeResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__LokeJudgeResponse * SOAP_FMAC4 soap_in__ns1__LokeJudgeResponse(struct soap *soap, const char *tag, _ns1__LokeJudgeResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__LokeJudgeResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__LokeJudgeResponse, sizeof(_ns1__LokeJudgeResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__LokeJudgeResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__LokeJudgeResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_LokeJudgeResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_LokeJudgeResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:LokeJudgeResult", &(a->_ns1__LokeJudgeResponse::LokeJudgeResult), "xsd:string"))
				{	soap_flag_LokeJudgeResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:LokeJudgeResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__LokeJudgeResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__LokeJudgeResponse, 0, sizeof(_ns1__LokeJudgeResponse), 0, soap_copy__ns1__LokeJudgeResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__LokeJudgeResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__LokeJudgeResponse);
	if (this->soap_out(soap, tag?tag:"ns1:LokeJudgeResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__LokeJudgeResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__LokeJudgeResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__LokeJudgeResponse * SOAP_FMAC4 soap_get__ns1__LokeJudgeResponse(struct soap *soap, _ns1__LokeJudgeResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__LokeJudgeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__LokeJudgeResponse * SOAP_FMAC2 soap_instantiate__ns1__LokeJudgeResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__LokeJudgeResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__LokeJudgeResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__LokeJudgeResponse);
		if (size)
			*size = sizeof(_ns1__LokeJudgeResponse);
		((_ns1__LokeJudgeResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__LokeJudgeResponse, n);
		if (size)
			*size = n * sizeof(_ns1__LokeJudgeResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__LokeJudgeResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__LokeJudgeResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__LokeJudgeResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__LokeJudgeResponse %p -> %p\n", q, p));
	*(_ns1__LokeJudgeResponse*)p = *(_ns1__LokeJudgeResponse*)q;
}

void _ns1__LokeJudge::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__LokeJudge::jczNo = NULL;
	this->_ns1__LokeJudge::devBm = NULL;
	/* transient soap skipped */
}

void _ns1__LokeJudge::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__LokeJudge::jczNo);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__LokeJudge::devBm);
	/* transient soap skipped */
#endif
}

int _ns1__LokeJudge::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__LokeJudge(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__LokeJudge(struct soap *soap, const char *tag, int id, const _ns1__LokeJudge *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__LokeJudge), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:jczNo", -1, &(a->_ns1__LokeJudge::jczNo), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:devBm", -1, &(a->_ns1__LokeJudge::devBm), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__LokeJudge::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__LokeJudge(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__LokeJudge * SOAP_FMAC4 soap_in__ns1__LokeJudge(struct soap *soap, const char *tag, _ns1__LokeJudge *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__LokeJudge *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__LokeJudge, sizeof(_ns1__LokeJudge), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__LokeJudge)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__LokeJudge *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_jczNo1 = 1;
	size_t soap_flag_devBm1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_jczNo1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:jczNo", &(a->_ns1__LokeJudge::jczNo), "xsd:string"))
				{	soap_flag_jczNo1--;
					continue;
				}
			if (soap_flag_devBm1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:devBm", &(a->_ns1__LokeJudge::devBm), "xsd:string"))
				{	soap_flag_devBm1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__LokeJudge *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__LokeJudge, 0, sizeof(_ns1__LokeJudge), 0, soap_copy__ns1__LokeJudge);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__LokeJudge::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__LokeJudge);
	if (this->soap_out(soap, tag?tag:"ns1:LokeJudge", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__LokeJudge::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__LokeJudge(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__LokeJudge * SOAP_FMAC4 soap_get__ns1__LokeJudge(struct soap *soap, _ns1__LokeJudge *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__LokeJudge(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__LokeJudge * SOAP_FMAC2 soap_instantiate__ns1__LokeJudge(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__LokeJudge(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__LokeJudge, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__LokeJudge);
		if (size)
			*size = sizeof(_ns1__LokeJudge);
		((_ns1__LokeJudge*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__LokeJudge, n);
		if (size)
			*size = n * sizeof(_ns1__LokeJudge);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__LokeJudge*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__LokeJudge*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__LokeJudge(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__LokeJudge %p -> %p\n", q, p));
	*(_ns1__LokeJudge*)p = *(_ns1__LokeJudge*)q;
}

void _ns1__PrintUpResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__PrintUpResponse::PrintUpResult = NULL;
	/* transient soap skipped */
}

void _ns1__PrintUpResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__PrintUpResponse::PrintUpResult);
	/* transient soap skipped */
#endif
}

int _ns1__PrintUpResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__PrintUpResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__PrintUpResponse(struct soap *soap, const char *tag, int id, const _ns1__PrintUpResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__PrintUpResponse), type))
		return soap->error;
	if (a->PrintUpResult)
		soap_element_result(soap, "ns1:PrintUpResult");
	if (soap_out_PointerTostd__wstring(soap, "ns1:PrintUpResult", -1, &(a->_ns1__PrintUpResponse::PrintUpResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__PrintUpResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__PrintUpResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__PrintUpResponse * SOAP_FMAC4 soap_in__ns1__PrintUpResponse(struct soap *soap, const char *tag, _ns1__PrintUpResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__PrintUpResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__PrintUpResponse, sizeof(_ns1__PrintUpResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__PrintUpResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__PrintUpResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_PrintUpResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_PrintUpResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:PrintUpResult", &(a->_ns1__PrintUpResponse::PrintUpResult), "xsd:string"))
				{	soap_flag_PrintUpResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:PrintUpResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__PrintUpResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__PrintUpResponse, 0, sizeof(_ns1__PrintUpResponse), 0, soap_copy__ns1__PrintUpResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__PrintUpResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__PrintUpResponse);
	if (this->soap_out(soap, tag?tag:"ns1:PrintUpResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__PrintUpResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__PrintUpResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__PrintUpResponse * SOAP_FMAC4 soap_get__ns1__PrintUpResponse(struct soap *soap, _ns1__PrintUpResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__PrintUpResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__PrintUpResponse * SOAP_FMAC2 soap_instantiate__ns1__PrintUpResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__PrintUpResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__PrintUpResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__PrintUpResponse);
		if (size)
			*size = sizeof(_ns1__PrintUpResponse);
		((_ns1__PrintUpResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__PrintUpResponse, n);
		if (size)
			*size = n * sizeof(_ns1__PrintUpResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__PrintUpResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__PrintUpResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__PrintUpResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__PrintUpResponse %p -> %p\n", q, p));
	*(_ns1__PrintUpResponse*)p = *(_ns1__PrintUpResponse*)q;
}

void _ns1__PrintUp::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__PrintUp::lsbh = NULL;
	this->_ns1__PrintUp::encodeReport = NULL;
	/* transient soap skipped */
}

void _ns1__PrintUp::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__PrintUp::lsbh);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__PrintUp::encodeReport);
	/* transient soap skipped */
#endif
}

int _ns1__PrintUp::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__PrintUp(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__PrintUp(struct soap *soap, const char *tag, int id, const _ns1__PrintUp *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__PrintUp), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:lsbh", -1, &(a->_ns1__PrintUp::lsbh), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:encodeReport", -1, &(a->_ns1__PrintUp::encodeReport), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__PrintUp::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__PrintUp(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__PrintUp * SOAP_FMAC4 soap_in__ns1__PrintUp(struct soap *soap, const char *tag, _ns1__PrintUp *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__PrintUp *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__PrintUp, sizeof(_ns1__PrintUp), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__PrintUp)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__PrintUp *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_lsbh1 = 1;
	size_t soap_flag_encodeReport1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_lsbh1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:lsbh", &(a->_ns1__PrintUp::lsbh), "xsd:string"))
				{	soap_flag_lsbh1--;
					continue;
				}
			if (soap_flag_encodeReport1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:encodeReport", &(a->_ns1__PrintUp::encodeReport), "xsd:string"))
				{	soap_flag_encodeReport1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__PrintUp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__PrintUp, 0, sizeof(_ns1__PrintUp), 0, soap_copy__ns1__PrintUp);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__PrintUp::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__PrintUp);
	if (this->soap_out(soap, tag?tag:"ns1:PrintUp", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__PrintUp::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__PrintUp(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__PrintUp * SOAP_FMAC4 soap_get__ns1__PrintUp(struct soap *soap, _ns1__PrintUp *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__PrintUp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__PrintUp * SOAP_FMAC2 soap_instantiate__ns1__PrintUp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__PrintUp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__PrintUp, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__PrintUp);
		if (size)
			*size = sizeof(_ns1__PrintUp);
		((_ns1__PrintUp*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__PrintUp, n);
		if (size)
			*size = n * sizeof(_ns1__PrintUp);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__PrintUp*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__PrintUp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__PrintUp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__PrintUp %p -> %p\n", q, p));
	*(_ns1__PrintUp*)p = *(_ns1__PrintUp*)q;
}

void _ns1__PrintJudgeResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__PrintJudgeResponse::PrintJudgeResult = NULL;
	/* transient soap skipped */
}

void _ns1__PrintJudgeResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__PrintJudgeResponse::PrintJudgeResult);
	/* transient soap skipped */
#endif
}

int _ns1__PrintJudgeResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__PrintJudgeResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__PrintJudgeResponse(struct soap *soap, const char *tag, int id, const _ns1__PrintJudgeResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__PrintJudgeResponse), type))
		return soap->error;
	if (a->PrintJudgeResult)
		soap_element_result(soap, "ns1:PrintJudgeResult");
	if (soap_out_PointerTostd__wstring(soap, "ns1:PrintJudgeResult", -1, &(a->_ns1__PrintJudgeResponse::PrintJudgeResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__PrintJudgeResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__PrintJudgeResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__PrintJudgeResponse * SOAP_FMAC4 soap_in__ns1__PrintJudgeResponse(struct soap *soap, const char *tag, _ns1__PrintJudgeResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__PrintJudgeResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__PrintJudgeResponse, sizeof(_ns1__PrintJudgeResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__PrintJudgeResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__PrintJudgeResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_PrintJudgeResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_PrintJudgeResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:PrintJudgeResult", &(a->_ns1__PrintJudgeResponse::PrintJudgeResult), "xsd:string"))
				{	soap_flag_PrintJudgeResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:PrintJudgeResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__PrintJudgeResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__PrintJudgeResponse, 0, sizeof(_ns1__PrintJudgeResponse), 0, soap_copy__ns1__PrintJudgeResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__PrintJudgeResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__PrintJudgeResponse);
	if (this->soap_out(soap, tag?tag:"ns1:PrintJudgeResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__PrintJudgeResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__PrintJudgeResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__PrintJudgeResponse * SOAP_FMAC4 soap_get__ns1__PrintJudgeResponse(struct soap *soap, _ns1__PrintJudgeResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__PrintJudgeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__PrintJudgeResponse * SOAP_FMAC2 soap_instantiate__ns1__PrintJudgeResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__PrintJudgeResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__PrintJudgeResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__PrintJudgeResponse);
		if (size)
			*size = sizeof(_ns1__PrintJudgeResponse);
		((_ns1__PrintJudgeResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__PrintJudgeResponse, n);
		if (size)
			*size = n * sizeof(_ns1__PrintJudgeResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__PrintJudgeResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__PrintJudgeResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__PrintJudgeResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__PrintJudgeResponse %p -> %p\n", q, p));
	*(_ns1__PrintJudgeResponse*)p = *(_ns1__PrintJudgeResponse*)q;
}

void _ns1__PrintJudge::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__PrintJudge::lsbh = NULL;
	this->_ns1__PrintJudge::jczNo = NULL;
	/* transient soap skipped */
}

void _ns1__PrintJudge::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__PrintJudge::lsbh);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__PrintJudge::jczNo);
	/* transient soap skipped */
#endif
}

int _ns1__PrintJudge::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__PrintJudge(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__PrintJudge(struct soap *soap, const char *tag, int id, const _ns1__PrintJudge *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__PrintJudge), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:lsbh", -1, &(a->_ns1__PrintJudge::lsbh), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:jczNo", -1, &(a->_ns1__PrintJudge::jczNo), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__PrintJudge::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__PrintJudge(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__PrintJudge * SOAP_FMAC4 soap_in__ns1__PrintJudge(struct soap *soap, const char *tag, _ns1__PrintJudge *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__PrintJudge *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__PrintJudge, sizeof(_ns1__PrintJudge), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__PrintJudge)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__PrintJudge *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_lsbh1 = 1;
	size_t soap_flag_jczNo1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_lsbh1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:lsbh", &(a->_ns1__PrintJudge::lsbh), "xsd:string"))
				{	soap_flag_lsbh1--;
					continue;
				}
			if (soap_flag_jczNo1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:jczNo", &(a->_ns1__PrintJudge::jczNo), "xsd:string"))
				{	soap_flag_jczNo1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__PrintJudge *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__PrintJudge, 0, sizeof(_ns1__PrintJudge), 0, soap_copy__ns1__PrintJudge);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__PrintJudge::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__PrintJudge);
	if (this->soap_out(soap, tag?tag:"ns1:PrintJudge", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__PrintJudge::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__PrintJudge(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__PrintJudge * SOAP_FMAC4 soap_get__ns1__PrintJudge(struct soap *soap, _ns1__PrintJudge *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__PrintJudge(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__PrintJudge * SOAP_FMAC2 soap_instantiate__ns1__PrintJudge(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__PrintJudge(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__PrintJudge, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__PrintJudge);
		if (size)
			*size = sizeof(_ns1__PrintJudge);
		((_ns1__PrintJudge*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__PrintJudge, n);
		if (size)
			*size = n * sizeof(_ns1__PrintJudge);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__PrintJudge*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__PrintJudge*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__PrintJudge(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__PrintJudge %p -> %p\n", q, p));
	*(_ns1__PrintJudge*)p = *(_ns1__PrintJudge*)q;
}

void _ns1__AddVerifyResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__AddVerifyResponse::AddVerifyResult = NULL;
	/* transient soap skipped */
}

void _ns1__AddVerifyResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__AddVerifyResponse::AddVerifyResult);
	/* transient soap skipped */
#endif
}

int _ns1__AddVerifyResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AddVerifyResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AddVerifyResponse(struct soap *soap, const char *tag, int id, const _ns1__AddVerifyResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AddVerifyResponse), type))
		return soap->error;
	if (a->AddVerifyResult)
		soap_element_result(soap, "ns1:AddVerifyResult");
	if (soap_out_PointerTostd__wstring(soap, "ns1:AddVerifyResult", -1, &(a->_ns1__AddVerifyResponse::AddVerifyResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AddVerifyResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AddVerifyResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AddVerifyResponse * SOAP_FMAC4 soap_in__ns1__AddVerifyResponse(struct soap *soap, const char *tag, _ns1__AddVerifyResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AddVerifyResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AddVerifyResponse, sizeof(_ns1__AddVerifyResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AddVerifyResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AddVerifyResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_AddVerifyResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AddVerifyResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:AddVerifyResult", &(a->_ns1__AddVerifyResponse::AddVerifyResult), "xsd:string"))
				{	soap_flag_AddVerifyResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:AddVerifyResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AddVerifyResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AddVerifyResponse, 0, sizeof(_ns1__AddVerifyResponse), 0, soap_copy__ns1__AddVerifyResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__AddVerifyResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AddVerifyResponse);
	if (this->soap_out(soap, tag?tag:"ns1:AddVerifyResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AddVerifyResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AddVerifyResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AddVerifyResponse * SOAP_FMAC4 soap_get__ns1__AddVerifyResponse(struct soap *soap, _ns1__AddVerifyResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AddVerifyResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AddVerifyResponse * SOAP_FMAC2 soap_instantiate__ns1__AddVerifyResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AddVerifyResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AddVerifyResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AddVerifyResponse);
		if (size)
			*size = sizeof(_ns1__AddVerifyResponse);
		((_ns1__AddVerifyResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AddVerifyResponse, n);
		if (size)
			*size = n * sizeof(_ns1__AddVerifyResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AddVerifyResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AddVerifyResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AddVerifyResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AddVerifyResponse %p -> %p\n", q, p));
	*(_ns1__AddVerifyResponse*)p = *(_ns1__AddVerifyResponse*)q;
}

void _ns1__AddVerify::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__AddVerify::DeviceType = NULL;
	this->_ns1__AddVerify::Items = NULL;
	/* transient soap skipped */
}

void _ns1__AddVerify::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__AddVerify::DeviceType);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__AddVerify::Items);
	/* transient soap skipped */
#endif
}

int _ns1__AddVerify::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AddVerify(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AddVerify(struct soap *soap, const char *tag, int id, const _ns1__AddVerify *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AddVerify), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:DeviceType", -1, &(a->_ns1__AddVerify::DeviceType), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:Items", -1, &(a->_ns1__AddVerify::Items), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AddVerify::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AddVerify(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AddVerify * SOAP_FMAC4 soap_in__ns1__AddVerify(struct soap *soap, const char *tag, _ns1__AddVerify *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AddVerify *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AddVerify, sizeof(_ns1__AddVerify), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AddVerify)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AddVerify *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_DeviceType1 = 1;
	size_t soap_flag_Items1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_DeviceType1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:DeviceType", &(a->_ns1__AddVerify::DeviceType), "xsd:string"))
				{	soap_flag_DeviceType1--;
					continue;
				}
			if (soap_flag_Items1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:Items", &(a->_ns1__AddVerify::Items), "xsd:string"))
				{	soap_flag_Items1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AddVerify *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AddVerify, 0, sizeof(_ns1__AddVerify), 0, soap_copy__ns1__AddVerify);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__AddVerify::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AddVerify);
	if (this->soap_out(soap, tag?tag:"ns1:AddVerify", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AddVerify::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AddVerify(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AddVerify * SOAP_FMAC4 soap_get__ns1__AddVerify(struct soap *soap, _ns1__AddVerify *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AddVerify(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AddVerify * SOAP_FMAC2 soap_instantiate__ns1__AddVerify(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AddVerify(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AddVerify, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AddVerify);
		if (size)
			*size = sizeof(_ns1__AddVerify);
		((_ns1__AddVerify*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AddVerify, n);
		if (size)
			*size = n * sizeof(_ns1__AddVerify);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AddVerify*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AddVerify*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AddVerify(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AddVerify %p -> %p\n", q, p));
	*(_ns1__AddVerify*)p = *(_ns1__AddVerify*)q;
}

void _ns1__RyzfControlResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__RyzfControlResponse::RyzfControlResult = NULL;
	/* transient soap skipped */
}

void _ns1__RyzfControlResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__RyzfControlResponse::RyzfControlResult);
	/* transient soap skipped */
#endif
}

int _ns1__RyzfControlResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__RyzfControlResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RyzfControlResponse(struct soap *soap, const char *tag, int id, const _ns1__RyzfControlResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__RyzfControlResponse), type))
		return soap->error;
	if (a->RyzfControlResult)
		soap_element_result(soap, "ns1:RyzfControlResult");
	if (soap_out_PointerTostd__wstring(soap, "ns1:RyzfControlResult", -1, &(a->_ns1__RyzfControlResponse::RyzfControlResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__RyzfControlResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__RyzfControlResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__RyzfControlResponse * SOAP_FMAC4 soap_in__ns1__RyzfControlResponse(struct soap *soap, const char *tag, _ns1__RyzfControlResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__RyzfControlResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__RyzfControlResponse, sizeof(_ns1__RyzfControlResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__RyzfControlResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__RyzfControlResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_RyzfControlResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_RyzfControlResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:RyzfControlResult", &(a->_ns1__RyzfControlResponse::RyzfControlResult), "xsd:string"))
				{	soap_flag_RyzfControlResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:RyzfControlResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__RyzfControlResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__RyzfControlResponse, 0, sizeof(_ns1__RyzfControlResponse), 0, soap_copy__ns1__RyzfControlResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__RyzfControlResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__RyzfControlResponse);
	if (this->soap_out(soap, tag?tag:"ns1:RyzfControlResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__RyzfControlResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__RyzfControlResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__RyzfControlResponse * SOAP_FMAC4 soap_get__ns1__RyzfControlResponse(struct soap *soap, _ns1__RyzfControlResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__RyzfControlResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__RyzfControlResponse * SOAP_FMAC2 soap_instantiate__ns1__RyzfControlResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__RyzfControlResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__RyzfControlResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__RyzfControlResponse);
		if (size)
			*size = sizeof(_ns1__RyzfControlResponse);
		((_ns1__RyzfControlResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__RyzfControlResponse, n);
		if (size)
			*size = n * sizeof(_ns1__RyzfControlResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__RyzfControlResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__RyzfControlResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__RyzfControlResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__RyzfControlResponse %p -> %p\n", q, p));
	*(_ns1__RyzfControlResponse*)p = *(_ns1__RyzfControlResponse*)q;
}

void _ns1__RyzfControl::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__RyzfControl::rykzItems = NULL;
	/* transient soap skipped */
}

void _ns1__RyzfControl::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__RyzfControl::rykzItems);
	/* transient soap skipped */
#endif
}

int _ns1__RyzfControl::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__RyzfControl(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RyzfControl(struct soap *soap, const char *tag, int id, const _ns1__RyzfControl *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__RyzfControl), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:rykzItems", -1, &(a->_ns1__RyzfControl::rykzItems), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__RyzfControl::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__RyzfControl(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__RyzfControl * SOAP_FMAC4 soap_in__ns1__RyzfControl(struct soap *soap, const char *tag, _ns1__RyzfControl *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__RyzfControl *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__RyzfControl, sizeof(_ns1__RyzfControl), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__RyzfControl)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__RyzfControl *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_rykzItems1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_rykzItems1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:rykzItems", &(a->_ns1__RyzfControl::rykzItems), "xsd:string"))
				{	soap_flag_rykzItems1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__RyzfControl *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__RyzfControl, 0, sizeof(_ns1__RyzfControl), 0, soap_copy__ns1__RyzfControl);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__RyzfControl::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__RyzfControl);
	if (this->soap_out(soap, tag?tag:"ns1:RyzfControl", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__RyzfControl::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__RyzfControl(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__RyzfControl * SOAP_FMAC4 soap_get__ns1__RyzfControl(struct soap *soap, _ns1__RyzfControl *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__RyzfControl(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__RyzfControl * SOAP_FMAC2 soap_instantiate__ns1__RyzfControl(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__RyzfControl(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__RyzfControl, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__RyzfControl);
		if (size)
			*size = sizeof(_ns1__RyzfControl);
		((_ns1__RyzfControl*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__RyzfControl, n);
		if (size)
			*size = n * sizeof(_ns1__RyzfControl);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__RyzfControl*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__RyzfControl*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__RyzfControl(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__RyzfControl %p -> %p\n", q, p));
	*(_ns1__RyzfControl*)p = *(_ns1__RyzfControl*)q;
}

void _ns1__AddIuprDataResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__AddIuprDataResponse::AddIuprDataResult = NULL;
	/* transient soap skipped */
}

void _ns1__AddIuprDataResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__AddIuprDataResponse::AddIuprDataResult);
	/* transient soap skipped */
#endif
}

int _ns1__AddIuprDataResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AddIuprDataResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AddIuprDataResponse(struct soap *soap, const char *tag, int id, const _ns1__AddIuprDataResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AddIuprDataResponse), type))
		return soap->error;
	if (a->AddIuprDataResult)
		soap_element_result(soap, "ns1:AddIuprDataResult");
	if (soap_out_PointerTostd__wstring(soap, "ns1:AddIuprDataResult", -1, &(a->_ns1__AddIuprDataResponse::AddIuprDataResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AddIuprDataResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AddIuprDataResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AddIuprDataResponse * SOAP_FMAC4 soap_in__ns1__AddIuprDataResponse(struct soap *soap, const char *tag, _ns1__AddIuprDataResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AddIuprDataResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AddIuprDataResponse, sizeof(_ns1__AddIuprDataResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AddIuprDataResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AddIuprDataResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_AddIuprDataResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AddIuprDataResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:AddIuprDataResult", &(a->_ns1__AddIuprDataResponse::AddIuprDataResult), "xsd:string"))
				{	soap_flag_AddIuprDataResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:AddIuprDataResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AddIuprDataResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AddIuprDataResponse, 0, sizeof(_ns1__AddIuprDataResponse), 0, soap_copy__ns1__AddIuprDataResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__AddIuprDataResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AddIuprDataResponse);
	if (this->soap_out(soap, tag?tag:"ns1:AddIuprDataResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AddIuprDataResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AddIuprDataResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AddIuprDataResponse * SOAP_FMAC4 soap_get__ns1__AddIuprDataResponse(struct soap *soap, _ns1__AddIuprDataResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AddIuprDataResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AddIuprDataResponse * SOAP_FMAC2 soap_instantiate__ns1__AddIuprDataResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AddIuprDataResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AddIuprDataResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AddIuprDataResponse);
		if (size)
			*size = sizeof(_ns1__AddIuprDataResponse);
		((_ns1__AddIuprDataResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AddIuprDataResponse, n);
		if (size)
			*size = n * sizeof(_ns1__AddIuprDataResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AddIuprDataResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AddIuprDataResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AddIuprDataResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AddIuprDataResponse %p -> %p\n", q, p));
	*(_ns1__AddIuprDataResponse*)p = *(_ns1__AddIuprDataResponse*)q;
}

void _ns1__AddIuprData::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__AddIuprData::IuprDataItems = NULL;
	this->_ns1__AddIuprData::ObdType = NULL;
	/* transient soap skipped */
}

void _ns1__AddIuprData::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__AddIuprData::IuprDataItems);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__AddIuprData::ObdType);
	/* transient soap skipped */
#endif
}

int _ns1__AddIuprData::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AddIuprData(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AddIuprData(struct soap *soap, const char *tag, int id, const _ns1__AddIuprData *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AddIuprData), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:IuprDataItems", -1, &(a->_ns1__AddIuprData::IuprDataItems), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:ObdType", -1, &(a->_ns1__AddIuprData::ObdType), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AddIuprData::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AddIuprData(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AddIuprData * SOAP_FMAC4 soap_in__ns1__AddIuprData(struct soap *soap, const char *tag, _ns1__AddIuprData *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AddIuprData *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AddIuprData, sizeof(_ns1__AddIuprData), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AddIuprData)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AddIuprData *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_IuprDataItems1 = 1;
	size_t soap_flag_ObdType1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_IuprDataItems1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:IuprDataItems", &(a->_ns1__AddIuprData::IuprDataItems), "xsd:string"))
				{	soap_flag_IuprDataItems1--;
					continue;
				}
			if (soap_flag_ObdType1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:ObdType", &(a->_ns1__AddIuprData::ObdType), "xsd:string"))
				{	soap_flag_ObdType1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AddIuprData *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AddIuprData, 0, sizeof(_ns1__AddIuprData), 0, soap_copy__ns1__AddIuprData);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__AddIuprData::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AddIuprData);
	if (this->soap_out(soap, tag?tag:"ns1:AddIuprData", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AddIuprData::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AddIuprData(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AddIuprData * SOAP_FMAC4 soap_get__ns1__AddIuprData(struct soap *soap, _ns1__AddIuprData *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AddIuprData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AddIuprData * SOAP_FMAC2 soap_instantiate__ns1__AddIuprData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AddIuprData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AddIuprData, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AddIuprData);
		if (size)
			*size = sizeof(_ns1__AddIuprData);
		((_ns1__AddIuprData*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AddIuprData, n);
		if (size)
			*size = n * sizeof(_ns1__AddIuprData);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AddIuprData*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AddIuprData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AddIuprData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AddIuprData %p -> %p\n", q, p));
	*(_ns1__AddIuprData*)p = *(_ns1__AddIuprData*)q;
}

void _ns1__AddObdDataResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__AddObdDataResponse::AddObdDataResult = NULL;
	/* transient soap skipped */
}

void _ns1__AddObdDataResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__AddObdDataResponse::AddObdDataResult);
	/* transient soap skipped */
#endif
}

int _ns1__AddObdDataResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AddObdDataResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AddObdDataResponse(struct soap *soap, const char *tag, int id, const _ns1__AddObdDataResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AddObdDataResponse), type))
		return soap->error;
	if (a->AddObdDataResult)
		soap_element_result(soap, "ns1:AddObdDataResult");
	if (soap_out_PointerTostd__wstring(soap, "ns1:AddObdDataResult", -1, &(a->_ns1__AddObdDataResponse::AddObdDataResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AddObdDataResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AddObdDataResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AddObdDataResponse * SOAP_FMAC4 soap_in__ns1__AddObdDataResponse(struct soap *soap, const char *tag, _ns1__AddObdDataResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AddObdDataResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AddObdDataResponse, sizeof(_ns1__AddObdDataResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AddObdDataResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AddObdDataResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_AddObdDataResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AddObdDataResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:AddObdDataResult", &(a->_ns1__AddObdDataResponse::AddObdDataResult), "xsd:string"))
				{	soap_flag_AddObdDataResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:AddObdDataResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AddObdDataResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AddObdDataResponse, 0, sizeof(_ns1__AddObdDataResponse), 0, soap_copy__ns1__AddObdDataResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__AddObdDataResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AddObdDataResponse);
	if (this->soap_out(soap, tag?tag:"ns1:AddObdDataResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AddObdDataResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AddObdDataResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AddObdDataResponse * SOAP_FMAC4 soap_get__ns1__AddObdDataResponse(struct soap *soap, _ns1__AddObdDataResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AddObdDataResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AddObdDataResponse * SOAP_FMAC2 soap_instantiate__ns1__AddObdDataResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AddObdDataResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AddObdDataResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AddObdDataResponse);
		if (size)
			*size = sizeof(_ns1__AddObdDataResponse);
		((_ns1__AddObdDataResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AddObdDataResponse, n);
		if (size)
			*size = n * sizeof(_ns1__AddObdDataResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AddObdDataResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AddObdDataResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AddObdDataResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AddObdDataResponse %p -> %p\n", q, p));
	*(_ns1__AddObdDataResponse*)p = *(_ns1__AddObdDataResponse*)q;
}

void _ns1__AddObdData::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__AddObdData::ObdDataItems = NULL;
	/* transient soap skipped */
}

void _ns1__AddObdData::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__AddObdData::ObdDataItems);
	/* transient soap skipped */
#endif
}

int _ns1__AddObdData::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AddObdData(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AddObdData(struct soap *soap, const char *tag, int id, const _ns1__AddObdData *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AddObdData), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:ObdDataItems", -1, &(a->_ns1__AddObdData::ObdDataItems), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AddObdData::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AddObdData(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AddObdData * SOAP_FMAC4 soap_in__ns1__AddObdData(struct soap *soap, const char *tag, _ns1__AddObdData *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AddObdData *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AddObdData, sizeof(_ns1__AddObdData), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AddObdData)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AddObdData *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ObdDataItems1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ObdDataItems1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:ObdDataItems", &(a->_ns1__AddObdData::ObdDataItems), "xsd:string"))
				{	soap_flag_ObdDataItems1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AddObdData *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AddObdData, 0, sizeof(_ns1__AddObdData), 0, soap_copy__ns1__AddObdData);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__AddObdData::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AddObdData);
	if (this->soap_out(soap, tag?tag:"ns1:AddObdData", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AddObdData::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AddObdData(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AddObdData * SOAP_FMAC4 soap_get__ns1__AddObdData(struct soap *soap, _ns1__AddObdData *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AddObdData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AddObdData * SOAP_FMAC2 soap_instantiate__ns1__AddObdData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AddObdData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AddObdData, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AddObdData);
		if (size)
			*size = sizeof(_ns1__AddObdData);
		((_ns1__AddObdData*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AddObdData, n);
		if (size)
			*size = n * sizeof(_ns1__AddObdData);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AddObdData*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AddObdData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AddObdData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AddObdData %p -> %p\n", q, p));
	*(_ns1__AddObdData*)p = *(_ns1__AddObdData*)q;
}

void _ns1__AddCheckDataResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__AddCheckDataResponse::AddCheckDataResult = NULL;
	/* transient soap skipped */
}

void _ns1__AddCheckDataResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__AddCheckDataResponse::AddCheckDataResult);
	/* transient soap skipped */
#endif
}

int _ns1__AddCheckDataResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AddCheckDataResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AddCheckDataResponse(struct soap *soap, const char *tag, int id, const _ns1__AddCheckDataResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AddCheckDataResponse), type))
		return soap->error;
	if (a->AddCheckDataResult)
		soap_element_result(soap, "ns1:AddCheckDataResult");
	if (soap_out_PointerTostd__wstring(soap, "ns1:AddCheckDataResult", -1, &(a->_ns1__AddCheckDataResponse::AddCheckDataResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AddCheckDataResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AddCheckDataResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AddCheckDataResponse * SOAP_FMAC4 soap_in__ns1__AddCheckDataResponse(struct soap *soap, const char *tag, _ns1__AddCheckDataResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AddCheckDataResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AddCheckDataResponse, sizeof(_ns1__AddCheckDataResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AddCheckDataResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AddCheckDataResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_AddCheckDataResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AddCheckDataResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:AddCheckDataResult", &(a->_ns1__AddCheckDataResponse::AddCheckDataResult), "xsd:string"))
				{	soap_flag_AddCheckDataResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:AddCheckDataResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AddCheckDataResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AddCheckDataResponse, 0, sizeof(_ns1__AddCheckDataResponse), 0, soap_copy__ns1__AddCheckDataResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__AddCheckDataResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AddCheckDataResponse);
	if (this->soap_out(soap, tag?tag:"ns1:AddCheckDataResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AddCheckDataResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AddCheckDataResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AddCheckDataResponse * SOAP_FMAC4 soap_get__ns1__AddCheckDataResponse(struct soap *soap, _ns1__AddCheckDataResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AddCheckDataResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AddCheckDataResponse * SOAP_FMAC2 soap_instantiate__ns1__AddCheckDataResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AddCheckDataResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AddCheckDataResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AddCheckDataResponse);
		if (size)
			*size = sizeof(_ns1__AddCheckDataResponse);
		((_ns1__AddCheckDataResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AddCheckDataResponse, n);
		if (size)
			*size = n * sizeof(_ns1__AddCheckDataResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AddCheckDataResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AddCheckDataResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AddCheckDataResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AddCheckDataResponse %p -> %p\n", q, p));
	*(_ns1__AddCheckDataResponse*)p = *(_ns1__AddCheckDataResponse*)q;
}

void _ns1__AddCheckData::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__AddCheckData::CheckDataItems = NULL;
	this->_ns1__AddCheckData::CheckEndDataItems = NULL;
	/* transient soap skipped */
}

void _ns1__AddCheckData::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__AddCheckData::CheckDataItems);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__AddCheckData::CheckEndDataItems);
	/* transient soap skipped */
#endif
}

int _ns1__AddCheckData::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AddCheckData(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AddCheckData(struct soap *soap, const char *tag, int id, const _ns1__AddCheckData *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AddCheckData), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:CheckDataItems", -1, &(a->_ns1__AddCheckData::CheckDataItems), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:CheckEndDataItems", -1, &(a->_ns1__AddCheckData::CheckEndDataItems), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AddCheckData::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AddCheckData(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AddCheckData * SOAP_FMAC4 soap_in__ns1__AddCheckData(struct soap *soap, const char *tag, _ns1__AddCheckData *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AddCheckData *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AddCheckData, sizeof(_ns1__AddCheckData), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AddCheckData)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AddCheckData *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_CheckDataItems1 = 1;
	size_t soap_flag_CheckEndDataItems1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_CheckDataItems1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:CheckDataItems", &(a->_ns1__AddCheckData::CheckDataItems), "xsd:string"))
				{	soap_flag_CheckDataItems1--;
					continue;
				}
			if (soap_flag_CheckEndDataItems1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:CheckEndDataItems", &(a->_ns1__AddCheckData::CheckEndDataItems), "xsd:string"))
				{	soap_flag_CheckEndDataItems1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AddCheckData *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AddCheckData, 0, sizeof(_ns1__AddCheckData), 0, soap_copy__ns1__AddCheckData);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__AddCheckData::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__AddCheckData);
	if (this->soap_out(soap, tag?tag:"ns1:AddCheckData", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AddCheckData::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AddCheckData(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AddCheckData * SOAP_FMAC4 soap_get__ns1__AddCheckData(struct soap *soap, _ns1__AddCheckData *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AddCheckData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AddCheckData * SOAP_FMAC2 soap_instantiate__ns1__AddCheckData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AddCheckData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AddCheckData, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AddCheckData);
		if (size)
			*size = sizeof(_ns1__AddCheckData);
		((_ns1__AddCheckData*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AddCheckData, n);
		if (size)
			*size = n * sizeof(_ns1__AddCheckData);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AddCheckData*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AddCheckData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AddCheckData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AddCheckData %p -> %p\n", q, p));
	*(_ns1__AddCheckData*)p = *(_ns1__AddCheckData*)q;
}

void _ns1__OnlineJudgeResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__OnlineJudgeResponse::OnlineJudgeResult = NULL;
	/* transient soap skipped */
}

void _ns1__OnlineJudgeResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__OnlineJudgeResponse::OnlineJudgeResult);
	/* transient soap skipped */
#endif
}

int _ns1__OnlineJudgeResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__OnlineJudgeResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OnlineJudgeResponse(struct soap *soap, const char *tag, int id, const _ns1__OnlineJudgeResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__OnlineJudgeResponse), type))
		return soap->error;
	if (a->OnlineJudgeResult)
		soap_element_result(soap, "ns1:OnlineJudgeResult");
	if (soap_out_PointerTostd__wstring(soap, "ns1:OnlineJudgeResult", -1, &(a->_ns1__OnlineJudgeResponse::OnlineJudgeResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__OnlineJudgeResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__OnlineJudgeResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__OnlineJudgeResponse * SOAP_FMAC4 soap_in__ns1__OnlineJudgeResponse(struct soap *soap, const char *tag, _ns1__OnlineJudgeResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__OnlineJudgeResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__OnlineJudgeResponse, sizeof(_ns1__OnlineJudgeResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__OnlineJudgeResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__OnlineJudgeResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_OnlineJudgeResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OnlineJudgeResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:OnlineJudgeResult", &(a->_ns1__OnlineJudgeResponse::OnlineJudgeResult), "xsd:string"))
				{	soap_flag_OnlineJudgeResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:OnlineJudgeResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__OnlineJudgeResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__OnlineJudgeResponse, 0, sizeof(_ns1__OnlineJudgeResponse), 0, soap_copy__ns1__OnlineJudgeResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__OnlineJudgeResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__OnlineJudgeResponse);
	if (this->soap_out(soap, tag?tag:"ns1:OnlineJudgeResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__OnlineJudgeResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__OnlineJudgeResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__OnlineJudgeResponse * SOAP_FMAC4 soap_get__ns1__OnlineJudgeResponse(struct soap *soap, _ns1__OnlineJudgeResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__OnlineJudgeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__OnlineJudgeResponse * SOAP_FMAC2 soap_instantiate__ns1__OnlineJudgeResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__OnlineJudgeResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__OnlineJudgeResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__OnlineJudgeResponse);
		if (size)
			*size = sizeof(_ns1__OnlineJudgeResponse);
		((_ns1__OnlineJudgeResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__OnlineJudgeResponse, n);
		if (size)
			*size = n * sizeof(_ns1__OnlineJudgeResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__OnlineJudgeResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__OnlineJudgeResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__OnlineJudgeResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__OnlineJudgeResponse %p -> %p\n", q, p));
	*(_ns1__OnlineJudgeResponse*)p = *(_ns1__OnlineJudgeResponse*)q;
}

void _ns1__OnlineJudge::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__OnlineJudge::jczNo = NULL;
	this->_ns1__OnlineJudge::jcxNo = NULL;
	this->_ns1__OnlineJudge::bdrq = NULL;
	this->_ns1__OnlineJudge::CarPZ = NULL;
	/* transient soap skipped */
}

void _ns1__OnlineJudge::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__OnlineJudge::jczNo);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__OnlineJudge::jcxNo);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__OnlineJudge::bdrq);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__OnlineJudge::CarPZ);
	/* transient soap skipped */
#endif
}

int _ns1__OnlineJudge::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__OnlineJudge(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OnlineJudge(struct soap *soap, const char *tag, int id, const _ns1__OnlineJudge *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__OnlineJudge), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:jczNo", -1, &(a->_ns1__OnlineJudge::jczNo), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:jcxNo", -1, &(a->_ns1__OnlineJudge::jcxNo), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:bdrq", -1, &(a->_ns1__OnlineJudge::bdrq), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:CarPZ", -1, &(a->_ns1__OnlineJudge::CarPZ), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__OnlineJudge::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__OnlineJudge(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__OnlineJudge * SOAP_FMAC4 soap_in__ns1__OnlineJudge(struct soap *soap, const char *tag, _ns1__OnlineJudge *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__OnlineJudge *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__OnlineJudge, sizeof(_ns1__OnlineJudge), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__OnlineJudge)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__OnlineJudge *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_jczNo1 = 1;
	size_t soap_flag_jcxNo1 = 1;
	size_t soap_flag_bdrq1 = 1;
	size_t soap_flag_CarPZ1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_jczNo1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:jczNo", &(a->_ns1__OnlineJudge::jczNo), "xsd:string"))
				{	soap_flag_jczNo1--;
					continue;
				}
			if (soap_flag_jcxNo1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:jcxNo", &(a->_ns1__OnlineJudge::jcxNo), "xsd:string"))
				{	soap_flag_jcxNo1--;
					continue;
				}
			if (soap_flag_bdrq1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:bdrq", &(a->_ns1__OnlineJudge::bdrq), "xsd:string"))
				{	soap_flag_bdrq1--;
					continue;
				}
			if (soap_flag_CarPZ1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:CarPZ", &(a->_ns1__OnlineJudge::CarPZ), "xsd:string"))
				{	soap_flag_CarPZ1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__OnlineJudge *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__OnlineJudge, 0, sizeof(_ns1__OnlineJudge), 0, soap_copy__ns1__OnlineJudge);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__OnlineJudge::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__OnlineJudge);
	if (this->soap_out(soap, tag?tag:"ns1:OnlineJudge", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__OnlineJudge::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__OnlineJudge(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__OnlineJudge * SOAP_FMAC4 soap_get__ns1__OnlineJudge(struct soap *soap, _ns1__OnlineJudge *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__OnlineJudge(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__OnlineJudge * SOAP_FMAC2 soap_instantiate__ns1__OnlineJudge(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__OnlineJudge(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__OnlineJudge, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__OnlineJudge);
		if (size)
			*size = sizeof(_ns1__OnlineJudge);
		((_ns1__OnlineJudge*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__OnlineJudge, n);
		if (size)
			*size = n * sizeof(_ns1__OnlineJudge);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__OnlineJudge*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__OnlineJudge*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__OnlineJudge(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__OnlineJudge %p -> %p\n", q, p));
	*(_ns1__OnlineJudge*)p = *(_ns1__OnlineJudge*)q;
}

void _ns1__VehicleRegJudgeResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__VehicleRegJudgeResponse::VehicleRegJudgeResult = NULL;
	/* transient soap skipped */
}

void _ns1__VehicleRegJudgeResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__VehicleRegJudgeResponse::VehicleRegJudgeResult);
	/* transient soap skipped */
#endif
}

int _ns1__VehicleRegJudgeResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__VehicleRegJudgeResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__VehicleRegJudgeResponse(struct soap *soap, const char *tag, int id, const _ns1__VehicleRegJudgeResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__VehicleRegJudgeResponse), type))
		return soap->error;
	if (a->VehicleRegJudgeResult)
		soap_element_result(soap, "ns1:VehicleRegJudgeResult");
	if (soap_out_PointerTostd__wstring(soap, "ns1:VehicleRegJudgeResult", -1, &(a->_ns1__VehicleRegJudgeResponse::VehicleRegJudgeResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__VehicleRegJudgeResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__VehicleRegJudgeResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__VehicleRegJudgeResponse * SOAP_FMAC4 soap_in__ns1__VehicleRegJudgeResponse(struct soap *soap, const char *tag, _ns1__VehicleRegJudgeResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__VehicleRegJudgeResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__VehicleRegJudgeResponse, sizeof(_ns1__VehicleRegJudgeResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__VehicleRegJudgeResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__VehicleRegJudgeResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_VehicleRegJudgeResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_VehicleRegJudgeResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:VehicleRegJudgeResult", &(a->_ns1__VehicleRegJudgeResponse::VehicleRegJudgeResult), "xsd:string"))
				{	soap_flag_VehicleRegJudgeResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:VehicleRegJudgeResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__VehicleRegJudgeResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__VehicleRegJudgeResponse, 0, sizeof(_ns1__VehicleRegJudgeResponse), 0, soap_copy__ns1__VehicleRegJudgeResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__VehicleRegJudgeResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__VehicleRegJudgeResponse);
	if (this->soap_out(soap, tag?tag:"ns1:VehicleRegJudgeResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__VehicleRegJudgeResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__VehicleRegJudgeResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__VehicleRegJudgeResponse * SOAP_FMAC4 soap_get__ns1__VehicleRegJudgeResponse(struct soap *soap, _ns1__VehicleRegJudgeResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__VehicleRegJudgeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__VehicleRegJudgeResponse * SOAP_FMAC2 soap_instantiate__ns1__VehicleRegJudgeResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__VehicleRegJudgeResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__VehicleRegJudgeResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__VehicleRegJudgeResponse);
		if (size)
			*size = sizeof(_ns1__VehicleRegJudgeResponse);
		((_ns1__VehicleRegJudgeResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__VehicleRegJudgeResponse, n);
		if (size)
			*size = n * sizeof(_ns1__VehicleRegJudgeResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__VehicleRegJudgeResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__VehicleRegJudgeResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__VehicleRegJudgeResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__VehicleRegJudgeResponse %p -> %p\n", q, p));
	*(_ns1__VehicleRegJudgeResponse*)p = *(_ns1__VehicleRegJudgeResponse*)q;
}

void _ns1__VehicleRegJudge::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__VehicleRegJudge::JczId = NULL;
	this->_ns1__VehicleRegJudge::ZcTime = NULL;
	this->_ns1__VehicleRegJudge::CarItems = NULL;
	/* transient soap skipped */
}

void _ns1__VehicleRegJudge::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__VehicleRegJudge::JczId);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__VehicleRegJudge::ZcTime);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns1__VehicleRegJudge::CarItems);
	/* transient soap skipped */
#endif
}

int _ns1__VehicleRegJudge::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__VehicleRegJudge(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__VehicleRegJudge(struct soap *soap, const char *tag, int id, const _ns1__VehicleRegJudge *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__VehicleRegJudge), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:JczId", -1, &(a->_ns1__VehicleRegJudge::JczId), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:ZcTime", -1, &(a->_ns1__VehicleRegJudge::ZcTime), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns1:CarItems", -1, &(a->_ns1__VehicleRegJudge::CarItems), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__VehicleRegJudge::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__VehicleRegJudge(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__VehicleRegJudge * SOAP_FMAC4 soap_in__ns1__VehicleRegJudge(struct soap *soap, const char *tag, _ns1__VehicleRegJudge *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__VehicleRegJudge *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__VehicleRegJudge, sizeof(_ns1__VehicleRegJudge), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__VehicleRegJudge)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__VehicleRegJudge *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_JczId1 = 1;
	size_t soap_flag_ZcTime1 = 1;
	size_t soap_flag_CarItems1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_JczId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:JczId", &(a->_ns1__VehicleRegJudge::JczId), "xsd:string"))
				{	soap_flag_JczId1--;
					continue;
				}
			if (soap_flag_ZcTime1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:ZcTime", &(a->_ns1__VehicleRegJudge::ZcTime), "xsd:string"))
				{	soap_flag_ZcTime1--;
					continue;
				}
			if (soap_flag_CarItems1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns1:CarItems", &(a->_ns1__VehicleRegJudge::CarItems), "xsd:string"))
				{	soap_flag_CarItems1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__VehicleRegJudge *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__VehicleRegJudge, 0, sizeof(_ns1__VehicleRegJudge), 0, soap_copy__ns1__VehicleRegJudge);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__VehicleRegJudge::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE__ns1__VehicleRegJudge);
	if (this->soap_out(soap, tag?tag:"ns1:VehicleRegJudge", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__VehicleRegJudge::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__VehicleRegJudge(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__VehicleRegJudge * SOAP_FMAC4 soap_get__ns1__VehicleRegJudge(struct soap *soap, _ns1__VehicleRegJudge *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__VehicleRegJudge(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__VehicleRegJudge * SOAP_FMAC2 soap_instantiate__ns1__VehicleRegJudge(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__VehicleRegJudge(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__VehicleRegJudge, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__VehicleRegJudge);
		if (size)
			*size = sizeof(_ns1__VehicleRegJudge);
		((_ns1__VehicleRegJudge*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__VehicleRegJudge, n);
		if (size)
			*size = n * sizeof(_ns1__VehicleRegJudge);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__VehicleRegJudge*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__VehicleRegJudge*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__VehicleRegJudge(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__VehicleRegJudge %p -> %p\n", q, p));
	*(_ns1__VehicleRegJudge*)p = *(_ns1__VehicleRegJudge*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AddDeviceCheckData_(struct soap *soap, struct __ns1__AddDeviceCheckData_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AddDeviceCheckData = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AddDeviceCheckData_(struct soap *soap, const struct __ns1__AddDeviceCheckData_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AddDeviceCheckData(soap, &a->ns1__AddDeviceCheckData);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AddDeviceCheckData_(struct soap *soap, const char *tag, int id, const struct __ns1__AddDeviceCheckData_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AddDeviceCheckData(soap, "ns1:AddDeviceCheckData", -1, &a->ns1__AddDeviceCheckData, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AddDeviceCheckData_ * SOAP_FMAC4 soap_in___ns1__AddDeviceCheckData_(struct soap *soap, const char *tag, struct __ns1__AddDeviceCheckData_ *a, const char *type)
{
	size_t soap_flag_ns1__AddDeviceCheckData = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AddDeviceCheckData_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AddDeviceCheckData_, sizeof(struct __ns1__AddDeviceCheckData_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AddDeviceCheckData_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AddDeviceCheckData && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AddDeviceCheckData(soap, "ns1:AddDeviceCheckData", &a->ns1__AddDeviceCheckData, ""))
				{	soap_flag_ns1__AddDeviceCheckData--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AddDeviceCheckData_(struct soap *soap, const struct __ns1__AddDeviceCheckData_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AddDeviceCheckData_(soap, tag?tag:"-ns1:AddDeviceCheckData", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AddDeviceCheckData_ * SOAP_FMAC4 soap_get___ns1__AddDeviceCheckData_(struct soap *soap, struct __ns1__AddDeviceCheckData_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AddDeviceCheckData_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AddDeviceCheckData_ * SOAP_FMAC2 soap_instantiate___ns1__AddDeviceCheckData_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AddDeviceCheckData_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AddDeviceCheckData_, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AddDeviceCheckData_);
		if (size)
			*size = sizeof(struct __ns1__AddDeviceCheckData_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AddDeviceCheckData_, n);
		if (size)
			*size = n * sizeof(struct __ns1__AddDeviceCheckData_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AddDeviceCheckData_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AddDeviceCheckData_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AddDeviceCheckData_ %p -> %p\n", q, p));
	*(struct __ns1__AddDeviceCheckData_*)p = *(struct __ns1__AddDeviceCheckData_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AddWGJCData_(struct soap *soap, struct __ns1__AddWGJCData_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AddWGJCData = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AddWGJCData_(struct soap *soap, const struct __ns1__AddWGJCData_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AddWGJCData(soap, &a->ns1__AddWGJCData);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AddWGJCData_(struct soap *soap, const char *tag, int id, const struct __ns1__AddWGJCData_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AddWGJCData(soap, "ns1:AddWGJCData", -1, &a->ns1__AddWGJCData, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AddWGJCData_ * SOAP_FMAC4 soap_in___ns1__AddWGJCData_(struct soap *soap, const char *tag, struct __ns1__AddWGJCData_ *a, const char *type)
{
	size_t soap_flag_ns1__AddWGJCData = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AddWGJCData_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AddWGJCData_, sizeof(struct __ns1__AddWGJCData_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AddWGJCData_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AddWGJCData && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AddWGJCData(soap, "ns1:AddWGJCData", &a->ns1__AddWGJCData, ""))
				{	soap_flag_ns1__AddWGJCData--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AddWGJCData_(struct soap *soap, const struct __ns1__AddWGJCData_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AddWGJCData_(soap, tag?tag:"-ns1:AddWGJCData", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AddWGJCData_ * SOAP_FMAC4 soap_get___ns1__AddWGJCData_(struct soap *soap, struct __ns1__AddWGJCData_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AddWGJCData_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AddWGJCData_ * SOAP_FMAC2 soap_instantiate___ns1__AddWGJCData_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AddWGJCData_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AddWGJCData_, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AddWGJCData_);
		if (size)
			*size = sizeof(struct __ns1__AddWGJCData_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AddWGJCData_, n);
		if (size)
			*size = n * sizeof(struct __ns1__AddWGJCData_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AddWGJCData_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AddWGJCData_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AddWGJCData_ %p -> %p\n", q, p));
	*(struct __ns1__AddWGJCData_*)p = *(struct __ns1__AddWGJCData_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__LokeJudge_(struct soap *soap, struct __ns1__LokeJudge_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__LokeJudge = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__LokeJudge_(struct soap *soap, const struct __ns1__LokeJudge_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__LokeJudge(soap, &a->ns1__LokeJudge);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__LokeJudge_(struct soap *soap, const char *tag, int id, const struct __ns1__LokeJudge_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__LokeJudge(soap, "ns1:LokeJudge", -1, &a->ns1__LokeJudge, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__LokeJudge_ * SOAP_FMAC4 soap_in___ns1__LokeJudge_(struct soap *soap, const char *tag, struct __ns1__LokeJudge_ *a, const char *type)
{
	size_t soap_flag_ns1__LokeJudge = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__LokeJudge_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__LokeJudge_, sizeof(struct __ns1__LokeJudge_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__LokeJudge_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__LokeJudge && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__LokeJudge(soap, "ns1:LokeJudge", &a->ns1__LokeJudge, ""))
				{	soap_flag_ns1__LokeJudge--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__LokeJudge_(struct soap *soap, const struct __ns1__LokeJudge_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__LokeJudge_(soap, tag?tag:"-ns1:LokeJudge", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__LokeJudge_ * SOAP_FMAC4 soap_get___ns1__LokeJudge_(struct soap *soap, struct __ns1__LokeJudge_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__LokeJudge_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__LokeJudge_ * SOAP_FMAC2 soap_instantiate___ns1__LokeJudge_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__LokeJudge_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__LokeJudge_, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__LokeJudge_);
		if (size)
			*size = sizeof(struct __ns1__LokeJudge_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__LokeJudge_, n);
		if (size)
			*size = n * sizeof(struct __ns1__LokeJudge_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__LokeJudge_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__LokeJudge_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__LokeJudge_ %p -> %p\n", q, p));
	*(struct __ns1__LokeJudge_*)p = *(struct __ns1__LokeJudge_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__PrintUp_(struct soap *soap, struct __ns1__PrintUp_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__PrintUp = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__PrintUp_(struct soap *soap, const struct __ns1__PrintUp_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__PrintUp(soap, &a->ns1__PrintUp);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__PrintUp_(struct soap *soap, const char *tag, int id, const struct __ns1__PrintUp_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__PrintUp(soap, "ns1:PrintUp", -1, &a->ns1__PrintUp, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__PrintUp_ * SOAP_FMAC4 soap_in___ns1__PrintUp_(struct soap *soap, const char *tag, struct __ns1__PrintUp_ *a, const char *type)
{
	size_t soap_flag_ns1__PrintUp = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__PrintUp_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__PrintUp_, sizeof(struct __ns1__PrintUp_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__PrintUp_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__PrintUp && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__PrintUp(soap, "ns1:PrintUp", &a->ns1__PrintUp, ""))
				{	soap_flag_ns1__PrintUp--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__PrintUp_(struct soap *soap, const struct __ns1__PrintUp_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__PrintUp_(soap, tag?tag:"-ns1:PrintUp", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__PrintUp_ * SOAP_FMAC4 soap_get___ns1__PrintUp_(struct soap *soap, struct __ns1__PrintUp_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__PrintUp_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__PrintUp_ * SOAP_FMAC2 soap_instantiate___ns1__PrintUp_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__PrintUp_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__PrintUp_, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__PrintUp_);
		if (size)
			*size = sizeof(struct __ns1__PrintUp_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__PrintUp_, n);
		if (size)
			*size = n * sizeof(struct __ns1__PrintUp_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__PrintUp_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__PrintUp_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__PrintUp_ %p -> %p\n", q, p));
	*(struct __ns1__PrintUp_*)p = *(struct __ns1__PrintUp_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__PrintJudge_(struct soap *soap, struct __ns1__PrintJudge_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__PrintJudge = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__PrintJudge_(struct soap *soap, const struct __ns1__PrintJudge_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__PrintJudge(soap, &a->ns1__PrintJudge);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__PrintJudge_(struct soap *soap, const char *tag, int id, const struct __ns1__PrintJudge_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__PrintJudge(soap, "ns1:PrintJudge", -1, &a->ns1__PrintJudge, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__PrintJudge_ * SOAP_FMAC4 soap_in___ns1__PrintJudge_(struct soap *soap, const char *tag, struct __ns1__PrintJudge_ *a, const char *type)
{
	size_t soap_flag_ns1__PrintJudge = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__PrintJudge_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__PrintJudge_, sizeof(struct __ns1__PrintJudge_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__PrintJudge_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__PrintJudge && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__PrintJudge(soap, "ns1:PrintJudge", &a->ns1__PrintJudge, ""))
				{	soap_flag_ns1__PrintJudge--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__PrintJudge_(struct soap *soap, const struct __ns1__PrintJudge_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__PrintJudge_(soap, tag?tag:"-ns1:PrintJudge", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__PrintJudge_ * SOAP_FMAC4 soap_get___ns1__PrintJudge_(struct soap *soap, struct __ns1__PrintJudge_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__PrintJudge_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__PrintJudge_ * SOAP_FMAC2 soap_instantiate___ns1__PrintJudge_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__PrintJudge_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__PrintJudge_, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__PrintJudge_);
		if (size)
			*size = sizeof(struct __ns1__PrintJudge_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__PrintJudge_, n);
		if (size)
			*size = n * sizeof(struct __ns1__PrintJudge_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__PrintJudge_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__PrintJudge_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__PrintJudge_ %p -> %p\n", q, p));
	*(struct __ns1__PrintJudge_*)p = *(struct __ns1__PrintJudge_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AddVerify_(struct soap *soap, struct __ns1__AddVerify_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AddVerify = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AddVerify_(struct soap *soap, const struct __ns1__AddVerify_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AddVerify(soap, &a->ns1__AddVerify);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AddVerify_(struct soap *soap, const char *tag, int id, const struct __ns1__AddVerify_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AddVerify(soap, "ns1:AddVerify", -1, &a->ns1__AddVerify, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AddVerify_ * SOAP_FMAC4 soap_in___ns1__AddVerify_(struct soap *soap, const char *tag, struct __ns1__AddVerify_ *a, const char *type)
{
	size_t soap_flag_ns1__AddVerify = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AddVerify_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AddVerify_, sizeof(struct __ns1__AddVerify_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AddVerify_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AddVerify && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AddVerify(soap, "ns1:AddVerify", &a->ns1__AddVerify, ""))
				{	soap_flag_ns1__AddVerify--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AddVerify_(struct soap *soap, const struct __ns1__AddVerify_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AddVerify_(soap, tag?tag:"-ns1:AddVerify", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AddVerify_ * SOAP_FMAC4 soap_get___ns1__AddVerify_(struct soap *soap, struct __ns1__AddVerify_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AddVerify_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AddVerify_ * SOAP_FMAC2 soap_instantiate___ns1__AddVerify_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AddVerify_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AddVerify_, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AddVerify_);
		if (size)
			*size = sizeof(struct __ns1__AddVerify_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AddVerify_, n);
		if (size)
			*size = n * sizeof(struct __ns1__AddVerify_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AddVerify_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AddVerify_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AddVerify_ %p -> %p\n", q, p));
	*(struct __ns1__AddVerify_*)p = *(struct __ns1__AddVerify_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__RyzfControl_(struct soap *soap, struct __ns1__RyzfControl_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__RyzfControl = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__RyzfControl_(struct soap *soap, const struct __ns1__RyzfControl_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__RyzfControl(soap, &a->ns1__RyzfControl);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__RyzfControl_(struct soap *soap, const char *tag, int id, const struct __ns1__RyzfControl_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__RyzfControl(soap, "ns1:RyzfControl", -1, &a->ns1__RyzfControl, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__RyzfControl_ * SOAP_FMAC4 soap_in___ns1__RyzfControl_(struct soap *soap, const char *tag, struct __ns1__RyzfControl_ *a, const char *type)
{
	size_t soap_flag_ns1__RyzfControl = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__RyzfControl_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__RyzfControl_, sizeof(struct __ns1__RyzfControl_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__RyzfControl_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__RyzfControl && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__RyzfControl(soap, "ns1:RyzfControl", &a->ns1__RyzfControl, ""))
				{	soap_flag_ns1__RyzfControl--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__RyzfControl_(struct soap *soap, const struct __ns1__RyzfControl_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__RyzfControl_(soap, tag?tag:"-ns1:RyzfControl", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__RyzfControl_ * SOAP_FMAC4 soap_get___ns1__RyzfControl_(struct soap *soap, struct __ns1__RyzfControl_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__RyzfControl_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__RyzfControl_ * SOAP_FMAC2 soap_instantiate___ns1__RyzfControl_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__RyzfControl_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__RyzfControl_, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__RyzfControl_);
		if (size)
			*size = sizeof(struct __ns1__RyzfControl_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__RyzfControl_, n);
		if (size)
			*size = n * sizeof(struct __ns1__RyzfControl_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__RyzfControl_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__RyzfControl_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__RyzfControl_ %p -> %p\n", q, p));
	*(struct __ns1__RyzfControl_*)p = *(struct __ns1__RyzfControl_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AddIuprData_(struct soap *soap, struct __ns1__AddIuprData_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AddIuprData = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AddIuprData_(struct soap *soap, const struct __ns1__AddIuprData_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AddIuprData(soap, &a->ns1__AddIuprData);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AddIuprData_(struct soap *soap, const char *tag, int id, const struct __ns1__AddIuprData_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AddIuprData(soap, "ns1:AddIuprData", -1, &a->ns1__AddIuprData, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AddIuprData_ * SOAP_FMAC4 soap_in___ns1__AddIuprData_(struct soap *soap, const char *tag, struct __ns1__AddIuprData_ *a, const char *type)
{
	size_t soap_flag_ns1__AddIuprData = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AddIuprData_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AddIuprData_, sizeof(struct __ns1__AddIuprData_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AddIuprData_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AddIuprData && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AddIuprData(soap, "ns1:AddIuprData", &a->ns1__AddIuprData, ""))
				{	soap_flag_ns1__AddIuprData--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AddIuprData_(struct soap *soap, const struct __ns1__AddIuprData_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AddIuprData_(soap, tag?tag:"-ns1:AddIuprData", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AddIuprData_ * SOAP_FMAC4 soap_get___ns1__AddIuprData_(struct soap *soap, struct __ns1__AddIuprData_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AddIuprData_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AddIuprData_ * SOAP_FMAC2 soap_instantiate___ns1__AddIuprData_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AddIuprData_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AddIuprData_, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AddIuprData_);
		if (size)
			*size = sizeof(struct __ns1__AddIuprData_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AddIuprData_, n);
		if (size)
			*size = n * sizeof(struct __ns1__AddIuprData_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AddIuprData_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AddIuprData_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AddIuprData_ %p -> %p\n", q, p));
	*(struct __ns1__AddIuprData_*)p = *(struct __ns1__AddIuprData_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AddObdData_(struct soap *soap, struct __ns1__AddObdData_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AddObdData = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AddObdData_(struct soap *soap, const struct __ns1__AddObdData_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AddObdData(soap, &a->ns1__AddObdData);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AddObdData_(struct soap *soap, const char *tag, int id, const struct __ns1__AddObdData_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AddObdData(soap, "ns1:AddObdData", -1, &a->ns1__AddObdData, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AddObdData_ * SOAP_FMAC4 soap_in___ns1__AddObdData_(struct soap *soap, const char *tag, struct __ns1__AddObdData_ *a, const char *type)
{
	size_t soap_flag_ns1__AddObdData = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AddObdData_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AddObdData_, sizeof(struct __ns1__AddObdData_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AddObdData_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AddObdData && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AddObdData(soap, "ns1:AddObdData", &a->ns1__AddObdData, ""))
				{	soap_flag_ns1__AddObdData--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AddObdData_(struct soap *soap, const struct __ns1__AddObdData_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AddObdData_(soap, tag?tag:"-ns1:AddObdData", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AddObdData_ * SOAP_FMAC4 soap_get___ns1__AddObdData_(struct soap *soap, struct __ns1__AddObdData_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AddObdData_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AddObdData_ * SOAP_FMAC2 soap_instantiate___ns1__AddObdData_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AddObdData_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AddObdData_, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AddObdData_);
		if (size)
			*size = sizeof(struct __ns1__AddObdData_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AddObdData_, n);
		if (size)
			*size = n * sizeof(struct __ns1__AddObdData_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AddObdData_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AddObdData_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AddObdData_ %p -> %p\n", q, p));
	*(struct __ns1__AddObdData_*)p = *(struct __ns1__AddObdData_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AddCheckData_(struct soap *soap, struct __ns1__AddCheckData_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AddCheckData = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AddCheckData_(struct soap *soap, const struct __ns1__AddCheckData_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AddCheckData(soap, &a->ns1__AddCheckData);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AddCheckData_(struct soap *soap, const char *tag, int id, const struct __ns1__AddCheckData_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AddCheckData(soap, "ns1:AddCheckData", -1, &a->ns1__AddCheckData, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AddCheckData_ * SOAP_FMAC4 soap_in___ns1__AddCheckData_(struct soap *soap, const char *tag, struct __ns1__AddCheckData_ *a, const char *type)
{
	size_t soap_flag_ns1__AddCheckData = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AddCheckData_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AddCheckData_, sizeof(struct __ns1__AddCheckData_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AddCheckData_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AddCheckData && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AddCheckData(soap, "ns1:AddCheckData", &a->ns1__AddCheckData, ""))
				{	soap_flag_ns1__AddCheckData--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AddCheckData_(struct soap *soap, const struct __ns1__AddCheckData_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AddCheckData_(soap, tag?tag:"-ns1:AddCheckData", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AddCheckData_ * SOAP_FMAC4 soap_get___ns1__AddCheckData_(struct soap *soap, struct __ns1__AddCheckData_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AddCheckData_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AddCheckData_ * SOAP_FMAC2 soap_instantiate___ns1__AddCheckData_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AddCheckData_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AddCheckData_, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AddCheckData_);
		if (size)
			*size = sizeof(struct __ns1__AddCheckData_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AddCheckData_, n);
		if (size)
			*size = n * sizeof(struct __ns1__AddCheckData_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AddCheckData_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AddCheckData_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AddCheckData_ %p -> %p\n", q, p));
	*(struct __ns1__AddCheckData_*)p = *(struct __ns1__AddCheckData_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__OnlineJudge_(struct soap *soap, struct __ns1__OnlineJudge_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__OnlineJudge = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__OnlineJudge_(struct soap *soap, const struct __ns1__OnlineJudge_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__OnlineJudge(soap, &a->ns1__OnlineJudge);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__OnlineJudge_(struct soap *soap, const char *tag, int id, const struct __ns1__OnlineJudge_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__OnlineJudge(soap, "ns1:OnlineJudge", -1, &a->ns1__OnlineJudge, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__OnlineJudge_ * SOAP_FMAC4 soap_in___ns1__OnlineJudge_(struct soap *soap, const char *tag, struct __ns1__OnlineJudge_ *a, const char *type)
{
	size_t soap_flag_ns1__OnlineJudge = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__OnlineJudge_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__OnlineJudge_, sizeof(struct __ns1__OnlineJudge_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__OnlineJudge_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__OnlineJudge && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__OnlineJudge(soap, "ns1:OnlineJudge", &a->ns1__OnlineJudge, ""))
				{	soap_flag_ns1__OnlineJudge--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__OnlineJudge_(struct soap *soap, const struct __ns1__OnlineJudge_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__OnlineJudge_(soap, tag?tag:"-ns1:OnlineJudge", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__OnlineJudge_ * SOAP_FMAC4 soap_get___ns1__OnlineJudge_(struct soap *soap, struct __ns1__OnlineJudge_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__OnlineJudge_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__OnlineJudge_ * SOAP_FMAC2 soap_instantiate___ns1__OnlineJudge_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__OnlineJudge_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__OnlineJudge_, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__OnlineJudge_);
		if (size)
			*size = sizeof(struct __ns1__OnlineJudge_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__OnlineJudge_, n);
		if (size)
			*size = n * sizeof(struct __ns1__OnlineJudge_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__OnlineJudge_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__OnlineJudge_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__OnlineJudge_ %p -> %p\n", q, p));
	*(struct __ns1__OnlineJudge_*)p = *(struct __ns1__OnlineJudge_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__VehicleRegJudge_(struct soap *soap, struct __ns1__VehicleRegJudge_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__VehicleRegJudge = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__VehicleRegJudge_(struct soap *soap, const struct __ns1__VehicleRegJudge_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__VehicleRegJudge(soap, &a->ns1__VehicleRegJudge);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__VehicleRegJudge_(struct soap *soap, const char *tag, int id, const struct __ns1__VehicleRegJudge_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__VehicleRegJudge(soap, "ns1:VehicleRegJudge", -1, &a->ns1__VehicleRegJudge, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__VehicleRegJudge_ * SOAP_FMAC4 soap_in___ns1__VehicleRegJudge_(struct soap *soap, const char *tag, struct __ns1__VehicleRegJudge_ *a, const char *type)
{
	size_t soap_flag_ns1__VehicleRegJudge = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__VehicleRegJudge_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__VehicleRegJudge_, sizeof(struct __ns1__VehicleRegJudge_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__VehicleRegJudge_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__VehicleRegJudge && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__VehicleRegJudge(soap, "ns1:VehicleRegJudge", &a->ns1__VehicleRegJudge, ""))
				{	soap_flag_ns1__VehicleRegJudge--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__VehicleRegJudge_(struct soap *soap, const struct __ns1__VehicleRegJudge_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__VehicleRegJudge_(soap, tag?tag:"-ns1:VehicleRegJudge", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__VehicleRegJudge_ * SOAP_FMAC4 soap_get___ns1__VehicleRegJudge_(struct soap *soap, struct __ns1__VehicleRegJudge_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__VehicleRegJudge_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__VehicleRegJudge_ * SOAP_FMAC2 soap_instantiate___ns1__VehicleRegJudge_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__VehicleRegJudge_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__VehicleRegJudge_, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__VehicleRegJudge_);
		if (size)
			*size = sizeof(struct __ns1__VehicleRegJudge_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__VehicleRegJudge_, n);
		if (size)
			*size = n * sizeof(struct __ns1__VehicleRegJudge_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__VehicleRegJudge_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__VehicleRegJudge_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__VehicleRegJudge_ %p -> %p\n", q, p));
	*(struct __ns1__VehicleRegJudge_*)p = *(struct __ns1__VehicleRegJudge_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AddDeviceCheckData(struct soap *soap, struct __ns1__AddDeviceCheckData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AddDeviceCheckData = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AddDeviceCheckData(struct soap *soap, const struct __ns1__AddDeviceCheckData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AddDeviceCheckData(soap, &a->ns1__AddDeviceCheckData);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AddDeviceCheckData(struct soap *soap, const char *tag, int id, const struct __ns1__AddDeviceCheckData *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AddDeviceCheckData(soap, "ns1:AddDeviceCheckData", -1, &a->ns1__AddDeviceCheckData, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AddDeviceCheckData * SOAP_FMAC4 soap_in___ns1__AddDeviceCheckData(struct soap *soap, const char *tag, struct __ns1__AddDeviceCheckData *a, const char *type)
{
	size_t soap_flag_ns1__AddDeviceCheckData = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AddDeviceCheckData *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AddDeviceCheckData, sizeof(struct __ns1__AddDeviceCheckData), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AddDeviceCheckData(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AddDeviceCheckData && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AddDeviceCheckData(soap, "ns1:AddDeviceCheckData", &a->ns1__AddDeviceCheckData, ""))
				{	soap_flag_ns1__AddDeviceCheckData--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AddDeviceCheckData(struct soap *soap, const struct __ns1__AddDeviceCheckData *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AddDeviceCheckData(soap, tag?tag:"-ns1:AddDeviceCheckData", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AddDeviceCheckData * SOAP_FMAC4 soap_get___ns1__AddDeviceCheckData(struct soap *soap, struct __ns1__AddDeviceCheckData *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AddDeviceCheckData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AddDeviceCheckData * SOAP_FMAC2 soap_instantiate___ns1__AddDeviceCheckData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AddDeviceCheckData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AddDeviceCheckData, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AddDeviceCheckData);
		if (size)
			*size = sizeof(struct __ns1__AddDeviceCheckData);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AddDeviceCheckData, n);
		if (size)
			*size = n * sizeof(struct __ns1__AddDeviceCheckData);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AddDeviceCheckData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AddDeviceCheckData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AddDeviceCheckData %p -> %p\n", q, p));
	*(struct __ns1__AddDeviceCheckData*)p = *(struct __ns1__AddDeviceCheckData*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AddWGJCData(struct soap *soap, struct __ns1__AddWGJCData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AddWGJCData = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AddWGJCData(struct soap *soap, const struct __ns1__AddWGJCData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AddWGJCData(soap, &a->ns1__AddWGJCData);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AddWGJCData(struct soap *soap, const char *tag, int id, const struct __ns1__AddWGJCData *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AddWGJCData(soap, "ns1:AddWGJCData", -1, &a->ns1__AddWGJCData, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AddWGJCData * SOAP_FMAC4 soap_in___ns1__AddWGJCData(struct soap *soap, const char *tag, struct __ns1__AddWGJCData *a, const char *type)
{
	size_t soap_flag_ns1__AddWGJCData = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AddWGJCData *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AddWGJCData, sizeof(struct __ns1__AddWGJCData), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AddWGJCData(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AddWGJCData && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AddWGJCData(soap, "ns1:AddWGJCData", &a->ns1__AddWGJCData, ""))
				{	soap_flag_ns1__AddWGJCData--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AddWGJCData(struct soap *soap, const struct __ns1__AddWGJCData *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AddWGJCData(soap, tag?tag:"-ns1:AddWGJCData", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AddWGJCData * SOAP_FMAC4 soap_get___ns1__AddWGJCData(struct soap *soap, struct __ns1__AddWGJCData *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AddWGJCData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AddWGJCData * SOAP_FMAC2 soap_instantiate___ns1__AddWGJCData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AddWGJCData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AddWGJCData, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AddWGJCData);
		if (size)
			*size = sizeof(struct __ns1__AddWGJCData);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AddWGJCData, n);
		if (size)
			*size = n * sizeof(struct __ns1__AddWGJCData);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AddWGJCData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AddWGJCData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AddWGJCData %p -> %p\n", q, p));
	*(struct __ns1__AddWGJCData*)p = *(struct __ns1__AddWGJCData*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__LokeJudge(struct soap *soap, struct __ns1__LokeJudge *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__LokeJudge = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__LokeJudge(struct soap *soap, const struct __ns1__LokeJudge *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__LokeJudge(soap, &a->ns1__LokeJudge);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__LokeJudge(struct soap *soap, const char *tag, int id, const struct __ns1__LokeJudge *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__LokeJudge(soap, "ns1:LokeJudge", -1, &a->ns1__LokeJudge, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__LokeJudge * SOAP_FMAC4 soap_in___ns1__LokeJudge(struct soap *soap, const char *tag, struct __ns1__LokeJudge *a, const char *type)
{
	size_t soap_flag_ns1__LokeJudge = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__LokeJudge *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__LokeJudge, sizeof(struct __ns1__LokeJudge), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__LokeJudge(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__LokeJudge && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__LokeJudge(soap, "ns1:LokeJudge", &a->ns1__LokeJudge, ""))
				{	soap_flag_ns1__LokeJudge--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__LokeJudge(struct soap *soap, const struct __ns1__LokeJudge *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__LokeJudge(soap, tag?tag:"-ns1:LokeJudge", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__LokeJudge * SOAP_FMAC4 soap_get___ns1__LokeJudge(struct soap *soap, struct __ns1__LokeJudge *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__LokeJudge(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__LokeJudge * SOAP_FMAC2 soap_instantiate___ns1__LokeJudge(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__LokeJudge(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__LokeJudge, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__LokeJudge);
		if (size)
			*size = sizeof(struct __ns1__LokeJudge);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__LokeJudge, n);
		if (size)
			*size = n * sizeof(struct __ns1__LokeJudge);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__LokeJudge*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__LokeJudge(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__LokeJudge %p -> %p\n", q, p));
	*(struct __ns1__LokeJudge*)p = *(struct __ns1__LokeJudge*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__PrintUp(struct soap *soap, struct __ns1__PrintUp *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__PrintUp = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__PrintUp(struct soap *soap, const struct __ns1__PrintUp *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__PrintUp(soap, &a->ns1__PrintUp);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__PrintUp(struct soap *soap, const char *tag, int id, const struct __ns1__PrintUp *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__PrintUp(soap, "ns1:PrintUp", -1, &a->ns1__PrintUp, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__PrintUp * SOAP_FMAC4 soap_in___ns1__PrintUp(struct soap *soap, const char *tag, struct __ns1__PrintUp *a, const char *type)
{
	size_t soap_flag_ns1__PrintUp = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__PrintUp *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__PrintUp, sizeof(struct __ns1__PrintUp), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__PrintUp(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__PrintUp && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__PrintUp(soap, "ns1:PrintUp", &a->ns1__PrintUp, ""))
				{	soap_flag_ns1__PrintUp--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__PrintUp(struct soap *soap, const struct __ns1__PrintUp *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__PrintUp(soap, tag?tag:"-ns1:PrintUp", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__PrintUp * SOAP_FMAC4 soap_get___ns1__PrintUp(struct soap *soap, struct __ns1__PrintUp *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__PrintUp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__PrintUp * SOAP_FMAC2 soap_instantiate___ns1__PrintUp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__PrintUp(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__PrintUp, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__PrintUp);
		if (size)
			*size = sizeof(struct __ns1__PrintUp);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__PrintUp, n);
		if (size)
			*size = n * sizeof(struct __ns1__PrintUp);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__PrintUp*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__PrintUp(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__PrintUp %p -> %p\n", q, p));
	*(struct __ns1__PrintUp*)p = *(struct __ns1__PrintUp*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__PrintJudge(struct soap *soap, struct __ns1__PrintJudge *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__PrintJudge = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__PrintJudge(struct soap *soap, const struct __ns1__PrintJudge *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__PrintJudge(soap, &a->ns1__PrintJudge);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__PrintJudge(struct soap *soap, const char *tag, int id, const struct __ns1__PrintJudge *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__PrintJudge(soap, "ns1:PrintJudge", -1, &a->ns1__PrintJudge, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__PrintJudge * SOAP_FMAC4 soap_in___ns1__PrintJudge(struct soap *soap, const char *tag, struct __ns1__PrintJudge *a, const char *type)
{
	size_t soap_flag_ns1__PrintJudge = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__PrintJudge *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__PrintJudge, sizeof(struct __ns1__PrintJudge), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__PrintJudge(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__PrintJudge && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__PrintJudge(soap, "ns1:PrintJudge", &a->ns1__PrintJudge, ""))
				{	soap_flag_ns1__PrintJudge--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__PrintJudge(struct soap *soap, const struct __ns1__PrintJudge *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__PrintJudge(soap, tag?tag:"-ns1:PrintJudge", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__PrintJudge * SOAP_FMAC4 soap_get___ns1__PrintJudge(struct soap *soap, struct __ns1__PrintJudge *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__PrintJudge(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__PrintJudge * SOAP_FMAC2 soap_instantiate___ns1__PrintJudge(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__PrintJudge(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__PrintJudge, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__PrintJudge);
		if (size)
			*size = sizeof(struct __ns1__PrintJudge);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__PrintJudge, n);
		if (size)
			*size = n * sizeof(struct __ns1__PrintJudge);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__PrintJudge*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__PrintJudge(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__PrintJudge %p -> %p\n", q, p));
	*(struct __ns1__PrintJudge*)p = *(struct __ns1__PrintJudge*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AddVerify(struct soap *soap, struct __ns1__AddVerify *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AddVerify = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AddVerify(struct soap *soap, const struct __ns1__AddVerify *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AddVerify(soap, &a->ns1__AddVerify);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AddVerify(struct soap *soap, const char *tag, int id, const struct __ns1__AddVerify *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AddVerify(soap, "ns1:AddVerify", -1, &a->ns1__AddVerify, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AddVerify * SOAP_FMAC4 soap_in___ns1__AddVerify(struct soap *soap, const char *tag, struct __ns1__AddVerify *a, const char *type)
{
	size_t soap_flag_ns1__AddVerify = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AddVerify *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AddVerify, sizeof(struct __ns1__AddVerify), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AddVerify(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AddVerify && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AddVerify(soap, "ns1:AddVerify", &a->ns1__AddVerify, ""))
				{	soap_flag_ns1__AddVerify--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AddVerify(struct soap *soap, const struct __ns1__AddVerify *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AddVerify(soap, tag?tag:"-ns1:AddVerify", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AddVerify * SOAP_FMAC4 soap_get___ns1__AddVerify(struct soap *soap, struct __ns1__AddVerify *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AddVerify(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AddVerify * SOAP_FMAC2 soap_instantiate___ns1__AddVerify(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AddVerify(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AddVerify, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AddVerify);
		if (size)
			*size = sizeof(struct __ns1__AddVerify);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AddVerify, n);
		if (size)
			*size = n * sizeof(struct __ns1__AddVerify);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AddVerify*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AddVerify(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AddVerify %p -> %p\n", q, p));
	*(struct __ns1__AddVerify*)p = *(struct __ns1__AddVerify*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__RyzfControl(struct soap *soap, struct __ns1__RyzfControl *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__RyzfControl = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__RyzfControl(struct soap *soap, const struct __ns1__RyzfControl *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__RyzfControl(soap, &a->ns1__RyzfControl);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__RyzfControl(struct soap *soap, const char *tag, int id, const struct __ns1__RyzfControl *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__RyzfControl(soap, "ns1:RyzfControl", -1, &a->ns1__RyzfControl, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__RyzfControl * SOAP_FMAC4 soap_in___ns1__RyzfControl(struct soap *soap, const char *tag, struct __ns1__RyzfControl *a, const char *type)
{
	size_t soap_flag_ns1__RyzfControl = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__RyzfControl *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__RyzfControl, sizeof(struct __ns1__RyzfControl), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__RyzfControl(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__RyzfControl && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__RyzfControl(soap, "ns1:RyzfControl", &a->ns1__RyzfControl, ""))
				{	soap_flag_ns1__RyzfControl--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__RyzfControl(struct soap *soap, const struct __ns1__RyzfControl *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__RyzfControl(soap, tag?tag:"-ns1:RyzfControl", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__RyzfControl * SOAP_FMAC4 soap_get___ns1__RyzfControl(struct soap *soap, struct __ns1__RyzfControl *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__RyzfControl(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__RyzfControl * SOAP_FMAC2 soap_instantiate___ns1__RyzfControl(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__RyzfControl(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__RyzfControl, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__RyzfControl);
		if (size)
			*size = sizeof(struct __ns1__RyzfControl);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__RyzfControl, n);
		if (size)
			*size = n * sizeof(struct __ns1__RyzfControl);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__RyzfControl*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__RyzfControl(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__RyzfControl %p -> %p\n", q, p));
	*(struct __ns1__RyzfControl*)p = *(struct __ns1__RyzfControl*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AddIuprData(struct soap *soap, struct __ns1__AddIuprData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AddIuprData = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AddIuprData(struct soap *soap, const struct __ns1__AddIuprData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AddIuprData(soap, &a->ns1__AddIuprData);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AddIuprData(struct soap *soap, const char *tag, int id, const struct __ns1__AddIuprData *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AddIuprData(soap, "ns1:AddIuprData", -1, &a->ns1__AddIuprData, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AddIuprData * SOAP_FMAC4 soap_in___ns1__AddIuprData(struct soap *soap, const char *tag, struct __ns1__AddIuprData *a, const char *type)
{
	size_t soap_flag_ns1__AddIuprData = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AddIuprData *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AddIuprData, sizeof(struct __ns1__AddIuprData), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AddIuprData(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AddIuprData && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AddIuprData(soap, "ns1:AddIuprData", &a->ns1__AddIuprData, ""))
				{	soap_flag_ns1__AddIuprData--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AddIuprData(struct soap *soap, const struct __ns1__AddIuprData *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AddIuprData(soap, tag?tag:"-ns1:AddIuprData", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AddIuprData * SOAP_FMAC4 soap_get___ns1__AddIuprData(struct soap *soap, struct __ns1__AddIuprData *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AddIuprData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AddIuprData * SOAP_FMAC2 soap_instantiate___ns1__AddIuprData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AddIuprData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AddIuprData, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AddIuprData);
		if (size)
			*size = sizeof(struct __ns1__AddIuprData);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AddIuprData, n);
		if (size)
			*size = n * sizeof(struct __ns1__AddIuprData);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AddIuprData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AddIuprData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AddIuprData %p -> %p\n", q, p));
	*(struct __ns1__AddIuprData*)p = *(struct __ns1__AddIuprData*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AddObdData(struct soap *soap, struct __ns1__AddObdData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AddObdData = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AddObdData(struct soap *soap, const struct __ns1__AddObdData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AddObdData(soap, &a->ns1__AddObdData);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AddObdData(struct soap *soap, const char *tag, int id, const struct __ns1__AddObdData *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AddObdData(soap, "ns1:AddObdData", -1, &a->ns1__AddObdData, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AddObdData * SOAP_FMAC4 soap_in___ns1__AddObdData(struct soap *soap, const char *tag, struct __ns1__AddObdData *a, const char *type)
{
	size_t soap_flag_ns1__AddObdData = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AddObdData *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AddObdData, sizeof(struct __ns1__AddObdData), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AddObdData(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AddObdData && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AddObdData(soap, "ns1:AddObdData", &a->ns1__AddObdData, ""))
				{	soap_flag_ns1__AddObdData--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AddObdData(struct soap *soap, const struct __ns1__AddObdData *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AddObdData(soap, tag?tag:"-ns1:AddObdData", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AddObdData * SOAP_FMAC4 soap_get___ns1__AddObdData(struct soap *soap, struct __ns1__AddObdData *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AddObdData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AddObdData * SOAP_FMAC2 soap_instantiate___ns1__AddObdData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AddObdData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AddObdData, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AddObdData);
		if (size)
			*size = sizeof(struct __ns1__AddObdData);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AddObdData, n);
		if (size)
			*size = n * sizeof(struct __ns1__AddObdData);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AddObdData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AddObdData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AddObdData %p -> %p\n", q, p));
	*(struct __ns1__AddObdData*)p = *(struct __ns1__AddObdData*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AddCheckData(struct soap *soap, struct __ns1__AddCheckData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AddCheckData = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AddCheckData(struct soap *soap, const struct __ns1__AddCheckData *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__AddCheckData(soap, &a->ns1__AddCheckData);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AddCheckData(struct soap *soap, const char *tag, int id, const struct __ns1__AddCheckData *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__AddCheckData(soap, "ns1:AddCheckData", -1, &a->ns1__AddCheckData, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AddCheckData * SOAP_FMAC4 soap_in___ns1__AddCheckData(struct soap *soap, const char *tag, struct __ns1__AddCheckData *a, const char *type)
{
	size_t soap_flag_ns1__AddCheckData = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__AddCheckData *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AddCheckData, sizeof(struct __ns1__AddCheckData), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AddCheckData(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AddCheckData && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AddCheckData(soap, "ns1:AddCheckData", &a->ns1__AddCheckData, ""))
				{	soap_flag_ns1__AddCheckData--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AddCheckData(struct soap *soap, const struct __ns1__AddCheckData *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AddCheckData(soap, tag?tag:"-ns1:AddCheckData", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AddCheckData * SOAP_FMAC4 soap_get___ns1__AddCheckData(struct soap *soap, struct __ns1__AddCheckData *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AddCheckData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AddCheckData * SOAP_FMAC2 soap_instantiate___ns1__AddCheckData(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AddCheckData(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AddCheckData, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AddCheckData);
		if (size)
			*size = sizeof(struct __ns1__AddCheckData);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__AddCheckData, n);
		if (size)
			*size = n * sizeof(struct __ns1__AddCheckData);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__AddCheckData*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AddCheckData(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AddCheckData %p -> %p\n", q, p));
	*(struct __ns1__AddCheckData*)p = *(struct __ns1__AddCheckData*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__OnlineJudge(struct soap *soap, struct __ns1__OnlineJudge *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__OnlineJudge = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__OnlineJudge(struct soap *soap, const struct __ns1__OnlineJudge *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__OnlineJudge(soap, &a->ns1__OnlineJudge);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__OnlineJudge(struct soap *soap, const char *tag, int id, const struct __ns1__OnlineJudge *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__OnlineJudge(soap, "ns1:OnlineJudge", -1, &a->ns1__OnlineJudge, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__OnlineJudge * SOAP_FMAC4 soap_in___ns1__OnlineJudge(struct soap *soap, const char *tag, struct __ns1__OnlineJudge *a, const char *type)
{
	size_t soap_flag_ns1__OnlineJudge = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__OnlineJudge *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__OnlineJudge, sizeof(struct __ns1__OnlineJudge), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__OnlineJudge(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__OnlineJudge && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__OnlineJudge(soap, "ns1:OnlineJudge", &a->ns1__OnlineJudge, ""))
				{	soap_flag_ns1__OnlineJudge--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__OnlineJudge(struct soap *soap, const struct __ns1__OnlineJudge *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__OnlineJudge(soap, tag?tag:"-ns1:OnlineJudge", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__OnlineJudge * SOAP_FMAC4 soap_get___ns1__OnlineJudge(struct soap *soap, struct __ns1__OnlineJudge *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__OnlineJudge(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__OnlineJudge * SOAP_FMAC2 soap_instantiate___ns1__OnlineJudge(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__OnlineJudge(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__OnlineJudge, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__OnlineJudge);
		if (size)
			*size = sizeof(struct __ns1__OnlineJudge);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__OnlineJudge, n);
		if (size)
			*size = n * sizeof(struct __ns1__OnlineJudge);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__OnlineJudge*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__OnlineJudge(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__OnlineJudge %p -> %p\n", q, p));
	*(struct __ns1__OnlineJudge*)p = *(struct __ns1__OnlineJudge*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__VehicleRegJudge(struct soap *soap, struct __ns1__VehicleRegJudge *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__VehicleRegJudge = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__VehicleRegJudge(struct soap *soap, const struct __ns1__VehicleRegJudge *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__VehicleRegJudge(soap, &a->ns1__VehicleRegJudge);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__VehicleRegJudge(struct soap *soap, const char *tag, int id, const struct __ns1__VehicleRegJudge *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__VehicleRegJudge(soap, "ns1:VehicleRegJudge", -1, &a->ns1__VehicleRegJudge, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__VehicleRegJudge * SOAP_FMAC4 soap_in___ns1__VehicleRegJudge(struct soap *soap, const char *tag, struct __ns1__VehicleRegJudge *a, const char *type)
{
	size_t soap_flag_ns1__VehicleRegJudge = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__VehicleRegJudge *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__VehicleRegJudge, sizeof(struct __ns1__VehicleRegJudge), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__VehicleRegJudge(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__VehicleRegJudge && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__VehicleRegJudge(soap, "ns1:VehicleRegJudge", &a->ns1__VehicleRegJudge, ""))
				{	soap_flag_ns1__VehicleRegJudge--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__VehicleRegJudge(struct soap *soap, const struct __ns1__VehicleRegJudge *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__VehicleRegJudge(soap, tag?tag:"-ns1:VehicleRegJudge", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__VehicleRegJudge * SOAP_FMAC4 soap_get___ns1__VehicleRegJudge(struct soap *soap, struct __ns1__VehicleRegJudge *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__VehicleRegJudge(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__VehicleRegJudge * SOAP_FMAC2 soap_instantiate___ns1__VehicleRegJudge(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__VehicleRegJudge(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__VehicleRegJudge, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__VehicleRegJudge);
		if (size)
			*size = sizeof(struct __ns1__VehicleRegJudge);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__VehicleRegJudge, n);
		if (size)
			*size = n * sizeof(struct __ns1__VehicleRegJudge);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__VehicleRegJudge*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__VehicleRegJudge(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__VehicleRegJudge %p -> %p\n", q, p));
	*(struct __ns1__VehicleRegJudge*)p = *(struct __ns1__VehicleRegJudge*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AddDeviceCheckData(struct soap *soap, _ns1__AddDeviceCheckData *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__AddDeviceCheckData))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AddDeviceCheckData(struct soap *soap, const char *tag, int id, _ns1__AddDeviceCheckData *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__AddDeviceCheckData);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__AddDeviceCheckData ** SOAP_FMAC4 soap_in_PointerTo_ns1__AddDeviceCheckData(struct soap *soap, const char *tag, _ns1__AddDeviceCheckData **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__AddDeviceCheckData **)soap_malloc(soap, sizeof(_ns1__AddDeviceCheckData *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__AddDeviceCheckData *)soap_instantiate__ns1__AddDeviceCheckData(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__AddDeviceCheckData ** p = (_ns1__AddDeviceCheckData **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__AddDeviceCheckData, sizeof(_ns1__AddDeviceCheckData), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AddDeviceCheckData(struct soap *soap, _ns1__AddDeviceCheckData *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__AddDeviceCheckData);
	if (soap_out_PointerTo_ns1__AddDeviceCheckData(soap, tag?tag:"ns1:AddDeviceCheckData", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__AddDeviceCheckData ** SOAP_FMAC4 soap_get_PointerTo_ns1__AddDeviceCheckData(struct soap *soap, _ns1__AddDeviceCheckData **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__AddDeviceCheckData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AddWGJCData(struct soap *soap, _ns1__AddWGJCData *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__AddWGJCData))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AddWGJCData(struct soap *soap, const char *tag, int id, _ns1__AddWGJCData *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__AddWGJCData);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__AddWGJCData ** SOAP_FMAC4 soap_in_PointerTo_ns1__AddWGJCData(struct soap *soap, const char *tag, _ns1__AddWGJCData **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__AddWGJCData **)soap_malloc(soap, sizeof(_ns1__AddWGJCData *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__AddWGJCData *)soap_instantiate__ns1__AddWGJCData(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__AddWGJCData ** p = (_ns1__AddWGJCData **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__AddWGJCData, sizeof(_ns1__AddWGJCData), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AddWGJCData(struct soap *soap, _ns1__AddWGJCData *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__AddWGJCData);
	if (soap_out_PointerTo_ns1__AddWGJCData(soap, tag?tag:"ns1:AddWGJCData", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__AddWGJCData ** SOAP_FMAC4 soap_get_PointerTo_ns1__AddWGJCData(struct soap *soap, _ns1__AddWGJCData **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__AddWGJCData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__LokeJudge(struct soap *soap, _ns1__LokeJudge *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__LokeJudge))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__LokeJudge(struct soap *soap, const char *tag, int id, _ns1__LokeJudge *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__LokeJudge);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__LokeJudge ** SOAP_FMAC4 soap_in_PointerTo_ns1__LokeJudge(struct soap *soap, const char *tag, _ns1__LokeJudge **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__LokeJudge **)soap_malloc(soap, sizeof(_ns1__LokeJudge *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__LokeJudge *)soap_instantiate__ns1__LokeJudge(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__LokeJudge ** p = (_ns1__LokeJudge **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__LokeJudge, sizeof(_ns1__LokeJudge), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__LokeJudge(struct soap *soap, _ns1__LokeJudge *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__LokeJudge);
	if (soap_out_PointerTo_ns1__LokeJudge(soap, tag?tag:"ns1:LokeJudge", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__LokeJudge ** SOAP_FMAC4 soap_get_PointerTo_ns1__LokeJudge(struct soap *soap, _ns1__LokeJudge **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__LokeJudge(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__PrintUp(struct soap *soap, _ns1__PrintUp *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__PrintUp))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__PrintUp(struct soap *soap, const char *tag, int id, _ns1__PrintUp *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__PrintUp);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__PrintUp ** SOAP_FMAC4 soap_in_PointerTo_ns1__PrintUp(struct soap *soap, const char *tag, _ns1__PrintUp **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__PrintUp **)soap_malloc(soap, sizeof(_ns1__PrintUp *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__PrintUp *)soap_instantiate__ns1__PrintUp(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__PrintUp ** p = (_ns1__PrintUp **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__PrintUp, sizeof(_ns1__PrintUp), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__PrintUp(struct soap *soap, _ns1__PrintUp *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__PrintUp);
	if (soap_out_PointerTo_ns1__PrintUp(soap, tag?tag:"ns1:PrintUp", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__PrintUp ** SOAP_FMAC4 soap_get_PointerTo_ns1__PrintUp(struct soap *soap, _ns1__PrintUp **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__PrintUp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__PrintJudge(struct soap *soap, _ns1__PrintJudge *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__PrintJudge))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__PrintJudge(struct soap *soap, const char *tag, int id, _ns1__PrintJudge *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__PrintJudge);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__PrintJudge ** SOAP_FMAC4 soap_in_PointerTo_ns1__PrintJudge(struct soap *soap, const char *tag, _ns1__PrintJudge **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__PrintJudge **)soap_malloc(soap, sizeof(_ns1__PrintJudge *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__PrintJudge *)soap_instantiate__ns1__PrintJudge(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__PrintJudge ** p = (_ns1__PrintJudge **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__PrintJudge, sizeof(_ns1__PrintJudge), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__PrintJudge(struct soap *soap, _ns1__PrintJudge *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__PrintJudge);
	if (soap_out_PointerTo_ns1__PrintJudge(soap, tag?tag:"ns1:PrintJudge", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__PrintJudge ** SOAP_FMAC4 soap_get_PointerTo_ns1__PrintJudge(struct soap *soap, _ns1__PrintJudge **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__PrintJudge(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AddVerify(struct soap *soap, _ns1__AddVerify *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__AddVerify))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AddVerify(struct soap *soap, const char *tag, int id, _ns1__AddVerify *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__AddVerify);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__AddVerify ** SOAP_FMAC4 soap_in_PointerTo_ns1__AddVerify(struct soap *soap, const char *tag, _ns1__AddVerify **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__AddVerify **)soap_malloc(soap, sizeof(_ns1__AddVerify *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__AddVerify *)soap_instantiate__ns1__AddVerify(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__AddVerify ** p = (_ns1__AddVerify **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__AddVerify, sizeof(_ns1__AddVerify), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AddVerify(struct soap *soap, _ns1__AddVerify *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__AddVerify);
	if (soap_out_PointerTo_ns1__AddVerify(soap, tag?tag:"ns1:AddVerify", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__AddVerify ** SOAP_FMAC4 soap_get_PointerTo_ns1__AddVerify(struct soap *soap, _ns1__AddVerify **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__AddVerify(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__RyzfControl(struct soap *soap, _ns1__RyzfControl *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__RyzfControl))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__RyzfControl(struct soap *soap, const char *tag, int id, _ns1__RyzfControl *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__RyzfControl);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__RyzfControl ** SOAP_FMAC4 soap_in_PointerTo_ns1__RyzfControl(struct soap *soap, const char *tag, _ns1__RyzfControl **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__RyzfControl **)soap_malloc(soap, sizeof(_ns1__RyzfControl *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__RyzfControl *)soap_instantiate__ns1__RyzfControl(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__RyzfControl ** p = (_ns1__RyzfControl **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__RyzfControl, sizeof(_ns1__RyzfControl), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__RyzfControl(struct soap *soap, _ns1__RyzfControl *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__RyzfControl);
	if (soap_out_PointerTo_ns1__RyzfControl(soap, tag?tag:"ns1:RyzfControl", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__RyzfControl ** SOAP_FMAC4 soap_get_PointerTo_ns1__RyzfControl(struct soap *soap, _ns1__RyzfControl **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__RyzfControl(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AddIuprData(struct soap *soap, _ns1__AddIuprData *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__AddIuprData))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AddIuprData(struct soap *soap, const char *tag, int id, _ns1__AddIuprData *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__AddIuprData);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__AddIuprData ** SOAP_FMAC4 soap_in_PointerTo_ns1__AddIuprData(struct soap *soap, const char *tag, _ns1__AddIuprData **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__AddIuprData **)soap_malloc(soap, sizeof(_ns1__AddIuprData *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__AddIuprData *)soap_instantiate__ns1__AddIuprData(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__AddIuprData ** p = (_ns1__AddIuprData **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__AddIuprData, sizeof(_ns1__AddIuprData), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AddIuprData(struct soap *soap, _ns1__AddIuprData *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__AddIuprData);
	if (soap_out_PointerTo_ns1__AddIuprData(soap, tag?tag:"ns1:AddIuprData", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__AddIuprData ** SOAP_FMAC4 soap_get_PointerTo_ns1__AddIuprData(struct soap *soap, _ns1__AddIuprData **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__AddIuprData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AddObdData(struct soap *soap, _ns1__AddObdData *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__AddObdData))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AddObdData(struct soap *soap, const char *tag, int id, _ns1__AddObdData *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__AddObdData);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__AddObdData ** SOAP_FMAC4 soap_in_PointerTo_ns1__AddObdData(struct soap *soap, const char *tag, _ns1__AddObdData **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__AddObdData **)soap_malloc(soap, sizeof(_ns1__AddObdData *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__AddObdData *)soap_instantiate__ns1__AddObdData(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__AddObdData ** p = (_ns1__AddObdData **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__AddObdData, sizeof(_ns1__AddObdData), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AddObdData(struct soap *soap, _ns1__AddObdData *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__AddObdData);
	if (soap_out_PointerTo_ns1__AddObdData(soap, tag?tag:"ns1:AddObdData", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__AddObdData ** SOAP_FMAC4 soap_get_PointerTo_ns1__AddObdData(struct soap *soap, _ns1__AddObdData **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__AddObdData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AddCheckData(struct soap *soap, _ns1__AddCheckData *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__AddCheckData))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AddCheckData(struct soap *soap, const char *tag, int id, _ns1__AddCheckData *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__AddCheckData);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__AddCheckData ** SOAP_FMAC4 soap_in_PointerTo_ns1__AddCheckData(struct soap *soap, const char *tag, _ns1__AddCheckData **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__AddCheckData **)soap_malloc(soap, sizeof(_ns1__AddCheckData *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__AddCheckData *)soap_instantiate__ns1__AddCheckData(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__AddCheckData ** p = (_ns1__AddCheckData **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__AddCheckData, sizeof(_ns1__AddCheckData), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AddCheckData(struct soap *soap, _ns1__AddCheckData *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__AddCheckData);
	if (soap_out_PointerTo_ns1__AddCheckData(soap, tag?tag:"ns1:AddCheckData", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__AddCheckData ** SOAP_FMAC4 soap_get_PointerTo_ns1__AddCheckData(struct soap *soap, _ns1__AddCheckData **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__AddCheckData(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__OnlineJudge(struct soap *soap, _ns1__OnlineJudge *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__OnlineJudge))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__OnlineJudge(struct soap *soap, const char *tag, int id, _ns1__OnlineJudge *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__OnlineJudge);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__OnlineJudge ** SOAP_FMAC4 soap_in_PointerTo_ns1__OnlineJudge(struct soap *soap, const char *tag, _ns1__OnlineJudge **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__OnlineJudge **)soap_malloc(soap, sizeof(_ns1__OnlineJudge *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__OnlineJudge *)soap_instantiate__ns1__OnlineJudge(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__OnlineJudge ** p = (_ns1__OnlineJudge **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__OnlineJudge, sizeof(_ns1__OnlineJudge), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__OnlineJudge(struct soap *soap, _ns1__OnlineJudge *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__OnlineJudge);
	if (soap_out_PointerTo_ns1__OnlineJudge(soap, tag?tag:"ns1:OnlineJudge", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__OnlineJudge ** SOAP_FMAC4 soap_get_PointerTo_ns1__OnlineJudge(struct soap *soap, _ns1__OnlineJudge **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__OnlineJudge(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__VehicleRegJudge(struct soap *soap, _ns1__VehicleRegJudge *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__VehicleRegJudge))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__VehicleRegJudge(struct soap *soap, const char *tag, int id, _ns1__VehicleRegJudge *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__VehicleRegJudge);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__VehicleRegJudge ** SOAP_FMAC4 soap_in_PointerTo_ns1__VehicleRegJudge(struct soap *soap, const char *tag, _ns1__VehicleRegJudge **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__VehicleRegJudge **)soap_malloc(soap, sizeof(_ns1__VehicleRegJudge *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__VehicleRegJudge *)soap_instantiate__ns1__VehicleRegJudge(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__VehicleRegJudge ** p = (_ns1__VehicleRegJudge **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__VehicleRegJudge, sizeof(_ns1__VehicleRegJudge), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__VehicleRegJudge(struct soap *soap, _ns1__VehicleRegJudge *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTo_ns1__VehicleRegJudge);
	if (soap_out_PointerTo_ns1__VehicleRegJudge(soap, tag?tag:"ns1:VehicleRegJudge", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__VehicleRegJudge ** SOAP_FMAC4 soap_get_PointerTo_ns1__VehicleRegJudge(struct soap *soap, _ns1__VehicleRegJudge **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__VehicleRegJudge(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__wstring(struct soap *soap, std::wstring *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_std__wstring))
		soap_serialize_std__wstring(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__wstring(struct soap *soap, const char *tag, int id, std::wstring *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__wstring);
	if (id < 0)
		return soap->error;
	return soap_out_std__wstring(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_in_PointerTostd__wstring(struct soap *soap, const char *tag, std::wstring **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::wstring **)soap_malloc(soap, sizeof(std::wstring *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__wstring(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::wstring **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__wstring, sizeof(std::wstring), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__wstring(struct soap *soap, std::wstring *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTostd__wstring);
	if (soap_out_PointerTostd__wstring(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_get_PointerTostd__wstring(struct soap *soap, std::wstring **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__wstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
