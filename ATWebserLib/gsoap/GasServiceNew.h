/* GasServiceNew.h
   Generated by wsdl2h 2.8.21 from GasServiceNew.wsdl and typemap.dat
   2020-09-03 08:04:05 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2000-2014 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on GasServiceNew.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 -j to generate improved proxy and server classes.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following licenses:
GPL or Genivia's license for commercial use.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to remove STL dependency)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://tempuri.org/"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://tempuri.org/"
//gsoap ns1   schema namespace:	http://tempuri.org/
//gsoap ns1   schema elementForm:	qualified
//gsoap ns1   schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


//  Forward declaration of class _ns1__VehicleRegJudge.
class _ns1__VehicleRegJudge;

//  Forward declaration of class _ns1__VehicleRegJudgeResponse.
class _ns1__VehicleRegJudgeResponse;

//  Forward declaration of class _ns1__OnlineJudge.
class _ns1__OnlineJudge;

//  Forward declaration of class _ns1__OnlineJudgeResponse.
class _ns1__OnlineJudgeResponse;

//  Forward declaration of class _ns1__AddCheckData.
class _ns1__AddCheckData;

//  Forward declaration of class _ns1__AddCheckDataResponse.
class _ns1__AddCheckDataResponse;

//  Forward declaration of class _ns1__AddObdData.
class _ns1__AddObdData;

//  Forward declaration of class _ns1__AddObdDataResponse.
class _ns1__AddObdDataResponse;

//  Forward declaration of class _ns1__AddIuprData.
class _ns1__AddIuprData;

//  Forward declaration of class _ns1__AddIuprDataResponse.
class _ns1__AddIuprDataResponse;

//  Forward declaration of class _ns1__RyzfControl.
class _ns1__RyzfControl;

//  Forward declaration of class _ns1__RyzfControlResponse.
class _ns1__RyzfControlResponse;

//  Forward declaration of class _ns1__AddVerify.
class _ns1__AddVerify;

//  Forward declaration of class _ns1__AddVerifyResponse.
class _ns1__AddVerifyResponse;

//  Forward declaration of class _ns1__PrintJudge.
class _ns1__PrintJudge;

//  Forward declaration of class _ns1__PrintJudgeResponse.
class _ns1__PrintJudgeResponse;

//  Forward declaration of class _ns1__PrintUp.
class _ns1__PrintUp;

//  Forward declaration of class _ns1__PrintUpResponse.
class _ns1__PrintUpResponse;

//  Forward declaration of class _ns1__LokeJudge.
class _ns1__LokeJudge;

//  Forward declaration of class _ns1__LokeJudgeResponse.
class _ns1__LokeJudgeResponse;

//  Forward declaration of class _ns1__AddWGJCData.
class _ns1__AddWGJCData;

//  Forward declaration of class _ns1__AddWGJCDataResponse.
class _ns1__AddWGJCDataResponse;

//  Forward declaration of class _ns1__AddDeviceCheckData.
class _ns1__AddDeviceCheckData;

//  Forward declaration of class _ns1__AddDeviceCheckDataResponse.
class _ns1__AddDeviceCheckDataResponse;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://tempuri.org/":VehicleRegJudge
/// @brief "http://tempuri.org/":VehicleRegJudge is a complexType.
///
/// class _ns1__VehicleRegJudge operations:
/// - soap_new__ns1__VehicleRegJudge(soap*) allocate
/// - soap_new__ns1__VehicleRegJudge(soap*, int num) allocate array
/// - soap_new_req__ns1__VehicleRegJudge(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__VehicleRegJudge(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__VehicleRegJudge(soap*, _ns1__VehicleRegJudge*) deserialize from a stream
/// - int soap_write__ns1__VehicleRegJudge(soap, _ns1__VehicleRegJudge*) serialize to a stream
class _ns1__VehicleRegJudge
{ public:
/// Element "JczId" of XSD type xs:string.
    std::wstring*                        JczId                          0;	///< Optional element.
/// Element "ZcTime" of XSD type xs:string.
    std::wstring*                        ZcTime                         0;	///< Optional element.
/// Element "CarItems" of XSD type xs:string.
    std::wstring*                        CarItems                       0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":VehicleRegJudgeResponse
/// @brief "http://tempuri.org/":VehicleRegJudgeResponse is a complexType.
///
/// class _ns1__VehicleRegJudgeResponse operations:
/// - soap_new__ns1__VehicleRegJudgeResponse(soap*) allocate
/// - soap_new__ns1__VehicleRegJudgeResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__VehicleRegJudgeResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__VehicleRegJudgeResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__VehicleRegJudgeResponse(soap*, _ns1__VehicleRegJudgeResponse*) deserialize from a stream
/// - int soap_write__ns1__VehicleRegJudgeResponse(soap, _ns1__VehicleRegJudgeResponse*) serialize to a stream
class _ns1__VehicleRegJudgeResponse
{ public:
/// Element "VehicleRegJudgeResult" of XSD type xs:string.
    std::wstring*                        VehicleRegJudgeResult          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":OnlineJudge
/// @brief "http://tempuri.org/":OnlineJudge is a complexType.
///
/// class _ns1__OnlineJudge operations:
/// - soap_new__ns1__OnlineJudge(soap*) allocate
/// - soap_new__ns1__OnlineJudge(soap*, int num) allocate array
/// - soap_new_req__ns1__OnlineJudge(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__OnlineJudge(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__OnlineJudge(soap*, _ns1__OnlineJudge*) deserialize from a stream
/// - int soap_write__ns1__OnlineJudge(soap, _ns1__OnlineJudge*) serialize to a stream
class _ns1__OnlineJudge
{ public:
/// Element "jczNo" of XSD type xs:string.
    std::wstring*                        jczNo                          0;	///< Optional element.
/// Element "jcxNo" of XSD type xs:string.
    std::wstring*                        jcxNo                          0;	///< Optional element.
/// Element "bdrq" of XSD type xs:string.
    std::wstring*                        bdrq                           0;	///< Optional element.
/// Element "CarPZ" of XSD type xs:string.
    std::wstring*                        CarPZ                          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":OnlineJudgeResponse
/// @brief "http://tempuri.org/":OnlineJudgeResponse is a complexType.
///
/// class _ns1__OnlineJudgeResponse operations:
/// - soap_new__ns1__OnlineJudgeResponse(soap*) allocate
/// - soap_new__ns1__OnlineJudgeResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__OnlineJudgeResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__OnlineJudgeResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__OnlineJudgeResponse(soap*, _ns1__OnlineJudgeResponse*) deserialize from a stream
/// - int soap_write__ns1__OnlineJudgeResponse(soap, _ns1__OnlineJudgeResponse*) serialize to a stream
class _ns1__OnlineJudgeResponse
{ public:
/// Element "OnlineJudgeResult" of XSD type xs:string.
    std::wstring*                        OnlineJudgeResult              0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":AddCheckData
/// @brief "http://tempuri.org/":AddCheckData is a complexType.
///
/// class _ns1__AddCheckData operations:
/// - soap_new__ns1__AddCheckData(soap*) allocate
/// - soap_new__ns1__AddCheckData(soap*, int num) allocate array
/// - soap_new_req__ns1__AddCheckData(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__AddCheckData(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__AddCheckData(soap*, _ns1__AddCheckData*) deserialize from a stream
/// - int soap_write__ns1__AddCheckData(soap, _ns1__AddCheckData*) serialize to a stream
class _ns1__AddCheckData
{ public:
/// Element "CheckDataItems" of XSD type xs:string.
    std::wstring*                        CheckDataItems                 0;	///< Optional element.
/// Element "CheckEndDataItems" of XSD type xs:string.
    std::wstring*                        CheckEndDataItems              0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":AddCheckDataResponse
/// @brief "http://tempuri.org/":AddCheckDataResponse is a complexType.
///
/// class _ns1__AddCheckDataResponse operations:
/// - soap_new__ns1__AddCheckDataResponse(soap*) allocate
/// - soap_new__ns1__AddCheckDataResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__AddCheckDataResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__AddCheckDataResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__AddCheckDataResponse(soap*, _ns1__AddCheckDataResponse*) deserialize from a stream
/// - int soap_write__ns1__AddCheckDataResponse(soap, _ns1__AddCheckDataResponse*) serialize to a stream
class _ns1__AddCheckDataResponse
{ public:
/// Element "AddCheckDataResult" of XSD type xs:string.
    std::wstring*                        AddCheckDataResult             0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":AddObdData
/// @brief "http://tempuri.org/":AddObdData is a complexType.
///
/// class _ns1__AddObdData operations:
/// - soap_new__ns1__AddObdData(soap*) allocate
/// - soap_new__ns1__AddObdData(soap*, int num) allocate array
/// - soap_new_req__ns1__AddObdData(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__AddObdData(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__AddObdData(soap*, _ns1__AddObdData*) deserialize from a stream
/// - int soap_write__ns1__AddObdData(soap, _ns1__AddObdData*) serialize to a stream
class _ns1__AddObdData
{ public:
/// Element "ObdDataItems" of XSD type xs:string.
    std::wstring*                        ObdDataItems                   0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":AddObdDataResponse
/// @brief "http://tempuri.org/":AddObdDataResponse is a complexType.
///
/// class _ns1__AddObdDataResponse operations:
/// - soap_new__ns1__AddObdDataResponse(soap*) allocate
/// - soap_new__ns1__AddObdDataResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__AddObdDataResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__AddObdDataResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__AddObdDataResponse(soap*, _ns1__AddObdDataResponse*) deserialize from a stream
/// - int soap_write__ns1__AddObdDataResponse(soap, _ns1__AddObdDataResponse*) serialize to a stream
class _ns1__AddObdDataResponse
{ public:
/// Element "AddObdDataResult" of XSD type xs:string.
    std::wstring*                        AddObdDataResult               0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":AddIuprData
/// @brief "http://tempuri.org/":AddIuprData is a complexType.
///
/// class _ns1__AddIuprData operations:
/// - soap_new__ns1__AddIuprData(soap*) allocate
/// - soap_new__ns1__AddIuprData(soap*, int num) allocate array
/// - soap_new_req__ns1__AddIuprData(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__AddIuprData(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__AddIuprData(soap*, _ns1__AddIuprData*) deserialize from a stream
/// - int soap_write__ns1__AddIuprData(soap, _ns1__AddIuprData*) serialize to a stream
class _ns1__AddIuprData
{ public:
/// Element "IuprDataItems" of XSD type xs:string.
    std::wstring*                        IuprDataItems                  0;	///< Optional element.
/// Element "ObdType" of XSD type xs:string.
    std::wstring*                        ObdType                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":AddIuprDataResponse
/// @brief "http://tempuri.org/":AddIuprDataResponse is a complexType.
///
/// class _ns1__AddIuprDataResponse operations:
/// - soap_new__ns1__AddIuprDataResponse(soap*) allocate
/// - soap_new__ns1__AddIuprDataResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__AddIuprDataResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__AddIuprDataResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__AddIuprDataResponse(soap*, _ns1__AddIuprDataResponse*) deserialize from a stream
/// - int soap_write__ns1__AddIuprDataResponse(soap, _ns1__AddIuprDataResponse*) serialize to a stream
class _ns1__AddIuprDataResponse
{ public:
/// Element "AddIuprDataResult" of XSD type xs:string.
    std::wstring*                        AddIuprDataResult              0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":RyzfControl
/// @brief "http://tempuri.org/":RyzfControl is a complexType.
///
/// class _ns1__RyzfControl operations:
/// - soap_new__ns1__RyzfControl(soap*) allocate
/// - soap_new__ns1__RyzfControl(soap*, int num) allocate array
/// - soap_new_req__ns1__RyzfControl(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__RyzfControl(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__RyzfControl(soap*, _ns1__RyzfControl*) deserialize from a stream
/// - int soap_write__ns1__RyzfControl(soap, _ns1__RyzfControl*) serialize to a stream
class _ns1__RyzfControl
{ public:
/// Element "rykzItems" of XSD type xs:string.
    std::wstring*                        rykzItems                      0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":RyzfControlResponse
/// @brief "http://tempuri.org/":RyzfControlResponse is a complexType.
///
/// class _ns1__RyzfControlResponse operations:
/// - soap_new__ns1__RyzfControlResponse(soap*) allocate
/// - soap_new__ns1__RyzfControlResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__RyzfControlResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__RyzfControlResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__RyzfControlResponse(soap*, _ns1__RyzfControlResponse*) deserialize from a stream
/// - int soap_write__ns1__RyzfControlResponse(soap, _ns1__RyzfControlResponse*) serialize to a stream
class _ns1__RyzfControlResponse
{ public:
/// Element "RyzfControlResult" of XSD type xs:string.
    std::wstring*                        RyzfControlResult              0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":AddVerify
/// @brief "http://tempuri.org/":AddVerify is a complexType.
///
/// class _ns1__AddVerify operations:
/// - soap_new__ns1__AddVerify(soap*) allocate
/// - soap_new__ns1__AddVerify(soap*, int num) allocate array
/// - soap_new_req__ns1__AddVerify(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__AddVerify(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__AddVerify(soap*, _ns1__AddVerify*) deserialize from a stream
/// - int soap_write__ns1__AddVerify(soap, _ns1__AddVerify*) serialize to a stream
class _ns1__AddVerify
{ public:
/// Element "DeviceType" of XSD type xs:string.
    std::wstring*                        DeviceType                     0;	///< Optional element.
/// Element "Items" of XSD type xs:string.
    std::wstring*                        Items                          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":AddVerifyResponse
/// @brief "http://tempuri.org/":AddVerifyResponse is a complexType.
///
/// class _ns1__AddVerifyResponse operations:
/// - soap_new__ns1__AddVerifyResponse(soap*) allocate
/// - soap_new__ns1__AddVerifyResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__AddVerifyResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__AddVerifyResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__AddVerifyResponse(soap*, _ns1__AddVerifyResponse*) deserialize from a stream
/// - int soap_write__ns1__AddVerifyResponse(soap, _ns1__AddVerifyResponse*) serialize to a stream
class _ns1__AddVerifyResponse
{ public:
/// Element "AddVerifyResult" of XSD type xs:string.
    std::wstring*                        AddVerifyResult                0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":PrintJudge
/// @brief "http://tempuri.org/":PrintJudge is a complexType.
///
/// class _ns1__PrintJudge operations:
/// - soap_new__ns1__PrintJudge(soap*) allocate
/// - soap_new__ns1__PrintJudge(soap*, int num) allocate array
/// - soap_new_req__ns1__PrintJudge(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__PrintJudge(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__PrintJudge(soap*, _ns1__PrintJudge*) deserialize from a stream
/// - int soap_write__ns1__PrintJudge(soap, _ns1__PrintJudge*) serialize to a stream
class _ns1__PrintJudge
{ public:
/// Element "lsbh" of XSD type xs:string.
    std::wstring*                        lsbh                           0;	///< Optional element.
/// Element "jczNo" of XSD type xs:string.
    std::wstring*                        jczNo                          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":PrintJudgeResponse
/// @brief "http://tempuri.org/":PrintJudgeResponse is a complexType.
///
/// class _ns1__PrintJudgeResponse operations:
/// - soap_new__ns1__PrintJudgeResponse(soap*) allocate
/// - soap_new__ns1__PrintJudgeResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__PrintJudgeResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__PrintJudgeResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__PrintJudgeResponse(soap*, _ns1__PrintJudgeResponse*) deserialize from a stream
/// - int soap_write__ns1__PrintJudgeResponse(soap, _ns1__PrintJudgeResponse*) serialize to a stream
class _ns1__PrintJudgeResponse
{ public:
/// Element "PrintJudgeResult" of XSD type xs:string.
    std::wstring*                        PrintJudgeResult               0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":PrintUp
/// @brief "http://tempuri.org/":PrintUp is a complexType.
///
/// class _ns1__PrintUp operations:
/// - soap_new__ns1__PrintUp(soap*) allocate
/// - soap_new__ns1__PrintUp(soap*, int num) allocate array
/// - soap_new_req__ns1__PrintUp(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__PrintUp(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__PrintUp(soap*, _ns1__PrintUp*) deserialize from a stream
/// - int soap_write__ns1__PrintUp(soap, _ns1__PrintUp*) serialize to a stream
class _ns1__PrintUp
{ public:
/// Element "lsbh" of XSD type xs:string.
    std::wstring*                        lsbh                           0;	///< Optional element.
/// Element "encodeReport" of XSD type xs:string.
    std::wstring*                        encodeReport                   0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":PrintUpResponse
/// @brief "http://tempuri.org/":PrintUpResponse is a complexType.
///
/// class _ns1__PrintUpResponse operations:
/// - soap_new__ns1__PrintUpResponse(soap*) allocate
/// - soap_new__ns1__PrintUpResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__PrintUpResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__PrintUpResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__PrintUpResponse(soap*, _ns1__PrintUpResponse*) deserialize from a stream
/// - int soap_write__ns1__PrintUpResponse(soap, _ns1__PrintUpResponse*) serialize to a stream
class _ns1__PrintUpResponse
{ public:
/// Element "PrintUpResult" of XSD type xs:string.
    std::wstring*                        PrintUpResult                  0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":LokeJudge
/// @brief "http://tempuri.org/":LokeJudge is a complexType.
///
/// class _ns1__LokeJudge operations:
/// - soap_new__ns1__LokeJudge(soap*) allocate
/// - soap_new__ns1__LokeJudge(soap*, int num) allocate array
/// - soap_new_req__ns1__LokeJudge(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__LokeJudge(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__LokeJudge(soap*, _ns1__LokeJudge*) deserialize from a stream
/// - int soap_write__ns1__LokeJudge(soap, _ns1__LokeJudge*) serialize to a stream
class _ns1__LokeJudge
{ public:
/// Element "jczNo" of XSD type xs:string.
    std::wstring*                        jczNo                          0;	///< Optional element.
/// Element "devBm" of XSD type xs:string.
    std::wstring*                        devBm                          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":LokeJudgeResponse
/// @brief "http://tempuri.org/":LokeJudgeResponse is a complexType.
///
/// class _ns1__LokeJudgeResponse operations:
/// - soap_new__ns1__LokeJudgeResponse(soap*) allocate
/// - soap_new__ns1__LokeJudgeResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__LokeJudgeResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__LokeJudgeResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__LokeJudgeResponse(soap*, _ns1__LokeJudgeResponse*) deserialize from a stream
/// - int soap_write__ns1__LokeJudgeResponse(soap, _ns1__LokeJudgeResponse*) serialize to a stream
class _ns1__LokeJudgeResponse
{ public:
/// Element "LokeJudgeResult" of XSD type xs:string.
    std::wstring*                        LokeJudgeResult                0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":AddWGJCData
/// @brief "http://tempuri.org/":AddWGJCData is a complexType.
///
/// class _ns1__AddWGJCData operations:
/// - soap_new__ns1__AddWGJCData(soap*) allocate
/// - soap_new__ns1__AddWGJCData(soap*, int num) allocate array
/// - soap_new_req__ns1__AddWGJCData(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__AddWGJCData(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__AddWGJCData(soap*, _ns1__AddWGJCData*) deserialize from a stream
/// - int soap_write__ns1__AddWGJCData(soap, _ns1__AddWGJCData*) serialize to a stream
class _ns1__AddWGJCData
{ public:
/// Element "WgjcDataItems" of XSD type xs:string.
    std::wstring*                        WgjcDataItems                  0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":AddWGJCDataResponse
/// @brief "http://tempuri.org/":AddWGJCDataResponse is a complexType.
///
/// class _ns1__AddWGJCDataResponse operations:
/// - soap_new__ns1__AddWGJCDataResponse(soap*) allocate
/// - soap_new__ns1__AddWGJCDataResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__AddWGJCDataResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__AddWGJCDataResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__AddWGJCDataResponse(soap*, _ns1__AddWGJCDataResponse*) deserialize from a stream
/// - int soap_write__ns1__AddWGJCDataResponse(soap, _ns1__AddWGJCDataResponse*) serialize to a stream
class _ns1__AddWGJCDataResponse
{ public:
/// Element "AddWGJCDataResult" of XSD type xs:string.
    std::wstring*                        AddWGJCDataResult              0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":AddDeviceCheckData
/// @brief "http://tempuri.org/":AddDeviceCheckData is a complexType.
///
/// class _ns1__AddDeviceCheckData operations:
/// - soap_new__ns1__AddDeviceCheckData(soap*) allocate
/// - soap_new__ns1__AddDeviceCheckData(soap*, int num) allocate array
/// - soap_new_req__ns1__AddDeviceCheckData(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__AddDeviceCheckData(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__AddDeviceCheckData(soap*, _ns1__AddDeviceCheckData*) deserialize from a stream
/// - int soap_write__ns1__AddDeviceCheckData(soap, _ns1__AddDeviceCheckData*) serialize to a stream
class _ns1__AddDeviceCheckData
{ public:
/// Element "addDeviceCheckData" of XSD type xs:string.
    std::wstring*                        addDeviceCheckData             0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://tempuri.org/":AddDeviceCheckDataResponse
/// @brief "http://tempuri.org/":AddDeviceCheckDataResponse is a complexType.
///
/// class _ns1__AddDeviceCheckDataResponse operations:
/// - soap_new__ns1__AddDeviceCheckDataResponse(soap*) allocate
/// - soap_new__ns1__AddDeviceCheckDataResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__AddDeviceCheckDataResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__AddDeviceCheckDataResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__AddDeviceCheckDataResponse(soap*, _ns1__AddDeviceCheckDataResponse*) deserialize from a stream
/// - int soap_write__ns1__AddDeviceCheckDataResponse(soap, _ns1__AddDeviceCheckDataResponse*) serialize to a stream
class _ns1__AddDeviceCheckDataResponse
{ public:
/// Element "AddDeviceCheckDataResult" of XSD type xs:string.
    std::wstring*                        AddDeviceCheckDataResult       0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/

// This service supports SOAP 1.2 namespaces:
#import "soap12.h"

//gsoap ns1  service name:	GasServiceNewSoap 
//gsoap ns1  service type:	GasServiceNewSoap 
//gsoap ns1  service port:	http://172.168.81.60:10000/GasServiceNew.asmx 
//gsoap ns1  service namespace:	http://tempuri.org/ 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Service Bindings

  - @ref GasServiceNewSoap

@section Service_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page GasServiceNewSoap Binding "GasServiceNewSoap"

@section GasServiceNewSoap_operations Operations of Binding "GasServiceNewSoap"

  - @ref __ns1__VehicleRegJudge

  - @ref __ns1__OnlineJudge

  - @ref __ns1__AddCheckData

  - @ref __ns1__AddObdData

  - @ref __ns1__AddIuprData

  - @ref __ns1__RyzfControl

  - @ref __ns1__AddVerify

  - @ref __ns1__PrintJudge

  - @ref __ns1__PrintUp

  - @ref __ns1__LokeJudge

  - @ref __ns1__AddWGJCData

  - @ref __ns1__AddDeviceCheckData

  - @ref __ns1__VehicleRegJudge_

  - @ref __ns1__OnlineJudge_

  - @ref __ns1__AddCheckData_

  - @ref __ns1__AddObdData_

  - @ref __ns1__AddIuprData_

  - @ref __ns1__RyzfControl_

  - @ref __ns1__AddVerify_

  - @ref __ns1__PrintJudge_

  - @ref __ns1__PrintUp_

  - @ref __ns1__LokeJudge_

  - @ref __ns1__AddWGJCData_

  - @ref __ns1__AddDeviceCheckData_

@section GasServiceNewSoap_ports Endpoints of Binding "GasServiceNewSoap"

  - http://172.168.81.60:10000/GasServiceNew.asmx

@note Multiple service bindings collected as one, use wsdl2h option -Nname to produce a separate service for each binding


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   GasServiceNewSoap                                                        *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__VehicleRegJudge                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__VehicleRegJudge" of service binding "GasServiceNewSoap".


  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/VehicleRegJudge"

  - Addressing input action: "http://tempuri.org/VehicleRegJudge"

  - Addressing output action: "http://tempuri.org/VehicleRegJudgeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__VehicleRegJudge(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__VehicleRegJudge*              ns1__VehicleRegJudge,
    // output parameters:
    _ns1__VehicleRegJudgeResponse      &ns1__VehicleRegJudgeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__VehicleRegJudge(
    struct soap *soap,
    // input parameters:
    _ns1__VehicleRegJudge*              ns1__VehicleRegJudge,
    // output parameters:
    _ns1__VehicleRegJudgeResponse      &ns1__VehicleRegJudgeResponse
  );
@endcode

C++ proxy class (defined in soapGasServiceNewSoapProxy.h):
@code
  class GasServiceNewSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapGasServiceNewSoapService.h):
@code
  class GasServiceNewSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	VehicleRegJudge SOAP
//gsoap ns1  service method-style:	VehicleRegJudge document
//gsoap ns1  service method-encoding:	VehicleRegJudge literal
//gsoap ns1  service method-input-action:	VehicleRegJudge http://tempuri.org/VehicleRegJudge
//gsoap ns1  service method-output-action:	VehicleRegJudge http://tempuri.org/VehicleRegJudgeResponse
int __ns1__VehicleRegJudge(
    _ns1__VehicleRegJudge*              ns1__VehicleRegJudge,	///< Input parameter
    _ns1__VehicleRegJudgeResponse      &ns1__VehicleRegJudgeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__OnlineJudge                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__OnlineJudge" of service binding "GasServiceNewSoap".


  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/OnlineJudge"

  - Addressing input action: "http://tempuri.org/OnlineJudge"

  - Addressing output action: "http://tempuri.org/OnlineJudgeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__OnlineJudge(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__OnlineJudge*                  ns1__OnlineJudge,
    // output parameters:
    _ns1__OnlineJudgeResponse          &ns1__OnlineJudgeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__OnlineJudge(
    struct soap *soap,
    // input parameters:
    _ns1__OnlineJudge*                  ns1__OnlineJudge,
    // output parameters:
    _ns1__OnlineJudgeResponse          &ns1__OnlineJudgeResponse
  );
@endcode

C++ proxy class (defined in soapGasServiceNewSoapProxy.h):
@code
  class GasServiceNewSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapGasServiceNewSoapService.h):
@code
  class GasServiceNewSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	OnlineJudge SOAP
//gsoap ns1  service method-style:	OnlineJudge document
//gsoap ns1  service method-encoding:	OnlineJudge literal
//gsoap ns1  service method-input-action:	OnlineJudge http://tempuri.org/OnlineJudge
//gsoap ns1  service method-output-action:	OnlineJudge http://tempuri.org/OnlineJudgeResponse
int __ns1__OnlineJudge(
    _ns1__OnlineJudge*                  ns1__OnlineJudge,	///< Input parameter
    _ns1__OnlineJudgeResponse          &ns1__OnlineJudgeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__AddCheckData                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__AddCheckData" of service binding "GasServiceNewSoap".


  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/AddCheckData"

  - Addressing input action: "http://tempuri.org/AddCheckData"

  - Addressing output action: "http://tempuri.org/AddCheckDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__AddCheckData(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__AddCheckData*                 ns1__AddCheckData,
    // output parameters:
    _ns1__AddCheckDataResponse         &ns1__AddCheckDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__AddCheckData(
    struct soap *soap,
    // input parameters:
    _ns1__AddCheckData*                 ns1__AddCheckData,
    // output parameters:
    _ns1__AddCheckDataResponse         &ns1__AddCheckDataResponse
  );
@endcode

C++ proxy class (defined in soapGasServiceNewSoapProxy.h):
@code
  class GasServiceNewSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapGasServiceNewSoapService.h):
@code
  class GasServiceNewSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	AddCheckData SOAP
//gsoap ns1  service method-style:	AddCheckData document
//gsoap ns1  service method-encoding:	AddCheckData literal
//gsoap ns1  service method-input-action:	AddCheckData http://tempuri.org/AddCheckData
//gsoap ns1  service method-output-action:	AddCheckData http://tempuri.org/AddCheckDataResponse
int __ns1__AddCheckData(
    _ns1__AddCheckData*                 ns1__AddCheckData,	///< Input parameter
    _ns1__AddCheckDataResponse         &ns1__AddCheckDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__AddObdData                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__AddObdData" of service binding "GasServiceNewSoap".
OBD

  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/AddObdData"

  - Addressing input action: "http://tempuri.org/AddObdData"

  - Addressing output action: "http://tempuri.org/AddObdDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__AddObdData(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__AddObdData*                   ns1__AddObdData,
    // output parameters:
    _ns1__AddObdDataResponse           &ns1__AddObdDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__AddObdData(
    struct soap *soap,
    // input parameters:
    _ns1__AddObdData*                   ns1__AddObdData,
    // output parameters:
    _ns1__AddObdDataResponse           &ns1__AddObdDataResponse
  );
@endcode

C++ proxy class (defined in soapGasServiceNewSoapProxy.h):
@code
  class GasServiceNewSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapGasServiceNewSoapService.h):
@code
  class GasServiceNewSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	AddObdData SOAP
//gsoap ns1  service method-style:	AddObdData document
//gsoap ns1  service method-encoding:	AddObdData literal
//gsoap ns1  service method-input-action:	AddObdData http://tempuri.org/AddObdData
//gsoap ns1  service method-output-action:	AddObdData http://tempuri.org/AddObdDataResponse
int __ns1__AddObdData(
    _ns1__AddObdData*                   ns1__AddObdData,	///< Input parameter
    _ns1__AddObdDataResponse           &ns1__AddObdDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__AddIuprData                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__AddIuprData" of service binding "GasServiceNewSoap".
OBDIUPR

  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/AddIuprData"

  - Addressing input action: "http://tempuri.org/AddIuprData"

  - Addressing output action: "http://tempuri.org/AddIuprDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__AddIuprData(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__AddIuprData*                  ns1__AddIuprData,
    // output parameters:
    _ns1__AddIuprDataResponse          &ns1__AddIuprDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__AddIuprData(
    struct soap *soap,
    // input parameters:
    _ns1__AddIuprData*                  ns1__AddIuprData,
    // output parameters:
    _ns1__AddIuprDataResponse          &ns1__AddIuprDataResponse
  );
@endcode

C++ proxy class (defined in soapGasServiceNewSoapProxy.h):
@code
  class GasServiceNewSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapGasServiceNewSoapService.h):
@code
  class GasServiceNewSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	AddIuprData SOAP
//gsoap ns1  service method-style:	AddIuprData document
//gsoap ns1  service method-encoding:	AddIuprData literal
//gsoap ns1  service method-input-action:	AddIuprData http://tempuri.org/AddIuprData
//gsoap ns1  service method-output-action:	AddIuprData http://tempuri.org/AddIuprDataResponse
int __ns1__AddIuprData(
    _ns1__AddIuprData*                  ns1__AddIuprData,	///< Input parameter
    _ns1__AddIuprDataResponse          &ns1__AddIuprDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__RyzfControl                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__RyzfControl" of service binding "GasServiceNewSoap".


  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/RyzfControl"

  - Addressing input action: "http://tempuri.org/RyzfControl"

  - Addressing output action: "http://tempuri.org/RyzfControlResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__RyzfControl(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__RyzfControl*                  ns1__RyzfControl,
    // output parameters:
    _ns1__RyzfControlResponse          &ns1__RyzfControlResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__RyzfControl(
    struct soap *soap,
    // input parameters:
    _ns1__RyzfControl*                  ns1__RyzfControl,
    // output parameters:
    _ns1__RyzfControlResponse          &ns1__RyzfControlResponse
  );
@endcode

C++ proxy class (defined in soapGasServiceNewSoapProxy.h):
@code
  class GasServiceNewSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapGasServiceNewSoapService.h):
@code
  class GasServiceNewSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	RyzfControl SOAP
//gsoap ns1  service method-style:	RyzfControl document
//gsoap ns1  service method-encoding:	RyzfControl literal
//gsoap ns1  service method-input-action:	RyzfControl http://tempuri.org/RyzfControl
//gsoap ns1  service method-output-action:	RyzfControl http://tempuri.org/RyzfControlResponse
int __ns1__RyzfControl(
    _ns1__RyzfControl*                  ns1__RyzfControl,	///< Input parameter
    _ns1__RyzfControlResponse          &ns1__RyzfControlResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__AddVerify                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__AddVerify" of service binding "GasServiceNewSoap".


  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/AddVerify"

  - Addressing input action: "http://tempuri.org/AddVerify"

  - Addressing output action: "http://tempuri.org/AddVerifyResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__AddVerify(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__AddVerify*                    ns1__AddVerify,
    // output parameters:
    _ns1__AddVerifyResponse            &ns1__AddVerifyResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__AddVerify(
    struct soap *soap,
    // input parameters:
    _ns1__AddVerify*                    ns1__AddVerify,
    // output parameters:
    _ns1__AddVerifyResponse            &ns1__AddVerifyResponse
  );
@endcode

C++ proxy class (defined in soapGasServiceNewSoapProxy.h):
@code
  class GasServiceNewSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapGasServiceNewSoapService.h):
@code
  class GasServiceNewSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	AddVerify SOAP
//gsoap ns1  service method-style:	AddVerify document
//gsoap ns1  service method-encoding:	AddVerify literal
//gsoap ns1  service method-input-action:	AddVerify http://tempuri.org/AddVerify
//gsoap ns1  service method-output-action:	AddVerify http://tempuri.org/AddVerifyResponse
int __ns1__AddVerify(
    _ns1__AddVerify*                    ns1__AddVerify,	///< Input parameter
    _ns1__AddVerifyResponse            &ns1__AddVerifyResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__PrintJudge                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__PrintJudge" of service binding "GasServiceNewSoap".


  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/PrintJudge"

  - Addressing input action: "http://tempuri.org/PrintJudge"

  - Addressing output action: "http://tempuri.org/PrintJudgeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__PrintJudge(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__PrintJudge*                   ns1__PrintJudge,
    // output parameters:
    _ns1__PrintJudgeResponse           &ns1__PrintJudgeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__PrintJudge(
    struct soap *soap,
    // input parameters:
    _ns1__PrintJudge*                   ns1__PrintJudge,
    // output parameters:
    _ns1__PrintJudgeResponse           &ns1__PrintJudgeResponse
  );
@endcode

C++ proxy class (defined in soapGasServiceNewSoapProxy.h):
@code
  class GasServiceNewSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapGasServiceNewSoapService.h):
@code
  class GasServiceNewSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	PrintJudge SOAP
//gsoap ns1  service method-style:	PrintJudge document
//gsoap ns1  service method-encoding:	PrintJudge literal
//gsoap ns1  service method-input-action:	PrintJudge http://tempuri.org/PrintJudge
//gsoap ns1  service method-output-action:	PrintJudge http://tempuri.org/PrintJudgeResponse
int __ns1__PrintJudge(
    _ns1__PrintJudge*                   ns1__PrintJudge,	///< Input parameter
    _ns1__PrintJudgeResponse           &ns1__PrintJudgeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__PrintUp                                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__PrintUp" of service binding "GasServiceNewSoap".


  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/PrintUp"

  - Addressing input action: "http://tempuri.org/PrintUp"

  - Addressing output action: "http://tempuri.org/PrintUpResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__PrintUp(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__PrintUp*                      ns1__PrintUp,
    // output parameters:
    _ns1__PrintUpResponse              &ns1__PrintUpResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__PrintUp(
    struct soap *soap,
    // input parameters:
    _ns1__PrintUp*                      ns1__PrintUp,
    // output parameters:
    _ns1__PrintUpResponse              &ns1__PrintUpResponse
  );
@endcode

C++ proxy class (defined in soapGasServiceNewSoapProxy.h):
@code
  class GasServiceNewSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapGasServiceNewSoapService.h):
@code
  class GasServiceNewSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	PrintUp SOAP
//gsoap ns1  service method-style:	PrintUp document
//gsoap ns1  service method-encoding:	PrintUp literal
//gsoap ns1  service method-input-action:	PrintUp http://tempuri.org/PrintUp
//gsoap ns1  service method-output-action:	PrintUp http://tempuri.org/PrintUpResponse
int __ns1__PrintUp(
    _ns1__PrintUp*                      ns1__PrintUp,	///< Input parameter
    _ns1__PrintUpResponse              &ns1__PrintUpResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__LokeJudge                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__LokeJudge" of service binding "GasServiceNewSoap".


  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/LokeJudge"

  - Addressing input action: "http://tempuri.org/LokeJudge"

  - Addressing output action: "http://tempuri.org/LokeJudgeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__LokeJudge(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__LokeJudge*                    ns1__LokeJudge,
    // output parameters:
    _ns1__LokeJudgeResponse            &ns1__LokeJudgeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__LokeJudge(
    struct soap *soap,
    // input parameters:
    _ns1__LokeJudge*                    ns1__LokeJudge,
    // output parameters:
    _ns1__LokeJudgeResponse            &ns1__LokeJudgeResponse
  );
@endcode

C++ proxy class (defined in soapGasServiceNewSoapProxy.h):
@code
  class GasServiceNewSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapGasServiceNewSoapService.h):
@code
  class GasServiceNewSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	LokeJudge SOAP
//gsoap ns1  service method-style:	LokeJudge document
//gsoap ns1  service method-encoding:	LokeJudge literal
//gsoap ns1  service method-input-action:	LokeJudge http://tempuri.org/LokeJudge
//gsoap ns1  service method-output-action:	LokeJudge http://tempuri.org/LokeJudgeResponse
int __ns1__LokeJudge(
    _ns1__LokeJudge*                    ns1__LokeJudge,	///< Input parameter
    _ns1__LokeJudgeResponse            &ns1__LokeJudgeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__AddWGJCData                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__AddWGJCData" of service binding "GasServiceNewSoap".


  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/AddWGJCData"

  - Addressing input action: "http://tempuri.org/AddWGJCData"

  - Addressing output action: "http://tempuri.org/AddWGJCDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__AddWGJCData(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__AddWGJCData*                  ns1__AddWGJCData,
    // output parameters:
    _ns1__AddWGJCDataResponse          &ns1__AddWGJCDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__AddWGJCData(
    struct soap *soap,
    // input parameters:
    _ns1__AddWGJCData*                  ns1__AddWGJCData,
    // output parameters:
    _ns1__AddWGJCDataResponse          &ns1__AddWGJCDataResponse
  );
@endcode

C++ proxy class (defined in soapGasServiceNewSoapProxy.h):
@code
  class GasServiceNewSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapGasServiceNewSoapService.h):
@code
  class GasServiceNewSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	AddWGJCData SOAP
//gsoap ns1  service method-style:	AddWGJCData document
//gsoap ns1  service method-encoding:	AddWGJCData literal
//gsoap ns1  service method-input-action:	AddWGJCData http://tempuri.org/AddWGJCData
//gsoap ns1  service method-output-action:	AddWGJCData http://tempuri.org/AddWGJCDataResponse
int __ns1__AddWGJCData(
    _ns1__AddWGJCData*                  ns1__AddWGJCData,	///< Input parameter
    _ns1__AddWGJCDataResponse          &ns1__AddWGJCDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__AddDeviceCheckData                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__AddDeviceCheckData" of service binding "GasServiceNewSoap".


  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/AddDeviceCheckData"

  - Addressing input action: "http://tempuri.org/AddDeviceCheckData"

  - Addressing output action: "http://tempuri.org/AddDeviceCheckDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__AddDeviceCheckData(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__AddDeviceCheckData*           ns1__AddDeviceCheckData,
    // output parameters:
    _ns1__AddDeviceCheckDataResponse   &ns1__AddDeviceCheckDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__AddDeviceCheckData(
    struct soap *soap,
    // input parameters:
    _ns1__AddDeviceCheckData*           ns1__AddDeviceCheckData,
    // output parameters:
    _ns1__AddDeviceCheckDataResponse   &ns1__AddDeviceCheckDataResponse
  );
@endcode

C++ proxy class (defined in soapGasServiceNewSoapProxy.h):
@code
  class GasServiceNewSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapGasServiceNewSoapService.h):
@code
  class GasServiceNewSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	AddDeviceCheckData SOAP
//gsoap ns1  service method-style:	AddDeviceCheckData document
//gsoap ns1  service method-encoding:	AddDeviceCheckData literal
//gsoap ns1  service method-input-action:	AddDeviceCheckData http://tempuri.org/AddDeviceCheckData
//gsoap ns1  service method-output-action:	AddDeviceCheckData http://tempuri.org/AddDeviceCheckDataResponse
int __ns1__AddDeviceCheckData(
    _ns1__AddDeviceCheckData*           ns1__AddDeviceCheckData,	///< Input parameter
    _ns1__AddDeviceCheckDataResponse   &ns1__AddDeviceCheckDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__VehicleRegJudge_                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__VehicleRegJudge_" of service binding "GasServiceNewSoap".


  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/VehicleRegJudge"

  - Addressing input action: "http://tempuri.org/VehicleRegJudge"

  - Addressing output action: "http://tempuri.org/VehicleRegJudgeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__VehicleRegJudge_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__VehicleRegJudge*              ns1__VehicleRegJudge,
    // output parameters:
    _ns1__VehicleRegJudgeResponse      &ns1__VehicleRegJudgeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__VehicleRegJudge_(
    struct soap *soap,
    // input parameters:
    _ns1__VehicleRegJudge*              ns1__VehicleRegJudge,
    // output parameters:
    _ns1__VehicleRegJudgeResponse      &ns1__VehicleRegJudgeResponse
  );
@endcode

C++ proxy class (defined in soapGasServiceNewSoapProxy.h):
@code
  class GasServiceNewSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapGasServiceNewSoapService.h):
@code
  class GasServiceNewSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	VehicleRegJudge_ SOAP
//gsoap ns1  service method-style:	VehicleRegJudge_ document
//gsoap ns1  service method-encoding:	VehicleRegJudge_ literal
//gsoap ns1  service method-input-action:	VehicleRegJudge_ http://tempuri.org/VehicleRegJudge
//gsoap ns1  service method-output-action:	VehicleRegJudge_ http://tempuri.org/VehicleRegJudgeResponse
int __ns1__VehicleRegJudge_(
    _ns1__VehicleRegJudge*              ns1__VehicleRegJudge,	///< Input parameter
    _ns1__VehicleRegJudgeResponse      &ns1__VehicleRegJudgeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__OnlineJudge_                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__OnlineJudge_" of service binding "GasServiceNewSoap".


  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/OnlineJudge"

  - Addressing input action: "http://tempuri.org/OnlineJudge"

  - Addressing output action: "http://tempuri.org/OnlineJudgeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__OnlineJudge_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__OnlineJudge*                  ns1__OnlineJudge,
    // output parameters:
    _ns1__OnlineJudgeResponse          &ns1__OnlineJudgeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__OnlineJudge_(
    struct soap *soap,
    // input parameters:
    _ns1__OnlineJudge*                  ns1__OnlineJudge,
    // output parameters:
    _ns1__OnlineJudgeResponse          &ns1__OnlineJudgeResponse
  );
@endcode

C++ proxy class (defined in soapGasServiceNewSoapProxy.h):
@code
  class GasServiceNewSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapGasServiceNewSoapService.h):
@code
  class GasServiceNewSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	OnlineJudge_ SOAP
//gsoap ns1  service method-style:	OnlineJudge_ document
//gsoap ns1  service method-encoding:	OnlineJudge_ literal
//gsoap ns1  service method-input-action:	OnlineJudge_ http://tempuri.org/OnlineJudge
//gsoap ns1  service method-output-action:	OnlineJudge_ http://tempuri.org/OnlineJudgeResponse
int __ns1__OnlineJudge_(
    _ns1__OnlineJudge*                  ns1__OnlineJudge,	///< Input parameter
    _ns1__OnlineJudgeResponse          &ns1__OnlineJudgeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__AddCheckData_                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__AddCheckData_" of service binding "GasServiceNewSoap".


  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/AddCheckData"

  - Addressing input action: "http://tempuri.org/AddCheckData"

  - Addressing output action: "http://tempuri.org/AddCheckDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__AddCheckData_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__AddCheckData*                 ns1__AddCheckData,
    // output parameters:
    _ns1__AddCheckDataResponse         &ns1__AddCheckDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__AddCheckData_(
    struct soap *soap,
    // input parameters:
    _ns1__AddCheckData*                 ns1__AddCheckData,
    // output parameters:
    _ns1__AddCheckDataResponse         &ns1__AddCheckDataResponse
  );
@endcode

C++ proxy class (defined in soapGasServiceNewSoapProxy.h):
@code
  class GasServiceNewSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapGasServiceNewSoapService.h):
@code
  class GasServiceNewSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	AddCheckData_ SOAP
//gsoap ns1  service method-style:	AddCheckData_ document
//gsoap ns1  service method-encoding:	AddCheckData_ literal
//gsoap ns1  service method-input-action:	AddCheckData_ http://tempuri.org/AddCheckData
//gsoap ns1  service method-output-action:	AddCheckData_ http://tempuri.org/AddCheckDataResponse
int __ns1__AddCheckData_(
    _ns1__AddCheckData*                 ns1__AddCheckData,	///< Input parameter
    _ns1__AddCheckDataResponse         &ns1__AddCheckDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__AddObdData_                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__AddObdData_" of service binding "GasServiceNewSoap".
OBD

  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/AddObdData"

  - Addressing input action: "http://tempuri.org/AddObdData"

  - Addressing output action: "http://tempuri.org/AddObdDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__AddObdData_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__AddObdData*                   ns1__AddObdData,
    // output parameters:
    _ns1__AddObdDataResponse           &ns1__AddObdDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__AddObdData_(
    struct soap *soap,
    // input parameters:
    _ns1__AddObdData*                   ns1__AddObdData,
    // output parameters:
    _ns1__AddObdDataResponse           &ns1__AddObdDataResponse
  );
@endcode

C++ proxy class (defined in soapGasServiceNewSoapProxy.h):
@code
  class GasServiceNewSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapGasServiceNewSoapService.h):
@code
  class GasServiceNewSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	AddObdData_ SOAP
//gsoap ns1  service method-style:	AddObdData_ document
//gsoap ns1  service method-encoding:	AddObdData_ literal
//gsoap ns1  service method-input-action:	AddObdData_ http://tempuri.org/AddObdData
//gsoap ns1  service method-output-action:	AddObdData_ http://tempuri.org/AddObdDataResponse
int __ns1__AddObdData_(
    _ns1__AddObdData*                   ns1__AddObdData,	///< Input parameter
    _ns1__AddObdDataResponse           &ns1__AddObdDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__AddIuprData_                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__AddIuprData_" of service binding "GasServiceNewSoap".
OBDIUPR

  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/AddIuprData"

  - Addressing input action: "http://tempuri.org/AddIuprData"

  - Addressing output action: "http://tempuri.org/AddIuprDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__AddIuprData_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__AddIuprData*                  ns1__AddIuprData,
    // output parameters:
    _ns1__AddIuprDataResponse          &ns1__AddIuprDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__AddIuprData_(
    struct soap *soap,
    // input parameters:
    _ns1__AddIuprData*                  ns1__AddIuprData,
    // output parameters:
    _ns1__AddIuprDataResponse          &ns1__AddIuprDataResponse
  );
@endcode

C++ proxy class (defined in soapGasServiceNewSoapProxy.h):
@code
  class GasServiceNewSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapGasServiceNewSoapService.h):
@code
  class GasServiceNewSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	AddIuprData_ SOAP
//gsoap ns1  service method-style:	AddIuprData_ document
//gsoap ns1  service method-encoding:	AddIuprData_ literal
//gsoap ns1  service method-input-action:	AddIuprData_ http://tempuri.org/AddIuprData
//gsoap ns1  service method-output-action:	AddIuprData_ http://tempuri.org/AddIuprDataResponse
int __ns1__AddIuprData_(
    _ns1__AddIuprData*                  ns1__AddIuprData,	///< Input parameter
    _ns1__AddIuprDataResponse          &ns1__AddIuprDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__RyzfControl_                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__RyzfControl_" of service binding "GasServiceNewSoap".


  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/RyzfControl"

  - Addressing input action: "http://tempuri.org/RyzfControl"

  - Addressing output action: "http://tempuri.org/RyzfControlResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__RyzfControl_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__RyzfControl*                  ns1__RyzfControl,
    // output parameters:
    _ns1__RyzfControlResponse          &ns1__RyzfControlResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__RyzfControl_(
    struct soap *soap,
    // input parameters:
    _ns1__RyzfControl*                  ns1__RyzfControl,
    // output parameters:
    _ns1__RyzfControlResponse          &ns1__RyzfControlResponse
  );
@endcode

C++ proxy class (defined in soapGasServiceNewSoapProxy.h):
@code
  class GasServiceNewSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapGasServiceNewSoapService.h):
@code
  class GasServiceNewSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	RyzfControl_ SOAP
//gsoap ns1  service method-style:	RyzfControl_ document
//gsoap ns1  service method-encoding:	RyzfControl_ literal
//gsoap ns1  service method-input-action:	RyzfControl_ http://tempuri.org/RyzfControl
//gsoap ns1  service method-output-action:	RyzfControl_ http://tempuri.org/RyzfControlResponse
int __ns1__RyzfControl_(
    _ns1__RyzfControl*                  ns1__RyzfControl,	///< Input parameter
    _ns1__RyzfControlResponse          &ns1__RyzfControlResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__AddVerify_                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__AddVerify_" of service binding "GasServiceNewSoap".


  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/AddVerify"

  - Addressing input action: "http://tempuri.org/AddVerify"

  - Addressing output action: "http://tempuri.org/AddVerifyResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__AddVerify_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__AddVerify*                    ns1__AddVerify,
    // output parameters:
    _ns1__AddVerifyResponse            &ns1__AddVerifyResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__AddVerify_(
    struct soap *soap,
    // input parameters:
    _ns1__AddVerify*                    ns1__AddVerify,
    // output parameters:
    _ns1__AddVerifyResponse            &ns1__AddVerifyResponse
  );
@endcode

C++ proxy class (defined in soapGasServiceNewSoapProxy.h):
@code
  class GasServiceNewSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapGasServiceNewSoapService.h):
@code
  class GasServiceNewSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	AddVerify_ SOAP
//gsoap ns1  service method-style:	AddVerify_ document
//gsoap ns1  service method-encoding:	AddVerify_ literal
//gsoap ns1  service method-input-action:	AddVerify_ http://tempuri.org/AddVerify
//gsoap ns1  service method-output-action:	AddVerify_ http://tempuri.org/AddVerifyResponse
int __ns1__AddVerify_(
    _ns1__AddVerify*                    ns1__AddVerify,	///< Input parameter
    _ns1__AddVerifyResponse            &ns1__AddVerifyResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__PrintJudge_                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__PrintJudge_" of service binding "GasServiceNewSoap".


  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/PrintJudge"

  - Addressing input action: "http://tempuri.org/PrintJudge"

  - Addressing output action: "http://tempuri.org/PrintJudgeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__PrintJudge_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__PrintJudge*                   ns1__PrintJudge,
    // output parameters:
    _ns1__PrintJudgeResponse           &ns1__PrintJudgeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__PrintJudge_(
    struct soap *soap,
    // input parameters:
    _ns1__PrintJudge*                   ns1__PrintJudge,
    // output parameters:
    _ns1__PrintJudgeResponse           &ns1__PrintJudgeResponse
  );
@endcode

C++ proxy class (defined in soapGasServiceNewSoapProxy.h):
@code
  class GasServiceNewSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapGasServiceNewSoapService.h):
@code
  class GasServiceNewSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	PrintJudge_ SOAP
//gsoap ns1  service method-style:	PrintJudge_ document
//gsoap ns1  service method-encoding:	PrintJudge_ literal
//gsoap ns1  service method-input-action:	PrintJudge_ http://tempuri.org/PrintJudge
//gsoap ns1  service method-output-action:	PrintJudge_ http://tempuri.org/PrintJudgeResponse
int __ns1__PrintJudge_(
    _ns1__PrintJudge*                   ns1__PrintJudge,	///< Input parameter
    _ns1__PrintJudgeResponse           &ns1__PrintJudgeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__PrintUp_                                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__PrintUp_" of service binding "GasServiceNewSoap".


  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/PrintUp"

  - Addressing input action: "http://tempuri.org/PrintUp"

  - Addressing output action: "http://tempuri.org/PrintUpResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__PrintUp_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__PrintUp*                      ns1__PrintUp,
    // output parameters:
    _ns1__PrintUpResponse              &ns1__PrintUpResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__PrintUp_(
    struct soap *soap,
    // input parameters:
    _ns1__PrintUp*                      ns1__PrintUp,
    // output parameters:
    _ns1__PrintUpResponse              &ns1__PrintUpResponse
  );
@endcode

C++ proxy class (defined in soapGasServiceNewSoapProxy.h):
@code
  class GasServiceNewSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapGasServiceNewSoapService.h):
@code
  class GasServiceNewSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	PrintUp_ SOAP
//gsoap ns1  service method-style:	PrintUp_ document
//gsoap ns1  service method-encoding:	PrintUp_ literal
//gsoap ns1  service method-input-action:	PrintUp_ http://tempuri.org/PrintUp
//gsoap ns1  service method-output-action:	PrintUp_ http://tempuri.org/PrintUpResponse
int __ns1__PrintUp_(
    _ns1__PrintUp*                      ns1__PrintUp,	///< Input parameter
    _ns1__PrintUpResponse              &ns1__PrintUpResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__LokeJudge_                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__LokeJudge_" of service binding "GasServiceNewSoap".


  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/LokeJudge"

  - Addressing input action: "http://tempuri.org/LokeJudge"

  - Addressing output action: "http://tempuri.org/LokeJudgeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__LokeJudge_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__LokeJudge*                    ns1__LokeJudge,
    // output parameters:
    _ns1__LokeJudgeResponse            &ns1__LokeJudgeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__LokeJudge_(
    struct soap *soap,
    // input parameters:
    _ns1__LokeJudge*                    ns1__LokeJudge,
    // output parameters:
    _ns1__LokeJudgeResponse            &ns1__LokeJudgeResponse
  );
@endcode

C++ proxy class (defined in soapGasServiceNewSoapProxy.h):
@code
  class GasServiceNewSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapGasServiceNewSoapService.h):
@code
  class GasServiceNewSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	LokeJudge_ SOAP
//gsoap ns1  service method-style:	LokeJudge_ document
//gsoap ns1  service method-encoding:	LokeJudge_ literal
//gsoap ns1  service method-input-action:	LokeJudge_ http://tempuri.org/LokeJudge
//gsoap ns1  service method-output-action:	LokeJudge_ http://tempuri.org/LokeJudgeResponse
int __ns1__LokeJudge_(
    _ns1__LokeJudge*                    ns1__LokeJudge,	///< Input parameter
    _ns1__LokeJudgeResponse            &ns1__LokeJudgeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__AddWGJCData_                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__AddWGJCData_" of service binding "GasServiceNewSoap".


  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/AddWGJCData"

  - Addressing input action: "http://tempuri.org/AddWGJCData"

  - Addressing output action: "http://tempuri.org/AddWGJCDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__AddWGJCData_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__AddWGJCData*                  ns1__AddWGJCData,
    // output parameters:
    _ns1__AddWGJCDataResponse          &ns1__AddWGJCDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__AddWGJCData_(
    struct soap *soap,
    // input parameters:
    _ns1__AddWGJCData*                  ns1__AddWGJCData,
    // output parameters:
    _ns1__AddWGJCDataResponse          &ns1__AddWGJCDataResponse
  );
@endcode

C++ proxy class (defined in soapGasServiceNewSoapProxy.h):
@code
  class GasServiceNewSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapGasServiceNewSoapService.h):
@code
  class GasServiceNewSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	AddWGJCData_ SOAP
//gsoap ns1  service method-style:	AddWGJCData_ document
//gsoap ns1  service method-encoding:	AddWGJCData_ literal
//gsoap ns1  service method-input-action:	AddWGJCData_ http://tempuri.org/AddWGJCData
//gsoap ns1  service method-output-action:	AddWGJCData_ http://tempuri.org/AddWGJCDataResponse
int __ns1__AddWGJCData_(
    _ns1__AddWGJCData*                  ns1__AddWGJCData,	///< Input parameter
    _ns1__AddWGJCDataResponse          &ns1__AddWGJCDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__AddDeviceCheckData_                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__AddDeviceCheckData_" of service binding "GasServiceNewSoap".


  - SOAP document/literal style messaging

  - Action: "http://tempuri.org/AddDeviceCheckData"

  - Addressing input action: "http://tempuri.org/AddDeviceCheckData"

  - Addressing output action: "http://tempuri.org/AddDeviceCheckDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__AddDeviceCheckData_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__AddDeviceCheckData*           ns1__AddDeviceCheckData,
    // output parameters:
    _ns1__AddDeviceCheckDataResponse   &ns1__AddDeviceCheckDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__AddDeviceCheckData_(
    struct soap *soap,
    // input parameters:
    _ns1__AddDeviceCheckData*           ns1__AddDeviceCheckData,
    // output parameters:
    _ns1__AddDeviceCheckDataResponse   &ns1__AddDeviceCheckDataResponse
  );
@endcode

C++ proxy class (defined in soapGasServiceNewSoapProxy.h):
@code
  class GasServiceNewSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapGasServiceNewSoapService.h):
@code
  class GasServiceNewSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	AddDeviceCheckData_ SOAP
//gsoap ns1  service method-style:	AddDeviceCheckData_ document
//gsoap ns1  service method-encoding:	AddDeviceCheckData_ literal
//gsoap ns1  service method-input-action:	AddDeviceCheckData_ http://tempuri.org/AddDeviceCheckData
//gsoap ns1  service method-output-action:	AddDeviceCheckData_ http://tempuri.org/AddDeviceCheckDataResponse
int __ns1__AddDeviceCheckData_(
    _ns1__AddDeviceCheckData*           ns1__AddDeviceCheckData,	///< Input parameter
    _ns1__AddDeviceCheckDataResponse   &ns1__AddDeviceCheckDataResponse	///< Output parameter
);

/**

@page GasServiceNewSoap Binding "GasServiceNewSoap"

@section GasServiceNewSoap_policy_enablers Policy Enablers of Binding "GasServiceNewSoap"

Based on policies, this service imports

  - WS-Policy reminders and enablers:
    - WS-Addressing 1.0 (2005/08, accepts 2004/08):
	@code
	#import "wsa5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-Addressing (2004/08):
	@code
	#import "wsa.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-ReliableMessaging 1.0:
	@code
	#import "wsrm5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-ReliableMessaging 1.1:
	@code
	#import "wsrm.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.0 (accepts 1.1):
	@code
	#import "wsse.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.1 (accepts 1.0):
	@code
	#import "wsse11.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - HTTP Digest Authentication:
	@code
	#include "plugin/httpda.h"
	soap_register_plugin(soap, soap_http_da); // register the HTTP DA plugin in your code
	// See the user guide gsoap/doc/httpda/html/index.html
	@endcode
*/


/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read in XML and deserialized from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

Data can be serialized in XML and written to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section ns1 Top-level root elements of schema "http://tempuri.org/"

  - <VehicleRegJudge> @ref _ns1__VehicleRegJudge
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__VehicleRegJudge(struct soap*, _ns1__VehicleRegJudge*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__VehicleRegJudge(struct soap*, _ns1__VehicleRegJudge*);
    @endcode

  - <VehicleRegJudgeResponse> @ref _ns1__VehicleRegJudgeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__VehicleRegJudgeResponse(struct soap*, _ns1__VehicleRegJudgeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__VehicleRegJudgeResponse(struct soap*, _ns1__VehicleRegJudgeResponse*);
    @endcode

  - <OnlineJudge> @ref _ns1__OnlineJudge
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__OnlineJudge(struct soap*, _ns1__OnlineJudge*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__OnlineJudge(struct soap*, _ns1__OnlineJudge*);
    @endcode

  - <OnlineJudgeResponse> @ref _ns1__OnlineJudgeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__OnlineJudgeResponse(struct soap*, _ns1__OnlineJudgeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__OnlineJudgeResponse(struct soap*, _ns1__OnlineJudgeResponse*);
    @endcode

  - <AddCheckData> @ref _ns1__AddCheckData
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__AddCheckData(struct soap*, _ns1__AddCheckData*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__AddCheckData(struct soap*, _ns1__AddCheckData*);
    @endcode

  - <AddCheckDataResponse> @ref _ns1__AddCheckDataResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__AddCheckDataResponse(struct soap*, _ns1__AddCheckDataResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__AddCheckDataResponse(struct soap*, _ns1__AddCheckDataResponse*);
    @endcode

  - <AddObdData> @ref _ns1__AddObdData
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__AddObdData(struct soap*, _ns1__AddObdData*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__AddObdData(struct soap*, _ns1__AddObdData*);
    @endcode

  - <AddObdDataResponse> @ref _ns1__AddObdDataResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__AddObdDataResponse(struct soap*, _ns1__AddObdDataResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__AddObdDataResponse(struct soap*, _ns1__AddObdDataResponse*);
    @endcode

  - <AddIuprData> @ref _ns1__AddIuprData
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__AddIuprData(struct soap*, _ns1__AddIuprData*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__AddIuprData(struct soap*, _ns1__AddIuprData*);
    @endcode

  - <AddIuprDataResponse> @ref _ns1__AddIuprDataResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__AddIuprDataResponse(struct soap*, _ns1__AddIuprDataResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__AddIuprDataResponse(struct soap*, _ns1__AddIuprDataResponse*);
    @endcode

  - <RyzfControl> @ref _ns1__RyzfControl
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__RyzfControl(struct soap*, _ns1__RyzfControl*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__RyzfControl(struct soap*, _ns1__RyzfControl*);
    @endcode

  - <RyzfControlResponse> @ref _ns1__RyzfControlResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__RyzfControlResponse(struct soap*, _ns1__RyzfControlResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__RyzfControlResponse(struct soap*, _ns1__RyzfControlResponse*);
    @endcode

  - <AddVerify> @ref _ns1__AddVerify
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__AddVerify(struct soap*, _ns1__AddVerify*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__AddVerify(struct soap*, _ns1__AddVerify*);
    @endcode

  - <AddVerifyResponse> @ref _ns1__AddVerifyResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__AddVerifyResponse(struct soap*, _ns1__AddVerifyResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__AddVerifyResponse(struct soap*, _ns1__AddVerifyResponse*);
    @endcode

  - <PrintJudge> @ref _ns1__PrintJudge
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__PrintJudge(struct soap*, _ns1__PrintJudge*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__PrintJudge(struct soap*, _ns1__PrintJudge*);
    @endcode

  - <PrintJudgeResponse> @ref _ns1__PrintJudgeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__PrintJudgeResponse(struct soap*, _ns1__PrintJudgeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__PrintJudgeResponse(struct soap*, _ns1__PrintJudgeResponse*);
    @endcode

  - <PrintUp> @ref _ns1__PrintUp
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__PrintUp(struct soap*, _ns1__PrintUp*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__PrintUp(struct soap*, _ns1__PrintUp*);
    @endcode

  - <PrintUpResponse> @ref _ns1__PrintUpResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__PrintUpResponse(struct soap*, _ns1__PrintUpResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__PrintUpResponse(struct soap*, _ns1__PrintUpResponse*);
    @endcode

  - <LokeJudge> @ref _ns1__LokeJudge
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__LokeJudge(struct soap*, _ns1__LokeJudge*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__LokeJudge(struct soap*, _ns1__LokeJudge*);
    @endcode

  - <LokeJudgeResponse> @ref _ns1__LokeJudgeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__LokeJudgeResponse(struct soap*, _ns1__LokeJudgeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__LokeJudgeResponse(struct soap*, _ns1__LokeJudgeResponse*);
    @endcode

  - <AddWGJCData> @ref _ns1__AddWGJCData
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__AddWGJCData(struct soap*, _ns1__AddWGJCData*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__AddWGJCData(struct soap*, _ns1__AddWGJCData*);
    @endcode

  - <AddWGJCDataResponse> @ref _ns1__AddWGJCDataResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__AddWGJCDataResponse(struct soap*, _ns1__AddWGJCDataResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__AddWGJCDataResponse(struct soap*, _ns1__AddWGJCDataResponse*);
    @endcode

  - <AddDeviceCheckData> @ref _ns1__AddDeviceCheckData
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__AddDeviceCheckData(struct soap*, _ns1__AddDeviceCheckData*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__AddDeviceCheckData(struct soap*, _ns1__AddDeviceCheckData*);
    @endcode

  - <AddDeviceCheckDataResponse> @ref _ns1__AddDeviceCheckDataResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__AddDeviceCheckDataResponse(struct soap*, _ns1__AddDeviceCheckDataResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__AddDeviceCheckDataResponse(struct soap*, _ns1__AddDeviceCheckDataResponse*);
    @endcode

*/

/* End of GasServiceNew.h */
