
// AT.cpp : 定义应用程序的类行为。
//

#include "stdafx.h"
#include "AT.h"
#include "ATDlg.h"
#include "RJYZ.h"
#include "LogIn.h"

#include <locale>//头文件
#include <fstream>
#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// CATApp

BEGIN_MESSAGE_MAP(CATApp, CWinApp)
	ON_COMMAND(ID_HELP, &CWinApp::OnHelp)
END_MESSAGE_MAP()


// CATApp 构造

CATApp::CATApp()
	: m_pchURL(NULL)
	, m_strURL(L"")
	, m_strStationNum(L"")
	, m_strLineNum(L"")
	, m_strPathLog(L"")
	, m_strLogNameN(L"")
	, m_strLogNameF(L"")
{
	// 支持重新启动管理器
	m_dwRestartManagerSupportFlags = AFX_RESTART_MANAGER_SUPPORT_RESTART;

	// TODO: 在此处添加构造代码，
	// 将所有重要的初始化放置在 InitInstance 中
}


// 唯一的一个 CATApp 对象

CATApp theApp;


// CATApp 初始化

BOOL CATApp::InitInstance()
{
	HANDLE hMutex = CreateMutex(NULL, TRUE, m_pszAppName);
	if (ERROR_ALREADY_EXISTS == ::GetLastError())
	{
		MessageBox(NULL, L"程序已经运行", L"", MB_ICONWARNING|MB_OK);
		return FALSE;
	}
	// 如果一个运行在 Windows XP 上的应用程序清单指定要
	// 使用 ComCtl32.dll 版本 6 或更高版本来启用可视化方式，
	//则需要 InitCommonControlsEx()。否则，将无法创建窗口。
	INITCOMMONCONTROLSEX InitCtrls;
	InitCtrls.dwSize = sizeof(InitCtrls);
	// 将它设置为包括所有要在应用程序中使用的
	// 公共控件类。
	InitCtrls.dwICC = ICC_WIN95_CLASSES;
	InitCommonControlsEx(&InitCtrls);

	CWinApp::InitInstance();


	AfxEnableControlContainer();

	// 创建 shell 管理器，以防对话框包含
	// 任何 shell 树视图控件或 shell 列表视图控件。
	CShellManager *pShellManager = new CShellManager;

	// 标准初始化
	// 如果未使用这些功能并希望减小
	// 最终可执行文件的大小，则应移除下列
	// 不需要的特定初始化例程
	// 更改用于存储设置的注册表项
	// TODO: 应适当修改该字符串，
	// 例如修改为公司或组织名
	SetRegistryKey(_T("应用程序向导生成的本地应用程序"));

#ifndef _DEBUG
	std::wstring strMsg, strDLMM;
	if (!CRJYZ::IsYZ(strMsg, strDLMM))
	{
		MessageBox(NULL,strMsg.c_str(), L"", MB_ICONWARNING|MB_OK);
		return FALSE;
	}

	CLogIn LogInDlg;
	LogInDlg.m_strDLMM = strDLMM.c_str();
	if (LogInDlg.DoModal() == IDCANCEL)
	{
		return FALSE;
	}
#endif
	GetLogFilePath();
	GetConfig();
	GetKey();
	CHGBYWebLib_API::SetLogFilePath(m_strIntLogFilePath.GetString());

	CATDlg dlg;
	m_pMainWnd = &dlg;
	INT_PTR nResponse = dlg.DoModal();
	if (nResponse == IDOK)
	{
		// TODO: 在此放置处理何时用
		//  “确定”来关闭对话框的代码
	}
	else if (nResponse == IDCANCEL)
	{
		// TODO: 在此放置处理何时用
		//  “取消”来关闭对话框的代码
	}

	// 删除上面创建的 shell 管理器。
	if (pShellManager != NULL)
	{
		delete pShellManager;
	}

	// 由于对话框已关闭，所以将返回 FALSE 以便退出应用程序，
	//  而不是启动应用程序的消息泵。
	return FALSE;
}

int CATApp::ExitInstance()
{
	// TODO: 在此添加专用代码和/或调用基类

	if (NULL != m_pchURL)
	{
		free(m_pchURL);
		m_pchURL = NULL;
	}
	if (!(_taccess(m_strPathLog, 06)))
	{
		CString strPath;
		strPath.Format(L"%s\\%s%s%s.log", m_strPathLog, m_strLogNameN, COleDateTime::GetCurrentTime().Format(L"%Y-%m-%d"), m_strLogNameF);

		DeleteFile(strPath);
	}
	return CWinApp::ExitInstance();
}

void CATApp::GetLogFilePath(void)
{
	// 日志文件所在文件夹路径
	wchar_t wchLogFileFolderPath[MAX_PATH] = {0};
	CNHCommonAPI::GetCDFilePath(L"", wchLogFileFolderPath, true);

	COleDateTime odtNow(COleDateTime::GetCurrentTime());

	CStringW strFileName;
	strFileName.Format(L"HGBY%s.log", odtNow.Format(L"%Y-%m-%d"));

	CStringW strLogFilePath;
	strLogFilePath = wchLogFileFolderPath;
	strLogFilePath += strFileName;

	m_strIntLogFilePath = strLogFilePath;
}

void CATApp::GetConfig(void)
{
	wchar_t wchPath[MAX_PATH];
	ZeroMemory(wchPath, sizeof(wchPath));
	if (0x00 == CNHCommonAPI::GetFilePathEx(L"Config", L"HGWebConfig.ini", wchPath))
	{
		CSimpleIni si(wchPath);

		m_strURL = si.GetString(L"WebServer", L"URL", L"");
		if (NULL != m_pchURL)
		{
			free(m_pchURL);
			m_pchURL = NULL;
		}
		if (!m_strURL.IsEmpty())
		{
			m_pchURL = CNHCommonAPI::UnicodeToANSI(m_strURL);
		}
		m_strStationNum = si.GetString(L"WebServer", L"LineCode", L"");
		m_strLineNum = si.GetString(L"WebServer", L"StnId", L"");
	}
	ZeroMemory(wchPath, sizeof(wchPath));
	if (0x00 == CNHCommonAPI::GetFilePathEx(L"App_Data", L"UserInfo.ini", wchPath))
	{
		CSimpleIni si(wchPath);

		m_strUserName = si.GetString(L"UserInfo", L"Name", L"");
	}
	ZeroMemory(wchPath, sizeof(wchPath));
	if (0x00 == CNHCommonAPI::GetCDFilePath(L"Path.ini", wchPath))
	{
		CSimpleIni si(wchPath);

		m_strPathLog = si.GetString(L"Path", L"PathLog", L"");
		m_strLogNameN = si.GetString(L"Path", L"LogNameN", L"");
		m_strLogNameF = si.GetString(L"Path", L"LogNameF", L"");
	}
}

void CATApp::GetKey(void)
{

	// 判断路径是否存在,并可以进行读写
	if (!(_taccess(m_strPathLog, 06)))
	{
		CString strPath;
		strPath.Format(L"%s\\%s%s%s.log", m_strPathLog, m_strLogNameN, COleDateTime::GetCurrentTime().Format(L"%Y-%m-%d"), m_strLogNameF);

		CStdioFileEx sfe;
		// 保证打开成功
		if (sfe.Open(strPath, CFile::modeReadWrite|CFile::typeText))
		{
			CString strLog, strTemp;
			while (sfe.ReadString(strTemp))
			{
				if (strTemp.Find(L"RSInfo返回	接口:Login") != -1)
				{
					strLog = strTemp;
				}
			}
			int nN = strLog.Find(L"<body>");
			int nF = strLog.Find(L"</body>");
			strTemp = strLog.Mid(nN+6, nF-nN-6);

			CXmlReader xmlReader;
			if (xmlReader.Parse(strTemp))
			{

				std::wstring strCon;
				if (xmlReader.OpenNode(L"Token/TokenInfo"))
				{
					xmlReader.GetNodeAttribute(L"TokenGuid", strCon);
					m_strKey = strCon.c_str();
				}
			}

		}
		sfe.Close();
	}
}
