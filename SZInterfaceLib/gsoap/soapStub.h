/* soapStub.h
   Generated by gSOAP 2.8.21 from SynTocity.h

Copyright(C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_ns1	"http://synToCity.synchrodata.daniu.com/"
#include "stdsoap2.h"
#if GSOAP_VERSION != 20821
# error "GSOAP VERSION 20821 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_ns1__BeginCheck
#define SOAP_TYPE_ns1__BeginCheck (8)
/* ns1:BeginCheck */
class SOAP_CMAC ns1__BeginCheck
{
public:
	std::wstring *unitid;	/* optional element of type xsd:string */
	std::wstring *lineid;	/* optional element of type xsd:string */
	std::wstring *plate;	/* optional element of type xsd:string */
	std::wstring *vin;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique type id SOAP_TYPE_ns1__BeginCheck */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__BeginCheck() { ns1__BeginCheck::soap_default(NULL); }
	virtual ~ns1__BeginCheck() { }
};
#endif

#ifndef SOAP_TYPE_ns1__BeginCheckResponse
#define SOAP_TYPE_ns1__BeginCheckResponse (9)
/* ns1:BeginCheckResponse */
class SOAP_CMAC ns1__BeginCheckResponse
{
public:
	std::wstring *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 9; } /* = unique type id SOAP_TYPE_ns1__BeginCheckResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__BeginCheckResponse() { ns1__BeginCheckResponse::soap_default(NULL); }
	virtual ~ns1__BeginCheckResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UploadInspectionResult
#define SOAP_TYPE_ns1__UploadInspectionResult (10)
/* ns1:UploadInspectionResult */
class SOAP_CMAC ns1__UploadInspectionResult
{
public:
	std::wstring *token;	/* optional element of type xsd:string */
	std::wstring *unitid;	/* optional element of type xsd:string */
	std::wstring *checkresult;	/* optional element of type xsd:string */
	int checkmethod;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique type id SOAP_TYPE_ns1__UploadInspectionResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UploadInspectionResult() { ns1__UploadInspectionResult::soap_default(NULL); }
	virtual ~ns1__UploadInspectionResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__UploadInspectionResultResponse
#define SOAP_TYPE_ns1__UploadInspectionResultResponse (11)
/* ns1:UploadInspectionResultResponse */
class SOAP_CMAC ns1__UploadInspectionResultResponse
{
public:
	std::wstring *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique type id SOAP_TYPE_ns1__UploadInspectionResultResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__UploadInspectionResultResponse() { ns1__UploadInspectionResultResponse::soap_default(NULL); }
	virtual ~ns1__UploadInspectionResultResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetVehicle
#define SOAP_TYPE_ns1__GetVehicle (12)
/* ns1:GetVehicle */
class SOAP_CMAC ns1__GetVehicle
{
public:
	std::wstring *token;	/* optional element of type xsd:string */
	std::wstring *unitid;	/* optional element of type xsd:string */
	std::wstring *vin;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique type id SOAP_TYPE_ns1__GetVehicle */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetVehicle() { ns1__GetVehicle::soap_default(NULL); }
	virtual ~ns1__GetVehicle() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetVehicleResponse
#define SOAP_TYPE_ns1__GetVehicleResponse (13)
/* ns1:GetVehicleResponse */
class SOAP_CMAC ns1__GetVehicleResponse
{
public:
	std::wstring *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique type id SOAP_TYPE_ns1__GetVehicleResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetVehicleResponse() { ns1__GetVehicleResponse::soap_default(NULL); }
	virtual ~ns1__GetVehicleResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__vehiclelogin
#define SOAP_TYPE_ns1__vehiclelogin (14)
/* ns1:vehiclelogin */
class SOAP_CMAC ns1__vehiclelogin
{
public:
	std::wstring *vehiclexml;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique type id SOAP_TYPE_ns1__vehiclelogin */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__vehiclelogin() { ns1__vehiclelogin::soap_default(NULL); }
	virtual ~ns1__vehiclelogin() { }
};
#endif

#ifndef SOAP_TYPE_ns1__vehicleloginResponse
#define SOAP_TYPE_ns1__vehicleloginResponse (15)
/* ns1:vehicleloginResponse */
class SOAP_CMAC ns1__vehicleloginResponse
{
public:
	std::wstring *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 15; } /* = unique type id SOAP_TYPE_ns1__vehicleloginResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__vehicleloginResponse() { ns1__vehicleloginResponse::soap_default(NULL); }
	virtual ~ns1__vehicleloginResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetCheckList
#define SOAP_TYPE_ns1__GetCheckList (16)
/* ns1:GetCheckList */
class SOAP_CMAC ns1__GetCheckList
{
public:
	std::wstring *token;	/* optional element of type xsd:string */
	std::wstring *unitid;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique type id SOAP_TYPE_ns1__GetCheckList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetCheckList() { ns1__GetCheckList::soap_default(NULL); }
	virtual ~ns1__GetCheckList() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetCheckListResponse
#define SOAP_TYPE_ns1__GetCheckListResponse (17)
/* ns1:GetCheckListResponse */
class SOAP_CMAC ns1__GetCheckListResponse
{
public:
	std::wstring *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 17; } /* = unique type id SOAP_TYPE_ns1__GetCheckListResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetCheckListResponse() { ns1__GetCheckListResponse::soap_default(NULL); }
	virtual ~ns1__GetCheckListResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LoginServer
#define SOAP_TYPE_ns1__LoginServer (18)
/* ns1:LoginServer */
class SOAP_CMAC ns1__LoginServer
{
public:
	std::wstring *unitid;	/* optional element of type xsd:string */
	std::wstring *lineid;	/* optional element of type xsd:string */
	std::wstring *username;	/* optional element of type xsd:string */
	std::wstring *pwd;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 18; } /* = unique type id SOAP_TYPE_ns1__LoginServer */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LoginServer() { ns1__LoginServer::soap_default(NULL); }
	virtual ~ns1__LoginServer() { }
};
#endif

#ifndef SOAP_TYPE_ns1__LoginServerResponse
#define SOAP_TYPE_ns1__LoginServerResponse (19)
/* ns1:LoginServerResponse */
class SOAP_CMAC ns1__LoginServerResponse
{
public:
	std::wstring *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 19; } /* = unique type id SOAP_TYPE_ns1__LoginServerResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__LoginServerResponse() { ns1__LoginServerResponse::soap_default(NULL); }
	virtual ~ns1__LoginServerResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetBaseTypeInfo
#define SOAP_TYPE_ns1__GetBaseTypeInfo (20)
/* ns1:GetBaseTypeInfo */
class SOAP_CMAC ns1__GetBaseTypeInfo
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 20; } /* = unique type id SOAP_TYPE_ns1__GetBaseTypeInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetBaseTypeInfo() { ns1__GetBaseTypeInfo::soap_default(NULL); }
	virtual ~ns1__GetBaseTypeInfo() { }
};
#endif

#ifndef SOAP_TYPE_ns1__GetBaseTypeInfoResponse
#define SOAP_TYPE_ns1__GetBaseTypeInfoResponse (21)
/* ns1:GetBaseTypeInfoResponse */
class SOAP_CMAC ns1__GetBaseTypeInfoResponse
{
public:
	std::wstring *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 21; } /* = unique type id SOAP_TYPE_ns1__GetBaseTypeInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GetBaseTypeInfoResponse() { ns1__GetBaseTypeInfoResponse::soap_default(NULL); }
	virtual ~ns1__GetBaseTypeInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE___ns1__BeginCheck
#define SOAP_TYPE___ns1__BeginCheck (28)
/* Operation wrapper: */
struct __ns1__BeginCheck
{
public:
	ns1__BeginCheck *ns1__BeginCheck_;	/* optional element of type ns1:BeginCheck */
public:
	int soap_type() const { return 28; } /* = unique type id SOAP_TYPE___ns1__BeginCheck */
};
#endif

#ifndef SOAP_TYPE___ns1__UploadInspectionResult
#define SOAP_TYPE___ns1__UploadInspectionResult (32)
/* Operation wrapper: */
struct __ns1__UploadInspectionResult
{
public:
	ns1__UploadInspectionResult *ns1__UploadInspectionResult_;	/* optional element of type ns1:UploadInspectionResult */
public:
	int soap_type() const { return 32; } /* = unique type id SOAP_TYPE___ns1__UploadInspectionResult */
};
#endif

#ifndef SOAP_TYPE___ns1__GetVehicle
#define SOAP_TYPE___ns1__GetVehicle (36)
/* Operation wrapper: */
struct __ns1__GetVehicle
{
public:
	ns1__GetVehicle *ns1__GetVehicle_;	/* optional element of type ns1:GetVehicle */
public:
	int soap_type() const { return 36; } /* = unique type id SOAP_TYPE___ns1__GetVehicle */
};
#endif

#ifndef SOAP_TYPE___ns1__vehiclelogin
#define SOAP_TYPE___ns1__vehiclelogin (40)
/* Operation wrapper: */
struct __ns1__vehiclelogin
{
public:
	ns1__vehiclelogin *ns1__vehiclelogin_;	/* optional element of type ns1:vehiclelogin */
public:
	int soap_type() const { return 40; } /* = unique type id SOAP_TYPE___ns1__vehiclelogin */
};
#endif

#ifndef SOAP_TYPE___ns1__GetCheckList
#define SOAP_TYPE___ns1__GetCheckList (44)
/* Operation wrapper: */
struct __ns1__GetCheckList
{
public:
	ns1__GetCheckList *ns1__GetCheckList_;	/* optional element of type ns1:GetCheckList */
public:
	int soap_type() const { return 44; } /* = unique type id SOAP_TYPE___ns1__GetCheckList */
};
#endif

#ifndef SOAP_TYPE___ns1__LoginServer
#define SOAP_TYPE___ns1__LoginServer (48)
/* Operation wrapper: */
struct __ns1__LoginServer
{
public:
	ns1__LoginServer *ns1__LoginServer_;	/* optional element of type ns1:LoginServer */
public:
	int soap_type() const { return 48; } /* = unique type id SOAP_TYPE___ns1__LoginServer */
};
#endif

#ifndef SOAP_TYPE___ns1__GetBaseTypeInfo
#define SOAP_TYPE___ns1__GetBaseTypeInfo (52)
/* Operation wrapper: */
struct __ns1__GetBaseTypeInfo
{
public:
	ns1__GetBaseTypeInfo *ns1__GetBaseTypeInfo_;	/* optional element of type ns1:GetBaseTypeInfo */
public:
	int soap_type() const { return 52; } /* = unique type id SOAP_TYPE___ns1__GetBaseTypeInfo */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (53)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	int soap_type() const { return 53; } /* = unique type id SOAP_TYPE_SOAP_ENV__Header */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (54)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
public:
	int soap_type() const { return 54; } /* = unique type id SOAP_TYPE_SOAP_ENV__Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (56)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
public:
	int soap_type() const { return 56; } /* = unique type id SOAP_TYPE_SOAP_ENV__Detail */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (59)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 59; } /* = unique type id SOAP_TYPE_SOAP_ENV__Reason */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (60)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
public:
	int soap_type() const { return 60; } /* = unique type id SOAP_TYPE_SOAP_ENV__Fault */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
