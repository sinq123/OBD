/* soapStub.h
   Generated by gSOAP 2.8.21 from ExternalAccess.h

Copyright(C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_ns1	"http://tempuri.org/"
#include "stdsoap2.h"
#if GSOAP_VERSION != 20821
# error "GSOAP VERSION 20821 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE__ns1__wsInvokeInterface
#define SOAP_TYPE__ns1__wsInvokeInterface (8)
/* ns1:wsInvokeInterface */
class SOAP_CMAC _ns1__wsInvokeInterface
{
public:
	std::wstring *KEY;	/* optional element of type xsd:string */
	std::wstring *JKID;	/* optional element of type xsd:string */
	std::wstring *XML_;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique type id SOAP_TYPE__ns1__wsInvokeInterface */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__wsInvokeInterface() { _ns1__wsInvokeInterface::soap_default(NULL); }
	virtual ~_ns1__wsInvokeInterface() { }
};
#endif

#ifndef SOAP_TYPE__ns1__wsInvokeInterfaceResponse
#define SOAP_TYPE__ns1__wsInvokeInterfaceResponse (9)
/* ns1:wsInvokeInterfaceResponse */
class SOAP_CMAC _ns1__wsInvokeInterfaceResponse
{
public:
	std::wstring *wsInvokeInterfaceResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 9; } /* = unique type id SOAP_TYPE__ns1__wsInvokeInterfaceResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__wsInvokeInterfaceResponse() { _ns1__wsInvokeInterfaceResponse::soap_default(NULL); }
	virtual ~_ns1__wsInvokeInterfaceResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetAssemblyInfo
#define SOAP_TYPE__ns1__GetAssemblyInfo (10)
/* ns1:GetAssemblyInfo */
class SOAP_CMAC _ns1__GetAssemblyInfo
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique type id SOAP_TYPE__ns1__GetAssemblyInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetAssemblyInfo() { _ns1__GetAssemblyInfo::soap_default(NULL); }
	virtual ~_ns1__GetAssemblyInfo() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetAssemblyInfoResponse
#define SOAP_TYPE__ns1__GetAssemblyInfoResponse (11)
/* ns1:GetAssemblyInfoResponse */
class SOAP_CMAC _ns1__GetAssemblyInfoResponse
{
public:
	std::wstring *GetAssemblyInfoResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique type id SOAP_TYPE__ns1__GetAssemblyInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetAssemblyInfoResponse() { _ns1__GetAssemblyInfoResponse::soap_default(NULL); }
	virtual ~_ns1__GetAssemblyInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE___ns1__wsInvokeInterface
#define SOAP_TYPE___ns1__wsInvokeInterface (18)
/* Operation wrapper: */
struct __ns1__wsInvokeInterface
{
public:
	_ns1__wsInvokeInterface *ns1__wsInvokeInterface;	/* optional element of type ns1:wsInvokeInterface */
public:
	int soap_type() const { return 18; } /* = unique type id SOAP_TYPE___ns1__wsInvokeInterface */
};
#endif

#ifndef SOAP_TYPE___ns1__GetAssemblyInfo
#define SOAP_TYPE___ns1__GetAssemblyInfo (22)
/* Operation wrapper: */
struct __ns1__GetAssemblyInfo
{
public:
	_ns1__GetAssemblyInfo *ns1__GetAssemblyInfo;	/* optional element of type ns1:GetAssemblyInfo */
public:
	int soap_type() const { return 22; } /* = unique type id SOAP_TYPE___ns1__GetAssemblyInfo */
};
#endif

#ifndef SOAP_TYPE___ns1__wsInvokeInterface_
#define SOAP_TYPE___ns1__wsInvokeInterface_ (24)
/* Operation wrapper: */
struct __ns1__wsInvokeInterface_
{
public:
	_ns1__wsInvokeInterface *ns1__wsInvokeInterface;	/* optional element of type ns1:wsInvokeInterface */
public:
	int soap_type() const { return 24; } /* = unique type id SOAP_TYPE___ns1__wsInvokeInterface_ */
};
#endif

#ifndef SOAP_TYPE___ns1__GetAssemblyInfo_
#define SOAP_TYPE___ns1__GetAssemblyInfo_ (26)
/* Operation wrapper: */
struct __ns1__GetAssemblyInfo_
{
public:
	_ns1__GetAssemblyInfo *ns1__GetAssemblyInfo;	/* optional element of type ns1:GetAssemblyInfo */
public:
	int soap_type() const { return 26; } /* = unique type id SOAP_TYPE___ns1__GetAssemblyInfo_ */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (27)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	int soap_type() const { return 27; } /* = unique type id SOAP_TYPE_SOAP_ENV__Header */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (28)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
public:
	int soap_type() const { return 28; } /* = unique type id SOAP_TYPE_SOAP_ENV__Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (30)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
public:
	int soap_type() const { return 30; } /* = unique type id SOAP_TYPE_SOAP_ENV__Detail */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (33)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 33; } /* = unique type id SOAP_TYPE_SOAP_ENV__Reason */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (34)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
public:
	int soap_type() const { return 34; } /* = unique type id SOAP_TYPE_SOAP_ENV__Fault */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
