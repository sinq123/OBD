// NHModeServerDB.cpp : 定义 DLL 应用程序的入口点。
//
#include "stdafx.h"
#include "NHModeServerDB.h"
#include "assert.h"
#include <fstream>
#include <time.h>
#include <tchar.h>

//临时改变宏的含义“输出”为“输入”
#undef AFX_EXT_CLASS
#undef AFX_EXT_API
#undef AFX_EXT_DATA
#define AFX_EXT_CLASS AFX_CLASS_IMPORT
#define AFX_EXT_API AFX_API_IMPORT
#define AFX_EXT_DATA AFX_DATA_IMPORT


//恢复宏的含义为输出
#undef AFX_EXT_CLASS
#undef AFX_EXT_API
#undef AFX_EXT_DATA
#define AFX_EXT_CLASS AFX_CLASS_EXPORT
#define AFX_EXT_API AFX_API_EXPORT
#define AFX_EXT_DATA AFX_DATA_EXPORT

//#undef DLL_FILE

#include "..\NHWin32Lib\NHWin32Lib.h"
#ifdef _DEBUG
#pragma comment(lib, "..\\Debug\\NHWin32Lib_D.lib")
#else
#pragma comment(lib, "..\\Release\\NHWin32Lib.lib")
#endif

//#define DLL_FILE

using std::wstring;

//#ifdef _MANAGED
//#pragma managed(push, off)
//#endif
//
//BOOL APIENTRY DllMain( HMODULE hModule,
//	DWORD  ul_reason_for_call,
//	LPVOID lpReserved
//	)
//{
//	return TRUE;
//}
//
//#ifdef _MANAGED
//#pragma managed(pop)
//#endif

const char * g_pchSplit = ",";

// ASM real time data<RealTimeDataOfASM>
struct SRealTimeDataOfASM_Zip
{
	std::wstring strAutoID;
	std::wstring strRunningNumber;
	std::wstring strReportNumber;
	std::string strFuelTypeCode;
	std::string strFuelTypeName;
	std::string strTime;
	std::string strSamplingTime;
	std::string strVelocity;
	std::string strPower;
	std::string strForce;
	std::string strIHP;
	std::string strPLHP;
	std::string strState;
	std::string strHC;
	std::string strCO;
	std::string strNO;
	std::string strO2;
	std::string strCO2;
	std::string strEngineRev;
	std::string strOilTemperature;
	std::string strLambda;
	std::string strEnvironmentalTemperature;
	std::string strRelativeHumidity;
	std::string strAtmosphericPressure;
	std::string strHumidityCorrectionFactor;
	std::string strDilutionCorrectionFactor;
	std::string strRemark;
	std::string strReserved1;
	std::string strReserved2;
	std::string strReserved3;


};


// VMAS real time data<RealTimeDataOfVMAS>
struct SRealTimeDataOfVMAS_Zip
{
	std::wstring strAutoID;
	std::wstring strRunningNumber;
	std::wstring strReportNumber;
	std::string strFuelTypeCode;
	std::string strFuelTypeName;
	std::string strTime;
	std::string strSamplingTime;
	std::string strVelocity;
	std::string strPower;
	std::string strForce;
	std::string strIHP;
	std::string strPLHP;
	std::string strHC;
	std::string strCO;
	std::string strNO;
	std::string strO2;
	std::string strCO2;
	std::string strEngineRev;
	std::string strLambda;
	std::string strOilTemperature;
	std::string strO2OfFlowmeter;
	std::string strO2OfEnvironment;
	std::string strHCm;
	std::string strCOm;
	std::string strNOm;
	std::string strO2m;
	std::string strCO2m;
	std::string strPressureOfFlowmeter;
	std::string strTemperatureOfFlowmeter;
	std::string strDR;
	std::string strActualFluxOfGas;
	std::string strStandardFluxOfGas;
	std::string strFluxOfExhaust;
	std::string strEnvironmentalTemperature;
	std::string strRelativeHumidity;
	std::string strAtmosphericPressure;
	std::string strHumidityCorrectionFactor;
	std::string strDilutionCorrectionFactor;
	std::string strInertiaSimulationError;
	std::string strRemark;
	std::string strReserved1;
	std::string strReserved2;
	std::string strReserved3;

};



// LUGDOWN real time data<RealTimeDataOfLUGDOWN>
struct SRealTimeDataOfLUGDOWN_Zip
{
	std::wstring strAutoID;
	std::wstring strRunningNumber;
	std::wstring strReportNumber;
	std::string strFuelTypeCode;
	std::string strFuelTypeName;
	std::string strTime;
	std::string strSamplingTime;
	std::string strVelocity;
	std::string strPower;
	std::string strForce;
	std::string strIHP;
	std::string strPLHP;
	std::string strState;
	std::string strK;
	std::string strN;
	std::string strEngineRev;
	std::string strOilTemperature;
	std::string strEnvironmentalTemperature;
	std::string strRelativeHumidity;
	std::string strAtmosphericPressure;
	std::string strPowerCorrectionFactor;
	std::string strCO;
	std::string strHC;
	std::string strNO;
	std::string strNO2;
	std::string strCO2;
	std::string strO2;
	std::string strHumidityCorrectionFactor;
	std::string strRemark;
	std::string strReserved1;
	std::string strReserved2;
	std::string strReserved3;

};

// DIS real time data<RealTimeDataOfDIS>
struct SRealTimeDataOfDIS_Zip
{
	std::wstring strAutoID;
	std::wstring strRunningNumber;
	std::wstring strReportNumber;
	std::string strFuelTypeCode;
	std::string strFuelTypeName;
	std::string strTime;
	std::string strSamplingTime;
	std::string strState;
	std::string strHC;
	std::string strCO;
	std::string strO2;
	std::string strCO2;
	std::string strNO;
	std::string strEngineRev;
	std::string strOilTemperature;
	std::string strLambda;
	std::string strEnvironmentalTemperature;
	std::string strRelativeHumidity;
	std::string strAtmosphericPressure;
	std::string strRemark;
	std::string strReserved1;
	std::string strReserved2;
	std::string strReserved3;
};

// FSUNHT real time data<RealTimeDataOfFSUNHT>
struct SRealTimeDataOfFSUNHT_Zip
{
	std::wstring strAutoID;
	std::wstring strRunningNumber;
	std::wstring strReportNumber;
	std::string strOrder;
	std::string strTime;
	std::string strSamplingTime;
	std::string strK;
	std::string strN;
	std::string strEngineRev;
	std::string strOilTemperature;
	std::string strEnvironmentalTemperature;
	std::string strRelativeHumidity;
	std::string strAtmosphericPressure;
	std::string strRemark;
	std::string strReserved1;
	std::string strReserved2;
	std::string strReserved3;
};

// MDIS real time data<RealTimeDataOfMDIS>
struct SRealTimeDataOfMDIS_Zip
{
	std::wstring strAutoID;
	std::wstring strRunningNumber;
	std::wstring strReportNumber;
	std::string strFuelTypeCode;
	std::string strFuelTypeName;
	std::string strTime;
	std::string strSamplingTime;
	std::string strState;
	std::string strHC;
	std::string strCO;
	std::string strO2;
	std::string strCO2;
	std::string strNO;
	std::string strEngineRev;
	std::string strOilTemperature;
	std::string strLambda;
	std::string strEnvironmentalTemperature;
	std::string strRelativeHumidity;
	std::string strAtmosphericPressure;
	std::string strRemark;
	std::string strReserved1;
	std::string strReserved2;
	std::string strReserved3;

};

// MI real time data<RealTimeDataOfMI>
struct SRealTimeDataOfMI_Zip
{
	std::wstring strAutoID;
	std::wstring strRunningNumber;
	std::wstring strReportNumber;
	std::string strFuelTypeCode;
	std::string strFuelTypeName;
	std::string strTime;
	std::string strSamplingTime;
	std::string strState;
	std::string strHC;
	std::string strCO;
	std::string strO2;
	std::string strCO2;
	std::string strNO;
	std::string strEngineRev;
	std::string strOilTemperature;
	std::string strLambda;
	std::string strEnvironmentalTemperature;
	std::string strRelativeHumidity;
	std::string strAtmosphericPressure;
	std::string strRemark;
	std::string strReserved1;
	std::string strReserved2;
	std::string strReserved3;

};


// 写日志文件
void WriteLogString(const wchar_t wchErrorLog[ERROR_MAX])
{
	assert(NULL != wchErrorLog);

	// 获取exe(dll)文件绝对路径
	wchar_t wchPathDatabaseLog[MAX_PATH];
	if (0x00 != CNHCommonAPI::GetFilePathEx(L"Log", L"Database.log", wchPathDatabaseLog, true))
	{
		return;
	}

	// 写入日志文件
	SYSTEMTIME sysTm;
	::GetLocalTime(&sysTm);

	// 添加时间日期
	wchar_t wchWriteTime[100];
	wsprintf(wchWriteTime, 
		L"%d年%d月%d日%d时%d分%d秒",
		sysTm.wYear,
		sysTm.wMonth,
		sysTm.wDay,
		sysTm.wHour,
		sysTm.wMinute,
		sysTm.wSecond);

	try
	{
		FILE* filePtr(NULL);
		_tfopen_s(&filePtr, wchPathDatabaseLog, L"a+b");  // 追加形式打开文件
		if (NULL == filePtr) \
		{
			return;
		}

		_ftprintf(filePtr, L"\r\n[%s] %s\r\n", wchWriteTime, wchErrorLog);  // 打开文件写入

		fflush(filePtr);
		fclose(filePtr);
	}
	catch(...)
	{
	}
}

// 写数据库出错信息处理
void WriteDatabaseError(const _com_error& e)
{
	wchar_t wchComError[ERROR_MAX];
	wsprintf(wchComError, L"错误编号:%08lx  错误信息:%s  错误源:%s  错误描述:%s",
		e.Error(),
		e.ErrorMessage(),
		(LPCTSTR) e.Source(),
		(LPCTSTR) e.Description());
	//WriteLogString(wchComError);
	CNHLogAPI::WriteLog(LOG_EXP, L"NHModeServerDB", wchComError);
}

char * UnicodeToANSIEx(const wchar_t * wchSource)
{
	// 只支持小于1024长度的字符转换
	static char chResult[1024];
	memset(chResult, 0, sizeof(chResult));
	char *pch(NULL);
	pch = CNHCommonAPI::UnicodeToANSI(wchSource);
	strcpy_s(chResult, pch);
	if (NULL != pch)
	{
		free(pch);
		pch = NULL;
	}

	return chResult;
}

// 连接数据库
DWORD ConnectDatabase(_ConnectionPtr& pConnection)
{
	// 返回值
	DWORD dwReturn(0x00);

	// 读配置文件,获取数据库连接信息
	// 获取exe(dll)文件绝对路径
	wchar_t wchPathNHModeServerDB[MAX_PATH];
	if( 0x00 != CNHCommonAPI::GetFilePathEx(L"Config", L"NHModeServerDB.ini", wchPathNHModeServerDB))
	{
		return 0x01;
	}

	// 获取数据库连接信息
	wchar_t wchSource[MAX_PATH];
	wchar_t wchCatalog[MAX_PATH];
	wchar_t wchUserID[MAX_PATH];
	wchar_t wchPassword[MAX_PATH];
	GetPrivateProfileString(L"Database", L"Source", L"", wchSource, MAX_PATH, wchPathNHModeServerDB);
	GetPrivateProfileString(L"Database", L"Catalog", L"", wchCatalog, MAX_PATH, wchPathNHModeServerDB);
	GetPrivateProfileString(L"Database", L"UserID", L"", wchUserID, MAX_PATH, wchPathNHModeServerDB);
	GetPrivateProfileString(L"Database", L"Password", L"", wchPassword, MAX_PATH, wchPathNHModeServerDB);

	// 加载COM组件
	CoInitialize(NULL);
	try
	{
		wchar_t wchSql[SQLMAX];
		wsprintf(wchSql, L"Provider=SQLOLEDB; Data Source=%s; Initial Catalog=%s; User ID=%s; Password=%s;",
			wchSource,
			wchCatalog,
			wchUserID,
			wchPassword);

		pConnection.CreateInstance(L"ADODB.Connection");
		//pConnection->ConnectionTimeout = 5;
		//pConnection->CommandTimeout = 5;
		pConnection->Open((_bstr_t)wchSql, L"", L"", adModeUnknown);
	}
	catch (_com_error &e)
	{
		WriteDatabaseError(e);
		dwReturn = 0x01;
	}

	return dwReturn;
}

// 关闭数据库连接
DWORD DisconnectDatabase(_ConnectionPtr& pConnection)
{
	assert(NULL != pConnection);

	// 返回值
	DWORD dwReturn(0x00);

	try
	{
		//关闭连接
		if (NULL!=pConnection && adStateClosed!=pConnection->State)
		{
			pConnection->Close();
		}
		if (NULL != pConnection)
		{
			pConnection.Release();
			pConnection = NULL;
		}
	}
	catch (_com_error &e)
	{
		WriteDatabaseError(e);
		dwReturn = 0x01;
	}

	// 卸载COM组件
	CoUninitialize();

	return dwReturn;
}

DWORD GetFieldData(const _RecordsetPtr &rs, const wchar_t wchFieldName[MAX_PATH], _variant_t &vFieldData)
{
	assert(NULL != rs);
	assert(NULL != wchFieldName);

	// 返回值
	DWORD dwReturn(0x00);

	try
	{
		vFieldData = rs->GetCollect(_variant_t(wchFieldName));
		dwReturn = 0x00;
	}
	catch (_com_error &e)
	{
		WriteDatabaseError(e);
		dwReturn = 0x01;
	}

	return dwReturn;
}


std::wstring GetFieldDataEx(const _RecordsetPtr &rs, const wchar_t wchFieldName[MAX_PATH])
{
	_variant_t v;
	wchar_t wchBuf[1024] = {0};
	wstring strTemp;

	v.ChangeType(VT_NULL);
	_tcscpy_s(wchBuf, L"");
	GetFieldData(rs, wchFieldName, v);

	switch (v.vt)
	{
		case VT_BOOL:	//对应数据库的bit数据类型
			{
				_snwprintf_s(wchBuf, _countof(wchBuf), _TRUNCATE, L"%d", v.boolVal ? 1 : 0);
			}
			break;
		case VT_UI8:
			{
				_snwprintf_s(wchBuf, _countof(wchBuf), _TRUNCATE, L"%I64u", static_cast<unsigned long long>(v));
			}
			break;
		case VT_I8:
			{
				_snwprintf_s(wchBuf, _countof(wchBuf), _TRUNCATE, L"%I64d", static_cast<long long>(v));
			}
			break;
		case VT_I1:
		case VT_I2:		//对应数据库的smallint数据类型
		case VT_I4:
		case VT_INT:	//对应数据库的int数据类型
			{
				_snwprintf_s(wchBuf, _countof(wchBuf), _TRUNCATE, L"%d", static_cast<int>(v));
			}
			break;
		case VT_UI1:	//对应数据库的tinyint数据类型
		case VT_UI2:
		case VT_UI4:
		case VT_UINT:
			{
				_snwprintf_s(wchBuf, _countof(wchBuf), _TRUNCATE, L"%u", static_cast<unsigned int>(v));
			}
			break;
		case VT_R4:		//对应数据库的decimal数据类型
		case VT_R8:
		case VT_DECIMAL:
			{
				_snwprintf_s(wchBuf, _countof(wchBuf), _TRUNCATE, L"%.4f", static_cast<float>(v));
			}
			break;
		case VT_DATE:	//对应数据库的datetime数据类型
			{
				SYSTEMTIME dt;
				VariantTimeToSystemTime(v, &dt);
				_snwprintf_s(wchBuf, _countof(wchBuf), _TRUNCATE, L"%04d-%02d-%02d %02d:%02d:%02d",
					dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
			}
			break;
		case VT_BSTR:	//对应数据库的char、nchar、varchar、nvarchar数据类型
			{
				_snwprintf_s(wchBuf, _countof(wchBuf), _TRUNCATE, L"%s", (wchar_t*)(_bstr_t)v);
			}
			break;
		default:	break;
	}
	strTemp = wchBuf;
	return strTemp;
}

DWORD GetImageFieldData(const _RecordsetPtr &pRecordset, const wchar_t *const pwchFieldName, std::string &strValue)
{
	assert(pRecordset != NULL);
	assert(pwchFieldName != NULL);
	DWORD dwRet(0x00);
	try
	{
		const long lSize = pRecordset->GetFields()->GetItem(pwchFieldName)->ActualSize;
		if (0 == lSize)
		{
			strValue = "";
		}
		else
		{
			_variant_t var;
			var = pRecordset->GetFields()->GetItem(pwchFieldName)->GetChunk(lSize);
			if (var.vt == (VT_ARRAY|VT_UI1))
			{
				char *pBuf(NULL);
				SafeArrayAccessData(var.parray, (void **)&pBuf);
				assert(pBuf != NULL);
				strValue.assign(pBuf, lSize);
				SafeArrayUnaccessData(var.parray);
			}
			dwRet = 0x01;
		}
	}
	catch (_com_error &e)
	{
		WriteDatabaseError(e);
		dwRet = 0xFFFFFFFF;
	}
	return dwRet;
}

DWORD PutFieldData(const _RecordsetPtr &rs, const wchar_t wchFieldName[MAX_PATH], _variant_t &vFieldData)
{
	assert(NULL != rs);
	assert(NULL != wchFieldName);

	// 返回值
	DWORD dwReturn(0x00);

	try
	{
		rs->PutCollect(_variant_t(wchFieldName), vFieldData);
		dwReturn = 0x00;
	}
	catch (_com_error &e)
	{
		WriteDatabaseError(e);
		dwReturn = 0x01;
	}

	return dwReturn;
}

DWORD PutFieldDataEx(const _RecordsetPtr &rs, const wchar_t wchFieldName[MAX_PATH], const VARENUM vtFieldType, std::wstring strValue)
{
	_variant_t v;
	if (strValue == L"")
	{
		v.ChangeType(VT_NULL);
	}
	else
	{
		switch (vtFieldType)
		{
		case VT_BOOL:	//对应数据库的bit数据类型
			{
				v = (_variant_t)(strValue==L"1");
			}
			break;
		case VT_UI1:	//对应数据库的tinyint数据类型
		case VT_I2:		//对应数据库的smallint数据类型
		case VT_INT:	//对应数据库的int数据类型
			{
				v = static_cast<int>(_wtoi(strValue.c_str()));
			}
			break;
		case VT_R4:		//对应数据库的decimal数据类型
		case VT_DECIMAL:
			{
				v = static_cast<float>(_wtof(strValue.c_str()));
			}
			break;
		case VT_DATE:	//对应数据库的datetime数据类型
			{
				_variant_t vTime(strValue.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			break;
		case VT_BSTR:	//对应数据库的char、nchar、varchar、nvarchar数据类型
			{
				v = (_variant_t)strValue.c_str();
			}
			break;
		default:	
			{
				v.ChangeType(VT_NULL);
			}
			break;
		}
	}

	return PutFieldData(rs, wchFieldName, v);
}

DWORD PutImageFieldData(const _RecordsetPtr &pRecordset, const wchar_t *const pwchFieldName, const std::string &strValue)
{
	assert(pRecordset != NULL);
	assert(pwchFieldName != NULL);

	DWORD dwRet(0x00);
	if ("" == strValue)
	{
		_variant_t v;
		v.ChangeType(VT_NULL);
		dwRet = PutFieldData(pRecordset, pwchFieldName, v);
	}
	else
	{
		int nSize = strValue.size();
		SAFEARRAYBOUND Bound[1];
		Bound[0].lLbound = 0;
		Bound[0].cElements = nSize;
		SAFEARRAY *psa = SafeArrayCreate(VT_UI1, 1, Bound); // char 数组
		assert(psa != NULL);
		const char *pchStrBuf = strValue.c_str();
		for (long l=0; l<nSize; ++l)
		{
			SafeArrayPutElement(psa, &l, (void *)(pchStrBuf+l));
		}
		VARIANT var;
		var.vt = VT_ARRAY|VT_UI1;
		var.parray = psa;
		try
		{
			pRecordset->GetFields()->GetItem(pwchFieldName)->AppendChunk(var);
			dwRet = 0x01;
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwRet = 0xFFFFFFFF;
		}
		VariantClear(&var);
		// 会异常退出程序
		//SafeArrayDestroy(psa);
	}
	return dwRet;
}

DWORD ExecuteDML(const _ConnectionPtr &pConnection, const wchar_t *const pwchSQL, int *const pnRowsInvolved=NULL)
{
	assert(NULL != pConnection);
	assert(NULL != pwchSQL);

	DWORD dwReturn(0x00);

	try
	{
		_variant_t vRA;
		pConnection->Execute((_bstr_t)pwchSQL, &vRA, adCmdText);
		if (NULL != pnRowsInvolved)
		{
			*pnRowsInvolved = static_cast<int>(vRA);
		}
	}
	catch (_com_error &e)
	{
		WriteDatabaseError(e);
		dwReturn = 0x01;
	}

	return dwReturn;
}

DWORD SetStringToDBImage(_RecordsetPtr pRecordset, const std::string &str, const wchar_t* pwchFieldName)
{
	assert(pRecordset != NULL);
	assert(pwchFieldName != NULL);

	DWORD dwRet(0x00);
	if ("" == str)
	{
		_variant_t v;
		v.ChangeType(VT_NULL);
		dwRet = PutFieldData(pRecordset, pwchFieldName, v);
	}
	else
	{
		int nSize = str.size();
		SAFEARRAYBOUND Bound[1];
		Bound[0].lLbound = 0;
		Bound[0].cElements = nSize;
		SAFEARRAY *psa = SafeArrayCreate(VT_UI1, 1, Bound); // char 数组
		assert(psa != NULL);
		const char *pchStrBuf = str.c_str();
		for (long l=0; l<nSize; ++l)
		{
			SafeArrayPutElement(psa, &l, (void *)(pchStrBuf+l));
		}
		VARIANT var;
		var.vt = VT_ARRAY|VT_UI1;
		var.parray = psa;
		try
		{
			pRecordset->GetFields()->GetItem(pwchFieldName)->AppendChunk(var);
			dwRet = 0x01;
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwRet = 0xFFFFFFFF;
		}
		VariantClear(&var);
		// 会异常退出程序
		//SafeArrayDestroy(psa);
	}
	return dwRet;
}

DWORD GetStringFromDBImage(_RecordsetPtr pRecordset, std::string &str, const wchar_t* pwchFieldName)
{
	assert(pRecordset != NULL);
	assert(pwchFieldName != NULL);
	DWORD dwRet(0x00);
	try
	{
		const long lSize = pRecordset->GetFields()->GetItem(pwchFieldName)->ActualSize;
		if (0 == lSize)
		{
			str = "";
		}
		else
		{
			_variant_t var;
			var = pRecordset->GetFields()->GetItem(pwchFieldName)->GetChunk(lSize);
			if (var.vt == (VT_ARRAY|VT_UI1))
			{
				char *pBuf(NULL);
				SafeArrayAccessData(var.parray, (void **)&pBuf);
				assert(pBuf != NULL);
				str.assign(pBuf, lSize);
				SafeArrayUnaccessData(var.parray);
			}
			dwRet = 0x01;
		}
	}
	catch (_com_error &e)
	{
		WriteDatabaseError(e);
		dwRet = 0xFFFFFFFF;
	}
	return dwRet;
}

DWORD SetByteToDBImage(_RecordsetPtr pRecordset, const BYTE *pbBuf, const unsigned int nBufSize, const wchar_t* pwchFieldName)
{
	assert(pRecordset != NULL);
	assert(pwchFieldName != NULL);

	DWORD dwRet(0x00);
	if (pbBuf == NULL 
		|| nBufSize == 0)
	{
		_variant_t v;
		v.ChangeType(VT_NULL);
		dwRet = PutFieldData(pRecordset, pwchFieldName, v);
	}
	else
	{
		SAFEARRAYBOUND Bound[1];
		Bound[0].lLbound = 0;
		Bound[0].cElements = nBufSize;
		SAFEARRAY *psa = SafeArrayCreate(VT_UI1, 1, Bound); // char 数组
		assert(psa != NULL);
		for (long l=0; l<(long)nBufSize; ++l)
		{
			SafeArrayPutElement(psa, &l, (void *)(pbBuf+l));
		}
		VARIANT var;
		var.vt = VT_ARRAY|VT_UI1;
		var.parray = psa;
		try
		{
			pRecordset->GetFields()->GetItem(pwchFieldName)->AppendChunk(var);
			dwRet = 0x01;
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwRet = 0xFFFFFFFF;
		}
		VariantClear(&var);
		// 会异常退出程序
		//SafeArrayDestroy(psa);
	}
	return dwRet;
}

DWORD GetByteFromDBImage(_RecordsetPtr pRecordset, BYTE **pbBuf, unsigned int &nBufSize, const wchar_t* pwchFieldName)
{
	assert(pRecordset != NULL);
	assert(pwchFieldName != NULL);

	if (*pbBuf != NULL)
	{
		delete *pbBuf;
		*pbBuf = NULL;
	}

	DWORD dwRet(0x00);
	try
	{
		nBufSize= pRecordset->GetFields()->GetItem(pwchFieldName)->ActualSize;
		if (0 == nBufSize)
		{
			*pbBuf = NULL;
		}
		else
		{
			_variant_t var;
			var = pRecordset->GetFields()->GetItem(pwchFieldName)->GetChunk(nBufSize);
			if (var.vt == (VT_ARRAY|VT_UI1))
			{
				BYTE *pbPhoto = NULL;
				SafeArrayAccessData(var.parray, (void **)&pbPhoto);
				assert(pbPhoto != NULL);
				
				// copy到缓冲区
				*pbBuf = new BYTE[nBufSize];
				memcpy(*pbBuf, pbPhoto, nBufSize);

				SafeArrayUnaccessData(var.parray);
			}
			dwRet = 0x01;
		}
	}
	catch (_com_error &e)
	{
		WriteDatabaseError(e);
		dwRet = 0xFFFFFFFF;
	}
	return dwRet;
}

bool SplitString(std::string &str, wchar_t *pwch, const char * pch)
{
	const int size = str.size();
	if (size <= 1)
	{
		return false;
	}

	const int pos = str.find(pch, 0);
	if(pos < size)
	{
		std::string s = str.substr(0, pos);
		wchar_t * pwchTmp(NULL);
		pwchTmp = CNHCommonAPI::ANSIToUnicode(s.c_str());
		//wcscpy_s(pwch, 50, pwchTmp);
		wcscpy_s(pwch, wcslen(pwchTmp)+1, pwchTmp);
		if (NULL != pwchTmp)
		{
			free(pwchTmp);
			pwchTmp = NULL;
		}
		//wcscpy_s(pwch, CNHCommonAPI::ANSIToUnicode(s.c_str()));
		str = str.substr(pos+1, str.length());
	}

	return true;

}


DWORD GetDboUserInfo(const wchar_t wchSql[SQLMAX], PUSERINFO const pDboUserInfo)
{
	assert(NULL != wchSql);
	assert(NULL != pDboUserInfo);

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			if(!pRecordset->adoEOF)
			{
				_variant_t v;
				wstring s;

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AutoID", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboUserInfo->wchAutoID, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboUserInfo->wchAutoID,L"");
				}


				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Name", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboUserInfo->wchName, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboUserInfo->wchName,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Password", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboUserInfo->wchPassword, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboUserInfo->wchPassword,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LicenseSn", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboUserInfo->wchLicenseSn, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboUserInfo->wchLicenseSn,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LicenseStartDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboUserInfo->wchLicenseStartDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d",dt.wYear, dt.wMonth, dt.wDay);
					wcscpy_s(pDboUserInfo->wchLicenseStartDate, wch);
				}
				else
				{
					_tcscpy_s(pDboUserInfo->wchLicenseStartDate,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LicenseEndDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboUserInfo->wchLicenseEndDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d",dt.wYear, dt.wMonth, dt.wDay);
					wcscpy_s(pDboUserInfo->wchLicenseEndDate, wch);
				}
				else
				{
					_tcscpy_s(pDboUserInfo->wchLicenseEndDate,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Role", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboUserInfo->wchRole, NH_INT_TO_WCHART, L"%d", (short)v);
				}
				else
				{
					_tcscpy_s(pDboUserInfo->wchRole,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Remark", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboUserInfo->wchRemark, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboUserInfo->wchRemark,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved1", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboUserInfo->wchReserved1, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboUserInfo->wchReserved1,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved2", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboUserInfo->wchReserved2, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboUserInfo->wchReserved2,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved3", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboUserInfo->wchReserved3, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboUserInfo->wchReserved3,L"");
				}

				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD SetDboUserInfo(const USERINFO &dboUserInfo)
{
	DWORD dwReturn(0x00);
	_ConnectionPtr pConnection(NULL);

	if (0x00 == CNHSQLServerDBO::OpenDB(pConnection))
	{
		_RecordsetPtr pRecordset;
		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"SELECT * from userInfo WHERE Name = '%s'", dboUserInfo.wchName);

			pRecordset.CreateInstance(_T("ADODB.Recordset"));
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenDynamic, adLockOptimistic,
				adCmdText);

			if (pRecordset->adoEOF)
			{
				pRecordset->AddNew();
			}
			wstring str;
			_variant_t v;

			str = dboUserInfo.wchName;
			if ( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			pRecordset->PutCollect(L"Name", v);

			str = dboUserInfo.wchPassword;
			if ( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			pRecordset->PutCollect(L"Password", v);

			str = dboUserInfo.wchLicenseSn;
			if ( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			pRecordset->PutCollect(L"LicenseSn", v);

			str = dboUserInfo.wchLicenseStartDate;
			if ( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			pRecordset->PutCollect(L"LicenseStartDate", v);

			str = dboUserInfo.wchLicenseEndDate;
			if ( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			pRecordset->PutCollect(L"LicenseEndDate", v);

			str = dboUserInfo.wchRole;
			if ( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			pRecordset->PutCollect(L"Role", v);
			pRecordset->Update();
			pRecordset = NULL;
			
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	return dwReturn;
}

DWORD DelDboUserInfo(const wchar_t wchSql[SQLMAX])
{
	return 0xff;
}

DWORD GetDboUserPermission(const wchar_t *const pwchName, std::string &strPermission)
{
	assert(NULL != pwchName);

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		wchar_t wchSql[SQLMAX];
		ZeroMemory(wchSql, sizeof(wchSql));
		_snwprintf_s(wchSql, _countof(wchSql), _TRUNCATE, L"select * from UserInfo where Name = '%s'", pwchName);

		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			if(!pRecordset->adoEOF)
			{
				wchar_t wchFieldName[20];
				ZeroMemory(wchFieldName, sizeof(wchFieldName));
				wcscpy_s(wchFieldName, L"Permission");
				const long lActualSize = pRecordset->GetFields()->GetItem(wchFieldName)->ActualSize;
				if (0 == lActualSize)
				{
					strPermission = "";
					dwReturn = 0x02;
				}
				else
				{
					_variant_t varBLOB;
					varBLOB = pRecordset->GetFields()->GetItem(wchFieldName)->GetChunk(lActualSize);
					if (varBLOB.vt == (VT_ARRAY|VT_UI1))
					{
						char *pBuf(NULL);
						SafeArrayAccessData(varBLOB.parray, (void **)&pBuf);
						assert(pBuf != NULL);
						strPermission.assign(pBuf, lActualSize);
						SafeArrayUnaccessData(varBLOB.parray);
					}
					dwReturn = 0x01;
				}
			}
			else
			{
				dwReturn = 0x02;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD SetDboUserPermission(const wchar_t *const pwchName, const std::string &strPermission)
{
	assert(NULL != pwchName);

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		wchar_t wchSql[SQLMAX];
		ZeroMemory(wchSql, sizeof(wchSql));
		_snwprintf_s(wchSql, _countof(wchSql), _TRUNCATE, L"select * from UserInfo where Name = '%s'", pwchName);

		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			wchar_t wchFieldName[20];
			ZeroMemory(wchFieldName, sizeof(wchFieldName));
			wcscpy_s(wchFieldName, L"Permission");

			if (pRecordset->adoEOF)
			{
				// 添加新记录
				//pRecordset->AddNew();
			}
			else
			{
				if ("" == strPermission)
				{
					_variant_t v;
					v.ChangeType(VT_NULL);
					PutFieldData(pRecordset, wchFieldName, v);
				}
				else
				{
					int nSize = strPermission.size();
					SAFEARRAYBOUND Bound[1];
					Bound[0].lLbound = 0;
					Bound[0].cElements = nSize;
					SAFEARRAY *psa = SafeArrayCreate(VT_UI1, 1, Bound); // char 数组
					assert(psa != NULL);
					const char *pchStrBuf = strPermission.c_str();
					for (long l=0; l<nSize; ++l)
					{
						SafeArrayPutElement(psa, &l, (void *)(pchStrBuf+l));
					}
					VARIANT var;
					var.vt = VT_ARRAY|VT_UI1;
					var.parray = psa;
					pRecordset->GetFields()->GetItem(wchFieldName)->AppendChunk(var);
					VariantClear(&var);
					// 会异常退出程序
					//SafeArrayDestroy(psa);
				}
				// 保存到库中
				pRecordset->Update();
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}


DWORD SetDboBillInfoTestState(const wchar_t wchRunningNumber[50], const short siTestState,const wchar_t wchLineNumber[50],const SYSTEMTIME *pstProcessingTime)
{
	assert(wchRunningNumber != NULL);

	//返回值
	DWORD dwReturn(0x00);
	wstring str;
	_variant_t v;
	v.ChangeType(VT_NULL);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"select TestState,LineNumber,StartProcessingTime from BillInfo where RunningNumber = '%s'", wchRunningNumber);

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if(!pRecordset->adoEOF)
			{
				str = siTestState;
				if (0 == str.compare(L""))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = (_variant_t)siTestState;
				}
				PutFieldData(pRecordset, L"TestState", v);

				if (NULL == wchLineNumber)
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					str = wchLineNumber;
					v = (_variant_t)str.c_str();
				}
				PutFieldData(pRecordset, L"LineNumber", v);

				if (NULL != pstProcessingTime)
				{
					wchar_t wchStartTime[50];
					wsprintf(wchStartTime,L"%d-%d-%d %d:%d:%d",pstProcessingTime->wYear,pstProcessingTime->wMonth,pstProcessingTime->wDay,pstProcessingTime->wHour,pstProcessingTime->wMinute,pstProcessingTime->wSecond);
					str = wchStartTime;
					v = (_variant_t)str.c_str();
				}
				else
				{
					v.ChangeType(VT_NULL);
				}
				PutFieldData(pRecordset, L"StartProcessingTime", v);
			}
			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

// Return Value
// 0x00 : Successful
// 0xff : Database operate error
// 0x01 : Can't find record
// 0x02 : Get TestState failed
// 0x03 : TestState field is null
// 0x04 : TestState is not in 0
// 0x05 : Write TestState fialed
// 0x06 : Write LineNumber fialed
DWORD SetDboBillInfoSelectState(const wchar_t wchRunningNumber[50], const wchar_t wchLineNumber[50])
{
	assert(wchRunningNumber != NULL);
	assert(wchLineNumber != NULL);

	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"select TestState,LineNumber from TestLog where RunningNumber = '%s'", wchRunningNumber);

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if (!pRecordset->adoEOF)
			{
				_variant_t v;

				v.ChangeType(VT_NULL);
				if (0x00 == GetFieldData(pRecordset, L"TestState", v))
				{
					if (VT_NULL != v.vt)
					{
						int nTestState((int)v);
						if (0 == nTestState)
						{
							// Set TestState 7
							if (0x00 != PutFieldData(pRecordset, L"LineNumber", _variant_t(wchLineNumber)))
							{
								dwReturn = 0x06;
							}

							// Set TestState 7
							if (0x00 != PutFieldData(pRecordset, L"TestState", _variant_t(7)))
							{
								dwReturn = 0x05;
							}
						}
						else
						{
							dwReturn = 0x04;
						}
					}
					else
					{
						dwReturn = 0x03;
					}
				}
				else
				{
					dwReturn = 0x02;
				}
			}
			else
			{
				dwReturn = 0x01;
			}
			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD UpdateDboBillInfoPowerFailure(const wchar_t wchLineNumber[50])
{
	assert(wchLineNumber != NULL);

	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"update TestLog set TestState = '0' where LineNumber = '%s' and (TestState = '7' or TestState = '1' or TestState = '2' or TestState = '9' or TestState = '3')", wchLineNumber);
			pConnection->Execute((_bstr_t)wchSql, NULL, adCmdText);

			//wsprintf(wchSql, L"update TestLog set TestState = '4' where LineNumber = '%s' and (TestState = '9' or TestState = '3')", wchLineNumber);
			//pConnection->Execute((_bstr_t)wchSql, NULL, adCmdText);
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD DelDboBillInfoTestFinished(const wchar_t wchRunningNumber[50])
{
	assert(wchRunningNumber != NULL);

	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"delete from BillInfo where RunningNumber = '%s'", wchRunningNumber);

			pConnection->Execute((_bstr_t)wchSql, NULL, adCmdText);
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD DelDboBillInfo(const wchar_t wchSql[SQLMAX])
{
	assert(wchSql != NULL);

	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		try
		{
			pConnection->Execute((_bstr_t)wchSql, NULL, adCmdText);
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboVehicleInfo(const wchar_t wchSql[SQLMAX], PVEHICLEINFO const pDboVehicleInfo)
{
	assert(NULL != wchSql);
	assert(NULL != pDboVehicleInfo);

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			if(!pRecordset->adoEOF)
			{
				_variant_t v;
				wstring s;

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AutoID", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboVehicleInfo->wchAutoID, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchAutoID,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PlateNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleInfo->wchPlateNumber, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchPlateNumber,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PlateType", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleInfo->wchPlateType, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchPlateType, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PlateTypeCode", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleInfo->wchPlateTypeCode, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchPlateTypeCode, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PlateTypeGA", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleInfo->wchPlateTypeGA, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchPlateTypeGA, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PlateTypeCodeGA", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleInfo->wchPlateTypeCodeGA, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchPlateTypeCodeGA, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"RegistrationDate", v);
				if(VT_NULL != v.vt)
				{
					//s = (wchar_t*)(_bstr_t)v;
					//wcscpy_s(pDboVehicleInfo->wchRegistrationDate, s.c_str());

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d",dt.wYear, dt.wMonth, dt.wDay);
					wcscpy_s(pDboVehicleInfo->wchRegistrationDate, wch);

				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchRegistrationDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Owner", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleInfo->wchOwner, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchOwner, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Phone", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleInfo->wchPhone, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchPhone, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Address", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleInfo->wchAddress, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchAddress, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"UseCharacter", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleInfo->wchUseCharacter, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchUseCharacter, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Manufacturer", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleInfo->wchManufacturer, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchManufacturer, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Brand", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleInfo->wchBrand, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchBrand, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Model", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleInfo->wchModel, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchModel, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"ProductionDate", v);
				if(VT_NULL != v.vt)
				{
					//s = (wchar_t*)(_bstr_t)v;
					//wcscpy_s(pDboVehicleInfo->wchProductionDate, s.c_str());

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d",dt.wYear, dt.wMonth, dt.wDay);
					wcscpy_s(pDboVehicleInfo->wchProductionDate, wch);
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchProductionDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"VIN", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleInfo->wchVIN, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchVIN, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"ChassisModel", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleInfo->wchChassisModel, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchChassisModel, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"VehicleType", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleInfo->wchVehicleType, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchVehicleType, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"MaximumTotalMass", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboVehicleInfo->wchMaximumTotalMass, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchMaximumTotalMass,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"UnladenMass", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboVehicleInfo->wchUnladenMass, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchUnladenMass,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AxleMass", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboVehicleInfo->wchAxleMass, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchAxleMass,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"RatedLoadingMass", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboVehicleInfo->wchRatedLoadingMass, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchRatedLoadingMass,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"RatedPassengerCapacity", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboVehicleInfo->wchRatedPassengerCapacity, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchRatedPassengerCapacity, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"TyrePressure", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboVehicleInfo->wchTyrePressure, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchTyrePressure, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"TravelledDistance", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboVehicleInfo->wchTravelledDistance, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchTravelledDistance, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EngineManufacturer", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleInfo->wchEngineManufacturer, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchEngineManufacturer, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EngineModel", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleInfo->wchEngineModel, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchEngineModel, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EngineNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleInfo->wchEngineNumber, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchEngineNumber, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EngineStroke", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboVehicleInfo->wchEngineStroke, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchEngineStroke, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Displacement", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboVehicleInfo->wchDisplacement, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchDisplacement, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NumberOfCylinder", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboVehicleInfo->wchNumberOfCylinder, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchNumberOfCylinder, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OilSupplyMode", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleInfo->wchOilSupplyMode, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchOilSupplyMode, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AirIntakeMode", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleInfo->wchAirIntakeMode, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchAirIntakeMode, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HasCatalyticConverter", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboVehicleInfo->wchHasCatalyticConverter, L"1");
					}
					else
					{
						wcscpy_s(pDboVehicleInfo->wchHasCatalyticConverter, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchHasCatalyticConverter, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FuelType", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleInfo->wchFuelType, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchFuelType, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FuelMark", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleInfo->wchFuelMark, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchFuelMark, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"DoubleFuel", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboVehicleInfo->wchDoubleFuel, L"1");
					}
					else
					{
						wcscpy_s(pDboVehicleInfo->wchDoubleFuel, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchDoubleFuel, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FuelType2", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleInfo->wchFuelType2, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchFuelType2, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FuelMark2", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleInfo->wchFuelMark2, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchFuelMark2, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"RatedRev", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboVehicleInfo->wchRatedRev, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchRatedRev, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"RatedPower", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboVehicleInfo->wchRatedPower, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchRatedPower, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"MaximumNetPower", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboVehicleInfo->wchMaximumNetPower, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchMaximumNetPower, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"GearBoxType", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleInfo->wchGearBoxType, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchGearBoxType, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NumberOfGears", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboVehicleInfo->wchNumberOfGears, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchNumberOfGears, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"DriveType", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleInfo->wchDriveType, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchDriveType, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EPSign", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleInfo->wchEPSign, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchEPSign, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"CertificateNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleInfo->wchCertificateNumber, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchCertificateNumber, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"IndependentDoubleExhaustPipe", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboVehicleInfo->wchIndependentDoubleExhaustPipe, L"1");
					}
					else
					{
						wcscpy_s(pDboVehicleInfo->wchIndependentDoubleExhaustPipe, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchIndependentDoubleExhaustPipe, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"TCS", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboVehicleInfo->wchTCS, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchTCS, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FuelPumpMode", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleInfo->wchFuelPumpMode, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchFuelPumpMode, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PassengerVehicle", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboVehicleInfo->wchPassengerVehicle, L"1");
					}
					else
					{
						wcscpy_s(pDboVehicleInfo->wchPassengerVehicle, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchPassengerVehicle, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EmissionStandard", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleInfo->wchEmissionStandard, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchEmissionStandard, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AnnualTestPeriod", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboVehicleInfo->wchAnnualTestPeriod, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchAnnualTestPeriod, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HasOBD", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboVehicleInfo->wchHasOBD, L"1");
					}
					else
					{
						wcscpy_s(pDboVehicleInfo->wchHasOBD, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchHasOBD, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OwnerCharacter", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleInfo->wchOwnerCharacter, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchOwnerCharacter, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OwnerDistrict", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleInfo->wchOwnerDistrict, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchOwnerDistrict, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LicenseDepartment", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleInfo->wchLicenseDepartment, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchLicenseDepartment, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LicenseIssueDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleInfo->wchLicenseIssueDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d",dt.wYear, dt.wMonth, dt.wDay);
					wcscpy_s(pDboVehicleInfo->wchLicenseIssueDate, wch);
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchLicenseIssueDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LicenseValidDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleInfo->wchLicenseValidDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d",dt.wYear, dt.wMonth, dt.wDay);
					wcscpy_s(pDboVehicleInfo->wchLicenseValidDate, wch);
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchLicenseValidDate, L"");
				}
				
				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"MotorModel", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleInfo->wchMotorModel, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchMotorModel, L"");
				}
				
				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EnergyStorageDeviceModel", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleInfo->wchEnergyStorageDeviceModel, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchEnergyStorageDeviceModel, L"");
				}
				
				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"BatteryCapacity", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboVehicleInfo->wchBatteryCapacity, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchBatteryCapacity, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HasDPF", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboVehicleInfo->wchHasDPF, L"1");
					}
					else
					{
						wcscpy_s(pDboVehicleInfo->wchHasDPF, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchHasDPF, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"DPFModel", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleInfo->wchDPFModel, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchDPFModel, L"");
				}
				
				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HasSCR", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboVehicleInfo->wchHasSCR, L"1");
					}
					else
					{
						wcscpy_s(pDboVehicleInfo->wchHasSCR, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchHasSCR, L"");
				}
				
				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"SCRModel", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleInfo->wchSCRModel, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchSCRModel, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Remark", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleInfo->wchRemark, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchRemark, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved1", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleInfo->wchReserved1, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchReserved1, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved2", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleInfo->wchReserved2, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchReserved2, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved3", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleInfo->wchReserved3, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleInfo->wchReserved3, L"");
				}

				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}


DWORD SetDboVehicleInfo(const VEHICLEINFO &dboVehicleInfo)
{
	assert(&dboVehicleInfo != NULL);

	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"select * from VehicleInfo where PlateNumber = '%s' and PlateType = '%s'", dboVehicleInfo.wchPlateNumber, dboVehicleInfo.wchPlateType);

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if(pRecordset->adoEOF)
			{
				pRecordset->AddNew();    //添加新记录
			}

			wstring str;
			_variant_t v;

			// 车牌号码
			str = dboVehicleInfo.wchPlateNumber;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"PlateNumber", v);

			// 车牌类型
			str = dboVehicleInfo.wchPlateType;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"PlateType", v);

			str = dboVehicleInfo.wchPlateTypeCode;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"PlateTypeCode", v);

			str = dboVehicleInfo.wchPlateTypeGA;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"PlateTypeGA", v);

			str = dboVehicleInfo.wchPlateTypeCodeGA;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"PlateTypeCodeGA", v);

			// 车辆登记日期
			str = dboVehicleInfo.wchRegistrationDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"RegistrationDate", v);

			// 车主
			str = dboVehicleInfo.wchOwner;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Owner", v);

			// 联系电话
			str = dboVehicleInfo.wchPhone;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Phone", v);

			// 联系地址
			str = dboVehicleInfo.wchAddress;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Address", v);

			// 使用性质
			str = dboVehicleInfo.wchUseCharacter;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"UseCharacter", v);

			// 生产企业
			str = dboVehicleInfo.wchManufacturer;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Manufacturer", v);

			// 厂牌
			str = dboVehicleInfo.wchBrand;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Brand", v);

			// 型号
			str = dboVehicleInfo.wchModel;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Model", v);

			// 生产日期
			str = dboVehicleInfo.wchProductionDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"ProductionDate", v);

			// VIN
			str = dboVehicleInfo.wchVIN;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"VIN", v);

			// 底盘型号
			str = dboVehicleInfo.wchChassisModel;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"ChassisModel", v);

			// 车辆类型
			str = dboVehicleInfo.wchVehicleType;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"VehicleType", v);

			// 最大总质量
			str = dboVehicleInfo.wchMaximumTotalMass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = _wtoi(str.c_str());
			}
			PutFieldData(pRecordset, L"MaximumTotalMass", v);

			// 整备质量
			str = dboVehicleInfo.wchUnladenMass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = _wtoi(str.c_str());
			}
			PutFieldData(pRecordset, L"UnladenMass", v);

			// 轴重
			str = dboVehicleInfo.wchAxleMass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = _wtoi(str.c_str());
			}
			PutFieldData(pRecordset, L"AxleMass", v);

			// 核载质量
			str = dboVehicleInfo.wchRatedLoadingMass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = _wtoi(str.c_str());
			}
			PutFieldData(pRecordset, L"RatedLoadingMass", v);

			// 核载人数
			str = dboVehicleInfo.wchRatedPassengerCapacity;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = _wtoi(str.c_str());
			}
			PutFieldData(pRecordset, L"RatedPassengerCapacity", v);

			// 轮胎气压[mPa]
			str = dboVehicleInfo.wchTyrePressure;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"TyrePressure", v);

			// 行驶里程[km]
			str = dboVehicleInfo.wchTravelledDistance;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = _wtoi(str.c_str());
			}
			PutFieldData(pRecordset, L"TravelledDistance", v);

			// 发动机生产厂家
			str = dboVehicleInfo.wchEngineManufacturer;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"EngineManufacturer", v);

			// 发动机型号
			str = dboVehicleInfo.wchEngineModel;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"EngineModel", v);

			// 发动机号
			str = dboVehicleInfo.wchEngineNumber;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"EngineNumber", v);

			// 发动机冲程数
			str = dboVehicleInfo.wchEngineStroke;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"EngineStroke", v);

			// 排量[L]
			str = dboVehicleInfo.wchDisplacement;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"Displacement", v);

			// 汽缸数
			str = dboVehicleInfo.wchNumberOfCylinder;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"NumberOfCylinder", v);

			// 供油方式
			str = dboVehicleInfo.wchOilSupplyMode;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"OilSupplyMode", v);

			// 进气方式
			str = dboVehicleInfo.wchAirIntakeMode;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"AirIntakeMode", v);

			// 有无催化转化器
			str = dboVehicleInfo.wchHasCatalyticConverter;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"HasCatalyticConverter", v);

			// 燃油类别
			str = dboVehicleInfo.wchFuelType;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"FuelType", v);

			// 燃油规格
			str = dboVehicleInfo.wchFuelMark;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"FuelMark", v);

			// 是否双燃料
			str = dboVehicleInfo.wchDoubleFuel;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"DoubleFuel", v);

			// 燃油类别2
			str = dboVehicleInfo.wchFuelType2;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"FuelType2", v);

			// 燃油规格2(对应燃油类别2)
			str = dboVehicleInfo.wchFuelMark2;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"FuelMark2", v);

			// 额定转速[r/min]
			str = dboVehicleInfo.wchRatedRev;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"RatedRev", v);

			// 额定功率[kW]
			str = dboVehicleInfo.wchRatedPower;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"RatedPower", v);

			// 最大净功率[kW]
			str = dboVehicleInfo.wchMaximumNetPower;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"MaximumNetPower", v);

			// 变速器类型
			str = dboVehicleInfo.wchGearBoxType;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"GearBoxType", v);

			// 档位数
			str = dboVehicleInfo.wchNumberOfGears;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"NumberOfGears", v);

			// 驱动方式
			str = dboVehicleInfo.wchDriveType;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"DriveType", v);

			// 环保标志
			str = dboVehicleInfo.wchEPSign;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"EPSign", v);

			// 合格证号码
			str = dboVehicleInfo.wchCertificateNumber;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"CertificateNumber", v);

			// 独立双排气管
			str = dboVehicleInfo.wchIndependentDoubleExhaustPipe;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"IndependentDoubleExhaustPipe", v);

			// 牵引力控制系统
			str = dboVehicleInfo.wchTCS;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = static_cast<int>(1);
			}
			else if( 0 ==str.compare(L"2"))
			{
				v = static_cast<int>(2);
			}
			else
			{
				v = static_cast<int>(0);
			}
			PutFieldData(pRecordset, L"TCS", v);

			// 燃油泵形式(机械,电子控制)
			str = dboVehicleInfo.wchFuelPumpMode;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"FuelPumpMode", v);

			// 是否载客车
			str = dboVehicleInfo.wchPassengerVehicle;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"PassengerVehicle", v);

			// 检测标准
			str = dboVehicleInfo.wchEmissionStandard;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"EmissionStandard", v);

			// 检测周期
			str = dboVehicleInfo.wchAnnualTestPeriod;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"AnnualTestPeriod", v);

			// 有无OBD
			str = dboVehicleInfo.wchHasOBD;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"HasOBD", v);

			// 车主性质
			str = dboVehicleInfo.wchOwnerCharacter;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"OwnerCharacter", v);

			// 车主区划
			str = dboVehicleInfo.wchOwnerDistrict;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"OwnerDistrict", v);

			// 发证机构
			str = dboVehicleInfo.wchLicenseDepartment;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"LicenseDepartment", v);

			// 发证日期
			str = dboVehicleInfo.wchLicenseIssueDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"LicenseIssueDate", v);

			// 有效期止
			str = dboVehicleInfo.wchLicenseValidDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"LicenseValidDate", v);

			// 电动机型号
			str = dboVehicleInfo.wchMotorModel;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"MotorModel", v);

			// 储能装置型号
			str = dboVehicleInfo.wchEnergyStorageDeviceModel;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"EnergyStorageDeviceModel", v);

			// 电池容量[kWh]
			str = dboVehicleInfo.wchBatteryCapacity;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"BatteryCapacity", v);
			
			// 有无DPF
			str = dboVehicleInfo.wchHasDPF;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"HasDPF", v);

			// DPF型号
			str = dboVehicleInfo.wchDPFModel;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"DPFModel", v);
			
			// 有无SCR
			str = dboVehicleInfo.wchHasSCR;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"HasSCR", v);

			// SCR型号
			str = dboVehicleInfo.wchSCRModel;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"SCRModel", v);

			// 备注
			str = dboVehicleInfo.wchRemark;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Remark", v);

			// 保留字段,以后备用
			str = dboVehicleInfo.wchReserved1;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved1", v);

			// 保留字段,以后备用
			str = dboVehicleInfo.wchReserved2;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved2", v);

			// 保留字段,以后备用
			str = dboVehicleInfo.wchReserved3;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved3", v);

			pRecordset->Update();  // 保存到库中

			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}


DWORD SetDboVehicleModel(const VEHICLEMODEL &dboVehicleModel)
{
	assert(&dboVehicleModel != NULL);

	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"select * from VehicleModel where Manufacturer = '%s' and Model = '%s' and Brand = '%s'", dboVehicleModel.wchManufacturer, dboVehicleModel.wchModel, dboVehicleModel.wchBrand);
			//wsprintf(wchSql, L"select * from VehicleModel where Manufacturer = '%s'and Brand = '%s' and Model = '%s'", dboVehicleModel.wchManufacturer, dboVehicleModel.wchBrand, dboVehicleModel.wchModel);

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if(pRecordset->adoEOF)
			{
				pRecordset->AddNew();    //添加新记录
				dwReturn = 0x01;
			}

			wstring str;
			_variant_t v;

			// 生产企业
			str = dboVehicleModel.wchManufacturer;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Manufacturer", v);

			// 厂牌
			str = dboVehicleModel.wchBrand;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Brand", v);

			// 型号
			str = dboVehicleModel.wchModel;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Model", v);

			// 底盘型号
			str = dboVehicleModel.wchChassisModel;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"ChassisModel", v);

			// 车辆类型
			str = dboVehicleModel.wchVehicleType;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"VehicleType", v);

			// 最大总质量
			str = dboVehicleModel.wchMaximumTotalMass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = _wtoi(str.c_str());
			}
			PutFieldData(pRecordset, L"MaximumTotalMass", v);

			// 整备质量
			str = dboVehicleModel.wchUnladenMass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = _wtoi(str.c_str());
			}
			PutFieldData(pRecordset, L"UnladenMass", v);

			// 轴重
			str = dboVehicleModel.wchAxleMass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = _wtoi(str.c_str());
			}
			PutFieldData(pRecordset, L"AxleMass", v);

			// 核载质量
			str = dboVehicleModel.wchRatedLoadingMass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = _wtoi(str.c_str());
			}
			PutFieldData(pRecordset, L"RatedLoadingMass", v);

			// 核载人数
			str = dboVehicleModel.wchRatedPassengerCapacity;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = _wtoi(str.c_str());
			}
			PutFieldData(pRecordset, L"RatedPassengerCapacity", v);

			// 轮胎气压[mPa]
			str = dboVehicleModel.wchTyrePressure;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"TyrePressure", v);

			// 发动机生产厂家
			str = dboVehicleModel.wchEngineManufacturer;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"EngineManufacturer", v);

			// 发动机型号
			str = dboVehicleModel.wchEngineModel;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"EngineModel", v);

			// 排量[L]
			str = dboVehicleModel.wchDisplacement;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"Displacement", v);

			// 汽缸数
			str = dboVehicleModel.wchNumberOfCylinder;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"NumberOfCylinder", v);

			// 供油方式
			str = dboVehicleModel.wchOilSupplyMode;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"OilSupplyMode", v);

			// 进气方式
			str = dboVehicleModel.wchAirIntakeMode;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"AirIntakeMode", v);

			// 有无催化转化器
			str = dboVehicleModel.wchHasCatalyticConverter;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"HasCatalyticConverter", v);

			// 燃油类别
			str = dboVehicleModel.wchFuelType;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"FuelType", v);

			// 燃油规格
			str = dboVehicleModel.wchFuelMark;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"FuelMark", v);

			// 是否双燃料
			str = dboVehicleModel.wchDoubleFuel;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"DoubleFuel", v);

			// 燃油类别2
			str = dboVehicleModel.wchFuelType2;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"FuelType2", v);

			// 燃油规格2(对应燃油类别2)
			str = dboVehicleModel.wchFuelMark2;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"FuelMark2", v);

			// 额定转速[r/min]
			str = dboVehicleModel.wchRatedRev;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"RatedRev", v);

			// 额定功率[kW]
			str = dboVehicleModel.wchRatedPower;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"RatedPower", v);

			// 最大净功率[kW]
			str = dboVehicleModel.wchMaximumNetPower;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"MaximumNetPower", v);

			// 是否载客车
			str = dboVehicleModel.wchPassengerVehicle;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"PassengerVehicle", v);
			// 变速器类型
			str = dboVehicleModel.wchGearBoxType;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"GearBoxType", v);

			// 档位数
			str = dboVehicleModel.wchNumberOfGears;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"NumberOfGears", v);

			// 驱动方式
			str = dboVehicleModel.wchDriveType;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"DriveType", v);

			// 环保标志
			str = dboVehicleModel.wchEPSign;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"EPSign", v);

			// 独立双排气管
			str = dboVehicleModel.wchIndependentDoubleExhaustPipe;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"IndependentDoubleExhaustPipe", v);

			// 牵引力控制系统
			str = dboVehicleModel.wchTCS;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = static_cast<int>(1);
			}
			else if( 0 ==str.compare(L"2"))
			{
				v = static_cast<int>(2);
			}
			else
			{
				v = static_cast<int>(0);
			}
			PutFieldData(pRecordset, L"TCS", v);

			// 燃油泵形式(机械,电子控制)
			str = dboVehicleModel.wchFuelPumpMode;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"FuelPumpMode", v);

			// 备注
			str = dboVehicleModel.wchRemark;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Remark", v);

			// 保留字段,以后备用
			str = dboVehicleModel.wchReserved1;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved1", v);

			// 保留字段,以后备用
			str = dboVehicleModel.wchReserved2;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved2", v);

			// 保留字段,以后备用
			str = dboVehicleModel.wchReserved3;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved3", v);

			pRecordset->Update();  // 保存到库中

			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboVehicleModel(const wchar_t wchSql[SQLMAX], PVEHICLEMODEL const pDboVehicleModel)
{
	assert(NULL != wchSql);
	assert(NULL != pDboVehicleModel);

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			if(!pRecordset->adoEOF)
			{
				_variant_t v;
				wstring s;

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AutoID", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboVehicleModel->wchAutoID, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboVehicleModel->wchAutoID,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Manufacturer", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleModel->wchManufacturer, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleModel->wchManufacturer, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Brand", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleModel->wchBrand, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleModel->wchBrand, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Model", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleModel->wchModel, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleModel->wchModel, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"ChassisModel", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleModel->wchChassisModel, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleModel->wchChassisModel, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"VehicleType", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleModel->wchVehicleType, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleModel->wchVehicleType, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"MaximumTotalMass", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboVehicleModel->wchMaximumTotalMass, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboVehicleModel->wchMaximumTotalMass,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"UnladenMass", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboVehicleModel->wchUnladenMass, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboVehicleModel->wchUnladenMass,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AxleMass", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboVehicleModel->wchAxleMass, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboVehicleModel->wchAxleMass,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"RatedLoadingMass", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboVehicleModel->wchRatedLoadingMass, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboVehicleModel->wchRatedLoadingMass,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"RatedPassengerCapacity", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboVehicleModel->wchRatedPassengerCapacity, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboVehicleModel->wchRatedPassengerCapacity, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"TyrePressure", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboVehicleModel->wchTyrePressure, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboVehicleModel->wchTyrePressure, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EngineManufacturer", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleModel->wchEngineManufacturer, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleModel->wchEngineManufacturer, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EngineModel", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleModel->wchEngineModel, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleModel->wchEngineModel, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Displacement", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboVehicleModel->wchDisplacement, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboVehicleModel->wchDisplacement, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NumberOfCylinder", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboVehicleModel->wchNumberOfCylinder, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboVehicleModel->wchNumberOfCylinder, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OilSupplyMode", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleModel->wchOilSupplyMode, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleModel->wchOilSupplyMode, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AirIntakeMode", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleModel->wchAirIntakeMode, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleModel->wchAirIntakeMode, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HasCatalyticConverter", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboVehicleModel->wchHasCatalyticConverter, L"1");
					}
					else
					{
						wcscpy_s(pDboVehicleModel->wchHasCatalyticConverter, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboVehicleModel->wchHasCatalyticConverter, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FuelType", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleModel->wchFuelType, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleModel->wchFuelType, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FuelMark", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleModel->wchFuelMark, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleModel->wchFuelMark, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"DoubleFuel", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboVehicleModel->wchDoubleFuel, L"1");
					}
					else
					{
						wcscpy_s(pDboVehicleModel->wchDoubleFuel, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboVehicleModel->wchDoubleFuel, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FuelType2", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleModel->wchFuelType2, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleModel->wchFuelType2, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FuelMark2", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleModel->wchFuelMark2, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleModel->wchFuelMark2, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"RatedRev", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboVehicleModel->wchRatedRev, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboVehicleModel->wchRatedRev, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"RatedPower", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboVehicleModel->wchRatedPower, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboVehicleModel->wchRatedPower, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"MaximumNetPower", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboVehicleModel->wchMaximumNetPower, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboVehicleModel->wchMaximumNetPower, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"GearBoxType", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleModel->wchGearBoxType, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleModel->wchGearBoxType, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NumberOfGears", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboVehicleModel->wchNumberOfGears, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboVehicleModel->wchNumberOfGears, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"DriveType", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleModel->wchDriveType, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleModel->wchDriveType, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EPSign", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleModel->wchEPSign, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleModel->wchEPSign, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"IndependentDoubleExhaustPipe", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboVehicleModel->wchIndependentDoubleExhaustPipe, L"1");
					}
					else
					{
						wcscpy_s(pDboVehicleModel->wchIndependentDoubleExhaustPipe, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboVehicleModel->wchIndependentDoubleExhaustPipe, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"TCS", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboVehicleModel->wchTCS, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboVehicleModel->wchTCS, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FuelPumpMode", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleModel->wchFuelPumpMode, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleModel->wchFuelPumpMode, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PassengerVehicle", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboVehicleModel->wchPassengerVehicle, L"1");
					}
					else
					{
						wcscpy_s(pDboVehicleModel->wchPassengerVehicle, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboVehicleModel->wchPassengerVehicle, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Remark", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleModel->wchRemark, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleModel->wchRemark, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved1", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleModel->wchReserved1, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleModel->wchReserved1, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved2", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleModel->wchReserved2, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleModel->wchReserved2, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved3", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboVehicleModel->wchReserved3, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboVehicleModel->wchReserved3, L"");
				}

				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboLimitOfASM(const wchar_t wchSql[SQLMAX], PLIMITOFASM const pDboLimitOfASM)
{
	assert(NULL != wchSql);
	assert(NULL != pDboLimitOfASM);

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			if(!pRecordset->adoEOF)
			{
				_variant_t v;
				wstring s;

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AutoID", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfASM->wchAutoID, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfASM->wchAutoID, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"VehicleType", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfASM->wchVehicleType, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLimitOfASM->wchVehicleType, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"StartDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfASM->wchStartDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboLimitOfASM->wchStartDate, wch);
				}
				else
				{
					_tcscpy_s(pDboLimitOfASM->wchStartDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EndDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfASM->wchEndDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboLimitOfASM->wchEndDate, wch);
				}
				else
				{
					_tcscpy_s(pDboLimitOfASM->wchEndDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"StartRM", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfASM->wchStartRM, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfASM->wchStartRM, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EndRM", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfASM->wchEndRM, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfASM->wchEndRM, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HC5025", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfASM->wchHC5025, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfASM->wchHC5025, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HC5025_EDP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfASM->wchHC5025_EDP, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfASM->wchHC5025_EDP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"CO5025", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfASM->wchCO5025, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfASM->wchCO5025, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"CO5025_EDP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfASM->wchCO5025_EDP, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfASM->wchCO5025_EDP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NO5025", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfASM->wchNO5025, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfASM->wchNO5025, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NO5025_EDP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfASM->wchNO5025_EDP, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfASM->wchNO5025_EDP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HC2540", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfASM->wchHC2540, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfASM->wchHC2540, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HC2540_EDP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfASM->wchHC2540_EDP, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfASM->wchHC2540_EDP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"CO2540", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfASM->wchCO2540, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfASM->wchCO2540, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"CO2540_EDP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfASM->wchCO2540_EDP, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfASM->wchCO2540_EDP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NO2540", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfASM->wchNO2540, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfASM->wchNO2540, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NO2540_EDP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfASM->wchNO2540_EDP, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfASM->wchNO2540_EDP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Remark", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfASM->wchRemark, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLimitOfASM->wchRemark, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved1", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfASM->wchReserved1, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLimitOfASM->wchReserved1, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved2", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfASM->wchReserved2, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLimitOfASM->wchReserved2, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved3", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfASM->wchReserved3, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLimitOfASM->wchReserved3, L"");
				}

				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		if (0x01 != dwReturn)
		{
			// 数据库获取限值失败，限值都设置为最宽松限值
			// 限值尾数都相应加1，以便区分限值的来源
			_tcscpy_s(pDboLimitOfASM->wchHC5025, L"231");
			_tcscpy_s(pDboLimitOfASM->wchCO5025, L"2.21");
			_tcscpy_s(pDboLimitOfASM->wchNO5025, L"4201");
			_tcscpy_s(pDboLimitOfASM->wchHC2540, L"231");
			_tcscpy_s(pDboLimitOfASM->wchCO2540, L"2.91");
			_tcscpy_s(pDboLimitOfASM->wchNO2540, L"3901");
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboLimitOfVMAS(const wchar_t wchSql[SQLMAX], PLIMITOFVMAS const pDboLimitOfVMAS)
{
	assert(NULL != wchSql);
	assert(NULL != pDboLimitOfVMAS);

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			if(!pRecordset->adoEOF)
			{
				_variant_t v;
				wstring s;

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AutoID", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfVMAS->wchAutoID, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfVMAS->wchAutoID, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"VehicleType", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfVMAS->wchVehicleType, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLimitOfVMAS->wchVehicleType, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"StartDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfVMAS->wchStartDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboLimitOfVMAS->wchStartDate, wch);
				}
				else
				{
					_tcscpy_s(pDboLimitOfVMAS->wchStartDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EndDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfVMAS->wchEndDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboLimitOfVMAS->wchEndDate, wch);
				}
				else
				{
					_tcscpy_s(pDboLimitOfVMAS->wchEndDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"StartRM", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfVMAS->wchStartRM, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfVMAS->wchStartRM, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EndRM", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfVMAS->wchEndRM, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfVMAS->wchEndRM, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HC", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfVMAS->wchHC, NH_INT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfVMAS->wchHC, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HC_EDP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfVMAS->wchHC_EDP, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfVMAS->wchHC_EDP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"CO", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfVMAS->wchCO, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfVMAS->wchCO, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"CO_EDP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfVMAS->wchCO_EDP, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfVMAS->wchCO_EDP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NOx", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfVMAS->wchNOx, NH_INT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfVMAS->wchNOx, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NOx_EDP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfVMAS->wchNOx_EDP, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfVMAS->wchNOx_EDP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HCNOx", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfVMAS->wchHCNOx, NH_INT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfVMAS->wchHCNOx, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HCNOx_EDP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfVMAS->wchHCNOx_EDP, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfVMAS->wchHCNOx_EDP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"SelectType", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfVMAS->wchSelectType, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfVMAS->wchSelectType, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Remark", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfVMAS->wchRemark, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLimitOfVMAS->wchRemark, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved1", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfVMAS->wchReserved1, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLimitOfVMAS->wchReserved1, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved2", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfVMAS->wchReserved2, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLimitOfVMAS->wchReserved2, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved3", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfVMAS->wchReserved3, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLimitOfVMAS->wchReserved3, L"");
				}

				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		if (0x01 != dwReturn)
		{
			// 数据库获取限值失败，限值都设置为最宽松限值
			// 限值尾数都相应加1，以便区分限值的来源
			_tcscpy_s(pDboLimitOfVMAS->wchHC, L"8.01");
			_tcscpy_s(pDboLimitOfVMAS->wchCO, L"51.81");
			_tcscpy_s(pDboLimitOfVMAS->wchNOx, L"7.21");
			_tcscpy_s(pDboLimitOfVMAS->wchHCNOx, L"8.11");
			_tcscpy_s(pDboLimitOfVMAS->wchSelectType, L"0");
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}


DWORD GetDboLimitOfLUGDOWN(const wchar_t wchSql[SQLMAX], PLIMITOFLUGDOWN const pDboLimitOfLUGDOWN)
{
	assert(NULL != wchSql);
	assert(NULL != pDboLimitOfLUGDOWN);

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			if(!pRecordset->adoEOF)
			{
				_variant_t v;
				wstring s;

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AutoID", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfLUGDOWN->wchAutoID, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfLUGDOWN->wchAutoID, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"VehicleType", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfLUGDOWN->wchVehicleType, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLimitOfLUGDOWN->wchVehicleType, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"StartDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfLUGDOWN->wchStartDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboLimitOfLUGDOWN->wchStartDate, wch);
				}
				else
				{
					_tcscpy_s(pDboLimitOfLUGDOWN->wchStartDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EndDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfLUGDOWN->wchEndDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboLimitOfLUGDOWN->wchEndDate, wch);
				}
				else
				{
					_tcscpy_s(pDboLimitOfLUGDOWN->wchEndDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"K", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfLUGDOWN->wchK, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfLUGDOWN->wchK, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"K_EDP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfLUGDOWN->wchK_EDP, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfLUGDOWN->wchK_EDP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"N", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfLUGDOWN->wchN, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfLUGDOWN->wchN, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"N_EDP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfLUGDOWN->wchN_EDP, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfLUGDOWN->wchN_EDP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Remark", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfLUGDOWN->wchRemark, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLimitOfLUGDOWN->wchRemark, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved1", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfLUGDOWN->wchReserved1, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLimitOfLUGDOWN->wchReserved1, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved2", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfLUGDOWN->wchReserved2, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLimitOfLUGDOWN->wchReserved2, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved3", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfLUGDOWN->wchReserved3, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLimitOfLUGDOWN->wchReserved3, L"");
				}

				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		if (0x01 != dwReturn)
		{
			// 数据库获取限值失败，限值都设置为最宽松限值
			// 限值尾数都相应加1，以便区分限值的来源
			_tcscpy_s(pDboLimitOfLUGDOWN->wchK, L"2.14");
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboLimitOfDIS(const wchar_t wchSql[SQLMAX], PLIMITOFDIS const pDboLimitOfDIS)
{
	assert(NULL != wchSql);
	assert(NULL != pDboLimitOfDIS);

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			if(!pRecordset->adoEOF)
			{
				_variant_t v;
				wstring s;

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AutoID", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfDIS->wchAutoID, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfDIS->wchAutoID, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"VehicleType", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfDIS->wchVehicleType, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLimitOfDIS->wchVehicleType, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"StartDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfDIS->wchStartDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboLimitOfDIS->wchStartDate, wch);
				}
				else
				{
					_tcscpy_s(pDboLimitOfDIS->wchStartDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EndDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfDIS->wchEndDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboLimitOfDIS->wchEndDate, wch);
				}
				else
				{
					_tcscpy_s(pDboLimitOfDIS->wchEndDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HCHigh", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfDIS->wchHCHigh, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfDIS->wchHCHigh, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HCHigh_EDP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfDIS->wchHCHigh_EDP, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfDIS->wchHCHigh_EDP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"COHigh", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfDIS->wchCOHigh, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfDIS->wchCOHigh, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"COHigh_EDP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfDIS->wchCOHigh_EDP, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfDIS->wchCOHigh_EDP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HCLow", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfDIS->wchHCLow, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfDIS->wchHCLow, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HCLow_EDP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfDIS->wchHCLow_EDP, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfDIS->wchHCLow_EDP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"COLow", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfDIS->wchCOLow, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfDIS->wchCOLow, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"COLow_EDP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfDIS->wchCOLow_EDP, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfDIS->wchCOLow_EDP, L"");
				}

				// 暂时写死Lambda上下限
				_tcscpy_s(pDboLimitOfDIS->wchLambdaLower, L"0.95");
				_tcscpy_s(pDboLimitOfDIS->wchLambdaUpper, L"1.05");

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Remark", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfDIS->wchRemark, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLimitOfDIS->wchRemark, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved1", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfDIS->wchReserved1, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLimitOfDIS->wchReserved1, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved2", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfDIS->wchReserved2, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLimitOfDIS->wchReserved2, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved3", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfDIS->wchReserved3, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLimitOfDIS->wchReserved3, L"");
				}

				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		if (0x01 != dwReturn)
		{
			// 数据库获取限值失败，限值都设置为最宽松限值
			// 限值尾数都相应加1，以便区分限值的来源
			_tcscpy_s(pDboLimitOfDIS->wchHCHigh, L"201");
			_tcscpy_s(pDboLimitOfDIS->wchCOHigh, L"0.71");
			_tcscpy_s(pDboLimitOfDIS->wchHCLow, L"251");
			_tcscpy_s(pDboLimitOfDIS->wchCOLow, L"1.51");
			_tcscpy_s(pDboLimitOfDIS->wchLambdaUpper, L"1.05");
			_tcscpy_s(pDboLimitOfDIS->wchLambdaLower, L"0.95");
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboLimitOfFSUNHT(const wchar_t wchSql[SQLMAX], PLIMITOFFSUNHT const pDboLimitOfFSUNHT)
{
	assert(NULL != wchSql);
	assert(NULL != pDboLimitOfFSUNHT);

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			if(!pRecordset->adoEOF)
			{
				_variant_t v;
				wstring s;

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AutoID", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfFSUNHT->wchAutoID, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfFSUNHT->wchAutoID, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"IsNaturalAspirate", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboLimitOfFSUNHT->wchIsNaturalAspirate, L"1");
					}
					else
					{
						wcscpy_s(pDboLimitOfFSUNHT->wchIsNaturalAspirate, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboLimitOfFSUNHT->wchIsNaturalAspirate, L"");
				}


				//v.ChangeType(VT_NULL);
				//GetFieldData(pRecordset, L"StartDate", v);
				//if(VT_NULL != v.vt)
				//{
				//	s = (wchar_t*)(_bstr_t)v;
				//	wcscpy_s(pDboLimitOfFSUNHT->wchStartDate, s.c_str());
				//}
				//else
				//{
				//	_tcscpy_s(pDboLimitOfFSUNHT->wchStartDate, L"");
				//}

				//v.ChangeType(VT_NULL);
				//GetFieldData(pRecordset, L"EndDate", v);
				//if(VT_NULL != v.vt)
				//{
				//	s = (wchar_t*)(_bstr_t)v;
				//	wcscpy_s(pDboLimitOfFSUNHT->wchEndDate, s.c_str());
				//}
				//else
				//{
				//	_tcscpy_s(pDboLimitOfFSUNHT->wchEndDate, L"");
				//}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"K", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfFSUNHT->wchK, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfFSUNHT->wchK, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"K_EDP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfFSUNHT->wchK_EDP, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfFSUNHT->wchK_EDP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Remark", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfFSUNHT->wchRemark, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLimitOfFSUNHT->wchRemark, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved1", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfFSUNHT->wchReserved1, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLimitOfFSUNHT->wchReserved1, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved2", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfFSUNHT->wchReserved2, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLimitOfFSUNHT->wchReserved2, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved3", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfFSUNHT->wchReserved3, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLimitOfFSUNHT->wchReserved3, L"");
				}

				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		if (0x01 != dwReturn)
		{
			// 数据库获取限值失败，限值都设置为最宽松限值
			// 限值尾数都相应加1，以便区分限值的来源
			_tcscpy_s(pDboLimitOfFSUNHT->wchK, L"3.01");
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}


DWORD GetDboLimitOfFSUNHTOfHeavyVehicle(const wchar_t wchSql[SQLMAX], PLIMITOFFSUNHTOFHEAVYVEHICLE const pDboLimitOfFSUNHTOfHeavyVehicle)
{
	assert(NULL != wchSql);
	assert(NULL != pDboLimitOfFSUNHTOfHeavyVehicle);

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			if(!pRecordset->adoEOF)
			{
				_variant_t v;
				wstring s;

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AutoID", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfFSUNHTOfHeavyVehicle->wchAutoID, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfFSUNHTOfHeavyVehicle->wchAutoID, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EngineManufacturer", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfFSUNHTOfHeavyVehicle->wchEngineManufacturer, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLimitOfFSUNHTOfHeavyVehicle->wchEngineManufacturer, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EngineModel", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfFSUNHTOfHeavyVehicle->wchEngineModel, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLimitOfFSUNHTOfHeavyVehicle->wchEngineModel, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"MaximumNetPower", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfFSUNHTOfHeavyVehicle->wchMaximumNetPower, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfFSUNHTOfHeavyVehicle->wchMaximumNetPower, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"TypeApprovalLimit", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfFSUNHTOfHeavyVehicle->wchTypeApprovalLimit, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfFSUNHTOfHeavyVehicle->wchTypeApprovalLimit, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"TypeApprovalLimit_EDP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfFSUNHTOfHeavyVehicle->wchTypeApprovalLimit_EDP, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfFSUNHTOfHeavyVehicle->wchTypeApprovalLimit_EDP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Limit", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfFSUNHTOfHeavyVehicle->wchLimit, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfFSUNHTOfHeavyVehicle->wchLimit, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Limit_EDP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfFSUNHTOfHeavyVehicle->wchLimit_EDP, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfFSUNHTOfHeavyVehicle->wchLimit_EDP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Remark", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfFSUNHTOfHeavyVehicle->wchRemark, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLimitOfFSUNHTOfHeavyVehicle->wchRemark, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved1", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfFSUNHTOfHeavyVehicle->wchReserved1, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLimitOfFSUNHTOfHeavyVehicle->wchReserved1, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved2", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfFSUNHTOfHeavyVehicle->wchReserved2, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLimitOfFSUNHTOfHeavyVehicle->wchReserved2, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved3", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfFSUNHTOfHeavyVehicle->wchReserved3, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLimitOfFSUNHTOfHeavyVehicle->wchReserved3, L"");
				}

				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		if (0x01 != dwReturn)
		{
			// 数据库获取限值失败，限值都设置为最宽松限值
			// 限值尾数都相应加1，以便区分限值的来源
			_tcscpy_s(pDboLimitOfFSUNHTOfHeavyVehicle->wchLimit, L"3.27");
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboLimitOfFSUNHTOfLightVehicle(const wchar_t wchSql[SQLMAX], PLIMITOFFSUNHTOFLIGHTVEHICLE const pDboLimitOfFSUNHTOfLightVehicle)
{
	assert(NULL != wchSql);
	assert(NULL != pDboLimitOfFSUNHTOfLightVehicle);

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			if(!pRecordset->adoEOF)
			{
				_variant_t v;
				wstring s;

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AutoID", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfFSUNHTOfLightVehicle->wchAutoID, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfFSUNHTOfLightVehicle->wchAutoID, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"VehicleManufacturer", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfFSUNHTOfLightVehicle->wchVehicleManufacturer, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLimitOfFSUNHTOfLightVehicle->wchVehicleManufacturer, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"VehicleModel", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfFSUNHTOfLightVehicle->wchVehicleModel, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLimitOfFSUNHTOfLightVehicle->wchVehicleModel, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"VehicleName", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfFSUNHTOfLightVehicle->wchVehicleName, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLimitOfFSUNHTOfLightVehicle->wchVehicleName, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EngineModel", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfFSUNHTOfLightVehicle->wchEngineModel, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLimitOfFSUNHTOfLightVehicle->wchEngineModel, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EngineManufacturer", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfFSUNHTOfLightVehicle->wchEngineManufacturer, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLimitOfFSUNHTOfLightVehicle->wchEngineManufacturer, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"TypeApprovalLimit", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfFSUNHTOfLightVehicle->wchTypeApprovalLimit, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfFSUNHTOfLightVehicle->wchTypeApprovalLimit, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"TypeApprovalLimit_EDP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfFSUNHTOfLightVehicle->wchTypeApprovalLimit_EDP, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfFSUNHTOfLightVehicle->wchTypeApprovalLimit_EDP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Limit", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfFSUNHTOfLightVehicle->wchLimit, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfFSUNHTOfLightVehicle->wchLimit, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Limit_EDP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfFSUNHTOfLightVehicle->wchLimit_EDP, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfFSUNHTOfLightVehicle->wchLimit_EDP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Remark", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfFSUNHTOfLightVehicle->wchRemark, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLimitOfFSUNHTOfLightVehicle->wchRemark, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved1", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfFSUNHTOfLightVehicle->wchReserved1, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLimitOfFSUNHTOfLightVehicle->wchReserved1, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved2", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfFSUNHTOfLightVehicle->wchReserved2, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLimitOfFSUNHTOfLightVehicle->wchReserved2, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved3", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfFSUNHTOfLightVehicle->wchReserved3, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLimitOfFSUNHTOfLightVehicle->wchReserved3, L"");
				}

				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		if (0x01 != dwReturn)
		{
			// 数据库获取限值失败，限值都设置为最宽松限值
			// 限值尾数都相应加1，以便区分限值的来源
			_tcscpy_s(pDboLimitOfFSUNHTOfLightVehicle->wchLimit, L"2.81");
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboLimitOfFSUYD(const wchar_t wchSql[SQLMAX], PLIMITOFFSUYD const pDboLimitOfFSUYD)
{
	assert(NULL != wchSql);
	assert(NULL != pDboLimitOfFSUYD);

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			if(!pRecordset->adoEOF)
			{
				_variant_t v;
				wstring s;

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AutoID", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfFSUYD->wchAutoID, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfFSUYD->wchAutoID, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"StartDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfFSUYD->wchStartDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboLimitOfFSUYD->wchStartDate, wch);
				}
				else
				{
					_tcscpy_s(pDboLimitOfFSUYD->wchStartDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EndDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfFSUYD->wchEndDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboLimitOfFSUYD->wchEndDate, wch);
				}
				else
				{
					_tcscpy_s(pDboLimitOfFSUYD->wchEndDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Smoke", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfFSUYD->wchSmoke, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfFSUYD->wchSmoke, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Smoke_EDP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLimitOfFSUYD->wchSmoke_EDP, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboLimitOfFSUYD->wchSmoke_EDP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Remark", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfFSUYD->wchRemark, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLimitOfFSUYD->wchRemark, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved1", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfFSUYD->wchReserved1, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLimitOfFSUYD->wchReserved1, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved2", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfFSUYD->wchReserved2, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLimitOfFSUYD->wchReserved2, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved3", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLimitOfFSUYD->wchReserved3, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLimitOfFSUYD->wchReserved3, L"");
				}

				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		if (0x01 != dwReturn)
		{
			// 数据库获取限值失败，限值都设置为最宽松限值
			// 限值尾数都相应加1，以便区分限值的来源
			_tcscpy_s(pDboLimitOfFSUYD->wchSmoke, L"5.01");
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboLineInfo(const wchar_t wchSql[SQLMAX], PLINEINFO const pDboLineInfo)
{
	assert(NULL != wchSql);
	assert(NULL != pDboLineInfo);

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			if(!pRecordset->adoEOF)
			{
				_variant_t v;
				wstring s;

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AutoID", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLineInfo->wchAutoID, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchAutoID, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LineNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchLineNumber, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchLineNumber, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LineModel", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchLineModel, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchLineModel, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LineName", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchLineName, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchLineName, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LineManufacturer", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchLineManufacturer, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchLineManufacturer, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LineLicenseSn", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchLineLicenseSn, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchLineLicenseSn, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LineLicenseStartDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchLineLicenseStartDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboLineInfo->wchLineLicenseStartDate, wch);
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchLineLicenseStartDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LineLicenseEndDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchLineLicenseEndDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboLineInfo->wchLineLicenseEndDate, wch);
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchLineLicenseEndDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LineIsLocked", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboLineInfo->wchLineIsLocked, L"1");
					}
					else
					{
						wcscpy_s(pDboLineInfo->wchLineIsLocked, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchLineIsLocked, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LineState", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLineInfo->wchLineState, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchLineState,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LineStateChangeTime", v);
				if(VT_NULL != v.vt)
				{
					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboLineInfo->wchLineStateChangeTime, wch);
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchLineStateChangeTime, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LineRegistrationInfo", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboLineInfo->wchLineRegistrationInfo, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchLineRegistrationInfo, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HasDynamometer", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboLineInfo->wchHasDynamometer, L"1");
					}
					else
					{
						wcscpy_s(pDboLineInfo->wchHasDynamometer, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchHasDynamometer, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"DynamometerNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchDynamometerNumber, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchDynamometerNumber, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"DynamometerModel", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchDynamometerModel, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchDynamometerModel, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"DynamometerManufacturer", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchDynamometerManufacturer, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchDynamometerManufacturer, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"DynamometerCoastDownDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchDynamometerCoastDownDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboLineInfo->wchDynamometerCoastDownDate, wch);
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchDynamometerCoastDownDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"DynamometerPLHPDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchDynamometerPLHPDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboLineInfo->wchDynamometerPLHPDate, wch);
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchDynamometerPLHPDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"DynamometerForceCalibrationDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchDynamometerForceCalibrationDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboLineInfo->wchDynamometerForceCalibrationDate, wch);
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchDynamometerForceCalibrationDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"DynamometerForceCheckDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchDynamometerForceCheckDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboLineInfo->wchDynamometerForceCheckDate, wch);
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchDynamometerForceCheckDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"DynamometerAuthenticationDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchDynamometerAuthenticationDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboLineInfo->wchDynamometerAuthenticationDate, wch);
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchDynamometerAuthenticationDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HasAnalyzer", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboLineInfo->wchHasAnalyzer, L"1");
					}
					else
					{
						wcscpy_s(pDboLineInfo->wchHasAnalyzer, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchHasAnalyzer, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AnalyzerNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchAnalyzerNumber, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchAnalyzerNumber, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AnalyzerModel", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchAnalyzerModel, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchAnalyzerModel, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AnalyzerManufacturer", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchAnalyzerManufacturer, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchAnalyzerManufacturer, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AnalyzerChannelCalibrationDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchAnalyzerChannelCalibrationDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboLineInfo->wchAnalyzerChannelCalibrationDate, wch);
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchAnalyzerChannelCalibrationDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AnalyzerChannelCheckDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchAnalyzerChannelCheckDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboLineInfo->wchAnalyzerChannelCheckDate, wch);
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchAnalyzerChannelCheckDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AnalyzerEnvParamCalibrationDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchAnalyzerEnvParamCalibrationDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboLineInfo->wchAnalyzerEnvParamCalibrationDate, wch);
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchAnalyzerEnvParamCalibrationDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AnalyzerAuthenticationDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchAnalyzerAuthenticationDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboLineInfo->wchAnalyzerAuthenticationDate, wch);
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchAnalyzerAuthenticationDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HasFlowmeter", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboLineInfo->wchHasFlowmeter, L"1");
					}
					else
					{
						wcscpy_s(pDboLineInfo->wchHasFlowmeter, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchHasFlowmeter, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FlowmeterNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchFlowmeterNumber, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchFlowmeterNumber, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FlowmeterModel", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchFlowmeterModel, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchFlowmeterModel, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FlowmeterManufacturer", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchFlowmeterManufacturer, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchFlowmeterManufacturer, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FlowmeterFluxCalibrationDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchFlowmeterFluxCalibrationDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboLineInfo->wchFlowmeterFluxCalibrationDate, wch);
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchFlowmeterFluxCalibrationDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FlowmeterFluxCheckDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchFlowmeterFluxCheckDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboLineInfo->wchFlowmeterFluxCheckDate, wch);
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchFlowmeterFluxCheckDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FlowmeterDilO2CalibrationDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchFlowmeterDilO2CalibrationDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboLineInfo->wchFlowmeterDilO2CalibrationDate, wch);
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchFlowmeterDilO2CalibrationDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FlowmeterPressureCalibrationDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchFlowmeterPressureCalibrationDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboLineInfo->wchFlowmeterPressureCalibrationDate, wch);
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchFlowmeterPressureCalibrationDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FlowmeterAuthenticationDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchFlowmeterAuthenticationDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboLineInfo->wchFlowmeterAuthenticationDate, wch);
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchFlowmeterAuthenticationDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HasOpacimeter", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboLineInfo->wchHasOpacimeter, L"1");
					}
					else
					{
						wcscpy_s(pDboLineInfo->wchHasOpacimeter, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchHasOpacimeter, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OpacimeterNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchOpacimeterNumber, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchOpacimeterNumber, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OpacimeterModel", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchOpacimeterModel, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchOpacimeterModel, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OpacimeterManufacturer", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchOpacimeterManufacturer, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchOpacimeterManufacturer, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OpacimeterChannelCalibrationDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchOpacimeterChannelCalibrationDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboLineInfo->wchOpacimeterChannelCalibrationDate, wch);
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchOpacimeterChannelCalibrationDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OpacimeterChannelCheckDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchOpacimeterChannelCheckDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboLineInfo->wchOpacimeterChannelCheckDate, wch);
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchOpacimeterChannelCheckDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OpacimeterEnvParamCalibrationDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchOpacimeterEnvParamCalibrationDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboLineInfo->wchOpacimeterEnvParamCalibrationDate, wch);
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchOpacimeterEnvParamCalibrationDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OpacimeterAuthenticationDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchOpacimeterAuthenticationDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboLineInfo->wchOpacimeterAuthenticationDate, wch);
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchOpacimeterAuthenticationDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HasSmokemeter", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboLineInfo->wchHasSmokemeter, L"1");
					}
					else
					{
						wcscpy_s(pDboLineInfo->wchHasSmokemeter, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchHasSmokemeter, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"SmokemeterNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchSmokemeterNumber, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchSmokemeterNumber, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"SmokemeterModel", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchSmokemeterModel, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchSmokemeterModel, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"SmokemeterManufacturer", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchSmokemeterManufacturer, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchSmokemeterManufacturer, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"SmokemeterCalibrationDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchSmokemeterCalibrationDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboLineInfo->wchSmokemeterCalibrationDate, wch);
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchSmokemeterCalibrationDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"SmokemeterCheckDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchSmokemeterCheckDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboLineInfo->wchSmokemeterCheckDate, wch);
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchSmokemeterCheckDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"SmokemeterAuthenticationDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchSmokemeterAuthenticationDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboLineInfo->wchSmokemeterAuthenticationDate, wch);
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchSmokemeterAuthenticationDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HasIndependentEnvParamMeasurer", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboLineInfo->wchHasIndependentEnvParamMeasurer, L"1");
					}
					else
					{
						wcscpy_s(pDboLineInfo->wchHasIndependentEnvParamMeasurer, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchHasIndependentEnvParamMeasurer, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EnvParamMeasurerNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchEnvParamMeasurerNumber, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchEnvParamMeasurerNumber, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EnvParamMeasurerModel", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchEnvParamMeasurerModel, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchEnvParamMeasurerModel, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EnvParamMeasurerManufacturer", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchEnvParamMeasurerManufacturer, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchEnvParamMeasurerManufacturer, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EnvParamMeasurerCalibrationDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchEnvParamMeasurerCalibrationDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboLineInfo->wchEnvParamMeasurerCalibrationDate, wch);
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchEnvParamMeasurerCalibrationDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EnvParamMeasurerCheckDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchEnvParamMeasurerCheckDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboLineInfo->wchEnvParamMeasurerCheckDate, wch);
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchEnvParamMeasurerCheckDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EnvParamMeasurerAuthenticationDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchEnvParamMeasurerAuthenticationDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboLineInfo->wchEnvParamMeasurerAuthenticationDate, wch);
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchEnvParamMeasurerAuthenticationDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HasIndependentTachometer", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboLineInfo->wchHasIndependentTachometer, L"1");
					}
					else
					{
						wcscpy_s(pDboLineInfo->wchHasIndependentTachometer, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchHasIndependentTachometer, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"TachometerNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchTachometerNumber, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchTachometerNumber, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"TachometerModel", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchTachometerModel, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchTachometerModel, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"TachometerManufacturer", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchTachometerManufacturer, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchTachometerManufacturer, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"TachometerCalibrationDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchTachometerCalibrationDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboLineInfo->wchTachometerCalibrationDate, wch);
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchTachometerCalibrationDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"TachometerCheckDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchTachometerCheckDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboLineInfo->wchTachometerCheckDate, wch);
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchTachometerCheckDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"TachometerAuthenticationDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchTachometerAuthenticationDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboLineInfo->wchTachometerAuthenticationDate, wch);
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchTachometerAuthenticationDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HasOBDAdapter", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboLineInfo->wchHasOBDAdapter, L"1");
					}
					else
					{
						wcscpy_s(pDboLineInfo->wchHasOBDAdapter, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchHasOBDAdapter, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OBDAdapterNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchOBDAdapterNumber, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchOBDAdapterNumber, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OBDAdapterModel", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchOBDAdapterModel, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchOBDAdapterModel, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OBDAdapterManufacturer", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchOBDAdapterManufacturer, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchOBDAdapterManufacturer, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OBDAdapterCalibrationDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchOBDAdapterCalibrationDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboLineInfo->wchOBDAdapterCalibrationDate, wch);
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchOBDAdapterCalibrationDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OBDAdapterCheckDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchOBDAdapterCheckDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboLineInfo->wchOBDAdapterCheckDate, wch);
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchOBDAdapterCheckDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OBDAdapterAuthenticationDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchOBDAdapterAuthenticationDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboLineInfo->wchOBDAdapterAuthenticationDate, wch);
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchOBDAdapterAuthenticationDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HasNOxAnalyzer", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboLineInfo->wchHasNOxAnalyzer, L"1");
					}
					else
					{
						wcscpy_s(pDboLineInfo->wchHasNOxAnalyzer, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchHasNOxAnalyzer, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NOxAnalyzerNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchNOxAnalyzerNumber, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchNOxAnalyzerNumber, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NOxAnalyzerModel", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchNOxAnalyzerModel, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchNOxAnalyzerModel, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NOxAnalyzerManufacturer", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchNOxAnalyzerManufacturer, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchNOxAnalyzerManufacturer, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NOxAnalyzerChannelCalibrationDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchNOxAnalyzerChannelCalibrationDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboLineInfo->wchNOxAnalyzerChannelCalibrationDate, wch);
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchNOxAnalyzerChannelCalibrationDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NOxAnalyzerChannelCheckDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchNOxAnalyzerChannelCheckDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboLineInfo->wchNOxAnalyzerChannelCheckDate, wch);
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchNOxAnalyzerChannelCheckDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NOxAnalyzerEnvParamCalibrationDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchNOxAnalyzerEnvParamCalibrationDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboLineInfo->wchNOxAnalyzerEnvParamCalibrationDate, wch);
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchNOxAnalyzerEnvParamCalibrationDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NOxAnalyzerAuthenticationDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchNOxAnalyzerAuthenticationDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboLineInfo->wchNOxAnalyzerAuthenticationDate, wch);
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchNOxAnalyzerAuthenticationDate, L"");
				}

				//v.ChangeType(VT_NULL);
				//GetFieldData(pRecordset, L"TerminationSign", v);
				//if (VT_NULL != v.vt)
				//{
				//	swprintf_s(pDboLineInfo->wchTerminationSign, L"%hd", (short)v);
				//}
				//else
				//{
				//	_tcscpy_s(pDboLineInfo->wchTerminationSign, L"");
				//}

				//v.ChangeType(VT_NULL);
				//GetFieldData(pRecordset, L"CertificateAuthentication", v);
				//if (VT_NULL != v.vt)
				//{
				//	s = (wchar_t*)(_bstr_t)v;
				//	wcscpy_s(pDboLineInfo->wchCertificateAuthentication, s.c_str());
				//}
				//else
				//{
				//	_tcscpy_s(pDboLineInfo->wchCertificateAuthentication, L"");
				//}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Remark", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchRemark, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchRemark, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved1", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchReserved1, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchReserved1, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved2", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchReserved2, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchReserved2, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved3", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboLineInfo->wchReserved3, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboLineInfo->wchReserved3, L"");
				}

				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD SetDboLineInfo(const LINEINFO &dboLineInfo)
{
	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"select * from LineInfo where LineNumber = '%s'", dboLineInfo.wchLineNumber);

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			// 有，update
			// 无，insert
			if(pRecordset->adoEOF)
			{
				// 添加新记录
				pRecordset->AddNew();
			}

			wstring str;
			_variant_t v;

			//检测线编号
			str = dboLineInfo.wchLineNumber;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"LineNumber", v);

			// 检测线型号
			str = dboLineInfo.wchLineModel;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"LineModel", v);

			// 检测线名称
			str = dboLineInfo.wchLineName;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"LineName", v);

			// 检测线生产厂家
			str = dboLineInfo.wchLineManufacturer;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"LineManufacturer", v);

			// 检测线许可证编号
			str = dboLineInfo.wchLineLicenseSn;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"LineLicenseSn", v);

			// 检测线许可证开始日期
			str = dboLineInfo.wchLineLicenseStartDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"LineLicenseStartDate", v);

			// 检测线许可证结束日期
			str = dboLineInfo.wchLineLicenseEndDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"LineLicenseEndDate", v);

			// 检测线许是否被锁止
			str = dboLineInfo.wchLineIsLocked;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"LineIsLocked", v);

			// 检测线许注册信息
			str = dboLineInfo.wchLineRegistrationInfo;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"LineRegistrationInfo", v);

			// 是否有测功机
			str = dboLineInfo.wchHasDynamometer;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"HasDynamometer", v);

			// 测功机编号
			str = dboLineInfo.wchDynamometerNumber;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"DynamometerNumber", v);

			// 测功机型号
			str = dboLineInfo.wchDynamometerModel;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"DynamometerModel", v);

			// 测功机生产厂家
			str = dboLineInfo.wchDynamometerManufacturer;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"DynamometerManufacturer", v);

			// 测功机定载荷滑行日期
			str = dboLineInfo.wchDynamometerCoastDownDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"DynamometerCoastDownDate", v);

			// 测功机寄生功率滑行日期
			str = dboLineInfo.wchDynamometerPLHPDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"DynamometerPLHPDate", v);

			// 测功机力校准日期
			str = dboLineInfo.wchDynamometerForceCalibrationDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"DynamometerForceCalibrationDate", v);

			// 测功机力检查日期
			str = dboLineInfo.wchDynamometerForceCheckDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"DynamometerForceCheckDate", v);

			// 测功机力认证日期
			str = dboLineInfo.wchDynamometerAuthenticationDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"DynamometerAuthenticationDate", v);

			// 是否有分析仪
			str = dboLineInfo.wchHasAnalyzer;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"HasAnalyzer", v);

			// 分析仪编号
			str = dboLineInfo.wchAnalyzerNumber;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"AnalyzerNumber", v);

			// 分析仪型号
			str = dboLineInfo.wchAnalyzerModel;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"AnalyzerModel", v);

			// 分析仪生产厂家
			str = dboLineInfo.wchAnalyzerManufacturer;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"AnalyzerManufacturer", v);

			// 分析仪通道校准日期
			str = dboLineInfo.wchAnalyzerChannelCalibrationDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"AnalyzerChannelCalibrationDate", v);

			// 分析仪通道检查日期
			str = dboLineInfo.wchAnalyzerChannelCheckDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"AnalyzerChannelCheckDate", v);

			// 分析仪环境参数校准日期
			str = dboLineInfo.wchAnalyzerEnvParamCalibrationDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"AnalyzerEnvParamCalibrationDate", v);

			// 分析仪认证日期
			str = dboLineInfo.wchAnalyzerAuthenticationDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"AnalyzerAuthenticationDate", v);

			// 是否有流量计
			str = dboLineInfo.wchHasFlowmeter;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"HasFlowmeter", v);

			// 流量计编号
			str = dboLineInfo.wchFlowmeterNumber;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"FlowmeterNumber", v);

			// 流量计型号
			str = dboLineInfo.wchFlowmeterModel;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"FlowmeterModel", v);

			// 流量计生产厂家
			str = dboLineInfo.wchFlowmeterManufacturer;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"FlowmeterManufacturer", v);

			// 流量计流量校准日期
			str = dboLineInfo.wchFlowmeterFluxCalibrationDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"FlowmeterFluxCalibrationDate", v);

			// 流量计流量检查日期
			str = dboLineInfo.wchFlowmeterFluxCheckDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"FlowmeterFluxCheckDate", v);

			// 流量计稀释氧传感器校准日期
			str = dboLineInfo.wchFlowmeterDilO2CalibrationDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"FlowmeterDilO2CalibrationDate", v);

			// 流量计压力传感器校准日期
			str = dboLineInfo.wchFlowmeterPressureCalibrationDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"FlowmeterPressureCalibrationDate", v);

			// 流量计认证日期
			str = dboLineInfo.wchFlowmeterAuthenticationDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"FlowmeterAuthenticationDate", v);

			// 是否有不透光度计
			str = dboLineInfo.wchHasOpacimeter;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"HasOpacimeter", v);

			// 不透光度计编号
			str = dboLineInfo.wchOpacimeterNumber;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"OpacimeterNumber", v);

			// 不透光度计型号
			str = dboLineInfo.wchOpacimeterModel;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"OpacimeterModel", v);

			// 不透光度计生产厂家
			str = dboLineInfo.wchOpacimeterManufacturer;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"OpacimeterManufacturer", v);

			// 不透光度计通道校准日期
			str = dboLineInfo.wchOpacimeterChannelCalibrationDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"OpacimeterChannelCalibrationDate", v);

			// 不透光度计通道检查日期
			str = dboLineInfo.wchOpacimeterChannelCheckDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"OpacimeterChannelCheckDate", v);

			// 不透光度计环境参数校准日期
			str = dboLineInfo.wchOpacimeterEnvParamCalibrationDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"OpacimeterEnvParamCalibrationDate", v);

			// 不透光度计认证日期
			str = dboLineInfo.wchOpacimeterAuthenticationDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"OpacimeterAuthenticationDate", v);

			// 是否有烟度计
			str = dboLineInfo.wchHasSmokemeter;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"HasSmokemeter", v);

			// 烟度计编号
			str = dboLineInfo.wchSmokemeterNumber;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"SmokemeterNumber", v);

			// 烟度计型号
			str = dboLineInfo.wchSmokemeterModel;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"SmokemeterModel", v);

			// 烟度计生产厂家
			str = dboLineInfo.wchSmokemeterManufacturer;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"SmokemeterManufacturer", v);

			// 烟度计校准日期
			str = dboLineInfo.wchSmokemeterCalibrationDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"SmokemeterCalibrationDate", v);

			// 烟度计检查日期
			str = dboLineInfo.wchSmokemeterCheckDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"SmokemeterCheckDate", v);

			// 烟度计认证日期
			str = dboLineInfo.wchSmokemeterAuthenticationDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"SmokemeterAuthenticationDate", v);

			// 是否有独立环境参数测量仪
			str = dboLineInfo.wchHasIndependentEnvParamMeasurer;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"HasIndependentEnvParamMeasurer", v);

			// 环境参数测量仪编号
			str = dboLineInfo.wchEnvParamMeasurerNumber;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"EnvParamMeasurerNumber", v);

			// 环境参数测量仪型号
			str = dboLineInfo.wchEnvParamMeasurerModel;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"EnvParamMeasurerModel", v);

			// 环境参数测量仪生产厂家
			str = dboLineInfo.wchEnvParamMeasurerManufacturer;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"EnvParamMeasurerManufacturer", v);

			// 环境参数测量仪校准日期
			str = dboLineInfo.wchEnvParamMeasurerCalibrationDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"EnvParamMeasurerCalibrationDate", v);

			// 环境参数测量仪检查日期
			str = dboLineInfo.wchEnvParamMeasurerCheckDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"EnvParamMeasurerCheckDate", v);

			// 环境参数测量仪认证日期
			str = dboLineInfo.wchEnvParamMeasurerAuthenticationDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"EnvParamMeasurerAuthenticationDate", v);

			// 是否有独立转速计
			str = dboLineInfo.wchHasIndependentTachometer;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"HasIndependentTachometer", v);

			// 转速计编号
			str = dboLineInfo.wchTachometerNumber;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"TachometerNumber", v);

			// 转速计型号
			str = dboLineInfo.wchTachometerModel;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"TachometerModel", v);

			// 转速计生产厂家
			str = dboLineInfo.wchTachometerManufacturer;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"TachometerManufacturer", v);

			// 转速计校准日期
			str = dboLineInfo.wchTachometerCalibrationDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"TachometerCalibrationDate", v);

			// 转速计检查日期
			str = dboLineInfo.wchTachometerCheckDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"TachometerCheckDate", v);

			// 转速计认证日期
			str = dboLineInfo.wchTachometerAuthenticationDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"TachometerAuthenticationDate", v);

			// 是否有OBD
			str = dboLineInfo.wchHasOBDAdapter;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"HasOBDAdapter", v);

			// OBDAdapter编号
			str = dboLineInfo.wchOBDAdapterNumber;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"OBDAdapterNumber", v);

			// OBDAdapter型号
			str = dboLineInfo.wchOBDAdapterModel;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"OBDAdapterModel", v);

			// OBDAdapter生产厂家
			str = dboLineInfo.wchOBDAdapterManufacturer;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"OBDAdapterManufacturer", v);

			// OBDAdapter校准日期
			str = dboLineInfo.wchOBDAdapterCalibrationDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"OBDAdapterCalibrationDate", v);

			// OBDAdapter检查日期
			str = dboLineInfo.wchOBDAdapterCheckDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"OBDAdapterCheckDate", v);

			// OBDAdapter认证日期
			str = dboLineInfo.wchOBDAdapterAuthenticationDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"OBDAdapterAuthenticationDate", v);
			
			// 是否有氮氧分析仪
			str = dboLineInfo.wchHasNOxAnalyzer;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"HasNOxAnalyzer", v);

			// 氮氧分析仪编号
			str = dboLineInfo.wchNOxAnalyzerNumber;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"NOxAnalyzerNumber", v);

			// 氮氧分析仪型号
			str = dboLineInfo.wchNOxAnalyzerModel;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"NOxAnalyzerModel", v);

			// 氮氧分析仪生产厂家
			str = dboLineInfo.wchNOxAnalyzerManufacturer;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"NOxAnalyzerManufacturer", v);

			// 氮氧分析仪通道校准日期
			str = dboLineInfo.wchNOxAnalyzerChannelCalibrationDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"NOxAnalyzerChannelCalibrationDate", v);

			// 氮氧分析仪通道检查日期
			str = dboLineInfo.wchNOxAnalyzerChannelCheckDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"NOxAnalyzerChannelCheckDate", v);

			// 氮氧分析仪环境参数校准日期
			str = dboLineInfo.wchNOxAnalyzerEnvParamCalibrationDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"NOxAnalyzerEnvParamCalibrationDate", v);

			// 氮氧分析仪认证日期
			str = dboLineInfo.wchNOxAnalyzerAuthenticationDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"NOxAnalyzerAuthenticationDate", v);
			
			//// 结束标志
			//str = dboLineInfo.wchTerminationSign;
			//if (0 ==str.compare(L""))
			//{
			//	v.ChangeType(VT_NULL);
			//}
			//else
			//{
			//	v = static_cast<int>(_wtoi(str.c_str()));
			//}
			//PutFieldData(pRecordset, L"TerminationSign", v);

			//// 证书认证
			//str = dboLineInfo.wchCertificateAuthentication;
			//if (0 == str.compare(L""))
			//{
			//	v.ChangeType(VT_NULL);
			//}
			//else
			//{
			//	v = (_variant_t)str.c_str();
			//}
			//PutFieldData(pRecordset, L"CertificateAuthentication", v);

			// 备注
			str = dboLineInfo.wchRemark;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Remark", v);

			// 保留字段,以后备用
			str = dboLineInfo.wchReserved1;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved1", v);

			// 保留字段,以后备用
			str = dboLineInfo.wchReserved2;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved2", v);

			// 保留字段,以后备用
			str = dboLineInfo.wchReserved3;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved3", v);

			pRecordset->Update();  // 保存到库中

			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD SetDboLineInfoLineState(const wchar_t wchLineNumber[50], const short siLineState, const SYSTEMTIME *pstChangeTime)
{
	assert(wchLineNumber != NULL);

	//返回值
	DWORD dwReturn(0x00);
	wstring str;
	_variant_t v;
	v.ChangeType(VT_NULL);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"select LineState,LineStateChangeTime from LineInfo where LineNumber = '%s'", wchLineNumber);

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if(!pRecordset->adoEOF)
			{
				str = siLineState;
				if (0 == str.compare(L""))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = (_variant_t)siLineState;
				}
				PutFieldData(pRecordset, L"LineState", v);

				if (NULL != pstChangeTime)
				{
					wchar_t wchChangeTime[50];
					wsprintf(wchChangeTime,L"%d-%d-%d %d:%d:%d",pstChangeTime->wYear,pstChangeTime->wMonth,pstChangeTime->wDay,pstChangeTime->wHour,pstChangeTime->wMinute,pstChangeTime->wSecond);
					str = wchChangeTime;
					v = (_variant_t)str.c_str();
				}
				else
				{
					v.ChangeType(VT_NULL);
				}
				PutFieldData(pRecordset, L"LineStateChangeTime", v);
			}
			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboStationInfo(const wchar_t wchSql[SQLMAX], PSTATIONINFO const pDboStationInfo)
{
	assert(NULL != wchSql);
	assert(NULL != pDboStationInfo);

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			if(!pRecordset->adoEOF)
			{
				_variant_t v;
				wstring s;

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AutoID", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboStationInfo->wchAutoID, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboStationInfo->wchAutoID, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"StationNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboStationInfo->wchStationNumber, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboStationInfo->wchStationNumber, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"StationFullName", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboStationInfo->wchStationFullName, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboStationInfo->wchStationFullName, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"StationShortName", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboStationInfo->wchStationShortName, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboStationInfo->wchStationShortName, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"StationLicenseSn", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboStationInfo->wchStationLicenseSn, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboStationInfo->wchStationLicenseSn, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"StationLicenseStartDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboStationInfo->wchStationLicenseStartDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d",dt.wYear, dt.wMonth, dt.wDay);
					wcscpy_s(pDboStationInfo->wchStationLicenseStartDate, wch);
				}
				else
				{
					_tcscpy_s(pDboStationInfo->wchStationLicenseStartDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"StationLicenseEndDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboStationInfo->wchStationLicenseEndDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d",dt.wYear, dt.wMonth, dt.wDay);
					wcscpy_s(pDboStationInfo->wchStationLicenseEndDate, wch);
				}
				else
				{
					_tcscpy_s(pDboStationInfo->wchStationLicenseEndDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"StationIsLocked", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboStationInfo->wchStationIsLocked, L"1");
					}
					else
					{
						wcscpy_s(pDboStationInfo->wchStationIsLocked, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboStationInfo->wchStationIsLocked, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"StationRegistrationInfo", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboStationInfo->wchStationRegistrationInfo, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboStationInfo->wchStationRegistrationInfo, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"StationPhone", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboStationInfo->wchStationPhone, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboStationInfo->wchStationPhone, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"StationFax", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboStationInfo->wchStationFax, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboStationInfo->wchStationFax, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PostCode", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboStationInfo->wchPostCode, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboStationInfo->wchPostCode, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Province", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboStationInfo->wchProvince, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboStationInfo->wchProvince, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"City", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboStationInfo->wchCity, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboStationInfo->wchCity, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"District", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboStationInfo->wchDistrict, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboStationInfo->wchDistrict, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"DetailedAddress", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboStationInfo->wchDetailedAddress, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboStationInfo->wchDetailedAddress, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Remark", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboStationInfo->wchRemark, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboStationInfo->wchRemark, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved1", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboStationInfo->wchReserved1, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboStationInfo->wchReserved1, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved2", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboStationInfo->wchReserved2, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboStationInfo->wchReserved2, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved3", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboStationInfo->wchReserved3, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboStationInfo->wchReserved3, L"");
				}

				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD SetDboStationInfo(const STATIONINFO& dboStationInfo)
{
	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"select * from StationInfo");
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if(pRecordset->adoEOF)
			{
				pRecordset->AddNew();    //添加新记录
			}

			wstring str;
			_variant_t v;

			str = dboStationInfo.wchStationNumber;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"StationNumber", v);

			str = dboStationInfo.wchStationFullName;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"StationFullName", v);

			str = dboStationInfo.wchStationShortName;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"StationShortName", v);

			str = dboStationInfo.wchStationLicenseSn;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"StationLicenseSn", v);

			str = dboStationInfo.wchStationLicenseStartDate;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"StationLicenseStartDate", v);

			str = dboStationInfo.wchStationLicenseEndDate;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"StationLicenseEndDate", v);

			str = dboStationInfo.wchStationIsLocked;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"StationIsLocked", v);

			str = dboStationInfo.wchStationRegistrationInfo;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"StationRegistrationInfo", v);

			str = dboStationInfo.wchStationPhone;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"StationPhone", v);

			str = dboStationInfo.wchStationFax;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"StationFax", v);

			str = dboStationInfo.wchPostCode;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"PostCode", v);

			str = dboStationInfo.wchProvince;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Province", v);

			str = dboStationInfo.wchCity;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"City", v);

			str = dboStationInfo.wchDistrict;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"District", v);

			str = dboStationInfo.wchDetailedAddress;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"DetailedAddress", v);

			str = dboStationInfo.wchRemark;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Remark", v);

			str = dboStationInfo.wchReserved1;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved1", v);

			str = dboStationInfo.wchReserved2;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved2", v);

			str = dboStationInfo.wchReserved3;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved3", v);

			pRecordset->Update();  // 保存到库中

			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboTestLog(const wchar_t wchSql[SQLMAX], PTESTLOG const pDboTestLog)
{
	assert(NULL != wchSql);
	assert(NULL != pDboTestLog);

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			if(!pRecordset->adoEOF)
			{
				_variant_t v;
				wstring s;

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AutoID", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestLog->wchAutoID, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchAutoID,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"RunningNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchRunningNumber, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchRunningNumber, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"ReportNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchReportNumber, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchReportNumber, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"RunningNumberEP", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchRunningNumberEP, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchRunningNumberEP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"ReportNumberEP", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchReportNumberEP, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchReportNumberEP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"ItemApp", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestLog->wchItemApp, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchItemApp,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"ItemOBD", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestLog->wchItemOBD, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchItemOBD,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"ItemEmi", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestLog->wchItemEmi, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchItemEmi,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"BillDate", v);
				if(VT_NULL != v.vt)
				{
					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboTestLog->wchBillDate, wch);

					//s = (wchar_t*)(_bstr_t)v;
					//wcscpy_s(pDboTestLog->wchBillDate, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchBillDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Biller", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchBiller, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchBiller, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Shroff", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchShroff, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchShroff, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"ChargeState", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestLog->wchChargeState, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchChargeState,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"InitialMoney", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestLog->wchInitialMoney, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchInitialMoney, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"ChangedMoney", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestLog->wchChangedMoney, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchChangedMoney, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"ReceivableMoney", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestLog->wchReceivableMoney, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchReceivableMoney, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"ActualMoney", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestLog->wchActualMoney, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchActualMoney, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"TestLocation", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchTestLocation, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchTestLocation, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"TestState", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestLog->wchTestState, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchTestState,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"IsTestFinished", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboTestLog->wchIsTestFinished, L"1");
					}
					else
					{
						wcscpy_s(pDboTestLog->wchIsTestFinished, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchIsTestFinished, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NumberOfTestPeriodASM", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestLog->wchNumberOfTestPeriodASM, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchNumberOfTestPeriodASM, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NumberOfTestPeriodVMAS", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestLog->wchNumberOfTestPeriodVMAS, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchNumberOfTestPeriodVMAS, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NumberOfTestPeriodLUGDOWN", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestLog->wchNumberOfTestPeriodLUGDOWN, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchNumberOfTestPeriodLUGDOWN, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NumberOfTestPeriodDIS", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestLog->wchNumberOfTestPeriodDIS, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchNumberOfTestPeriodDIS, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NumberOfTestPeriodFSUNHT", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestLog->wchNumberOfTestPeriodFSUNHT, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchNumberOfTestPeriodFSUNHT, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NumberOfTestPeriodFSUYD", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestLog->wchNumberOfTestPeriodFSUYD, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchNumberOfTestPeriodFSUYD, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NumberOfTestPeriodAVFSU", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestLog->wchNumberOfTestPeriodAVFSU, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchNumberOfTestPeriodAVFSU, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NumberOfTestPeriodMI", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestLog->wchNumberOfTestPeriodMI, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchNumberOfTestPeriodMI, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NumberOfTestPeriod", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestLog->wchNumberOfTestPeriod, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchNumberOfTestPeriod, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"TestPeriodUsed", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestLog->wchTestPeriodUsed, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchTestPeriodUsed, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"QuitReason", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchQuitReason, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchQuitReason, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"TestType", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestLog->wchTestType, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchTestType,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Pass", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboTestLog->wchPass, L"1");
					}
					else
					{
						wcscpy_s(pDboTestLog->wchPass, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchPass, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Operator", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchOperator, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchOperator, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Driver", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchDriver, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchDriver, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Assessor", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchAssessor, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchAssessor, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"IsRetest", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboTestLog->wchIsRetest, L"1");
					}
					else
					{
						wcscpy_s(pDboTestLog->wchIsRetest, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchIsRetest, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"IsFuelTypeNeedTest", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboTestLog->wchIsFuelTypeNeedTest, L"1");
					}
					else
					{
						wcscpy_s(pDboTestLog->wchIsFuelTypeNeedTest, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchIsFuelTypeNeedTest, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"IsFuelTypeTestFinished", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboTestLog->wchIsFuelTypeTestFinished, L"1");
					}
					else
					{
						wcscpy_s(pDboTestLog->wchIsFuelTypeTestFinished, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchIsFuelTypeTestFinished, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"IsFuelTypeTestPass", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboTestLog->wchIsFuelTypeTestPass, L"1");
					}
					else
					{
						wcscpy_s(pDboTestLog->wchIsFuelTypeTestPass, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchIsFuelTypeTestPass, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"IsFuelType2NeedTest", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboTestLog->wchIsFuelType2NeedTest, L"1");
					}
					else
					{
						wcscpy_s(pDboTestLog->wchIsFuelType2NeedTest, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchIsFuelType2NeedTest, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"IsFuelType2TestFinished", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboTestLog->wchIsFuelType2TestFinished, L"1");
					}
					else
					{
						wcscpy_s(pDboTestLog->wchIsFuelType2TestFinished, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchIsFuelType2TestFinished, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"IsFuelType2TestPass", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboTestLog->wchIsFuelType2TestPass, L"1");
					}
					else
					{
						wcscpy_s(pDboTestLog->wchIsFuelType2TestPass, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchIsFuelType2TestPass, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"TestDate", v);
				if(VT_NULL != v.vt)
				{
					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboTestLog->wchTestDate, wch);

					//s = (wchar_t*)(_bstr_t)v;
					//wcscpy_s(pDboTestLog->wchTestDate, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchTestDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"TestStartTime", v);
				if(VT_NULL != v.vt)
				{
					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboTestLog->wchTestStartTime, wch);

					//s = (wchar_t*)(_bstr_t)v;
					//wcscpy_s(pDboTestLog->wchTestStartTime, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchTestStartTime, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"TestEndTime", v);
				if(VT_NULL != v.vt)
				{
					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboTestLog->wchTestEndTime, wch);

					//s = (wchar_t*)(_bstr_t)v;
					//wcscpy_s(pDboTestLog->wchTestEndTime, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchTestEndTime, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"TestCharacter", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchTestCharacter, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchTestCharacter, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"TestCharacterCode", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchTestCharacterCode, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchTestCharacterCode, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PrintTimes", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestLog->wchPrintTimes, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchPrintTimes,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"RecentPrintReportTime", v);
				if(VT_NULL != v.vt)
				{
					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboTestLog->wchRecentPrintReportTime, wch);

					//s = (wchar_t*)(_bstr_t)v;
					//wcscpy_s(pDboTestLog->wchTestEndTime, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchRecentPrintReportTime, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"IsSent", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboTestLog->wchIsSent, L"1");
					}
					else
					{
						wcscpy_s(pDboTestLog->wchIsSent, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchIsSent, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"IsSentEP", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboTestLog->wchIsSentEP, L"1");
					}
					else
					{
						wcscpy_s(pDboTestLog->wchIsSentEP, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchIsSentEP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PlateNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchPlateNumber, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchPlateNumber,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PlateType", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchPlateType, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchPlateType, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PlateTypeCode", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchPlateTypeCode, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchPlateTypeCode, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PlateTypeGA", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchPlateTypeGA, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchPlateTypeGA, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PlateTypeCodeGA", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchPlateTypeCodeGA, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchPlateTypeCodeGA, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"RegistrationDate", v);
				if(VT_NULL != v.vt)
				{
					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboTestLog->wchRegistrationDate, wch);

					//s = (wchar_t*)(_bstr_t)v;
					//wcscpy_s(pDboTestLog->wchRegistrationDate, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchRegistrationDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Owner", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchOwner, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchOwner, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Phone", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchPhone, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchPhone, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Address", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchAddress, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchAddress, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"UseCharacter", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchUseCharacter, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchUseCharacter, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Manufacturer", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchManufacturer, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchManufacturer, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Brand", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchBrand, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchBrand, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Model", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchModel, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchModel, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"ProductionDate", v);
				if(VT_NULL != v.vt)
				{
					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboTestLog->wchProductionDate, wch);

					//s = (wchar_t*)(_bstr_t)v;
					//wcscpy_s(pDboTestLog->wchProductionDate, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchProductionDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"VIN", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchVIN, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchVIN, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"ChassisModel", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchChassisModel, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchChassisModel, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"VehicleType", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchVehicleType, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchVehicleType, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"MaximumTotalMass", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestLog->wchMaximumTotalMass, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchMaximumTotalMass,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"UnladenMass", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestLog->wchUnladenMass, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchUnladenMass,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AxleMass", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestLog->wchAxleMass, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchAxleMass,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"RatedLoadingMass", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestLog->wchRatedLoadingMass, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchRatedLoadingMass,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"RatedPassengerCapacity", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestLog->wchRatedPassengerCapacity, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchRatedPassengerCapacity, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"TyrePressure", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestLog->wchTyrePressure, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchTyrePressure, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"TravelledDistance", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestLog->wchTravelledDistance, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchTravelledDistance, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EngineManufacturer", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchEngineManufacturer, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchEngineManufacturer, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EngineModel", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchEngineModel, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchEngineModel, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EngineNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchEngineNumber, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchEngineNumber, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EngineStroke", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestLog->wchEngineStroke, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchEngineStroke, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Displacement", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestLog->wchDisplacement, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchDisplacement, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NumberOfCylinder", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestLog->wchNumberOfCylinder, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchNumberOfCylinder, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OilSupplyMode", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchOilSupplyMode, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchOilSupplyMode, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AirIntakeMode", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchAirIntakeMode, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchAirIntakeMode, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HasCatalyticConverter", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboTestLog->wchHasCatalyticConverter, L"1");
					}
					else
					{
						wcscpy_s(pDboTestLog->wchHasCatalyticConverter, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchHasCatalyticConverter, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FuelType", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchFuelType, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchFuelType, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FuelMark", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchFuelMark, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchFuelMark, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"DoubleFuel", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboTestLog->wchDoubleFuel, L"1");
					}
					else
					{
						wcscpy_s(pDboTestLog->wchDoubleFuel, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchDoubleFuel, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FuelType2", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchFuelType2, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchFuelType2, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FuelMark2", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchFuelMark2, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchFuelMark2, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"RatedRev", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestLog->wchRatedRev, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchRatedRev, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"RatedPower", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestLog->wchRatedPower, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchRatedPower, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"MaximumNetPower", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestLog->wchMaximumNetPower, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchMaximumNetPower, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"GearBoxType", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchGearBoxType, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchGearBoxType, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NumberOfGears", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestLog->wchNumberOfGears, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchNumberOfGears, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"DriveType", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchDriveType, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchDriveType, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EPSign", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchEPSign, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchEPSign, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"CertificateNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchCertificateNumber, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchCertificateNumber, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"IndependentDoubleExhaustPipe", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboTestLog->wchIndependentDoubleExhaustPipe, L"1");
					}
					else
					{
						wcscpy_s(pDboTestLog->wchIndependentDoubleExhaustPipe, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchIndependentDoubleExhaustPipe, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"TCS", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestLog->wchTCS, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchTCS, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FuelPumpMode", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchFuelPumpMode, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchFuelPumpMode, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PassengerVehicle", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboTestLog->wchPassengerVehicle, L"1");
					}
					else
					{
						wcscpy_s(pDboTestLog->wchPassengerVehicle, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchPassengerVehicle, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EmissionStandard", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchEmissionStandard, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchEmissionStandard, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AnnualTestPeriod", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestLog->wchAnnualTestPeriod, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchAnnualTestPeriod, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HasOBD", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboTestLog->wchHasOBD, L"1");
					}
					else
					{
						wcscpy_s(pDboTestLog->wchHasOBD, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchHasOBD, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OwnerCharacter", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchOwnerCharacter, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchOwnerCharacter, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OwnerDistrict", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchOwnerDistrict, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchOwnerDistrict, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LicenseDepartment", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchLicenseDepartment, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchLicenseDepartment, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LicenseIssueDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchLicenseIssueDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d",dt.wYear, dt.wMonth, dt.wDay);
					wcscpy_s(pDboTestLog->wchLicenseIssueDate, wch);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchLicenseIssueDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LicenseValidDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchLicenseValidDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d",dt.wYear, dt.wMonth, dt.wDay);
					wcscpy_s(pDboTestLog->wchLicenseValidDate, wch);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchLicenseValidDate, L"");
				}
				
				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"MotorModel", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchMotorModel, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchMotorModel, L"");
				}
				
				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EnergyStorageDeviceModel", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchEnergyStorageDeviceModel, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchEnergyStorageDeviceModel, L"");
				}
				
				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"BatteryCapacity", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestLog->wchBatteryCapacity, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchBatteryCapacity, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HasDPF", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboTestLog->wchHasDPF, L"1");
					}
					else
					{
						wcscpy_s(pDboTestLog->wchHasDPF, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchHasDPF, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"DPFModel", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchDPFModel, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchDPFModel, L"");
				}
				
				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HasSCR", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboTestLog->wchHasSCR, L"1");
					}
					else
					{
						wcscpy_s(pDboTestLog->wchHasSCR, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchHasSCR, L"");
				}
				
				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"SCRModel", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchSCRModel, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchSCRModel, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LineNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchLineNumber, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchLineNumber, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LineModel", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchLineModel, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchLineModel, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LineName", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchLineName, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchLineName, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LineManufacturer", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchLineManufacturer, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchLineManufacturer, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LineLicenseSn", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchLineLicenseSn, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchLineLicenseSn, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LineLicenseStartDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchLineLicenseStartDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d",dt.wYear, dt.wMonth, dt.wDay);
					wcscpy_s(pDboTestLog->wchLineLicenseStartDate, wch);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchLineLicenseStartDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LineLicenseEndDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchLineLicenseEndDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d",dt.wYear, dt.wMonth, dt.wDay);
					wcscpy_s(pDboTestLog->wchLineLicenseEndDate, wch);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchLineLicenseEndDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LineIsLocked", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboTestLog->wchLineIsLocked, L"1");
					}
					else
					{
						wcscpy_s(pDboTestLog->wchLineIsLocked, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchLineIsLocked, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LineRegistrationInfo", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestLog->wchLineRegistrationInfo, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchLineRegistrationInfo, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HasDynamometer", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboTestLog->wchHasDynamometer, L"1");
					}
					else
					{
						wcscpy_s(pDboTestLog->wchHasDynamometer, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchHasDynamometer, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"DynamometerNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchDynamometerNumber, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchDynamometerNumber, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"DynamometerModel", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchDynamometerModel, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchDynamometerModel, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"DynamometerManufacturer", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchDynamometerManufacturer, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchDynamometerManufacturer, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"DynamometerCoastDownDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchDynamometerCoastDownDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d",dt.wYear, dt.wMonth, dt.wDay);
					wcscpy_s(pDboTestLog->wchDynamometerCoastDownDate, wch);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchDynamometerCoastDownDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"DynamometerPLHPDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchDynamometerPLHPDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d",dt.wYear, dt.wMonth, dt.wDay);
					wcscpy_s(pDboTestLog->wchDynamometerPLHPDate, wch);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchDynamometerPLHPDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"DynamometerForceCalibrationDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchDynamometerForceCalibrationDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d",dt.wYear, dt.wMonth, dt.wDay);
					wcscpy_s(pDboTestLog->wchDynamometerForceCalibrationDate, wch);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchDynamometerForceCalibrationDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"DynamometerForceCheckDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchDynamometerForceCheckDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d",dt.wYear, dt.wMonth, dt.wDay);
					wcscpy_s(pDboTestLog->wchDynamometerForceCheckDate, wch);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchDynamometerForceCheckDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"DynamometerAuthenticationDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchDynamometerAuthenticationDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d",dt.wYear, dt.wMonth, dt.wDay);
					wcscpy_s(pDboTestLog->wchDynamometerAuthenticationDate, wch);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchDynamometerAuthenticationDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HasAnalyzer", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboTestLog->wchHasAnalyzer, L"1");
					}
					else
					{
						wcscpy_s(pDboTestLog->wchHasAnalyzer, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchHasAnalyzer, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AnalyzerNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchAnalyzerNumber, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchAnalyzerNumber, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AnalyzerModel", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchAnalyzerModel, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchAnalyzerModel, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AnalyzerManufacturer", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchAnalyzerManufacturer, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchAnalyzerManufacturer, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AnalyzerChannelCalibrationDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchAnalyzerChannelCalibrationDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d",dt.wYear, dt.wMonth, dt.wDay);
					wcscpy_s(pDboTestLog->wchAnalyzerChannelCalibrationDate, wch);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchAnalyzerChannelCalibrationDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AnalyzerChannelCheckDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchAnalyzerChannelCheckDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d",dt.wYear, dt.wMonth, dt.wDay);
					wcscpy_s(pDboTestLog->wchAnalyzerChannelCheckDate, wch);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchAnalyzerChannelCheckDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AnalyzerEnvParamCalibrationDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchAnalyzerEnvParamCalibrationDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d",dt.wYear, dt.wMonth, dt.wDay);
					wcscpy_s(pDboTestLog->wchAnalyzerEnvParamCalibrationDate, wch);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchAnalyzerEnvParamCalibrationDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AnalyzerAuthenticationDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchAnalyzerAuthenticationDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d",dt.wYear, dt.wMonth, dt.wDay);
					wcscpy_s(pDboTestLog->wchAnalyzerAuthenticationDate, wch);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchAnalyzerAuthenticationDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HasFlowmeter", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboTestLog->wchHasFlowmeter, L"1");
					}
					else
					{
						wcscpy_s(pDboTestLog->wchHasFlowmeter, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchHasFlowmeter, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FlowmeterNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchFlowmeterNumber, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchFlowmeterNumber, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FlowmeterModel", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchFlowmeterModel, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchFlowmeterModel, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FlowmeterManufacturer", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchFlowmeterManufacturer, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchFlowmeterManufacturer, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FlowmeterFluxCalibrationDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchFlowmeterFluxCalibrationDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d",dt.wYear, dt.wMonth, dt.wDay);
					wcscpy_s(pDboTestLog->wchFlowmeterFluxCalibrationDate, wch);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchFlowmeterFluxCalibrationDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FlowmeterFluxCheckDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchFlowmeterFluxCheckDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d",dt.wYear, dt.wMonth, dt.wDay);
					wcscpy_s(pDboTestLog->wchFlowmeterFluxCheckDate, wch);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchFlowmeterFluxCheckDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FlowmeterDilO2CalibrationDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchFlowmeterDilO2CalibrationDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d",dt.wYear, dt.wMonth, dt.wDay);
					wcscpy_s(pDboTestLog->wchFlowmeterDilO2CalibrationDate, wch);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchFlowmeterDilO2CalibrationDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FlowmeterPressureCalibrationDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchFlowmeterPressureCalibrationDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d",dt.wYear, dt.wMonth, dt.wDay);
					wcscpy_s(pDboTestLog->wchFlowmeterPressureCalibrationDate, wch);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchFlowmeterPressureCalibrationDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FlowmeterAuthenticationDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchFlowmeterAuthenticationDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d",dt.wYear, dt.wMonth, dt.wDay);
					wcscpy_s(pDboTestLog->wchFlowmeterAuthenticationDate, wch);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchFlowmeterAuthenticationDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HasOpacimeter", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboTestLog->wchHasOpacimeter, L"1");
					}
					else
					{
						wcscpy_s(pDboTestLog->wchHasOpacimeter, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchHasOpacimeter, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OpacimeterNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchOpacimeterNumber, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchOpacimeterNumber, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OpacimeterModel", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchOpacimeterModel, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchOpacimeterModel, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OpacimeterManufacturer", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchOpacimeterManufacturer, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchOpacimeterManufacturer, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OpacimeterChannelCalibrationDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchOpacimeterChannelCalibrationDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d",dt.wYear, dt.wMonth, dt.wDay);
					wcscpy_s(pDboTestLog->wchOpacimeterChannelCalibrationDate, wch);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchOpacimeterChannelCalibrationDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OpacimeterChannelCheckDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchOpacimeterChannelCheckDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d",dt.wYear, dt.wMonth, dt.wDay);
					wcscpy_s(pDboTestLog->wchOpacimeterChannelCheckDate, wch);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchOpacimeterChannelCheckDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OpacimeterEnvParamCalibrationDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchOpacimeterEnvParamCalibrationDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d",dt.wYear, dt.wMonth, dt.wDay);
					wcscpy_s(pDboTestLog->wchOpacimeterEnvParamCalibrationDate, wch);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchOpacimeterEnvParamCalibrationDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OpacimeterAuthenticationDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchOpacimeterAuthenticationDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d",dt.wYear, dt.wMonth, dt.wDay);
					wcscpy_s(pDboTestLog->wchOpacimeterAuthenticationDate, wch);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchOpacimeterAuthenticationDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HasSmokemeter", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboTestLog->wchHasSmokemeter, L"1");
					}
					else
					{
						wcscpy_s(pDboTestLog->wchHasSmokemeter, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchHasSmokemeter, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"SmokemeterNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchSmokemeterNumber, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchSmokemeterNumber, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"SmokemeterModel", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchSmokemeterModel, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchSmokemeterModel, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"SmokemeterManufacturer", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchSmokemeterManufacturer, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchSmokemeterManufacturer, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"SmokemeterCalibrationDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchSmokemeterCalibrationDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d",dt.wYear, dt.wMonth, dt.wDay);
					wcscpy_s(pDboTestLog->wchSmokemeterCalibrationDate, wch);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchSmokemeterCalibrationDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"SmokemeterCheckDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchSmokemeterCheckDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d",dt.wYear, dt.wMonth, dt.wDay);
					wcscpy_s(pDboTestLog->wchSmokemeterCheckDate, wch);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchSmokemeterCheckDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"SmokemeterAuthenticationDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchSmokemeterAuthenticationDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d",dt.wYear, dt.wMonth, dt.wDay);
					wcscpy_s(pDboTestLog->wchSmokemeterAuthenticationDate, wch);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchSmokemeterAuthenticationDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HasIndependentEnvParamMeasurer", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboTestLog->wchHasIndependentEnvParamMeasurer, L"1");
					}
					else
					{
						wcscpy_s(pDboTestLog->wchHasIndependentEnvParamMeasurer, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchHasIndependentEnvParamMeasurer, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EnvParamMeasurerNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchEnvParamMeasurerNumber, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchEnvParamMeasurerNumber, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EnvParamMeasurerModel", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchEnvParamMeasurerModel, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchEnvParamMeasurerModel, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EnvParamMeasurerManufacturer", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchEnvParamMeasurerManufacturer, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchEnvParamMeasurerManufacturer, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EnvParamMeasurerCalibrationDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchEnvParamMeasurerCalibrationDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d",dt.wYear, dt.wMonth, dt.wDay);
					wcscpy_s(pDboTestLog->wchEnvParamMeasurerCalibrationDate, wch);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchEnvParamMeasurerCalibrationDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EnvParamMeasurerCheckDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchEnvParamMeasurerCheckDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d",dt.wYear, dt.wMonth, dt.wDay);
					wcscpy_s(pDboTestLog->wchEnvParamMeasurerCheckDate, wch);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchEnvParamMeasurerCheckDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EnvParamMeasurerAuthenticationDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchEnvParamMeasurerAuthenticationDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d",dt.wYear, dt.wMonth, dt.wDay);
					wcscpy_s(pDboTestLog->wchEnvParamMeasurerAuthenticationDate, wch);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchEnvParamMeasurerAuthenticationDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HasIndependentTachometer", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboTestLog->wchHasIndependentTachometer, L"1");
					}
					else
					{
						wcscpy_s(pDboTestLog->wchHasIndependentTachometer, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchHasIndependentTachometer, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"TachometerNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchTachometerNumber, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchTachometerNumber, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"TachometerModel", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchTachometerModel, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchTachometerModel, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"TachometerManufacturer", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchTachometerManufacturer, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchTachometerManufacturer, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"TachometerCalibrationDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchTachometerCalibrationDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d",dt.wYear, dt.wMonth, dt.wDay);
					wcscpy_s(pDboTestLog->wchTachometerCalibrationDate, wch);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchTachometerCalibrationDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"TachometerCheckDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchTachometerCheckDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d",dt.wYear, dt.wMonth, dt.wDay);
					wcscpy_s(pDboTestLog->wchTachometerCheckDate, wch);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchTachometerCheckDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"TachometerAuthenticationDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchTachometerAuthenticationDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d",dt.wYear, dt.wMonth, dt.wDay);
					wcscpy_s(pDboTestLog->wchTachometerAuthenticationDate, wch);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchTachometerAuthenticationDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HasOBDAdapter", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboTestLog->wchHasOBDAdapter, L"1");
					}
					else
					{
						wcscpy_s(pDboTestLog->wchHasOBDAdapter, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchHasOBDAdapter, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OBDAdapterNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchOBDAdapterNumber, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchOBDAdapterNumber, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OBDAdapterModel", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchOBDAdapterModel, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchOBDAdapterModel, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OBDAdapterManufacturer", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchOBDAdapterManufacturer, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchOBDAdapterManufacturer, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OBDAdapterCalibrationDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchOBDAdapterCalibrationDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d",dt.wYear, dt.wMonth, dt.wDay);
					wcscpy_s(pDboTestLog->wchOBDAdapterCalibrationDate, wch);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchOBDAdapterCalibrationDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OBDAdapterCheckDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchOBDAdapterCheckDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d",dt.wYear, dt.wMonth, dt.wDay);
					wcscpy_s(pDboTestLog->wchOBDAdapterCheckDate, wch);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchOBDAdapterCheckDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OBDAdapterAuthenticationDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchOBDAdapterAuthenticationDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d",dt.wYear, dt.wMonth, dt.wDay);
					wcscpy_s(pDboTestLog->wchOBDAdapterAuthenticationDate, wch);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchOBDAdapterAuthenticationDate, L"");
				}
				
				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HasNOxAnalyzer", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboTestLog->wchHasNOxAnalyzer, L"1");
					}
					else
					{
						wcscpy_s(pDboTestLog->wchHasNOxAnalyzer, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchHasNOxAnalyzer, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NOxAnalyzerNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchNOxAnalyzerNumber, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchNOxAnalyzerNumber, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NOxAnalyzerModel", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchNOxAnalyzerModel, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchNOxAnalyzerModel, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NOxAnalyzerManufacturer", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchNOxAnalyzerManufacturer, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchNOxAnalyzerManufacturer, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NOxAnalyzerChannelCalibrationDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchNOxAnalyzerChannelCalibrationDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboTestLog->wchNOxAnalyzerChannelCalibrationDate, wch);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchNOxAnalyzerChannelCalibrationDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NOxAnalyzerChannelCheckDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchNOxAnalyzerChannelCheckDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboTestLog->wchNOxAnalyzerChannelCheckDate, wch);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchNOxAnalyzerChannelCheckDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NOxAnalyzerEnvParamCalibrationDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchNOxAnalyzerEnvParamCalibrationDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboTestLog->wchNOxAnalyzerEnvParamCalibrationDate, wch);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchNOxAnalyzerEnvParamCalibrationDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NOxAnalyzerAuthenticationDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchNOxAnalyzerAuthenticationDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pDboTestLog->wchNOxAnalyzerAuthenticationDate, wch);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchNOxAnalyzerAuthenticationDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"StationNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchStationNumber, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchStationNumber, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"StationFullName", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchStationFullName, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchStationFullName, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"StationShortName", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchStationShortName, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchStationShortName, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"StationLicenseSn", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchStationLicenseSn, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchStationLicenseSn, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"StationLicenseStartDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchStationLicenseStartDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d",dt.wYear, dt.wMonth, dt.wDay);
					wcscpy_s(pDboTestLog->wchStationLicenseStartDate, wch);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchStationLicenseStartDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"StationLicenseEndDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchStationLicenseEndDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d",dt.wYear, dt.wMonth, dt.wDay);
					wcscpy_s(pDboTestLog->wchStationLicenseEndDate, wch);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchStationLicenseEndDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"StationIsLocked", v);
				if(VT_NULL != v.vt)
				{
					bool b = (bool)v;
					if (b)
					{
						wcscpy_s(pDboTestLog->wchStationIsLocked, L"1");
					}
					else
					{
						wcscpy_s(pDboTestLog->wchStationIsLocked, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchStationIsLocked, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"StationRegistrationInfo", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestLog->wchStationRegistrationInfo, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchStationRegistrationInfo, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"StationPhone", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchStationPhone, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchStationPhone, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"StationFax", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchStationFax, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchStationFax, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PostCode", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchPostCode, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchPostCode, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Province", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchProvince, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchProvince, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"City", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchCity, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchCity, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"District", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchDistrict, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchDistrict, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"DetailedAddress", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchDetailedAddress, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchDetailedAddress, L"");
				}

				//v.ChangeType(VT_NULL);
				//GetFieldData(pRecordset, L"SRM", v);
				//if(VT_NULL != v.vt)
				//{
				//	bool b = (bool)v;
				//	if (b)
				//	{
				//		wcscpy_s(pDboTestLog->wchSRM, L"1");
				//	}
				//	else
				//	{
				//		wcscpy_s(pDboTestLog->wchSRM, L"0");
				//	}
				//}
				//else
				//{
				//	_tcscpy_s(pDboTestLog->wchSRM, L"");
				//}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Remark", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchRemark, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchRemark, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved1", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchReserved1, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchReserved1, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved2", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchReserved2, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchReserved2, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved3", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestLog->wchReserved3, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestLog->wchReserved3, L"");
				}

				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD SetDboTestLog(const TESTLOG &dboTestLog)
{
	assert(&dboTestLog != NULL);

	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"select * from TestLog where RunningNumber = '%s'", dboTestLog.wchRunningNumber);

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if(pRecordset->adoEOF)
			{
				pRecordset->AddNew();    //添加新记录
			}

			wstring str;
			_variant_t v;

			// 流水号
			str = dboTestLog.wchRunningNumber;

			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"RunningNumber", v);

			// 报告编号
			str = dboTestLog.wchReportNumber;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"ReportNumber", v);

			// 环保联网流水号
			str = dboTestLog.wchRunningNumberEP;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"RunningNumberEP", v);

			// 环保联网报告编号
			str = dboTestLog.wchReportNumberEP;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"ReportNumberEP", v);
			
			str = dboTestLog.wchItemApp;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"ItemApp", v);
			
			str = dboTestLog.wchItemOBD;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"ItemOBD", v);
			
			str = dboTestLog.wchItemEmi;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"ItemEmi", v);

			// 开单日期
			str = dboTestLog.wchBillDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"BillDate", v);

			// 开单员(登录员)
			str = dboTestLog.wchBiller;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Biller", v);

			// 收费员
			str = dboTestLog.wchShroff;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Shroff", v);

			// 收费状态
			str = dboTestLog.wchChargeState;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"ChargeState", v);

			// 初次收费金额[元]
			str = dboTestLog.wchInitialMoney;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"InitialMoney", v);

			// 变更收费金额[元]
			str = dboTestLog.wchChangedMoney;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"ChangedMoney", v);

			// 应该收取金额[元]
			str = dboTestLog.wchReceivableMoney;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"ReceivableMoney", v);

			// 实际收费金额[元]
			str = dboTestLog.wchActualMoney;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"ActualMoney", v);

			// 检测地点
			str = dboTestLog.wchTestLocation;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"TestLocation", v);

			// 检测状态
			str = dboTestLog.wchTestState;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"TestState", v);

			// 检测是否完成
			str = dboTestLog.wchIsTestFinished;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"IsTestFinished", v);

			str = dboTestLog.wchNumberOfTestPeriodASM;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"NumberOfTestPeriodASM", v);

			str = dboTestLog.wchNumberOfTestPeriodVMAS;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"NumberOfTestPeriodVMAS", v);

			str = dboTestLog.wchNumberOfTestPeriodLUGDOWN;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"NumberOfTestPeriodLUGDOWN", v);

			str = dboTestLog.wchNumberOfTestPeriodDIS;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"NumberOfTestPeriodDIS", v);

			str = dboTestLog.wchNumberOfTestPeriodFSUNHT;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"NumberOfTestPeriodFSUNHT", v);

			str = dboTestLog.wchNumberOfTestPeriodFSUYD;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"NumberOfTestPeriodFSUYD", v);

			str = dboTestLog.wchNumberOfTestPeriodAVFSU;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"NumberOfTestPeriodAVFSU", v);

			str = dboTestLog.wchNumberOfTestPeriodMI;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"NumberOfTestPeriodMI", v);

			str = dboTestLog.wchNumberOfTestPeriod;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"NumberOfTestPeriod", v);

			str = dboTestLog.wchTestPeriodUsed;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"TestPeriodUsed", v);

			// 退出原因
			str = dboTestLog.wchQuitReason;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"QuitReason", v);

			// 检测类型
			str = dboTestLog.wchTestType;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"TestType", v);

			// 检测是否通过
			str = dboTestLog.wchPass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"Pass", v);

			// 操作员
			str = dboTestLog.wchOperator;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Operator", v);

			// 驾驶员(引车员)
			str = dboTestLog.wchDriver;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Driver", v);

			// 审核员
			str = dboTestLog.wchAssessor;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Assessor", v);

			// 是否复检
			str = dboTestLog.wchIsRetest;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"IsRetest", v);

			// 燃油类别1是否需要检测(用于双燃料车辆检测)
			str = dboTestLog.wchIsFuelTypeNeedTest;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"IsFuelTypeNeedTest", v);

			// 燃油类别1是否检测完成(用于双燃料车辆检测)
			str = dboTestLog.wchIsFuelTypeTestFinished;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"IsFuelTypeTestFinished", v);

			// 燃油类别1是否检测通过(用于双燃料车辆检测)
			str = dboTestLog.wchIsFuelTypeTestPass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"IsFuelTypeTestPass", v);

			// 燃油类别2是否需要检测(用于双燃料车辆检测)
			str = dboTestLog.wchIsFuelType2NeedTest;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"IsFuelType2NeedTest", v);

			//燃油类别2是否检测完成(用于双燃料车辆检测)
			str = dboTestLog.wchIsFuelType2TestFinished;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"IsFuelType2TestFinished", v);

			// 燃油类别2是否检测通过(用于双燃料车辆检测)
			str = dboTestLog.wchIsFuelType2TestPass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"IsFuelType2TestPass", v);

			// 检测日期
			str = dboTestLog.wchTestDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"TestDate", v);

			// 检测开始时间
			str = dboTestLog.wchTestStartTime;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"TestStartTime", v);

			// 检测结束时间
			str = dboTestLog.wchTestEndTime;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"TestEndTime", v);

			// 检测性质(年检,路检,目测,仪器导入等)
			str = dboTestLog.wchTestCharacter;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"TestCharacter", v);

			str = dboTestLog.wchTestCharacterCode;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"TestCharacterCode", v);

			// 打印次数
			str = dboTestLog.wchPrintTimes;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"PrintTimes", v);

			// 最近打印报告时间
			str = dboTestLog.wchRecentPrintReportTime;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"RecentPrintReportTime", v);

			// 是否传送
			str = dboTestLog.wchIsSent;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if (0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"IsSent", v);

			// 是否传送环保数据
			str = dboTestLog.wchIsSentEP;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if (0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"IsSentEP", v);


			// 车牌号码
			str = dboTestLog.wchPlateNumber;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"PlateNumber", v);

			// 车牌类型
			str = dboTestLog.wchPlateType;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"PlateType", v);

			str = dboTestLog.wchPlateTypeCode;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"PlateTypeCode", v);

			str = dboTestLog.wchPlateTypeGA;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"PlateTypeGA", v);

			str = dboTestLog.wchPlateTypeCodeGA;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"PlateTypeCodeGA", v);

			// 车辆登记日期
			str = dboTestLog.wchRegistrationDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"RegistrationDate", v);

			// 车主
			str = dboTestLog.wchOwner;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Owner", v);

			// 联系电话
			str = dboTestLog.wchPhone;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Phone", v);

			// 联系地址
			str = dboTestLog.wchAddress;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Address", v);

			// 使用性质
			str = dboTestLog.wchUseCharacter;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"UseCharacter", v);

			// 生产企业
			str = dboTestLog.wchManufacturer;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Manufacturer", v);

			// 厂牌
			str = dboTestLog.wchBrand;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Brand", v);

			// 型号
			str = dboTestLog.wchModel;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Model", v);

			// 生产日期
			str = dboTestLog.wchProductionDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"ProductionDate", v);

			// VIN
			str = dboTestLog.wchVIN;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"VIN", v);

			// 底盘型号
			str = dboTestLog.wchChassisModel;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"ChassisModel", v);

			// 车辆类型
			str = dboTestLog.wchVehicleType;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"VehicleType", v);

			// 最大总质量
			str = dboTestLog.wchMaximumTotalMass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = _wtoi(str.c_str());
			}
			PutFieldData(pRecordset, L"MaximumTotalMass", v);

			// 整备质量
			str = dboTestLog.wchUnladenMass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = _wtoi(str.c_str());
			}
			PutFieldData(pRecordset, L"UnladenMass", v);

			// 轴重
			str = dboTestLog.wchAxleMass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = _wtoi(str.c_str());
			}
			PutFieldData(pRecordset, L"AxleMass", v);

			// 核载质量
			str = dboTestLog.wchRatedLoadingMass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = _wtoi(str.c_str());
			}
			PutFieldData(pRecordset, L"RatedLoadingMass", v);

			// 核载人数
			str = dboTestLog.wchRatedPassengerCapacity;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = _wtoi(str.c_str());
			}
			PutFieldData(pRecordset, L"RatedPassengerCapacity", v);

			// 轮胎气压[mPa]
			str = dboTestLog.wchTyrePressure;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"TyrePressure", v);

			// 行驶里程[km]
			str = dboTestLog.wchTravelledDistance;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = _wtoi(str.c_str());
			}
			PutFieldData(pRecordset, L"TravelledDistance", v);

			// 发动机生产厂家
			str = dboTestLog.wchEngineManufacturer;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"EngineManufacturer", v);

			// 发动机型号
			str = dboTestLog.wchEngineModel;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"EngineModel", v);

			// 发动机号
			str = dboTestLog.wchEngineNumber;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"EngineNumber", v);

			// 发动机冲程数
			str = dboTestLog.wchEngineStroke;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"EngineStroke", v);

			// 排量[L]
			str = dboTestLog.wchDisplacement;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"Displacement", v);

			// 汽缸数
			str = dboTestLog.wchNumberOfCylinder;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"NumberOfCylinder", v);

			// 供油方式
			str = dboTestLog.wchOilSupplyMode;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"OilSupplyMode", v);

			// 进气方式
			str = dboTestLog.wchAirIntakeMode;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"AirIntakeMode", v);

			// 有无催化转化器
			str = dboTestLog.wchHasCatalyticConverter;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"HasCatalyticConverter", v);

			// 燃油类别
			str = dboTestLog.wchFuelType;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"FuelType", v);

			// 燃油规格
			str = dboTestLog.wchFuelMark;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"FuelMark", v);

			// 是否双燃料
			str = dboTestLog.wchDoubleFuel;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"DoubleFuel", v);

			// 燃油类别2
			str = dboTestLog.wchFuelType2;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"FuelType2", v);

			// 燃油规格2(对应燃油类别2)
			str = dboTestLog.wchFuelMark2;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"FuelMark2", v);

			// 额定转速[r/min]
			str = dboTestLog.wchRatedRev;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"RatedRev", v);

			// 额定功率[kW]
			str = dboTestLog.wchRatedPower;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"RatedPower", v);

			// 最大净功率[kW]
			str = dboTestLog.wchMaximumNetPower;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"MaximumNetPower", v);

			// 变速器类型
			str = dboTestLog.wchGearBoxType;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"GearBoxType", v);

			// 档位数
			str = dboTestLog.wchNumberOfGears;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"NumberOfGears", v);

			// 驱动方式
			str = dboTestLog.wchDriveType;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"DriveType", v);

			// 环保标志
			str = dboTestLog.wchEPSign;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"EPSign", v);

			// 合格证号码
			str = dboTestLog.wchCertificateNumber;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"CertificateNumber", v);

			// 独立双排气管
			str = dboTestLog.wchIndependentDoubleExhaustPipe;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"IndependentDoubleExhaustPipe", v);

			// 牵引力控制系统
			str = dboTestLog.wchTCS;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = static_cast<int>(1);
			}
			else if( 0 ==str.compare(L"2"))
			{
				v = static_cast<int>(2);
			}
			else
			{
				v = static_cast<int>(0);
			}
			PutFieldData(pRecordset, L"TCS", v);

			// 燃油泵形式(机械,电子控制)
			str = dboTestLog.wchFuelPumpMode;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"FuelPumpMode", v);

			// 是否载客车
			str = dboTestLog.wchPassengerVehicle;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"PassengerVehicle", v);

			// 检测标准
			str = dboTestLog.wchEmissionStandard;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"EmissionStandard", v);

			// 检测周期
			str = dboTestLog.wchAnnualTestPeriod;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"AnnualTestPeriod", v);

			// 有无OBD
			str = dboTestLog.wchHasOBD;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"HasOBD", v);

			// 车主性质
			str = dboTestLog.wchOwnerCharacter;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"OwnerCharacter", v);

			// 车主区划
			str = dboTestLog.wchOwnerDistrict;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"OwnerDistrict", v);

			// 发证机构
			str = dboTestLog.wchLicenseDepartment;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"LicenseDepartment", v);

			// 发证日期
			str = dboTestLog.wchLicenseIssueDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"LicenseIssueDate", v);

			// 有效期止
			str = dboTestLog.wchLicenseValidDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"LicenseValidDate", v);
			
			// 电动机型号
			str = dboTestLog.wchMotorModel;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"MotorModel", v);

			// 储能装置型号
			str = dboTestLog.wchEnergyStorageDeviceModel;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"EnergyStorageDeviceModel", v);

			// 电池容量[kWh]
			str = dboTestLog.wchBatteryCapacity;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"BatteryCapacity", v);
			
			// 有无DPF
			str = dboTestLog.wchHasDPF;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"HasDPF", v);

			// DPF型号
			str = dboTestLog.wchDPFModel;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"DPFModel", v);
			
			// 有无SCR
			str = dboTestLog.wchHasSCR;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"HasSCR", v);

			// SCR型号
			str = dboTestLog.wchSCRModel;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"SCRModel", v);

			//检测线编号
			str = dboTestLog.wchLineNumber;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"LineNumber", v);

			// 检测线型号
			str = dboTestLog.wchLineModel;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"LineModel", v);

			// 检测线名称
			str = dboTestLog.wchLineName;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"LineName", v);

			// 检测线生产厂家
			str = dboTestLog.wchLineManufacturer;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"LineManufacturer", v);

			// 检测线许可证编号
			str = dboTestLog.wchLineLicenseSn;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"LineLicenseSn", v);

			// 检测线许可证开始日期
			str = dboTestLog.wchLineLicenseStartDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"LineLicenseStartDate", v);

			// 检测线许可证结束日期
			str = dboTestLog.wchLineLicenseEndDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"LineLicenseEndDate", v);

			// 检测线许是否被锁止
			str = dboTestLog.wchLineIsLocked;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"LineIsLocked", v);

			// 检测线许注册信息
			str = dboTestLog.wchLineRegistrationInfo;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"LineRegistrationInfo", v);

			// 是否有测功机
			str = dboTestLog.wchHasDynamometer;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"HasDynamometer", v);

			// 测功机编号
			str = dboTestLog.wchDynamometerNumber;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"DynamometerNumber", v);

			// 测功机型号
			str = dboTestLog.wchDynamometerModel;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"DynamometerModel", v);

			// 测功机生产厂家
			str = dboTestLog.wchDynamometerManufacturer;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"DynamometerManufacturer", v);

			// 测功机定载荷滑行日期
			str = dboTestLog.wchDynamometerCoastDownDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"DynamometerCoastDownDate", v);

			// 测功机寄生功率滑行日期
			str = dboTestLog.wchDynamometerPLHPDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"DynamometerPLHPDate", v);

			// 测功机力校准日期
			str = dboTestLog.wchDynamometerForceCalibrationDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"DynamometerForceCalibrationDate", v);

			// 测功机力检查日期
			str = dboTestLog.wchDynamometerForceCheckDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"DynamometerForceCheckDate", v);

			// 测功机力认证日期
			str = dboTestLog.wchDynamometerAuthenticationDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"DynamometerAuthenticationDate", v);

			// 是否有分析仪
			str = dboTestLog.wchHasAnalyzer;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"HasAnalyzer", v);

			// 分析仪编号
			str = dboTestLog.wchAnalyzerNumber;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"AnalyzerNumber", v);

			// 分析仪型号
			str = dboTestLog.wchAnalyzerModel;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"AnalyzerModel", v);

			// 分析仪生产厂家
			str = dboTestLog.wchAnalyzerManufacturer;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"AnalyzerManufacturer", v);

			// 分析仪通道校准日期
			str = dboTestLog.wchAnalyzerChannelCalibrationDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"AnalyzerChannelCalibrationDate", v);

			// 分析仪通道检查日期
			str = dboTestLog.wchAnalyzerChannelCheckDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"AnalyzerChannelCheckDate", v);

			// 分析仪环境参数校准日期
			str = dboTestLog.wchAnalyzerEnvParamCalibrationDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"AnalyzerEnvParamCalibrationDate", v);

			// 分析仪认证日期
			str = dboTestLog.wchAnalyzerAuthenticationDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"AnalyzerAuthenticationDate", v);

			// 是否有流量计
			str = dboTestLog.wchHasFlowmeter;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"HasFlowmeter", v);

			// 流量计编号
			str = dboTestLog.wchFlowmeterNumber;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"FlowmeterNumber", v);

			// 流量计型号
			str = dboTestLog.wchFlowmeterModel;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"FlowmeterModel", v);

			// 流量计生产厂家
			str = dboTestLog.wchFlowmeterManufacturer;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"FlowmeterManufacturer", v);

			// 流量计流量校准日期
			str = dboTestLog.wchFlowmeterFluxCalibrationDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"FlowmeterFluxCalibrationDate", v);

			// 流量计流量检查日期
			str = dboTestLog.wchFlowmeterFluxCheckDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"FlowmeterFluxCheckDate", v);

			// 流量计稀释氧传感器校准日期
			str = dboTestLog.wchFlowmeterDilO2CalibrationDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"FlowmeterDilO2CalibrationDate", v);

			// 流量计压力传感器校准日期
			str = dboTestLog.wchFlowmeterPressureCalibrationDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"FlowmeterPressureCalibrationDate", v);

			// 流量计认证日期
			str = dboTestLog.wchFlowmeterAuthenticationDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"FlowmeterAuthenticationDate", v);

			// 是否有不透光度计
			str = dboTestLog.wchHasOpacimeter;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"HasOpacimeter", v);

			// 不透光度计编号
			str = dboTestLog.wchOpacimeterNumber;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"OpacimeterNumber", v);

			// 不透光度计型号
			str = dboTestLog.wchOpacimeterModel;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"OpacimeterModel", v);

			// 不透光度计生产厂家
			str = dboTestLog.wchOpacimeterManufacturer;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"OpacimeterManufacturer", v);

			// 不透光度计通道校准日期
			str = dboTestLog.wchOpacimeterChannelCalibrationDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"OpacimeterChannelCalibrationDate", v);

			// 不透光度计通道检查日期
			str = dboTestLog.wchOpacimeterChannelCheckDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"OpacimeterChannelCheckDate", v);

			// 不透光度计环境参数校准日期
			str = dboTestLog.wchOpacimeterEnvParamCalibrationDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"OpacimeterEnvParamCalibrationDate", v);

			// 不透光度计认证日期
			str = dboTestLog.wchOpacimeterAuthenticationDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"OpacimeterAuthenticationDate", v);

			// 是否有烟度计
			str = dboTestLog.wchHasSmokemeter;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"HasSmokemeter", v);

			// 烟度计编号
			str = dboTestLog.wchSmokemeterNumber;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"SmokemeterNumber", v);

			// 烟度计型号
			str = dboTestLog.wchSmokemeterModel;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"SmokemeterModel", v);

			// 烟度计生产厂家
			str = dboTestLog.wchSmokemeterManufacturer;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"SmokemeterManufacturer", v);

			// 烟度计校准日期
			str = dboTestLog.wchSmokemeterCalibrationDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"SmokemeterCalibrationDate", v);

			// 烟度计检查日期
			str = dboTestLog.wchSmokemeterCheckDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"SmokemeterCheckDate", v);

			// 烟度计认证日期
			str = dboTestLog.wchSmokemeterAuthenticationDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"SmokemeterAuthenticationDate", v);

			// 是否有独立环境参数测量仪
			str = dboTestLog.wchHasIndependentEnvParamMeasurer;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"HasIndependentEnvParamMeasurer", v);

			// 环境参数测量仪编号
			str = dboTestLog.wchEnvParamMeasurerNumber;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"EnvParamMeasurerNumber", v);

			// 环境参数测量仪型号
			str = dboTestLog.wchEnvParamMeasurerModel;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"EnvParamMeasurerModel", v);

			// 环境参数测量仪生产厂家
			str = dboTestLog.wchEnvParamMeasurerManufacturer;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"EnvParamMeasurerManufacturer", v);

			// 环境参数测量仪校准日期
			str = dboTestLog.wchEnvParamMeasurerCalibrationDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"EnvParamMeasurerCalibrationDate", v);

			// 环境参数测量仪检查日期
			str = dboTestLog.wchEnvParamMeasurerCheckDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"EnvParamMeasurerCheckDate", v);

			// 环境参数测量仪认证日期
			str = dboTestLog.wchEnvParamMeasurerAuthenticationDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"EnvParamMeasurerAuthenticationDate", v);

			// 是否有独立转速计
			str = dboTestLog.wchHasIndependentTachometer;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"HasIndependentTachometer", v);

			// 转速计编号
			str = dboTestLog.wchTachometerNumber;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"TachometerNumber", v);

			// 转速计型号
			str = dboTestLog.wchTachometerModel;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"TachometerModel", v);

			// 转速计生产厂家
			str = dboTestLog.wchTachometerManufacturer;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"TachometerManufacturer", v);

			// 转速计校准日期
			str = dboTestLog.wchTachometerCalibrationDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"TachometerCalibrationDate", v);

			// 转速计检查日期
			str = dboTestLog.wchTachometerCheckDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"TachometerCheckDate", v);

			// 转速计认证日期
			str = dboTestLog.wchTachometerAuthenticationDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"TachometerAuthenticationDate", v);

			// 是否有OBD
			str = dboTestLog.wchHasOBDAdapter;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"HasOBDAdapter", v);

			// OBDAdapter编号
			str = dboTestLog.wchOBDAdapterNumber;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"OBDAdapterNumber", v);

			// OBDAdapter型号
			str = dboTestLog.wchOBDAdapterModel;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"OBDAdapterModel", v);

			// OBDAdapter生产厂家
			str = dboTestLog.wchOBDAdapterManufacturer;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"OBDAdapterManufacturer", v);

			// OBDAdapter校准日期
			str = dboTestLog.wchOBDAdapterCalibrationDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"OBDAdapterCalibrationDate", v);

			// OBDAdapter检查日期
			str = dboTestLog.wchOBDAdapterCheckDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"OBDAdapterCheckDate", v);

			// OBDAdapter认证日期
			str = dboTestLog.wchOBDAdapterAuthenticationDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"OBDAdapterAuthenticationDate", v);
						
			// 是否有氮氧分析仪
			str = dboTestLog.wchHasNOxAnalyzer;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"HasNOxAnalyzer", v);

			// 氮氧分析仪编号
			str = dboTestLog.wchNOxAnalyzerNumber;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"NOxAnalyzerNumber", v);

			// 氮氧分析仪型号
			str = dboTestLog.wchNOxAnalyzerModel;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"NOxAnalyzerModel", v);

			// 氮氧分析仪生产厂家
			str = dboTestLog.wchNOxAnalyzerManufacturer;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"NOxAnalyzerManufacturer", v);

			// 氮氧分析仪通道校准日期
			str = dboTestLog.wchNOxAnalyzerChannelCalibrationDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"NOxAnalyzerChannelCalibrationDate", v);

			// 氮氧分析仪通道检查日期
			str = dboTestLog.wchNOxAnalyzerChannelCheckDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"NOxAnalyzerChannelCheckDate", v);

			// 氮氧分析仪环境参数校准日期
			str = dboTestLog.wchNOxAnalyzerEnvParamCalibrationDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"NOxAnalyzerEnvParamCalibrationDate", v);

			// 氮氧分析仪认证日期
			str = dboTestLog.wchNOxAnalyzerAuthenticationDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"NOxAnalyzerAuthenticationDate", v);
			
			// 检测站编号
			str = dboTestLog.wchStationNumber;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"StationNumber", v);

			// 检测站全称
			str = dboTestLog.wchStationFullName;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"StationFullName", v);

			// 检测站简称
			str = dboTestLog.wchStationShortName;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"StationShortName", v);

			// 检测站许可证编号
			str = dboTestLog.wchStationLicenseSn;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"StationLicenseSn", v);

			// 检测站许可证开始日期
			str = dboTestLog.wchStationLicenseStartDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"StationLicenseStartDate", v);

			// 检测站许可证结束日期
			str = dboTestLog.wchStationLicenseEndDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"StationLicenseEndDate", v);

			// 检测站是否锁止
			str = dboTestLog.wchStationIsLocked;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"StationIsLocked", v);

			// 检测站登记信息
			str = dboTestLog.wchStationRegistrationInfo;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"StationRegistrationInfo", v);

			// 检测站电话
			str = dboTestLog.wchStationPhone;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"StationPhone", v);

			// 检测站传真
			str = dboTestLog.wchStationFax;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"StationFax", v);

			// 邮编
			str = dboTestLog.wchPostCode;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"PostCode", v);

			// 省
			str = dboTestLog.wchProvince;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Province", v);

			// 市
			str = dboTestLog.wchCity;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"City", v);

			// 区
			str = dboTestLog.wchDistrict;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"District", v);

			// 详细地址
			str = dboTestLog.wchDetailedAddress;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"DetailedAddress", v);

			//// 检测单次是否一定通过
			//str = dboTestLog.wchSRM;
			//if( 0 ==str.compare(L""))
			//{
			//	v.ChangeType(VT_NULL);
			//}
			//else if( 0 ==str.compare(L"1"))
			//{
			//	v = true;
			//}
			//else
			//{
			//	v = false;
			//}
			//PutFieldData(pRecordset, L"SRM", v);

			// 备注
			str = dboTestLog.wchRemark;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Remark", v);

			// 保留字段,以后备用
			str = dboTestLog.wchReserved1;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved1", v);

			// 保留字段,以后备用
			str = dboTestLog.wchReserved2;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved2", v);

			// 保留字段,以后备用
			str = dboTestLog.wchReserved3;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved3", v);

			pRecordset->Update();  // 保存到库中

			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD SetDboTestLogIsSent(const wchar_t wchRunningNumber[50], const bool bIsSent)
{
	assert(wchRunningNumber != NULL);

	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"select IsSent from TestLog where RunningNumber = '%s'", wchRunningNumber);

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			wstring str;
			_variant_t v;
			v.ChangeType(VT_NULL);

			if(!pRecordset->adoEOF)
			{
				v = bIsSent;
				PutFieldData(pRecordset, L"IsSent", v);
			}
			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD SetDboTestLogIsSentEP(const wchar_t wchRunningNumber[50], const bool bIsSentEP)
{
	assert(wchRunningNumber != NULL);

	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"select IsSentEP from TestLog where RunningNumber = '%s'", wchRunningNumber);

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			wstring str;
			_variant_t v;
			v.ChangeType(VT_NULL);

			if(!pRecordset->adoEOF)
			{
				v = bIsSentEP;
				PutFieldData(pRecordset, L"IsSentEP", v);
			}
			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD SetDboTestLogTestState(const wchar_t wchRunningNumber[50], const short siTestState,const wchar_t wchLineNumber[50],const SYSTEMTIME *pstProcessingTime)
{
	assert(wchRunningNumber != NULL);

	//返回值
	DWORD dwReturn(0x00);
	wstring str;
	_variant_t v;
	v.ChangeType(VT_NULL);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"select TestState,LineNumber,StartProcessingTime from TestLog where RunningNumber = '%s'", wchRunningNumber);

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if(!pRecordset->adoEOF)
			{
				str = siTestState;
				if (0 == str.compare(L""))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = (_variant_t)siTestState;
				}
				PutFieldData(pRecordset, L"TestState", v);

				if (NULL == wchLineNumber)
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					str = wchLineNumber;
					v = (_variant_t)str.c_str();
				}
				PutFieldData(pRecordset, L"LineNumber", v);

				if (NULL != pstProcessingTime)
				{
					wchar_t wchStartTime[50];
					wsprintf(wchStartTime,L"%d-%d-%d %d:%d:%d",pstProcessingTime->wYear,pstProcessingTime->wMonth,pstProcessingTime->wDay,pstProcessingTime->wHour,pstProcessingTime->wMinute,pstProcessingTime->wSecond);
					str = wchStartTime;
					v = (_variant_t)str.c_str();
				}
				else
				{
					v.ChangeType(VT_NULL);
				}
				PutFieldData(pRecordset, L"StartProcessingTime", v);
			}
			pRecordset->Update(); 
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboResultOfDIS(const wchar_t wchSql[SQLMAX], PRESULTOFDIS const pDboResultOfDIS)
{
	assert(NULL != wchSql);
	assert(NULL != pDboResultOfDIS);

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			if(!pRecordset->adoEOF)
			{
				_variant_t v;
				wstring s;

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AutoID", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfDIS->wchAutoID, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfDIS->wchAutoID, L"");
				}
				
				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"RunningNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfDIS->wchRunningNumber, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfDIS->wchRunningNumber, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"ReportNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfDIS->wchReportNumber, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfDIS->wchReportNumber, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FuelTypeCode", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfDIS->wchFuelTypeCode, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfDIS->wchFuelTypeCode, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FuelTypeName", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfDIS->wchFuelTypeName, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfDIS->wchFuelTypeName,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LimitOfHCHigh", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfDIS->wchLimitOfHCHigh, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfDIS->wchLimitOfHCHigh, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LimitOfHCHigh_EDP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfDIS->wchLimitOfHCHigh_EDP, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfDIS->wchLimitOfHCHigh_EDP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LimitOfCOHigh", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfDIS->wchLimitOfCOHigh, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfDIS->wchLimitOfCOHigh, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LimitOfCOHigh_EDP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfDIS->wchLimitOfCOHigh_EDP, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfDIS->wchLimitOfCOHigh_EDP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LimitOfHCLow", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfDIS->wchLimitOfHCLow, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfDIS->wchLimitOfHCLow, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LimitOfHCLow_EDP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfDIS->wchLimitOfHCLow_EDP, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfDIS->wchLimitOfHCLow_EDP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LimitOfCOLow", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfDIS->wchLimitOfCOLow, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfDIS->wchLimitOfCOLow, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LimitOfCOLow_EDP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfDIS->wchLimitOfCOLow_EDP, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfDIS->wchLimitOfCOLow_EDP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LowerLimitOfLambda", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfDIS->wchLowerLimitOfLambda, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfDIS->wchLowerLimitOfLambda, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"UpperLimitOfLambda", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfDIS->wchUpperLimitOfLambda, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfDIS->wchUpperLimitOfLambda, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LimitOfLambda_EDP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfDIS->wchLimitOfLambda_EDP, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfDIS->wchLimitOfLambda_EDP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"RevHigh", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfDIS->wchRevHigh, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfDIS->wchRevHigh, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OilTemperatureHigh", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfDIS->wchOilTemperatureHigh, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfDIS->wchOilTemperatureHigh, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LambdaHigh", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfDIS->wchLambdaHigh, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfDIS->wchLambdaHigh, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NOHigh", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfDIS->wchNOHigh, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfDIS->wchNOHigh, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"CO2High", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfDIS->wchCO2High, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfDIS->wchCO2High, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"O2High", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfDIS->wchO2High, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfDIS->wchO2High, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HCHigh", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfDIS->wchHCHigh, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfDIS->wchHCHigh, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"COHigh", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfDIS->wchCOHigh, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfDIS->wchCOHigh, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PassOfHCHigh", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfDIS->wchPassOfHCHigh, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfDIS->wchPassOfHCHigh, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfDIS->wchPassOfHCHigh, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PassOfCOHigh", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfDIS->wchPassOfCOHigh, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfDIS->wchPassOfCOHigh, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfDIS->wchPassOfCOHigh, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NeedTestLambda", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfDIS->wchNeedTestLambda, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfDIS->wchNeedTestLambda, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfDIS->wchNeedTestLambda, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Lambda", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfDIS->wchLambda, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfDIS->wchLambda, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PassOfLambda", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfDIS->wchPassOfLambda, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfDIS->wchPassOfLambda, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfDIS->wchPassOfLambda, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NeedTestLIS", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfDIS->wchNeedTestLIS, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfDIS->wchNeedTestLIS, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfDIS->wchNeedTestLIS, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"RevLow", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfDIS->wchRevLow, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfDIS->wchRevLow, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OilTemperatureLow", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfDIS->wchOilTemperatureLow, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfDIS->wchOilTemperatureLow, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LambdaLow", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfDIS->wchLambdaLow, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfDIS->wchLambdaLow, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NOLow", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfDIS->wchNOLow, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfDIS->wchNOLow, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"CO2Low", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfDIS->wchCO2Low, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfDIS->wchCO2Low, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"O2Low", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfDIS->wchO2Low, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfDIS->wchO2Low, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HCLow", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfDIS->wchHCLow, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfDIS->wchHCLow, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"COLow", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfDIS->wchCOLow, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfDIS->wchCOLow, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PassOfHCLow", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfDIS->wchPassOfHCLow, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfDIS->wchPassOfHCLow, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfDIS->wchPassOfHCLow, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PassOfCOLow", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfDIS->wchPassOfCOLow, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfDIS->wchPassOfCOLow, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfDIS->wchPassOfCOLow, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Pass", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfDIS->wchPass, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfDIS->wchPass, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfDIS->wchPass, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EnvironmentalTemperature", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfDIS->wchEnvironmentalTemperature, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfDIS->wchEnvironmentalTemperature, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"RelativeHumidity", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfDIS->wchRelativeHumidity, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfDIS->wchRelativeHumidity, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AtmosphericPressure", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfDIS->wchAtmosphericPressure, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfDIS->wchAtmosphericPressure, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"SkipRev", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfDIS->wchSkipRev, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfDIS->wchSkipRev, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfDIS->wchSkipRev, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"SkipOilTemperature", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfDIS->wchSkipOilTemperature, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfDIS->wchSkipOilTemperature, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfDIS->wchSkipOilTemperature, L"");
				}


				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Remark", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfDIS->wchRemark, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfDIS->wchRemark,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved1", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfDIS->wchReserved1, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfDIS->wchReserved1,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved2", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfDIS->wchReserved2, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfDIS->wchReserved2,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved3", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfDIS->wchReserved3, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfDIS->wchReserved3,L"");
				}

				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboResultOfDIS_Zip(const wchar_t wchSQL[SQLMAX], SResultOfDIS* const pResultOfDIS)
{
	assert(NULL != wchSQL);
	assert(NULL != pResultOfDIS);

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSQL,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			if(!pRecordset->adoEOF)
			{
				pResultOfDIS->strAutoID = GetFieldDataEx(pRecordset, L"AutoID");
				pResultOfDIS->strRunningNumber = GetFieldDataEx(pRecordset, L"RunningNumber");
				pResultOfDIS->strReportNumber = GetFieldDataEx(pRecordset, L"ReportNumber");
				pResultOfDIS->strFuelTypeCode = GetFieldDataEx(pRecordset, L"FuelTypeCode");
				pResultOfDIS->strFuelTypeName = GetFieldDataEx(pRecordset, L"FuelTypeName");
				pResultOfDIS->strLimitOfHCHigh = GetFieldDataEx(pRecordset, L"LimitOfHCHigh");
				pResultOfDIS->strLimitOfHCHigh_EDP = GetFieldDataEx(pRecordset, L"LimitOfHCHigh_EDP");
				pResultOfDIS->strLimitOfCOHigh = GetFieldDataEx(pRecordset, L"LimitOfCOHigh");
				pResultOfDIS->strLimitOfCOHigh_EDP = GetFieldDataEx(pRecordset, L"LimitOfCOHigh_EDP");
				pResultOfDIS->strLimitOfHCLow = GetFieldDataEx(pRecordset, L"LimitOfHCLow");
				pResultOfDIS->strLimitOfHCLow_EDP = GetFieldDataEx(pRecordset, L"LimitOfHCLow_EDP");
				pResultOfDIS->strLimitOfCOLow = GetFieldDataEx(pRecordset, L"LimitOfCOLow");
				pResultOfDIS->strLimitOfCOLow_EDP = GetFieldDataEx(pRecordset, L"LimitOfCOLow_EDP");
				pResultOfDIS->strLowerLimitOfLambda = GetFieldDataEx(pRecordset, L"LowerLimitOfLambda");
				pResultOfDIS->strUpperLimitOfLambda = GetFieldDataEx(pRecordset, L"UpperLimitOfLambda");
				pResultOfDIS->strLimitOfLambda_EDP = GetFieldDataEx(pRecordset, L"LimitOfLambda_EDP");
				pResultOfDIS->strRevHigh = GetFieldDataEx(pRecordset, L"RevHigh");
				pResultOfDIS->strOilTemperatureHigh = GetFieldDataEx(pRecordset, L"OilTemperatureHigh");
				pResultOfDIS->strLambdaHigh = GetFieldDataEx(pRecordset, L"LambdaHigh");
				pResultOfDIS->strNOHigh = GetFieldDataEx(pRecordset, L"NOHigh");
				pResultOfDIS->strCO2High = GetFieldDataEx(pRecordset, L"CO2High");
				pResultOfDIS->strO2High = GetFieldDataEx(pRecordset, L"O2High");
				pResultOfDIS->strHCHigh = GetFieldDataEx(pRecordset, L"HCHigh");
				pResultOfDIS->strCOHigh = GetFieldDataEx(pRecordset, L"COHigh");
				pResultOfDIS->strPassOfHCHigh = GetFieldDataEx(pRecordset, L"PassOfHCHigh");
				pResultOfDIS->strPassOfCOHigh = GetFieldDataEx(pRecordset, L"PassOfCOHigh");
				pResultOfDIS->strNeedTestLambda = GetFieldDataEx(pRecordset, L"NeedTestLambda");
				pResultOfDIS->strLambda = GetFieldDataEx(pRecordset, L"Lambda");
				pResultOfDIS->strPassOfLambda = GetFieldDataEx(pRecordset, L"PassOfLambda");
				pResultOfDIS->strNeedTestLIS = GetFieldDataEx(pRecordset, L"NeedTestLIS");
				pResultOfDIS->strRevLow = GetFieldDataEx(pRecordset, L"RevLow");
				pResultOfDIS->strOilTemperatureLow = GetFieldDataEx(pRecordset, L"OilTemperatureLow");
				pResultOfDIS->strLambdaLow = GetFieldDataEx(pRecordset, L"LambdaLow");
				pResultOfDIS->strNOLow = GetFieldDataEx(pRecordset, L"NOLow");
				pResultOfDIS->strCO2Low = GetFieldDataEx(pRecordset, L"CO2Low");
				pResultOfDIS->strO2Low = GetFieldDataEx(pRecordset, L"O2Low");
				pResultOfDIS->strHCLow = GetFieldDataEx(pRecordset, L"HCLow");
				pResultOfDIS->strCOLow = GetFieldDataEx(pRecordset, L"COLow");
				pResultOfDIS->strPassOfHCLow = GetFieldDataEx(pRecordset, L"PassOfHCLow");
				pResultOfDIS->strPassOfCOLow = GetFieldDataEx(pRecordset, L"PassOfCOLow");
				pResultOfDIS->strPass = GetFieldDataEx(pRecordset, L"Pass");
				pResultOfDIS->strEnvironmentalTemperature = GetFieldDataEx(pRecordset, L"EnvironmentalTemperature");
				pResultOfDIS->strRelativeHumidity = GetFieldDataEx(pRecordset, L"RelativeHumidity");
				pResultOfDIS->strAtmosphericPressure = GetFieldDataEx(pRecordset, L"AtmosphericPressure");
				pResultOfDIS->strSkipRev = GetFieldDataEx(pRecordset, L"SkipRev");
				pResultOfDIS->strSkipOilTemperature = GetFieldDataEx(pRecordset, L"SkipOilTemperature");
				// 读取二进制字段
				GetImageFieldData(pRecordset, L"RTDataZip", pResultOfDIS->strRTDataZip);
				pResultOfDIS->strHash = GetFieldDataEx(pRecordset, L"Hash");
				pResultOfDIS->strRemark = GetFieldDataEx(pRecordset, L"Remark");
				pResultOfDIS->strReserved1 = GetFieldDataEx(pRecordset, L"Reserved1");
				pResultOfDIS->strReserved2 = GetFieldDataEx(pRecordset, L"Reserved2");
				pResultOfDIS->strReserved3 = GetFieldDataEx(pRecordset, L"Reserved3");

				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD SetDboResultOfDIS(const RESULTOFDIS &dboResultOfDIS)
{
	assert(&dboResultOfDIS != NULL);

	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			//wsprintf(wchSql, L"select * from ResultOfDIS where ReportNumber = '%s'", dboResultOfDIS.wchReportNumber);
			wsprintf(wchSql, L"select * from ResultOfDIS where RunningNumber = '%s'", dboResultOfDIS.wchRunningNumber);

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if(pRecordset->adoEOF)
			{
				pRecordset->AddNew();    //添加新记录
			}

			wstring str;
			_variant_t v;

			str = dboResultOfDIS.wchRunningNumber;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"RunningNumber", v);

			str = dboResultOfDIS.wchReportNumber;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"ReportNumber", v);

			str = dboResultOfDIS.wchFuelTypeCode;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"FuelTypeCode", v);

			str = dboResultOfDIS.wchFuelTypeName;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"FuelTypeName", v);

			str = dboResultOfDIS.wchLimitOfHCHigh;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"LimitOfHCHigh", v);

			str = dboResultOfDIS.wchLimitOfHCHigh_EDP;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"LimitOfHCHigh_EDP", v);

			str = dboResultOfDIS.wchLimitOfCOHigh;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"LimitOfCOHigh", v);

			str = dboResultOfDIS.wchLimitOfCOHigh_EDP;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"LimitOfCOHigh_EDP", v);

			str = dboResultOfDIS.wchLimitOfHCLow;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"LimitOfHCLow", v);

			str = dboResultOfDIS.wchLimitOfHCLow_EDP;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"LimitOfHCLow_EDP", v);

			str = dboResultOfDIS.wchLimitOfCOLow;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"LimitOfCOLow", v);

			str = dboResultOfDIS.wchLimitOfCOLow_EDP;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"LimitOfCOLow_EDP", v);

			str = dboResultOfDIS.wchUpperLimitOfLambda;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"UpperLimitOfLambda", v);

			str = dboResultOfDIS.wchLowerLimitOfLambda;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"LowerLimitOfLambda", v);

			str = dboResultOfDIS.wchRevHigh;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"RevHigh", v);

			str = dboResultOfDIS.wchOilTemperatureHigh;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"OilTemperatureHigh", v);

			str = dboResultOfDIS.wchLambdaHigh;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"LambdaHigh", v);

			str = dboResultOfDIS.wchNOHigh;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"NOHigh", v);

			str = dboResultOfDIS.wchCO2High;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"CO2High", v);

			str = dboResultOfDIS.wchO2High;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"O2High", v);

			str = dboResultOfDIS.wchHCHigh;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"HCHigh", v);

			str = dboResultOfDIS.wchCOHigh;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"COHigh", v);

			str = dboResultOfDIS.wchPassOfHCHigh;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"PassOfHCHigh", v);

			str = dboResultOfDIS.wchPassOfCOHigh;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"PassOfCOHigh", v);

			str = dboResultOfDIS.wchNeedTestLambda;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"NeedTestLambda", v);

			str = dboResultOfDIS.wchLambda;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"Lambda", v);

			str = dboResultOfDIS.wchPassOfLambda;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"PassOfLambda", v);

			str = dboResultOfDIS.wchNeedTestLIS;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"NeedTestLIS", v);

			str = dboResultOfDIS.wchRevLow;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"RevLow", v);

			str = dboResultOfDIS.wchOilTemperatureLow;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"OilTemperatureLow", v);

			str = dboResultOfDIS.wchLambdaLow;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"LambdaLow", v);

			str = dboResultOfDIS.wchNOLow;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"NOLow", v);

			str = dboResultOfDIS.wchCO2Low;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"CO2Low", v);

			str = dboResultOfDIS.wchO2Low;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"O2Low", v);

			str = dboResultOfDIS.wchHCLow;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"HCLow", v);

			str = dboResultOfDIS.wchCOLow;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"COLow", v);

			str = dboResultOfDIS.wchPassOfHCLow;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"PassOfHCLow", v);

			str = dboResultOfDIS.wchPassOfCOLow;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"PassOfCOLow", v);

			str = dboResultOfDIS.wchPass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"Pass", v);

			str = dboResultOfDIS.wchEnvironmentalTemperature;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"EnvironmentalTemperature", v);

			str = dboResultOfDIS.wchRelativeHumidity;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"RelativeHumidity", v);

			str = dboResultOfDIS.wchAtmosphericPressure;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"AtmosphericPressure", v);

			str = dboResultOfDIS.wchSkipRev;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"SkipRev", v);

			str = dboResultOfDIS.wchSkipOilTemperature;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"SkipOilTemperature", v);

			// 备注
			str = dboResultOfDIS.wchRemark;

			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Remark", v);

			// 保留字段,以后备用
			str = dboResultOfDIS.wchReserved1;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved1", v);

			// 保留字段,以后备用
			str = dboResultOfDIS.wchReserved2;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved2", v);

			// 保留字段,以后备用
			str = dboResultOfDIS.wchReserved3;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved3", v);

			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD SetDboResultOfDIS_Zip(const SResultOfDIS &sResultOfDIS)
{
	assert(&sResultOfDIS != NULL);

	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"select * from ResultOfDIS where RunningNumber='%s'", sResultOfDIS.strRunningNumber.c_str());

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if(pRecordset->adoEOF)
			{
				pRecordset->AddNew();    //添加新记录
			}
			
			PutFieldDataEx(pRecordset, L"RunningNumber", VT_BSTR, sResultOfDIS.strRunningNumber);
			PutFieldDataEx(pRecordset, L"ReportNumber", VT_BSTR, sResultOfDIS.strReportNumber);
			PutFieldDataEx(pRecordset, L"FuelTypeCode", VT_INT, sResultOfDIS.strFuelTypeCode);
			PutFieldDataEx(pRecordset, L"FuelTypeName", VT_BSTR, sResultOfDIS.strFuelTypeName);
			PutFieldDataEx(pRecordset, L"LimitOfHCHigh", VT_INT, sResultOfDIS.strLimitOfHCHigh);
			PutFieldDataEx(pRecordset, L"LimitOfHCHigh_EDP", VT_INT, sResultOfDIS.strLimitOfHCHigh_EDP);
			PutFieldDataEx(pRecordset, L"LimitOfCOHigh", VT_R4, sResultOfDIS.strLimitOfCOHigh);
			PutFieldDataEx(pRecordset, L"LimitOfCOHigh_EDP", VT_INT, sResultOfDIS.strLimitOfCOHigh_EDP);
			PutFieldDataEx(pRecordset, L"LimitOfHCLow", VT_INT, sResultOfDIS.strLimitOfHCLow);
			PutFieldDataEx(pRecordset, L"LimitOfHCLow_EDP", VT_INT, sResultOfDIS.strLimitOfHCLow_EDP);
			PutFieldDataEx(pRecordset, L"LimitOfCOLow", VT_R4, sResultOfDIS.strLimitOfCOLow);
			PutFieldDataEx(pRecordset, L"LimitOfCOLow_EDP", VT_INT, sResultOfDIS.strLimitOfCOLow_EDP);
			PutFieldDataEx(pRecordset, L"UpperLimitOfLambda", VT_R4, sResultOfDIS.strUpperLimitOfLambda);
			PutFieldDataEx(pRecordset, L"LowerLimitOfLambda", VT_R4, sResultOfDIS.strLowerLimitOfLambda);
			PutFieldDataEx(pRecordset, L"RevHigh", VT_INT, sResultOfDIS.strRevHigh);
			PutFieldDataEx(pRecordset, L"OilTemperatureHigh", VT_R4, sResultOfDIS.strOilTemperatureHigh);
			PutFieldDataEx(pRecordset, L"LambdaHigh", VT_R4, sResultOfDIS.strLambdaHigh);
			PutFieldDataEx(pRecordset, L"NOHigh", VT_INT, sResultOfDIS.strNOHigh);
			PutFieldDataEx(pRecordset, L"CO2High", VT_R4, sResultOfDIS.strCO2High);
			PutFieldDataEx(pRecordset, L"O2High", VT_R4, sResultOfDIS.strO2High);
			PutFieldDataEx(pRecordset, L"HCHigh", VT_INT, sResultOfDIS.strHCHigh);
			PutFieldDataEx(pRecordset, L"COHigh", VT_R4, sResultOfDIS.strCOHigh);
			PutFieldDataEx(pRecordset, L"PassOfHCHigh", VT_BOOL, sResultOfDIS.strPassOfHCHigh);
			PutFieldDataEx(pRecordset, L"PassOfCOHigh", VT_BOOL, sResultOfDIS.strPassOfCOHigh);
			PutFieldDataEx(pRecordset, L"NeedTestLambda", VT_BOOL, sResultOfDIS.strNeedTestLambda);
			PutFieldDataEx(pRecordset, L"Lambda", VT_R4, sResultOfDIS.strLambda);
			PutFieldDataEx(pRecordset, L"PassOfLambda", VT_BOOL, sResultOfDIS.strPassOfLambda);
			PutFieldDataEx(pRecordset, L"NeedTestLIS", VT_BOOL, sResultOfDIS.strNeedTestLIS);
			PutFieldDataEx(pRecordset, L"RevLow", VT_INT, sResultOfDIS.strRevLow);
			PutFieldDataEx(pRecordset, L"OilTemperatureLow", VT_R4, sResultOfDIS.strOilTemperatureLow);
			PutFieldDataEx(pRecordset, L"LambdaLow", VT_R4, sResultOfDIS.strLambdaLow);
			PutFieldDataEx(pRecordset, L"NOLow", VT_INT, sResultOfDIS.strNOLow);
			PutFieldDataEx(pRecordset, L"CO2Low", VT_R4, sResultOfDIS.strCO2Low);
			PutFieldDataEx(pRecordset, L"O2Low", VT_R4, sResultOfDIS.strO2Low);
			PutFieldDataEx(pRecordset, L"HCLow", VT_INT, sResultOfDIS.strHCLow);
			PutFieldDataEx(pRecordset, L"COLow", VT_R4, sResultOfDIS.strCOLow);
			PutFieldDataEx(pRecordset, L"PassOfHCLow", VT_BOOL, sResultOfDIS.strPassOfHCLow);
			PutFieldDataEx(pRecordset, L"PassOfCOLow", VT_BOOL, sResultOfDIS.strPassOfCOLow);
			PutFieldDataEx(pRecordset, L"Pass", VT_BOOL, sResultOfDIS.strPass);
			PutFieldDataEx(pRecordset, L"EnvironmentalTemperature", VT_R4, sResultOfDIS.strEnvironmentalTemperature);
			PutFieldDataEx(pRecordset, L"RelativeHumidity", VT_R4, sResultOfDIS.strRelativeHumidity);
			PutFieldDataEx(pRecordset, L"AtmosphericPressure", VT_R4, sResultOfDIS.strAtmosphericPressure);
			PutFieldDataEx(pRecordset, L"SkipRev", VT_BOOL, sResultOfDIS.strSkipRev);
			PutFieldDataEx(pRecordset, L"SkipOilTemperature", VT_BOOL, sResultOfDIS.strSkipOilTemperature);
			// 写二进制字段
			PutImageFieldData(pRecordset, L"RTDataZip", sResultOfDIS.strRTDataZip);
			PutFieldDataEx(pRecordset, L"Hash", VT_BSTR, sResultOfDIS.strHash);
			PutFieldDataEx(pRecordset, L"Remark", VT_BSTR, sResultOfDIS.strRemark);
			PutFieldDataEx(pRecordset, L"Reserved1", VT_BSTR, sResultOfDIS.strReserved1);
			PutFieldDataEx(pRecordset, L"Reserved2", VT_BSTR, sResultOfDIS.strReserved2);
			PutFieldDataEx(pRecordset, L"Reserved3", VT_BSTR, sResultOfDIS.strReserved3);

			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboRealTimeDataOfDIS(const wchar_t wchSql[SQLMAX], list<REALTIMEDATAOFDIS> &listRealTimeDataOfDIS)
{
	assert(NULL != wchSql);

	DWORD dwReturn(0x00);

	listRealTimeDataOfDIS.clear();

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			REALTIMEDATAOFDIS sRealTimeDataOfDIS;

			if (!pRecordset->adoEOF)
			{
				while(!pRecordset->adoEOF)
				{
					_variant_t v;
					wstring s;

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"AutoID", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfDIS.wchAutoID, NH_INT_TO_WCHART, L"%d", (int)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfDIS.wchAutoID,L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"RunningNumber", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfDIS.wchRunningNumber, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfDIS.wchRunningNumber, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"ReportNumber", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfDIS.wchReportNumber, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfDIS.wchReportNumber, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"FuelTypeCode", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfDIS.wchFuelTypeCode, NH_INT_TO_WCHART, L"%d", (int)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfDIS.wchFuelTypeCode, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"FuelTypeName", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfDIS.wchFuelTypeName, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfDIS.wchFuelTypeName,L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"Time", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfDIS.wchTime, NH_INT_TO_WCHART, L"%d", (int)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfDIS.wchTime, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"SamplingTime", v);
					if(VT_NULL != v.vt)
					{
						/*s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfDIS.wchSamplingTime, s.c_str());*/

						wchar_t wch[50] = {0};
						SYSTEMTIME dt;
						VariantTimeToSystemTime(v, &dt);
						swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
						wcscpy_s(sRealTimeDataOfDIS.wchSamplingTime, wch);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfDIS.wchSamplingTime, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"State", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfDIS.wchState, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfDIS.wchState, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"HC", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfDIS.wchHC, NH_INT_TO_WCHART, L"%d", (int)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfDIS.wchHC, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"CO", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfDIS.wchCO, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfDIS.wchCO, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"NO", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfDIS.wchNO, NH_INT_TO_WCHART, L"%d", (int)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfDIS.wchNO, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"O2", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfDIS.wchO2, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfDIS.wchO2, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"CO2", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfDIS.wchCO2, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfDIS.wchCO2, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"EngineRev", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfDIS.wchEngineRev, NH_INT_TO_WCHART, L"%d", (int)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfDIS.wchEngineRev, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"OilTemperature", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfDIS.wchOilTemperature, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfDIS.wchOilTemperature, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"Lambda", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfDIS.wchLambda, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfDIS.wchLambda, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"EnvironmentalTemperature", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfDIS.wchEnvironmentalTemperature, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfDIS.wchEnvironmentalTemperature, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"AtmosphericPressure", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfDIS.wchAtmosphericPressure, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfDIS.wchAtmosphericPressure, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"RelativeHumidity", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfDIS.wchRelativeHumidity, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfDIS.wchRelativeHumidity, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"Remark", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfDIS.wchRemark, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfDIS.wchRemark, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"Reserved1", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfDIS.wchReserved1, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfDIS.wchReserved1, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"Reserved2", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfDIS.wchReserved2, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfDIS.wchReserved2, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"Reserved3", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfDIS.wchReserved3, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfDIS.wchReserved3, L"");
					}

					listRealTimeDataOfDIS.push_back(sRealTimeDataOfDIS);
					pRecordset->MoveNext();
				}
				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}
DWORD GetDboRealTimeDataOfDIS_Zip(const wchar_t wchSql[SQLMAX], list<REALTIMEDATAOFDIS> &listRealTimeDataOfDIS)
{
	assert(NULL != wchSql);

	DWORD dwReturn(0x00);
	listRealTimeDataOfDIS.clear();

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			SRealTimeDataOfDIS_Zip sRealTimeDataOfDIS_Zip;
			while (!pRecordset->adoEOF)
			{
				GetStringFromDBImage(pRecordset, sRealTimeDataOfDIS_Zip.strFuelTypeCode, L"FuelTypeCode");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfDIS_Zip.strFuelTypeName, L"FuelTypeName");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfDIS_Zip.strTime, L"Time");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfDIS_Zip.strSamplingTime, L"SamplingTime");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfDIS_Zip.strState, L"State");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfDIS_Zip.strHC, L"HC");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfDIS_Zip.strCO, L"CO");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfDIS_Zip.strO2, L"O2");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfDIS_Zip.strCO2, L"CO2");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfDIS_Zip.strNO, L"NO");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfDIS_Zip.strEngineRev, L"EngineRev");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfDIS_Zip.strOilTemperature, L"OilTemperature");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfDIS_Zip.strLambda, L"Lambda");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfDIS_Zip.strEnvironmentalTemperature, L"EnvironmentalTemperature");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfDIS_Zip.strRelativeHumidity, L"RelativeHumidity");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfDIS_Zip.strAtmosphericPressure, L"AtmosphericPressure");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfDIS_Zip.strRemark, L"Remark");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfDIS_Zip.strReserved1, L"Reserved1");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfDIS_Zip.strReserved2, L"Reserved2");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfDIS_Zip.strReserved3, L"Reserved3");

				while(1)
				{
					REALTIMEDATAOFDIS sRealTimeDataOfDIS;

					if (!SplitString(sRealTimeDataOfDIS_Zip.strTime, sRealTimeDataOfDIS.wchTime, g_pchSplit))
					{
						break;
					}

					_variant_t v;
					wstring s;

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"RunningNumber", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfDIS.wchRunningNumber, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfDIS.wchRunningNumber, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"ReportNumber", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfDIS.wchReportNumber, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfDIS.wchReportNumber, L"");
					}

					SplitString(sRealTimeDataOfDIS_Zip.strFuelTypeCode, sRealTimeDataOfDIS.wchFuelTypeCode, g_pchSplit);
					SplitString(sRealTimeDataOfDIS_Zip.strFuelTypeName, sRealTimeDataOfDIS.wchFuelTypeName, g_pchSplit);
					SplitString(sRealTimeDataOfDIS_Zip.strSamplingTime, sRealTimeDataOfDIS.wchSamplingTime, g_pchSplit);
					SplitString(sRealTimeDataOfDIS_Zip.strState, sRealTimeDataOfDIS.wchState, g_pchSplit);
					SplitString(sRealTimeDataOfDIS_Zip.strHC, sRealTimeDataOfDIS.wchHC, g_pchSplit);
					SplitString(sRealTimeDataOfDIS_Zip.strCO, sRealTimeDataOfDIS.wchCO, g_pchSplit);
					SplitString(sRealTimeDataOfDIS_Zip.strO2, sRealTimeDataOfDIS.wchO2, g_pchSplit);
					SplitString(sRealTimeDataOfDIS_Zip.strCO2, sRealTimeDataOfDIS.wchCO2, g_pchSplit);
					SplitString(sRealTimeDataOfDIS_Zip.strNO, sRealTimeDataOfDIS.wchNO, g_pchSplit);
					SplitString(sRealTimeDataOfDIS_Zip.strEngineRev, sRealTimeDataOfDIS.wchEngineRev, g_pchSplit);
					SplitString(sRealTimeDataOfDIS_Zip.strOilTemperature, sRealTimeDataOfDIS.wchOilTemperature, g_pchSplit);
					SplitString(sRealTimeDataOfDIS_Zip.strLambda, sRealTimeDataOfDIS.wchLambda, g_pchSplit);
					SplitString(sRealTimeDataOfDIS_Zip.strEnvironmentalTemperature, sRealTimeDataOfDIS.wchEnvironmentalTemperature, g_pchSplit);
					SplitString(sRealTimeDataOfDIS_Zip.strRelativeHumidity, sRealTimeDataOfDIS.wchRelativeHumidity, g_pchSplit);
					SplitString(sRealTimeDataOfDIS_Zip.strAtmosphericPressure, sRealTimeDataOfDIS.wchAtmosphericPressure, g_pchSplit);
					SplitString(sRealTimeDataOfDIS_Zip.strRemark, sRealTimeDataOfDIS.wchRemark, g_pchSplit);
					SplitString(sRealTimeDataOfDIS_Zip.strReserved1, sRealTimeDataOfDIS.wchReserved1, g_pchSplit);
					SplitString(sRealTimeDataOfDIS_Zip.strReserved2, sRealTimeDataOfDIS.wchReserved2, g_pchSplit);
					SplitString(sRealTimeDataOfDIS_Zip.strReserved3, sRealTimeDataOfDIS.wchReserved3, g_pchSplit);

					listRealTimeDataOfDIS.push_back(sRealTimeDataOfDIS);
				}
				pRecordset->MoveNext();
				dwReturn = 0x01;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}
DWORD SetDboRealTimeDataOfDIS(list<REALTIMEDATAOFDIS> &listRealTimeDataOfDIS)
{
	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"select * from RealTimeDataOfDIS where 1=0");

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			_variant_t v;

			for(list<REALTIMEDATAOFDIS>::iterator ir=listRealTimeDataOfDIS.begin(); ir!=listRealTimeDataOfDIS.end(); ++ir)
			{
				pRecordset->AddNew();    //添加新记录

				// 流水号
				if(0 == _tcscmp(L"", ir->wchRunningNumber))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchRunningNumber;
				}
				PutFieldData(pRecordset, L"RunningNumber", v);

				// 检测报告编号
				if(0 == _tcscmp(L"", ir->wchReportNumber))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchReportNumber;
				}
				PutFieldData(pRecordset, L"ReportNumber", v);

				// 时间[s]
				if(0 == _tcscmp(L"", ir->wchTime))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = _wtoi(ir->wchTime);
				}
				PutFieldData(pRecordset, L"Time", v);

				// 采样时间
				if(0 == _tcscmp(L"", ir->wchSamplingTime))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchSamplingTime;
				}
				PutFieldData(pRecordset, L"SamplingTime", v);

				// HC[10-6]
				if(0 == _tcscmp(L"", ir->wchHC))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = _wtoi(ir->wchHC);
				}
				PutFieldData(pRecordset, L"HC", v);

				// CO[%]
				if(0 == _tcscmp(L"", ir->wchCO))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchCO));
				}
				PutFieldData(pRecordset, L"CO", v);

				// O2[%]
				if(0 == _tcscmp(L"", ir->wchO2))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchO2));
				}
				PutFieldData(pRecordset, L"O2", v);

				// CO2[%]
				if(0 == _tcscmp(L"", ir->wchCO2))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchCO2));
				}
				PutFieldData(pRecordset, L"CO2", v);

				// NO[10-6]
				if(0 == _tcscmp(L"", ir->wchNO))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = _wtoi(ir->wchNO);
				}
				PutFieldData(pRecordset, L"NO", v);

				// 发动机转速[r/min]
				if(0 == _tcscmp(L"", ir->wchEngineRev))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = _wtoi(ir->wchEngineRev);
				}
				PutFieldData(pRecordset, L"EngineRev", v);

				// 油温[℃]
				if(0 == _tcscmp(L"", ir->wchOilTemperature))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchOilTemperature));
				}
				PutFieldData(pRecordset, L"OilTemperature", v);

				// 过量空气系数
				if(0 == _tcscmp(L"", ir->wchLambda))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchLambda));
				}
				PutFieldData(pRecordset, L"Lambda", v);

				// 环境温度[℃]
				if(0 == _tcscmp(L"", ir->wchEnvironmentalTemperature))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchEnvironmentalTemperature));
				}
				PutFieldData(pRecordset, L"EnvironmentalTemperature", v);

				// 相对湿度[%]
				if(0 == _tcscmp(L"", ir->wchRelativeHumidity))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchRelativeHumidity));
				}
				PutFieldData(pRecordset, L"RelativeHumidity", v);

				// 大气压力[kPa]
				if(0 == _tcscmp(L"", ir->wchAtmosphericPressure))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchAtmosphericPressure));
				}
				PutFieldData(pRecordset, L"AtmosphericPressure", v);

				// 备注
				if(0 == _tcscmp(L"", ir->wchRemark))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchRemark;
				}
				PutFieldData(pRecordset, L"Remark", v);

				// 保留字段,以后备用
				if(0 == _tcscmp(L"", ir->wchReserved1))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchReserved1;
				}
				PutFieldData(pRecordset, L"Reserved1", v);

				// 保留字段,以后备用
				if(0 == _tcscmp(L"", ir->wchReserved2))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchReserved2;
				}
				PutFieldData(pRecordset, L"Reserved2", v);

				// 保留字段,以后备用
				if(0 == _tcscmp(L"", ir->wchReserved3))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchReserved3;
				}
				PutFieldData(pRecordset, L"Reserved3", v);
			}

			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}
DWORD SetDboRealTimeDataOfDIS_Zip(list<REALTIMEDATAOFDIS> &listRealTimeDataOfDIS)
{
	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			list<RealTimeDataOfDIS>::iterator irTmp=listRealTimeDataOfDIS.begin();

			wsprintf(wchSql, L"select * from RealTimeDataOfDIS_Zip where RunningNumber = '%s'", irTmp->wchRunningNumber);
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			_variant_t v;

			if(pRecordset->adoEOF)
			{
				pRecordset->AddNew();    //添加新记录
			}

			SRealTimeDataOfDIS_Zip sRealTimeDataOfDIS_Zip;


			for(list<RealTimeDataOfDIS>::iterator ir=listRealTimeDataOfDIS.begin(); ir!=listRealTimeDataOfDIS.end(); ++ir)
			{
				if(0 == _tcscmp(L"", ir->wchRunningNumber))
				{
					sRealTimeDataOfDIS_Zip.strRunningNumber = L"";
				}
				else
				{
					sRealTimeDataOfDIS_Zip.strRunningNumber = ir->wchRunningNumber;
				}
				
				// 检测报告编号
				if(0 == _tcscmp(L"", ir->wchReportNumber))
				{

					sRealTimeDataOfDIS_Zip.strReportNumber = L"";
				}
				else
				{
					sRealTimeDataOfDIS_Zip.strReportNumber = ir->wchReportNumber;
				}


				if(0 == _tcscmp(L"", ir->wchTime))
				{
					sRealTimeDataOfDIS_Zip.strTime += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfDIS_Zip.strTime += UnicodeToANSIEx(ir->wchTime);
					sRealTimeDataOfDIS_Zip.strTime += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchSamplingTime))
				{
					sRealTimeDataOfDIS_Zip.strSamplingTime += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfDIS_Zip.strSamplingTime += UnicodeToANSIEx(ir->wchSamplingTime);
					sRealTimeDataOfDIS_Zip.strSamplingTime += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchState))
				{
					sRealTimeDataOfDIS_Zip.strState += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfDIS_Zip.strState += UnicodeToANSIEx(ir->wchState);
					sRealTimeDataOfDIS_Zip.strState += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchHC))
				{
					sRealTimeDataOfDIS_Zip.strHC += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfDIS_Zip.strHC += UnicodeToANSIEx(ir->wchHC);
					sRealTimeDataOfDIS_Zip.strHC += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchCO))
				{
					sRealTimeDataOfDIS_Zip.strCO += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfDIS_Zip.strCO += UnicodeToANSIEx(ir->wchCO);
					sRealTimeDataOfDIS_Zip.strCO += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchO2))
				{
					sRealTimeDataOfDIS_Zip.strO2 += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfDIS_Zip.strO2 += UnicodeToANSIEx(ir->wchO2);
					sRealTimeDataOfDIS_Zip.strO2 += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchCO2))
				{
					sRealTimeDataOfDIS_Zip.strCO2 += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfDIS_Zip.strCO2 += UnicodeToANSIEx(ir->wchCO2);
					sRealTimeDataOfDIS_Zip.strCO2 += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchNO))
				{
					sRealTimeDataOfDIS_Zip.strNO += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfDIS_Zip.strNO += UnicodeToANSIEx(ir->wchNO);
					sRealTimeDataOfDIS_Zip.strNO += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchEngineRev))
				{
					sRealTimeDataOfDIS_Zip.strEngineRev += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfDIS_Zip.strEngineRev += UnicodeToANSIEx(ir->wchEngineRev);
					sRealTimeDataOfDIS_Zip.strEngineRev += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchOilTemperature))
				{
					sRealTimeDataOfDIS_Zip.strOilTemperature += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfDIS_Zip.strOilTemperature += UnicodeToANSIEx(ir->wchOilTemperature);
					sRealTimeDataOfDIS_Zip.strOilTemperature += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchLambda))
				{
					sRealTimeDataOfDIS_Zip.strLambda += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfDIS_Zip.strLambda += UnicodeToANSIEx(ir->wchLambda);
					sRealTimeDataOfDIS_Zip.strLambda += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchEnvironmentalTemperature))
				{
					sRealTimeDataOfDIS_Zip.strEnvironmentalTemperature += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfDIS_Zip.strEnvironmentalTemperature += UnicodeToANSIEx(ir->wchEnvironmentalTemperature);
					sRealTimeDataOfDIS_Zip.strEnvironmentalTemperature += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchRelativeHumidity))
				{
					sRealTimeDataOfDIS_Zip.strRelativeHumidity += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfDIS_Zip.strRelativeHumidity += UnicodeToANSIEx(ir->wchRelativeHumidity);
					sRealTimeDataOfDIS_Zip.strRelativeHumidity += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchAtmosphericPressure))
				{
					sRealTimeDataOfDIS_Zip.strAtmosphericPressure += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfDIS_Zip.strAtmosphericPressure += UnicodeToANSIEx(ir->wchAtmosphericPressure);
					sRealTimeDataOfDIS_Zip.strAtmosphericPressure += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchRemark))
				{
					sRealTimeDataOfDIS_Zip.strRemark += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfDIS_Zip.strRemark += UnicodeToANSIEx(ir->wchRemark);
					sRealTimeDataOfDIS_Zip.strRemark += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchReserved1))
				{
					sRealTimeDataOfDIS_Zip.strReserved1 += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfDIS_Zip.strReserved1 += UnicodeToANSIEx(ir->wchReserved1);
					sRealTimeDataOfDIS_Zip.strReserved1 += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchReserved2))
				{
					sRealTimeDataOfDIS_Zip.strReserved2 += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfDIS_Zip.strReserved2 += UnicodeToANSIEx(ir->wchReserved2);
					sRealTimeDataOfDIS_Zip.strReserved2 += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchReserved3))
				{
					sRealTimeDataOfDIS_Zip.strReserved3 += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfDIS_Zip.strReserved3 += UnicodeToANSIEx(ir->wchReserved3);
					sRealTimeDataOfDIS_Zip.strReserved3 += g_pchSplit;
				}
			}
			
			v.ChangeType(VT_NULL);
			v = sRealTimeDataOfDIS_Zip.strRunningNumber.c_str();
			PutFieldData(pRecordset, L"RunningNumber", v);
			
			v.ChangeType(VT_NULL);
			v = sRealTimeDataOfDIS_Zip.strReportNumber.c_str();
			PutFieldData(pRecordset, L"ReportNumber", v);

			SetStringToDBImage(pRecordset, sRealTimeDataOfDIS_Zip.strTime, L"Time");
			SetStringToDBImage(pRecordset, sRealTimeDataOfDIS_Zip.strSamplingTime, L"SamplingTime");
			SetStringToDBImage(pRecordset, sRealTimeDataOfDIS_Zip.strState, L"State");
			SetStringToDBImage(pRecordset, sRealTimeDataOfDIS_Zip.strHC, L"HC");
			SetStringToDBImage(pRecordset, sRealTimeDataOfDIS_Zip.strCO, L"CO");
			SetStringToDBImage(pRecordset, sRealTimeDataOfDIS_Zip.strO2, L"O2");
			SetStringToDBImage(pRecordset, sRealTimeDataOfDIS_Zip.strCO2, L"CO2");
			SetStringToDBImage(pRecordset, sRealTimeDataOfDIS_Zip.strNO, L"NO");
			SetStringToDBImage(pRecordset, sRealTimeDataOfDIS_Zip.strEngineRev, L"EngineRev");
			SetStringToDBImage(pRecordset, sRealTimeDataOfDIS_Zip.strOilTemperature, L"OilTemperature");
			SetStringToDBImage(pRecordset, sRealTimeDataOfDIS_Zip.strLambda, L"Lambda");
			SetStringToDBImage(pRecordset, sRealTimeDataOfDIS_Zip.strEnvironmentalTemperature, L"EnvironmentalTemperature");
			SetStringToDBImage(pRecordset, sRealTimeDataOfDIS_Zip.strRelativeHumidity, L"RelativeHumidity");
			SetStringToDBImage(pRecordset, sRealTimeDataOfDIS_Zip.strAtmosphericPressure, L"AtmosphericPressure");
			SetStringToDBImage(pRecordset, sRealTimeDataOfDIS_Zip.strRemark, L"Remark");
			SetStringToDBImage(pRecordset, sRealTimeDataOfDIS_Zip.strReserved1, L"Reserved1");
			SetStringToDBImage(pRecordset, sRealTimeDataOfDIS_Zip.strReserved2, L"Reserved2");
			SetStringToDBImage(pRecordset, sRealTimeDataOfDIS_Zip.strReserved3, L"Reserved3");

			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboResultOfASM(const wchar_t wchSql[SQLMAX], PRESULTOFASM const pDboResultOfASM)
{
	assert(NULL != wchSql);
	assert(NULL != pDboResultOfASM);

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			if(!pRecordset->adoEOF)
			{
				_variant_t v;
				wstring s;

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AutoID", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfASM->wchAutoID, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchAutoID, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"RunningNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfASM->wchRunningNumber, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchRunningNumber, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"ReportNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfASM->wchReportNumber, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchReportNumber, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FuelTypeCode", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfASM->wchFuelTypeCode, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchFuelTypeCode, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FuelTypeName", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfASM->wchFuelTypeName, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchFuelTypeName,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LimitOfHC5025", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfASM->wchLimitOfHC5025, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchLimitOfHC5025, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LimitOfHC5025_EDP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfASM->wchLimitOfHC5025_EDP, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchLimitOfHC5025_EDP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LimitOfCO5025", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfASM->wchLimitOfCO5025, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchLimitOfCO5025, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LimitOfCO5025_EDP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfASM->wchLimitOfCO5025_EDP, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchLimitOfCO5025_EDP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LimitOfNO5025", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfASM->wchLimitOfNO5025, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchLimitOfNO5025, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LimitOfNO5025_EDP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfASM->wchLimitOfNO5025_EDP, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchLimitOfNO5025_EDP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LimitOfHC2540", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfASM->wchLimitOfHC2540, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchLimitOfHC2540, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LimitOfHC2540_EDP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfASM->wchLimitOfHC2540_EDP, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchLimitOfHC2540_EDP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LimitOfCO2540", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfASM->wchLimitOfCO2540, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchLimitOfCO2540, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LimitOfCO2540_EDP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfASM->wchLimitOfCO2540_EDP, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchLimitOfCO2540_EDP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LimitOfNO2540", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfASM->wchLimitOfNO2540, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchLimitOfNO2540, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LimitOfNO2540_EDP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfASM->wchLimitOfNO2540_EDP, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchLimitOfNO2540_EDP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Rev5025", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfASM->wchRev5025, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchRev5025, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OilTemperature5025", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfASM->wchOilTemperature5025, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchOilTemperature5025, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Lambda5025", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfASM->wchLambda5025, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchLambda5025, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Power5025", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfASM->wchPower5025, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchPower5025, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HC5025", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfASM->wchHC5025, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchHC5025, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"CO5025", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfASM->wchCO5025, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchCO5025, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NO5025", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfASM->wchNO5025, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchNO5025, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"CO25025", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfASM->wchCO25025, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchCO25025, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"O25025", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfASM->wchO25025, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchO25025, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PassOfHC5025", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfASM->wchPassOfHC5025, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfASM->wchPassOfHC5025, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchPassOfHC5025, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PassOfCO5025", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfASM->wchPassOfCO5025, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfASM->wchPassOfCO5025, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchPassOfCO5025, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PassOfNO5025", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfASM->wchPassOfNO5025, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfASM->wchPassOfNO5025, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchPassOfNO5025, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NeedTestMode2540", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfASM->wchNeedTestMode2540, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfASM->wchNeedTestMode2540, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchNeedTestMode2540, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Rev2540", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfASM->wchRev2540, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchRev2540, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OilTemperature2540", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfASM->wchOilTemperature2540, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchOilTemperature2540, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Lambda2540", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfASM->wchLambda2540, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchLambda2540, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Power2540", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfASM->wchPower2540, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchPower2540, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HC2540", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfASM->wchHC2540, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchHC2540, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"CO2540", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfASM->wchCO2540, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchCO2540, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NO2540", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfASM->wchNO2540, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchNO2540, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"CO22540", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfASM->wchCO22540, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchCO22540, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"O22540", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfASM->wchO22540, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchO22540, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PassOfHC2540", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfASM->wchPassOfHC2540, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfASM->wchPassOfHC2540, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchPassOfHC2540, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PassOfCO2540", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfASM->wchPassOfCO2540, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfASM->wchPassOfCO2540, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchPassOfCO2540, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PassOfNO2540", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfASM->wchPassOfNO2540, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfASM->wchPassOfNO2540, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchPassOfNO2540, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Pass", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfASM->wchPass, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfASM->wchPass, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchPass, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EnvironmentalTemperature", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfASM->wchEnvironmentalTemperature, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchEnvironmentalTemperature, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"RelativeHumidity", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfASM->wchRelativeHumidity, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchRelativeHumidity, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AtmosphericPressure", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfASM->wchAtmosphericPressure, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchAtmosphericPressure, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"SkipRev", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfASM->wchSkipRev, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfASM->wchSkipRev, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchSkipRev, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"SkipOilTemperature", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfASM->wchSkipOilTemperature, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfASM->wchSkipOilTemperature, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchSkipOilTemperature, L"");
				}


				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Remark", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfASM->wchRemark, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchRemark,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved1", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfASM->wchReserved1, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchReserved1,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved2", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfASM->wchReserved2, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchReserved2,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved3", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfASM->wchReserved3, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfASM->wchReserved3,L"");
				}

				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboResultOfASM_Zip(const wchar_t wchSQL[SQLMAX], SResultOfASM* const pResultOfASM)
{
	assert(NULL != wchSQL);
	assert(NULL != pResultOfASM);

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);
	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;
		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSQL,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			if (!pRecordset->adoEOF)
			{
				pResultOfASM->strAutoID = GetFieldDataEx(pRecordset, L"AutoID");
				pResultOfASM->strRunningNumber = GetFieldDataEx(pRecordset, L"RunningNumber");
				pResultOfASM->strReportNumber = GetFieldDataEx(pRecordset, L"ReportNumber");
				pResultOfASM->strFuelTypeCode = GetFieldDataEx(pRecordset, L"FuelTypeCode");
				pResultOfASM->strFuelTypeName = GetFieldDataEx(pRecordset, L"FuelTypeName");
				pResultOfASM->strLimitOfHC5025 = GetFieldDataEx(pRecordset, L"LimitOfHC5025");
				pResultOfASM->strLimitOfHC5025_EDP = GetFieldDataEx(pRecordset, L"LimitOfHC5025_EDP");
				pResultOfASM->strLimitOfCO5025 = GetFieldDataEx(pRecordset, L"LimitOfCO5025");
				pResultOfASM->strLimitOfCO5025_EDP = GetFieldDataEx(pRecordset, L"LimitOfCO5025_EDP");
				pResultOfASM->strLimitOfNO5025 = GetFieldDataEx(pRecordset, L"LimitOfNO5025");
				pResultOfASM->strLimitOfNO5025_EDP = GetFieldDataEx(pRecordset, L"LimitOfNO5025_EDP");
				pResultOfASM->strLimitOfHC2540 = GetFieldDataEx(pRecordset, L"LimitOfHC2540");
				pResultOfASM->strLimitOfHC2540_EDP = GetFieldDataEx(pRecordset, L"LimitOfHC2540_EDP");
				pResultOfASM->strLimitOfCO2540 = GetFieldDataEx(pRecordset, L"LimitOfCO2540");
				pResultOfASM->strLimitOfCO2540_EDP = GetFieldDataEx(pRecordset, L"LimitOfCO2540_EDP");
				pResultOfASM->strLimitOfNO2540 = GetFieldDataEx(pRecordset, L"LimitOfNO2540");
				pResultOfASM->strLimitOfNO2540_EDP = GetFieldDataEx(pRecordset, L"LimitOfNO2540_EDP");
				pResultOfASM->strRev5025 = GetFieldDataEx(pRecordset, L"Rev5025");				
				pResultOfASM->strOilTemperature5025 = GetFieldDataEx(pRecordset, L"OilTemperature5025");
				pResultOfASM->strLambda5025 = GetFieldDataEx(pRecordset, L"Lambda5025");
				pResultOfASM->strPower5025 = GetFieldDataEx(pRecordset, L"Power5025");
				pResultOfASM->strHC5025 = GetFieldDataEx(pRecordset, L"HC5025");
				pResultOfASM->strCO5025 = GetFieldDataEx(pRecordset, L"CO5025");
				pResultOfASM->strNO5025 = GetFieldDataEx(pRecordset, L"NO5025");						
				pResultOfASM->strCO25025 = GetFieldDataEx(pRecordset, L"CO25025");
				pResultOfASM->strO25025 = GetFieldDataEx(pRecordset, L"O25025");
				pResultOfASM->strPassOfHC5025 = GetFieldDataEx(pRecordset, L"PassOfHC5025");
				pResultOfASM->strPassOfCO5025 = GetFieldDataEx(pRecordset, L"PassOfCO5025");
				pResultOfASM->strPassOfNO5025 = GetFieldDataEx(pRecordset, L"PassOfNO5025");
				pResultOfASM->strNeedTestMode2540 = GetFieldDataEx(pRecordset, L"NeedTestMode2540");
				pResultOfASM->strRev2540 = GetFieldDataEx(pRecordset, L"Rev2540");
				pResultOfASM->strOilTemperature2540 = GetFieldDataEx(pRecordset, L"OilTemperature2540");
				pResultOfASM->strLambda2540 = GetFieldDataEx(pRecordset, L"Lambda2540");
				pResultOfASM->strPower2540 = GetFieldDataEx(pRecordset, L"Power2540");
				pResultOfASM->strHC2540 = GetFieldDataEx(pRecordset, L"HC2540");
				pResultOfASM->strCO2540 = GetFieldDataEx(pRecordset, L"CO2540");
				pResultOfASM->strNO2540 = GetFieldDataEx(pRecordset, L"NO2540");
				pResultOfASM->strCO22540 = GetFieldDataEx(pRecordset, L"CO22540");
				pResultOfASM->strO22540 = GetFieldDataEx(pRecordset, L"O22540");
				pResultOfASM->strPassOfHC2540 = GetFieldDataEx(pRecordset, L"PassOfHC2540");
				pResultOfASM->strPassOfCO2540 = GetFieldDataEx(pRecordset, L"PassOfCO2540");
				pResultOfASM->strPassOfNO2540 = GetFieldDataEx(pRecordset, L"PassOfNO2540");
				pResultOfASM->strPass = GetFieldDataEx(pRecordset, L"Pass");
				pResultOfASM->strEnvironmentalTemperature = GetFieldDataEx(pRecordset, L"EnvironmentalTemperature");
				pResultOfASM->strRelativeHumidity = GetFieldDataEx(pRecordset, L"RelativeHumidity");
				pResultOfASM->strAtmosphericPressure = GetFieldDataEx(pRecordset, L"AtmosphericPressure");
				pResultOfASM->strSkipRev = GetFieldDataEx(pRecordset, L"SkipRev");
				pResultOfASM->strSkipOilTemperature = GetFieldDataEx(pRecordset, L"SkipOilTemperature");				
				// 读取二进制字段
				GetImageFieldData(pRecordset, L"RTDataZip", pResultOfASM->strRTDataZip);
				pResultOfASM->strHash = GetFieldDataEx(pRecordset, L"Hash");
				pResultOfASM->strRemark = GetFieldDataEx(pRecordset, L"Remark");
				pResultOfASM->strReserved1 = GetFieldDataEx(pRecordset, L"Reserved1");
				pResultOfASM->strReserved2 = GetFieldDataEx(pRecordset, L"Reserved2");
				pResultOfASM->strReserved3 = GetFieldDataEx(pRecordset, L"Reserved3");

				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD SetDboResultOfASM(const RESULTOFASM &dboResultOfASM)
{
	assert(&dboResultOfASM != NULL);

	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			//wsprintf(wchSql, L"select * from ResultOfASM where ReportNumber = '%s'", dboResultOfASM.wchReportNumber);
			wsprintf(wchSql, L"select * from ResultOfASM where RunningNumber = '%s'", dboResultOfASM.wchRunningNumber);

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if(pRecordset->adoEOF)
			{
				pRecordset->AddNew();    //添加新记录
			}

			wstring str;
			_variant_t v;

			str = dboResultOfASM.wchRunningNumber;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"RunningNumber", v);

			str = dboResultOfASM.wchReportNumber;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"ReportNumber", v);

			str = dboResultOfASM.wchFuelTypeCode;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"FuelTypeCode", v);

			str = dboResultOfASM.wchFuelTypeName;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"FuelTypeName", v);

			str = dboResultOfASM.wchLimitOfHC5025;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"LimitOfHC5025", v);

			str = dboResultOfASM.wchLimitOfHC5025_EDP;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"LimitOfHC5025_EDP", v);

			str = dboResultOfASM.wchLimitOfCO5025;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"LimitOfCO5025", v);

			str = dboResultOfASM.wchLimitOfCO5025_EDP;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"LimitOfCO5025_EDP", v);

			str = dboResultOfASM.wchLimitOfNO5025;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"LimitOfNO5025", v);

			str = dboResultOfASM.wchLimitOfNO5025_EDP;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"LimitOfNO5025_EDP", v);

			str = dboResultOfASM.wchLimitOfHC2540;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"LimitOfHC2540", v);

			str = dboResultOfASM.wchLimitOfHC2540_EDP;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"LimitOfHC2540_EDP", v);

			str = dboResultOfASM.wchLimitOfCO2540;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"LimitOfCO2540", v);

			str = dboResultOfASM.wchLimitOfCO2540_EDP;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"LimitOfCO2540_EDP", v);

			str = dboResultOfASM.wchLimitOfNO2540;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"LimitOfNO2540", v);

			str = dboResultOfASM.wchLimitOfNO2540_EDP;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"LimitOfNO2540_EDP", v);

			str = dboResultOfASM.wchRev5025;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"Rev5025", v);

			str = dboResultOfASM.wchOilTemperature5025;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"OilTemperature5025", v);

			str = dboResultOfASM.wchLambda5025;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"Lambda5025", v);

			str = dboResultOfASM.wchPower5025;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"Power5025", v);

			str = dboResultOfASM.wchHC5025;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"HC5025", v);

			str = dboResultOfASM.wchCO5025;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"CO5025", v);

			str = dboResultOfASM.wchNO5025;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"NO5025", v);

			str = dboResultOfASM.wchCO25025;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"CO25025", v);

			str = dboResultOfASM.wchO25025;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"O25025", v);

			str = dboResultOfASM.wchPassOfHC5025;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"PassOfHC5025", v);

			str = dboResultOfASM.wchPassOfCO5025;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"PassOfCO5025", v);

			str = dboResultOfASM.wchPassOfNO5025;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"PassOfNO5025", v);

			str = dboResultOfASM.wchNeedTestMode2540;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"NeedTestMode2540", v);

			str = dboResultOfASM.wchRev2540;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"Rev2540", v);

			str = dboResultOfASM.wchOilTemperature2540;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"OilTemperature2540", v);

			str = dboResultOfASM.wchLambda2540;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"Lambda2540", v);

			str = dboResultOfASM.wchPower2540;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"Power2540", v);

			str = dboResultOfASM.wchHC2540;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"HC2540", v);

			str = dboResultOfASM.wchCO2540;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"CO2540", v);

			str = dboResultOfASM.wchNO2540;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"NO2540", v);

			str = dboResultOfASM.wchCO22540;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"CO22540", v);

			str = dboResultOfASM.wchO22540;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"O22540", v);

			str = dboResultOfASM.wchPassOfHC2540;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"PassOfHC2540", v);

			str = dboResultOfASM.wchPassOfCO2540;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"PassOfCO2540", v);

			str = dboResultOfASM.wchPassOfNO2540;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"PassOfNO2540", v);

			str = dboResultOfASM.wchPass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"Pass", v);

			str = dboResultOfASM.wchEnvironmentalTemperature;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"EnvironmentalTemperature", v);

			str = dboResultOfASM.wchRelativeHumidity;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"RelativeHumidity", v);

			str = dboResultOfASM.wchAtmosphericPressure;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"AtmosphericPressure", v);

			str = dboResultOfASM.wchSkipRev;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"SkipRev", v);

			str = dboResultOfASM.wchSkipOilTemperature;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"SkipOilTemperature", v);

			// 备注
			str = dboResultOfASM.wchRemark;

			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Remark", v);

			// 保留字段,以后备用
			str = dboResultOfASM.wchReserved1;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved1", v);

			// 保留字段,以后备用
			str = dboResultOfASM.wchReserved2;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved2", v);

			// 保留字段,以后备用
			str = dboResultOfASM.wchReserved3;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved3", v);

			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD SetDboResultOfASM_Zip(const SResultOfASM &sResultOfASM)
{
	assert(&sResultOfASM != NULL);

	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"select * from ResultOfASM where RunningNumber='%s'", sResultOfASM.strRunningNumber.c_str());

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if(pRecordset->adoEOF)
			{
				pRecordset->AddNew();    //添加新记录
			}

			PutFieldDataEx(pRecordset, L"RunningNumber", VT_BSTR, sResultOfASM.strRunningNumber);
			PutFieldDataEx(pRecordset, L"ReportNumber", VT_BSTR, sResultOfASM.strReportNumber);
			PutFieldDataEx(pRecordset, L"FuelTypeCode", VT_INT, sResultOfASM.strFuelTypeCode);
			PutFieldDataEx(pRecordset, L"FuelTypeName", VT_BSTR, sResultOfASM.strFuelTypeName);
			PutFieldDataEx(pRecordset, L"LimitOfHC5025", VT_INT, sResultOfASM.strLimitOfHC5025);
			PutFieldDataEx(pRecordset, L"LimitOfHC5025_EDP", VT_INT, sResultOfASM.strLimitOfHC5025_EDP);
			PutFieldDataEx(pRecordset, L"LimitOfCO5025", VT_R4, sResultOfASM.strLimitOfCO5025);
			PutFieldDataEx(pRecordset, L"LimitOfCO5025_EDP", VT_INT, sResultOfASM.strLimitOfCO5025_EDP);
			PutFieldDataEx(pRecordset, L"LimitOfNO5025", VT_INT, sResultOfASM.strLimitOfNO5025);
			PutFieldDataEx(pRecordset, L"LimitOfNO5025_EDP", VT_INT, sResultOfASM.strLimitOfNO5025_EDP);
			PutFieldDataEx(pRecordset, L"LimitOfHC2540", VT_INT, sResultOfASM.strLimitOfHC2540);
			PutFieldDataEx(pRecordset, L"LimitOfHC2540_EDP", VT_INT, sResultOfASM.strLimitOfHC2540_EDP);
			PutFieldDataEx(pRecordset, L"LimitOfCO2540", VT_R4, sResultOfASM.strLimitOfCO2540);
			PutFieldDataEx(pRecordset, L"LimitOfCO2540_EDP", VT_INT, sResultOfASM.strLimitOfCO2540_EDP);
			PutFieldDataEx(pRecordset, L"LimitOfNO2540", VT_INT, sResultOfASM.strLimitOfNO2540);
			PutFieldDataEx(pRecordset, L"LimitOfNO2540_EDP", VT_INT, sResultOfASM.strLimitOfNO2540_EDP);
			PutFieldDataEx(pRecordset, L"Rev5025", VT_INT, sResultOfASM.strRev5025);
			PutFieldDataEx(pRecordset, L"OilTemperature5025", VT_R4, sResultOfASM.strOilTemperature5025);
			PutFieldDataEx(pRecordset, L"Lambda5025", VT_R4, sResultOfASM.strLambda5025);
			PutFieldDataEx(pRecordset, L"Power5025", VT_R4, sResultOfASM.strPower5025);
			PutFieldDataEx(pRecordset, L"HC5025", VT_INT, sResultOfASM.strHC5025);
			PutFieldDataEx(pRecordset, L"CO5025", VT_R4, sResultOfASM.strCO5025);
			PutFieldDataEx(pRecordset, L"NO5025", VT_INT, sResultOfASM.strNO5025);
			PutFieldDataEx(pRecordset, L"CO25025", VT_R4, sResultOfASM.strCO25025);
			PutFieldDataEx(pRecordset, L"O25025", VT_R4, sResultOfASM.strO25025);
			PutFieldDataEx(pRecordset, L"PassOfHC5025", VT_BOOL, sResultOfASM.strPassOfHC5025);
			PutFieldDataEx(pRecordset, L"PassOfCO5025", VT_BOOL, sResultOfASM.strPassOfCO5025);
			PutFieldDataEx(pRecordset, L"PassOfNO5025", VT_BOOL, sResultOfASM.strPassOfNO5025);
			PutFieldDataEx(pRecordset, L"NeedTestMode2540", VT_BOOL, sResultOfASM.strNeedTestMode2540);
			PutFieldDataEx(pRecordset, L"Rev2540", VT_INT, sResultOfASM.strRev2540);
			PutFieldDataEx(pRecordset, L"OilTemperature2540", VT_R4, sResultOfASM.strOilTemperature2540);
			PutFieldDataEx(pRecordset, L"Lambda2540", VT_R4, sResultOfASM.strLambda2540);
			PutFieldDataEx(pRecordset, L"Power2540", VT_R4, sResultOfASM.strPower2540);
			PutFieldDataEx(pRecordset, L"HC2540", VT_INT, sResultOfASM.strHC2540);
			PutFieldDataEx(pRecordset, L"CO2540", VT_R4, sResultOfASM.strCO2540);
			PutFieldDataEx(pRecordset, L"NO2540", VT_INT, sResultOfASM.strNO2540);
			PutFieldDataEx(pRecordset, L"CO22540", VT_R4, sResultOfASM.strCO22540);
			PutFieldDataEx(pRecordset, L"O22540", VT_R4, sResultOfASM.strO22540);
			PutFieldDataEx(pRecordset, L"PassOfHC2540", VT_BOOL, sResultOfASM.strPassOfHC2540);
			PutFieldDataEx(pRecordset, L"PassOfCO2540", VT_BOOL, sResultOfASM.strPassOfCO2540);
			PutFieldDataEx(pRecordset, L"PassOfNO2540", VT_BOOL, sResultOfASM.strPassOfNO2540);
			PutFieldDataEx(pRecordset, L"Pass", VT_BOOL, sResultOfASM.strPass);
			PutFieldDataEx(pRecordset, L"EnvironmentalTemperature", VT_R4, sResultOfASM.strEnvironmentalTemperature);
			PutFieldDataEx(pRecordset, L"RelativeHumidity", VT_R4, sResultOfASM.strRelativeHumidity);
			PutFieldDataEx(pRecordset, L"AtmosphericPressure", VT_R4, sResultOfASM.strAtmosphericPressure);
			PutFieldDataEx(pRecordset, L"SkipRev", VT_BOOL, sResultOfASM.strSkipRev);
			PutFieldDataEx(pRecordset, L"SkipOilTemperature", VT_BOOL, sResultOfASM.strSkipOilTemperature);
			// 写二进制字段
			PutImageFieldData(pRecordset, L"RTDataZip", sResultOfASM.strRTDataZip);
			PutFieldDataEx(pRecordset, L"Hash", VT_BSTR, sResultOfASM.strHash);
			PutFieldDataEx(pRecordset, L"Remark", VT_BSTR, sResultOfASM.strRemark);
			PutFieldDataEx(pRecordset, L"Reserved1", VT_BSTR, sResultOfASM.strReserved1);
			PutFieldDataEx(pRecordset, L"Reserved2", VT_BSTR, sResultOfASM.strReserved2);
			PutFieldDataEx(pRecordset, L"Reserved3", VT_BSTR, sResultOfASM.strReserved3);
			
			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboRealTimeDataOfASM(const wchar_t wchSql[SQLMAX], list<REALTIMEDATAOFASM> &listRealTimeDataOfASM)
{
	assert(NULL != wchSql);

	DWORD dwReturn(0x00);
	listRealTimeDataOfASM.clear();

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			REALTIMEDATAOFASM sRealTimeDataOfASM;

			if (!pRecordset->adoEOF)
			{
				while(!pRecordset->adoEOF)
				{
					_variant_t v;
					wstring s;

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"AutoID", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfASM.wchAutoID, NH_INT_TO_WCHART, L"%d", (int)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfASM.wchAutoID,L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"RunningNumber", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfASM.wchRunningNumber, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfASM.wchRunningNumber, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"ReportNumber", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfASM.wchReportNumber, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfASM.wchReportNumber, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"FuelTypeCode", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfASM.wchFuelTypeCode, NH_INT_TO_WCHART, L"%d", (int)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfASM.wchFuelTypeCode, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"FuelTypeName", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfASM.wchFuelTypeName, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfASM.wchFuelTypeName,L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"Time", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfASM.wchTime, NH_INT_TO_WCHART, L"%d", (int)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfASM.wchTime, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"SamplingTime", v);
					if(VT_NULL != v.vt)
					{
						/*s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfASM.wchSamplingTime, s.c_str());*/

						wchar_t wch[50] = {0};
						SYSTEMTIME dt;
						VariantTimeToSystemTime(v, &dt);
						swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
						wcscpy_s(sRealTimeDataOfASM.wchSamplingTime, wch);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfASM.wchSamplingTime, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"Velocity", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfASM.wchVelocity, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfASM.wchVelocity, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"Power", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfASM.wchPower, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfASM.wchPower, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"Force", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfASM.wchForce, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfASM.wchForce, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"IHP", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfASM.wchIHP, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfASM.wchIHP, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"PLHP", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfASM.wchPLHP, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfASM.wchPLHP, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"State", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfASM.wchState, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfASM.wchState, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"HC", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfASM.wchHC, NH_INT_TO_WCHART, L"%d", (int)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfASM.wchHC, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"CO", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfASM.wchCO, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfASM.wchCO, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"NO", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfASM.wchNO, NH_INT_TO_WCHART, L"%d", (int)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfASM.wchNO, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"O2", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfASM.wchO2, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfASM.wchO2, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"CO2", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfASM.wchCO2, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfASM.wchCO2, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"EngineRev", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfASM.wchEngineRev, NH_INT_TO_WCHART, L"%d", (int)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfASM.wchEngineRev, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"OilTemperature", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfASM.wchOilTemperature, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfASM.wchOilTemperature, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"Lambda", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfASM.wchLambda, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfASM.wchLambda, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"EnvironmentalTemperature", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfASM.wchEnvironmentalTemperature, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfASM.wchEnvironmentalTemperature, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"AtmosphericPressure", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfASM.wchAtmosphericPressure, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfASM.wchAtmosphericPressure, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"RelativeHumidity", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfASM.wchRelativeHumidity, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfASM.wchRelativeHumidity, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"HumidityCorrectionFactor", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfASM.wchHumidityCorrectionFactor, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfASM.wchHumidityCorrectionFactor, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"DilutionCorrectionFactor", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfASM.wchDilutionCorrectionFactor, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfASM.wchDilutionCorrectionFactor, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"Remark", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfASM.wchRemark, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfASM.wchRemark, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"Reserved1", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfASM.wchReserved1, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfASM.wchReserved1, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"Reserved2", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfASM.wchReserved2, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfASM.wchReserved2, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"Reserved3", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfASM.wchReserved3, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfASM.wchReserved3, L"");
					}

					listRealTimeDataOfASM.push_back(sRealTimeDataOfASM);
					pRecordset->MoveNext();
				}
				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}
DWORD GetDboRealTimeDataOfASM_Zip(const wchar_t wchSql[SQLMAX], list<REALTIMEDATAOFASM> &listRealTimeDataOfASM)
{
	assert(NULL != wchSql);

	DWORD dwReturn(0x00);
	listRealTimeDataOfASM.clear();

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			SRealTimeDataOfASM_Zip sRealTimeDataOfASM_Zip;
			while (!pRecordset->adoEOF)
			{
				GetStringFromDBImage(pRecordset, sRealTimeDataOfASM_Zip.strFuelTypeCode, L"FuelTypeCode");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfASM_Zip.strFuelTypeName, L"FuelTypeName");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfASM_Zip.strTime, L"Time");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfASM_Zip.strSamplingTime, L"SamplingTime");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfASM_Zip.strVelocity, L"Velocity");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfASM_Zip.strPower, L"Power");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfASM_Zip.strForce, L"Force");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfASM_Zip.strIHP, L"IHP");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfASM_Zip.strPLHP, L"PLHP");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfASM_Zip.strState, L"State");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfASM_Zip.strHC, L"HC");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfASM_Zip.strCO, L"CO");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfASM_Zip.strNO, L"NO");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfASM_Zip.strO2, L"O2");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfASM_Zip.strCO2, L"CO2");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfASM_Zip.strEngineRev, L"EngineRev");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfASM_Zip.strOilTemperature, L"OilTemperature");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfASM_Zip.strLambda, L"Lambda");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfASM_Zip.strEnvironmentalTemperature, L"EnvironmentalTemperature");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfASM_Zip.strRelativeHumidity, L"RelativeHumidity");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfASM_Zip.strAtmosphericPressure, L"AtmosphericPressure");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfASM_Zip.strHumidityCorrectionFactor, L"HumidityCorrectionFactor");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfASM_Zip.strDilutionCorrectionFactor, L"DilutionCorrectionFactor");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfASM_Zip.strRemark, L"Remark");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfASM_Zip.strReserved1, L"Reserved1");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfASM_Zip.strReserved2, L"Reserved2");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfASM_Zip.strReserved3, L"Reserved3");

				while(1)
				{
					REALTIMEDATAOFASM sRealTimeDataOfASM;

					if (!SplitString(sRealTimeDataOfASM_Zip.strTime, sRealTimeDataOfASM.wchTime, g_pchSplit))
					{
						break;
					}

					_variant_t v;
					wstring s;

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"RunningNumber", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfASM.wchRunningNumber, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfASM.wchRunningNumber, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"ReportNumber", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfASM.wchReportNumber, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfASM.wchReportNumber, L"");
					}
					SplitString(sRealTimeDataOfASM_Zip.strFuelTypeCode, sRealTimeDataOfASM.wchFuelTypeCode, g_pchSplit);
					SplitString(sRealTimeDataOfASM_Zip.strFuelTypeName, sRealTimeDataOfASM.wchFuelTypeName, g_pchSplit);
					SplitString(sRealTimeDataOfASM_Zip.strSamplingTime, sRealTimeDataOfASM.wchSamplingTime, g_pchSplit);
					SplitString(sRealTimeDataOfASM_Zip.strVelocity, sRealTimeDataOfASM.wchVelocity, g_pchSplit);
					SplitString(sRealTimeDataOfASM_Zip.strPower, sRealTimeDataOfASM.wchPower, g_pchSplit);
					SplitString(sRealTimeDataOfASM_Zip.strForce, sRealTimeDataOfASM.wchForce, g_pchSplit);
					SplitString(sRealTimeDataOfASM_Zip.strIHP, sRealTimeDataOfASM.wchIHP, g_pchSplit);
					SplitString(sRealTimeDataOfASM_Zip.strPLHP, sRealTimeDataOfASM.wchPLHP, g_pchSplit);
					SplitString(sRealTimeDataOfASM_Zip.strState, sRealTimeDataOfASM.wchState, g_pchSplit);
					SplitString(sRealTimeDataOfASM_Zip.strHC, sRealTimeDataOfASM.wchHC, g_pchSplit);
					SplitString(sRealTimeDataOfASM_Zip.strCO, sRealTimeDataOfASM.wchCO, g_pchSplit);
					SplitString(sRealTimeDataOfASM_Zip.strNO, sRealTimeDataOfASM.wchNO, g_pchSplit);
					SplitString(sRealTimeDataOfASM_Zip.strO2, sRealTimeDataOfASM.wchO2, g_pchSplit);
					SplitString(sRealTimeDataOfASM_Zip.strCO2, sRealTimeDataOfASM.wchCO2, g_pchSplit);
					SplitString(sRealTimeDataOfASM_Zip.strEngineRev, sRealTimeDataOfASM.wchEngineRev, g_pchSplit);
					SplitString(sRealTimeDataOfASM_Zip.strOilTemperature, sRealTimeDataOfASM.wchOilTemperature, g_pchSplit);
					SplitString(sRealTimeDataOfASM_Zip.strLambda, sRealTimeDataOfASM.wchLambda, g_pchSplit);
					SplitString(sRealTimeDataOfASM_Zip.strEnvironmentalTemperature, sRealTimeDataOfASM.wchEnvironmentalTemperature, g_pchSplit);
					SplitString(sRealTimeDataOfASM_Zip.strRelativeHumidity, sRealTimeDataOfASM.wchRelativeHumidity, g_pchSplit);
					SplitString(sRealTimeDataOfASM_Zip.strAtmosphericPressure, sRealTimeDataOfASM.wchAtmosphericPressure, g_pchSplit);
					SplitString(sRealTimeDataOfASM_Zip.strHumidityCorrectionFactor, sRealTimeDataOfASM.wchHumidityCorrectionFactor, g_pchSplit);
					SplitString(sRealTimeDataOfASM_Zip.strDilutionCorrectionFactor, sRealTimeDataOfASM.wchDilutionCorrectionFactor, g_pchSplit);
					SplitString(sRealTimeDataOfASM_Zip.strRemark, sRealTimeDataOfASM.wchRemark, g_pchSplit);
					SplitString(sRealTimeDataOfASM_Zip.strReserved1, sRealTimeDataOfASM.wchReserved1, g_pchSplit);
					SplitString(sRealTimeDataOfASM_Zip.strReserved2, sRealTimeDataOfASM.wchReserved2, g_pchSplit);
					SplitString(sRealTimeDataOfASM_Zip.strReserved3, sRealTimeDataOfASM.wchReserved3, g_pchSplit);

					listRealTimeDataOfASM.push_back(sRealTimeDataOfASM);
				}
				pRecordset->MoveNext();
				dwReturn = 0x01;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}
DWORD SetDboRealTimeDataOfASM(list<REALTIMEDATAOFASM> &listRealTimeDataOfASM)
{
	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"select * from RealTimeDataOfASM where 1=0");

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			_variant_t v;

			for(list<RealTimeDataOfASM>::iterator ir=listRealTimeDataOfASM.begin(); ir!=listRealTimeDataOfASM.end(); ++ir)
			{
				pRecordset->AddNew();    //添加新记录

				// 流水号
				if(0 == _tcscmp(L"", ir->wchRunningNumber))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchRunningNumber;
				}
				PutFieldData(pRecordset, L"RunningNumber", v);

				// 检测报告编号
				if(0 == _tcscmp(L"", ir->wchReportNumber))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchReportNumber;
				}
				PutFieldData(pRecordset, L"ReportNumber", v);

				// 时间[s]
				if(0 == _tcscmp(L"", ir->wchTime))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<int>(_wtoi(ir->wchTime));
				}
				PutFieldData(pRecordset, L"Time", v);

				// 采样时间
				if(0 == _tcscmp(L"", ir->wchSamplingTime))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchSamplingTime;
				}
				PutFieldData(pRecordset, L"SamplingTime", v);

				if(0 == _tcscmp(L"", ir->wchVelocity))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchVelocity));
				}
				PutFieldData(pRecordset, L"Velocity", v);

				if(0 == _tcscmp(L"", ir->wchPower))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchPower));
				}
				PutFieldData(pRecordset, L"Power", v);

				if(0 == _tcscmp(L"", ir->wchForce))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchForce));
				}
				PutFieldData(pRecordset, L"Force", v);

				if(0 == _tcscmp(L"", ir->wchIHP))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchIHP));
				}
				PutFieldData(pRecordset, L"IHP", v);

				if(0 == _tcscmp(L"", ir->wchPLHP))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchPLHP));
				}
				PutFieldData(pRecordset, L"PLHP", v);

				if(0 == _tcscmp(L"", ir->wchState))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchState;
				}
				PutFieldData(pRecordset, L"State", v);

				if(0 == _tcscmp(L"", ir->wchHC))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<int>(_wtoi(ir->wchHC));
				}
				PutFieldData(pRecordset, L"HC", v);

				if(0 == _tcscmp(L"", ir->wchCO))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchCO));
				}
				PutFieldData(pRecordset, L"CO", v);

				if(0 == _tcscmp(L"", ir->wchNO))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<int>(_wtoi(ir->wchNO));
				}
				PutFieldData(pRecordset, L"NO", v);

				if(0 == _tcscmp(L"", ir->wchO2))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchO2));
				}
				PutFieldData(pRecordset, L"O2", v);

				if(0 == _tcscmp(L"", ir->wchCO2))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchCO2));
				}
				PutFieldData(pRecordset, L"CO2", v);

				if(0 == _tcscmp(L"", ir->wchEngineRev))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<int>(_wtoi(ir->wchEngineRev));
				}
				PutFieldData(pRecordset, L"EngineRev", v);

				if(0 == _tcscmp(L"", ir->wchOilTemperature))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchOilTemperature));
				}
				PutFieldData(pRecordset, L"OilTemperature", v);

				if(0 == _tcscmp(L"", ir->wchLambda))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchLambda));
				}
				PutFieldData(pRecordset, L"Lambda", v);

				if(0 == _tcscmp(L"", ir->wchEnvironmentalTemperature))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchEnvironmentalTemperature));
				}
				PutFieldData(pRecordset, L"EnvironmentalTemperature", v);

				if(0 == _tcscmp(L"", ir->wchRelativeHumidity))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchRelativeHumidity));
				}
				PutFieldData(pRecordset, L"RelativeHumidity", v);

				if(0 == _tcscmp(L"", ir->wchAtmosphericPressure))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchAtmosphericPressure));
				}
				PutFieldData(pRecordset, L"AtmosphericPressure", v);

				if(0 == _tcscmp(L"", ir->wchHumidityCorrectionFactor))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchHumidityCorrectionFactor));
				}
				PutFieldData(pRecordset, L"HumidityCorrectionFactor", v);

				if(0 == _tcscmp(L"", ir->wchDilutionCorrectionFactor))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchDilutionCorrectionFactor));
				}
				PutFieldData(pRecordset, L"DilutionCorrectionFactor", v);

				// 备注
				if(0 == _tcscmp(L"", ir->wchRemark))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchRemark;
				}
				PutFieldData(pRecordset, L"Remark", v);

				// 保留字段,以后备用
				if(0 == _tcscmp(L"", ir->wchReserved1))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchReserved1;
				}
				PutFieldData(pRecordset, L"Reserved1", v);

				// 保留字段,以后备用
				if(0 == _tcscmp(L"", ir->wchReserved2))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchReserved2;
				}
				PutFieldData(pRecordset, L"Reserved2", v);

				// 保留字段,以后备用
				if(0 == _tcscmp(L"", ir->wchReserved3))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchReserved3;
				}
				PutFieldData(pRecordset, L"Reserved3", v);
			}

			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}
DWORD SetDboRealTimeDataOfASM_Zip(list<REALTIMEDATAOFASM> &listRealTimeDataOfASM)
{
	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			list<RealTimeDataOfASM>::iterator irTmp=listRealTimeDataOfASM.begin();

			wsprintf(wchSql, L"select * from RealTimeDataOfASM_Zip where RunningNumber = '%s'", irTmp->wchRunningNumber);
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			_variant_t v;

			if(pRecordset->adoEOF)
			{
				pRecordset->AddNew();    //添加新记录
			}
			SRealTimeDataOfASM_Zip sRealTimeDataOfASM_Zip;


			for(list<RealTimeDataOfASM>::iterator ir=listRealTimeDataOfASM.begin(); ir!=listRealTimeDataOfASM.end(); ++ir)
			{
				if(0 == _tcscmp(L"", ir->wchRunningNumber))
				{
					sRealTimeDataOfASM_Zip.strRunningNumber = L"";
				}
				else
				{
					sRealTimeDataOfASM_Zip.strRunningNumber = ir->wchRunningNumber;
				}
				
				// 检测报告编号
				if(0 == _tcscmp(L"", ir->wchReportNumber))
				{

					sRealTimeDataOfASM_Zip.strReportNumber = L"";
				}
				else
				{
					sRealTimeDataOfASM_Zip.strReportNumber = ir->wchReportNumber;
				}


				// 时间[s]
				if(0 == _tcscmp(L"", ir->wchTime))
				{
					sRealTimeDataOfASM_Zip.strTime += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfASM_Zip.strTime += UnicodeToANSIEx(ir->wchTime);
					sRealTimeDataOfASM_Zip.strTime += g_pchSplit;
				}


				if(0 == _tcscmp(L"", ir->wchSamplingTime))
				{
					sRealTimeDataOfASM_Zip.strSamplingTime += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfASM_Zip.strSamplingTime += UnicodeToANSIEx(ir->wchSamplingTime);
					sRealTimeDataOfASM_Zip.strSamplingTime += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchVelocity))
				{
					sRealTimeDataOfASM_Zip.strVelocity += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfASM_Zip.strVelocity += UnicodeToANSIEx(ir->wchVelocity);
					sRealTimeDataOfASM_Zip.strVelocity += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchPower))
				{
					sRealTimeDataOfASM_Zip.strPower += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfASM_Zip.strPower += UnicodeToANSIEx(ir->wchPower);
					sRealTimeDataOfASM_Zip.strPower += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchForce))
				{
					sRealTimeDataOfASM_Zip.strForce += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfASM_Zip.strForce += UnicodeToANSIEx(ir->wchForce);
					sRealTimeDataOfASM_Zip.strForce += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchIHP))
				{
					sRealTimeDataOfASM_Zip.strIHP += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfASM_Zip.strIHP += UnicodeToANSIEx(ir->wchIHP);
					sRealTimeDataOfASM_Zip.strIHP += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchPLHP))
				{
					sRealTimeDataOfASM_Zip.strPLHP += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfASM_Zip.strPLHP += UnicodeToANSIEx(ir->wchPLHP);
					sRealTimeDataOfASM_Zip.strPLHP += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchState))
				{
					sRealTimeDataOfASM_Zip.strState += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfASM_Zip.strState += UnicodeToANSIEx(ir->wchState);
					sRealTimeDataOfASM_Zip.strState += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchHC))
				{
					sRealTimeDataOfASM_Zip.strHC += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfASM_Zip.strHC += UnicodeToANSIEx(ir->wchHC);
					sRealTimeDataOfASM_Zip.strHC += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchCO))
				{
					sRealTimeDataOfASM_Zip.strCO += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfASM_Zip.strCO += UnicodeToANSIEx(ir->wchCO);
					sRealTimeDataOfASM_Zip.strCO += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchNO))
				{
					sRealTimeDataOfASM_Zip.strNO += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfASM_Zip.strNO += UnicodeToANSIEx(ir->wchNO);
					sRealTimeDataOfASM_Zip.strNO += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchO2))
				{
					sRealTimeDataOfASM_Zip.strO2 += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfASM_Zip.strO2 += UnicodeToANSIEx(ir->wchO2);
					sRealTimeDataOfASM_Zip.strO2 += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchCO2))
				{
					sRealTimeDataOfASM_Zip.strCO2 += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfASM_Zip.strCO2 += UnicodeToANSIEx(ir->wchCO2);
					sRealTimeDataOfASM_Zip.strCO2 += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchEngineRev))
				{
					sRealTimeDataOfASM_Zip.strEngineRev += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfASM_Zip.strEngineRev += UnicodeToANSIEx(ir->wchEngineRev);
					sRealTimeDataOfASM_Zip.strEngineRev += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchOilTemperature))
				{
					sRealTimeDataOfASM_Zip.strOilTemperature += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfASM_Zip.strOilTemperature += UnicodeToANSIEx(ir->wchOilTemperature);
					sRealTimeDataOfASM_Zip.strOilTemperature += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchLambda))
				{
					sRealTimeDataOfASM_Zip.strLambda += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfASM_Zip.strLambda += UnicodeToANSIEx(ir->wchLambda);
					sRealTimeDataOfASM_Zip.strLambda += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchEnvironmentalTemperature))
				{
					sRealTimeDataOfASM_Zip.strEnvironmentalTemperature += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfASM_Zip.strEnvironmentalTemperature += UnicodeToANSIEx(ir->wchEnvironmentalTemperature);
					sRealTimeDataOfASM_Zip.strEnvironmentalTemperature += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchRelativeHumidity))
				{
					sRealTimeDataOfASM_Zip.strRelativeHumidity += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfASM_Zip.strRelativeHumidity += UnicodeToANSIEx(ir->wchRelativeHumidity);
					sRealTimeDataOfASM_Zip.strRelativeHumidity += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchAtmosphericPressure))
				{
					sRealTimeDataOfASM_Zip.strAtmosphericPressure += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfASM_Zip.strAtmosphericPressure += UnicodeToANSIEx(ir->wchAtmosphericPressure);
					sRealTimeDataOfASM_Zip.strAtmosphericPressure += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchHumidityCorrectionFactor))
				{
					sRealTimeDataOfASM_Zip.strHumidityCorrectionFactor += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfASM_Zip.strHumidityCorrectionFactor += UnicodeToANSIEx(ir->wchHumidityCorrectionFactor);
					sRealTimeDataOfASM_Zip.strHumidityCorrectionFactor += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchDilutionCorrectionFactor))
				{
					sRealTimeDataOfASM_Zip.strDilutionCorrectionFactor += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfASM_Zip.strDilutionCorrectionFactor += UnicodeToANSIEx(ir->wchDilutionCorrectionFactor);
					sRealTimeDataOfASM_Zip.strDilutionCorrectionFactor += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchRemark))
				{
					sRealTimeDataOfASM_Zip.strRemark += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfASM_Zip.strRemark += UnicodeToANSIEx(ir->wchRemark);
					sRealTimeDataOfASM_Zip.strRemark += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchReserved1))
				{
					sRealTimeDataOfASM_Zip.strReserved1 += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfASM_Zip.strReserved1 += UnicodeToANSIEx(ir->wchReserved1);
					sRealTimeDataOfASM_Zip.strReserved1 += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchReserved2))
				{
					sRealTimeDataOfASM_Zip.strReserved2 += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfASM_Zip.strReserved2 += UnicodeToANSIEx(ir->wchReserved2);
					sRealTimeDataOfASM_Zip.strReserved2 += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchReserved3))
				{
					sRealTimeDataOfASM_Zip.strReserved3 += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfASM_Zip.strReserved3 += UnicodeToANSIEx(ir->wchReserved3);
					sRealTimeDataOfASM_Zip.strReserved3 += g_pchSplit;
				}
			}

			v.ChangeType(VT_NULL);
			v = sRealTimeDataOfASM_Zip.strRunningNumber.c_str();
			PutFieldData(pRecordset, L"RunningNumber", v);
			
			v.ChangeType(VT_NULL);
			v = sRealTimeDataOfASM_Zip.strReportNumber.c_str();
			PutFieldData(pRecordset, L"ReportNumber", v);

			SetStringToDBImage(pRecordset, sRealTimeDataOfASM_Zip.strTime, L"Time");
			SetStringToDBImage(pRecordset, sRealTimeDataOfASM_Zip.strSamplingTime, L"SamplingTime");
			SetStringToDBImage(pRecordset, sRealTimeDataOfASM_Zip.strVelocity, L"Velocity");
			SetStringToDBImage(pRecordset, sRealTimeDataOfASM_Zip.strPower, L"Power");
			SetStringToDBImage(pRecordset, sRealTimeDataOfASM_Zip.strForce, L"Force");
			SetStringToDBImage(pRecordset, sRealTimeDataOfASM_Zip.strIHP, L"IHP");
			SetStringToDBImage(pRecordset, sRealTimeDataOfASM_Zip.strPLHP, L"PLHP");
			SetStringToDBImage(pRecordset, sRealTimeDataOfASM_Zip.strState, L"State");
			SetStringToDBImage(pRecordset, sRealTimeDataOfASM_Zip.strHC, L"HC");
			SetStringToDBImage(pRecordset, sRealTimeDataOfASM_Zip.strCO, L"CO");
			SetStringToDBImage(pRecordset, sRealTimeDataOfASM_Zip.strNO, L"NO");
			SetStringToDBImage(pRecordset, sRealTimeDataOfASM_Zip.strO2, L"O2");
			SetStringToDBImage(pRecordset, sRealTimeDataOfASM_Zip.strCO2, L"CO2");
			SetStringToDBImage(pRecordset, sRealTimeDataOfASM_Zip.strEngineRev, L"EngineRev");
			SetStringToDBImage(pRecordset, sRealTimeDataOfASM_Zip.strOilTemperature, L"OilTemperature");
			SetStringToDBImage(pRecordset, sRealTimeDataOfASM_Zip.strLambda, L"Lambda");
			SetStringToDBImage(pRecordset, sRealTimeDataOfASM_Zip.strEnvironmentalTemperature, L"EnvironmentalTemperature");
			SetStringToDBImage(pRecordset, sRealTimeDataOfASM_Zip.strRelativeHumidity, L"RelativeHumidity");
			SetStringToDBImage(pRecordset, sRealTimeDataOfASM_Zip.strAtmosphericPressure, L"AtmosphericPressure");
			SetStringToDBImage(pRecordset, sRealTimeDataOfASM_Zip.strHumidityCorrectionFactor, L"HumidityCorrectionFactor");
			SetStringToDBImage(pRecordset, sRealTimeDataOfASM_Zip.strDilutionCorrectionFactor, L"DilutionCorrectionFactor");
			SetStringToDBImage(pRecordset, sRealTimeDataOfASM_Zip.strRemark, L"Remark");
			SetStringToDBImage(pRecordset, sRealTimeDataOfASM_Zip.strReserved1, L"Reserved1");
			SetStringToDBImage(pRecordset, sRealTimeDataOfASM_Zip.strReserved2, L"Reserved2");
			SetStringToDBImage(pRecordset, sRealTimeDataOfASM_Zip.strReserved3, L"Reserved3");

			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboResultOfVMAS(const wchar_t wchSql[SQLMAX], PRESULTOFVMAS const pDboResultOfVMAS)
{
	assert(NULL != wchSql);
	assert(NULL != pDboResultOfVMAS);

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			if(!pRecordset->adoEOF)
			{
				_variant_t v;
				wstring s;

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AutoID", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfVMAS->wchAutoID, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfVMAS->wchAutoID, L"");
				}
				
				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"RunningNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfVMAS->wchRunningNumber, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfVMAS->wchRunningNumber, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"ReportNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfVMAS->wchReportNumber, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfVMAS->wchReportNumber, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FuelTypeCode", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfVMAS->wchFuelTypeCode, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfVMAS->wchFuelTypeCode, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FuelTypeName", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfVMAS->wchFuelTypeName, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfVMAS->wchFuelTypeName,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NeedTestHCNOx", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfVMAS->wchNeedTestHCNOx, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfVMAS->wchNeedTestHCNOx, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfVMAS->wchNeedTestHCNOx, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"O2", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfVMAS->wchO2, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfVMAS->wchO2, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"CO2", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfVMAS->wchCO2, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfVMAS->wchCO2, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HC", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfVMAS->wchHC, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfVMAS->wchHC, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"CO", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfVMAS->wchCO, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfVMAS->wchCO, L"");
				}


				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NOx", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfVMAS->wchNOx, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfVMAS->wchNOx, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HCNOx", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfVMAS->wchHCNOx, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfVMAS->wchHCNOx, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LimitOfHC", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfVMAS->wchLimitOfHC, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfVMAS->wchLimitOfHC, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LimitOfHC_EDP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfVMAS->wchLimitOfHC_EDP, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfVMAS->wchLimitOfHC_EDP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LimitOfCO", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfVMAS->wchLimitOfCO, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfVMAS->wchLimitOfCO, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LimitOfCO_EDP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfVMAS->wchLimitOfCO_EDP, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfVMAS->wchLimitOfCO_EDP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LimitOfNOx", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfVMAS->wchLimitOfNOx, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfVMAS->wchLimitOfNOx, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LimitOfNOx_EDP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfVMAS->wchLimitOfNOx_EDP, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfVMAS->wchLimitOfNOx_EDP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LimitOfHCNOx", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfVMAS->wchLimitOfHCNOx, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfVMAS->wchLimitOfHCNOx, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LimitOfHCNOx_EDP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfVMAS->wchLimitOfHCNOx_EDP, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfVMAS->wchLimitOfHCNOx_EDP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PassOfHC", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfVMAS->wchPassOfHC, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfVMAS->wchPassOfHC, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfVMAS->wchPassOfHC, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PassOfCO", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfVMAS->wchPassOfCO, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfVMAS->wchPassOfCO, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfVMAS->wchPassOfCO, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PassOfNOx", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfVMAS->wchPassOfNOx, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfVMAS->wchPassOfNOx, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfVMAS->wchPassOfNOx, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PassOfHCNOx", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfVMAS->wchPassOfHCNOx, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfVMAS->wchPassOfHCNOx, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfVMAS->wchPassOfHCNOx, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Pass", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfVMAS->wchPass, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfVMAS->wchPass, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfVMAS->wchPass, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Power50", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfVMAS->wchPower50, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfVMAS->wchPower50, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"TravelledDistance", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfVMAS->wchTravelledDistance, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfVMAS->wchTravelledDistance, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OilTemperature", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfVMAS->wchOilTemperature, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfVMAS->wchOilTemperature, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"VolOfGas", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfVMAS->wchVolOfGas, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfVMAS->wchVolOfGas, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"VolOfExhaust", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfVMAS->wchVolOfExhaust, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfVMAS->wchVolOfExhaust, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EnvironmentalTemperature", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfVMAS->wchEnvironmentalTemperature, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfVMAS->wchEnvironmentalTemperature, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"RelativeHumidity", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfVMAS->wchRelativeHumidity, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfVMAS->wchRelativeHumidity, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AtmosphericPressure", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfVMAS->wchAtmosphericPressure, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfVMAS->wchAtmosphericPressure, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"SkipRev", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfVMAS->wchSkipRev, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfVMAS->wchSkipRev, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfVMAS->wchSkipRev, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"SkipOilTemperature", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfVMAS->wchSkipOilTemperature, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfVMAS->wchSkipOilTemperature, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfVMAS->wchSkipOilTemperature, L"");
				}


				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Remark", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfVMAS->wchRemark, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfVMAS->wchRemark,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved1", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfVMAS->wchReserved1, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfVMAS->wchReserved1,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved2", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfVMAS->wchReserved2, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfVMAS->wchReserved2,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved3", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfVMAS->wchReserved3, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfVMAS->wchReserved3,L"");
				}

				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboResultOfVMAS_Zip(const wchar_t wchSQL[SQLMAX], SResultOfVMAS* const pResultOfVMAS)
{
	assert(NULL != wchSQL);
	assert(NULL != pResultOfVMAS);

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSQL,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			if (!pRecordset->adoEOF)
			{
				pResultOfVMAS->strAutoID = GetFieldDataEx(pRecordset, L"AutoID");
				pResultOfVMAS->strRunningNumber = GetFieldDataEx(pRecordset, L"RunningNumber");				
				pResultOfVMAS->strReportNumber = GetFieldDataEx(pRecordset, L"ReportNumber");
				pResultOfVMAS->strFuelTypeCode = GetFieldDataEx(pRecordset, L"FuelTypeCode");
				pResultOfVMAS->strFuelTypeName = GetFieldDataEx(pRecordset, L"FuelTypeName");
				pResultOfVMAS->strNeedTestHCNOx = GetFieldDataEx(pRecordset, L"NeedTestHCNOx");
				pResultOfVMAS->strO2 = GetFieldDataEx(pRecordset, L"O2");
				pResultOfVMAS->strCO2 = GetFieldDataEx(pRecordset, L"CO2");
				pResultOfVMAS->strHC = GetFieldDataEx(pRecordset, L"HC");
				pResultOfVMAS->strCO = GetFieldDataEx(pRecordset, L"CO");
				pResultOfVMAS->strNOx = GetFieldDataEx(pRecordset, L"NOx");
				pResultOfVMAS->strHCNOx = GetFieldDataEx(pRecordset, L"HCNOx");
				pResultOfVMAS->strLimitOfHC = GetFieldDataEx(pRecordset, L"LimitOfHC");
				pResultOfVMAS->strLimitOfHC_EDP = GetFieldDataEx(pRecordset, L"LimitOfHC_EDP");
				pResultOfVMAS->strLimitOfCO = GetFieldDataEx(pRecordset, L"LimitOfCO");
				pResultOfVMAS->strLimitOfCO_EDP = GetFieldDataEx(pRecordset, L"LimitOfCO_EDP");
				pResultOfVMAS->strLimitOfNOx = GetFieldDataEx(pRecordset, L"LimitOfNOx");
				pResultOfVMAS->strLimitOfNOx_EDP = GetFieldDataEx(pRecordset, L"LimitOfNOx_EDP");
				pResultOfVMAS->strLimitOfHCNOx = GetFieldDataEx(pRecordset, L"LimitOfHCNOx");
				pResultOfVMAS->strLimitOfHCNOx_EDP = GetFieldDataEx(pRecordset, L"LimitOfHCNOx_EDP");
				pResultOfVMAS->strPassOfHC = GetFieldDataEx(pRecordset, L"PassOfHC");
				pResultOfVMAS->strPassOfCO = GetFieldDataEx(pRecordset, L"PassOfCO");
				pResultOfVMAS->strPassOfNOx = GetFieldDataEx(pRecordset, L"PassOfNOx");
				pResultOfVMAS->strPassOfHCNOx = GetFieldDataEx(pRecordset, L"PassOfHCNOx");
				pResultOfVMAS->strPass = GetFieldDataEx(pRecordset, L"Pass");
				pResultOfVMAS->strPower50 = GetFieldDataEx(pRecordset, L"Power50");
				pResultOfVMAS->strTravelledDistance = GetFieldDataEx(pRecordset, L"TravelledDistance");
				pResultOfVMAS->strFuleConsumptionPer100KM = GetFieldDataEx(pRecordset, L"FuleConsumptionPer100KM");
				pResultOfVMAS->strDeviateTime = GetFieldDataEx(pRecordset, L"DeviateTime");
				pResultOfVMAS->strDeviateCount = GetFieldDataEx(pRecordset, L"DeviateCount");
				pResultOfVMAS->strLambda = GetFieldDataEx(pRecordset, L"Lambda");
				pResultOfVMAS->strOilTemperature = GetFieldDataEx(pRecordset, L"OilTemperature");
				pResultOfVMAS->strVolOfGas = GetFieldDataEx(pRecordset, L"VolOfGas");
				pResultOfVMAS->strVolOfExhaust = GetFieldDataEx(pRecordset, L"VolOfExhaust");
				pResultOfVMAS->strEnvironmentalTemperature = GetFieldDataEx(pRecordset, L"EnvironmentalTemperature");
				pResultOfVMAS->strRelativeHumidity = GetFieldDataEx(pRecordset, L"RelativeHumidity");
				pResultOfVMAS->strAtmosphericPressure = GetFieldDataEx(pRecordset, L"AtmosphericPressure");
				pResultOfVMAS->strSkipRev = GetFieldDataEx(pRecordset, L"SkipRev");
				pResultOfVMAS->strSkipOilTemperature = GetFieldDataEx(pRecordset, L"SkipOilTemperature");
				// 读取二进制字段
				GetImageFieldData(pRecordset, L"RTDataZip", pResultOfVMAS->strRTDataZip);
				pResultOfVMAS->strHash = GetFieldDataEx(pRecordset, L"Hash");
				pResultOfVMAS->strRemark = GetFieldDataEx(pRecordset, L"Remark");
				pResultOfVMAS->strReserved1 = GetFieldDataEx(pRecordset, L"Reserved1");
				pResultOfVMAS->strReserved2 = GetFieldDataEx(pRecordset, L"Reserved2");
				pResultOfVMAS->strReserved3 = GetFieldDataEx(pRecordset, L"Reserved3");
				
				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD SetDboResultOfVMAS(const RESULTOFVMAS &dboResultOfVMAS)
{
	assert(&dboResultOfVMAS != NULL);

	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			//wsprintf(wchSql, L"select * from ResultOfVMAS where ReportNumber = '%s'", dboResultOfVMAS.wchReportNumber);
			wsprintf(wchSql, L"select * from ResultOfVMAS where RunningNumber = '%s'", dboResultOfVMAS.wchRunningNumber);

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if(pRecordset->adoEOF)
			{
				pRecordset->AddNew();    //添加新记录
			}

			wstring str;
			_variant_t v;

			str = dboResultOfVMAS.wchRunningNumber;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"RunningNumber", v);

			str = dboResultOfVMAS.wchReportNumber;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"ReportNumber", v);

			str = dboResultOfVMAS.wchFuelTypeCode;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"FuelTypeCode", v);

			str = dboResultOfVMAS.wchFuelTypeName;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"FuelTypeName", v);

			str = dboResultOfVMAS.wchNeedTestHCNOx;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"NeedTestHCNOx", v);

			str = dboResultOfVMAS.wchO2;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"O2", v);

			str = dboResultOfVMAS.wchCO2;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"CO2", v);

			str = dboResultOfVMAS.wchHC;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"HC", v);

			str = dboResultOfVMAS.wchCO;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"CO", v);

			str = dboResultOfVMAS.wchNOx;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"NOx", v);

			str = dboResultOfVMAS.wchHCNOx;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"HCNOx", v);

			str = dboResultOfVMAS.wchLimitOfHC;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"LimitOfHC", v);

			str = dboResultOfVMAS.wchLimitOfHC_EDP;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"LimitOfHC_EDP", v);

			str = dboResultOfVMAS.wchLimitOfCO;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"LimitOfCO", v);

			str = dboResultOfVMAS.wchLimitOfCO_EDP;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"LimitOfCO_EDP", v);

			str = dboResultOfVMAS.wchLimitOfNOx;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"LimitOfNOx", v);

			str = dboResultOfVMAS.wchLimitOfNOx_EDP;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"LimitOfNOx_EDP", v);

			str = dboResultOfVMAS.wchLimitOfHCNOx;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"LimitOfHCNOx", v);

			str = dboResultOfVMAS.wchLimitOfHCNOx_EDP;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"LimitOfHCNOx_EDP", v);

			str = dboResultOfVMAS.wchNeedTestHCNOx;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"NeedTestHCNOx", v);

			str = dboResultOfVMAS.wchPassOfHC;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"PassOfHC", v);

			str = dboResultOfVMAS.wchPassOfCO;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"PassOfCO", v);

			str = dboResultOfVMAS.wchPassOfNOx;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"PassOfNOx", v);

			str = dboResultOfVMAS.wchPassOfHCNOx;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"PassOfHCNOx", v);

			str = dboResultOfVMAS.wchPass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"Pass", v);

			str = dboResultOfVMAS.wchPower50;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"Power50", v);


			str = dboResultOfVMAS.wchTravelledDistance;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"TravelledDistance", v);


			str = dboResultOfVMAS.wchOilTemperature;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"OilTemperature", v);


			str = dboResultOfVMAS.wchVolOfGas;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"VolOfGas", v);


			str = dboResultOfVMAS.wchVolOfExhaust;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"VolOfExhaust", v);


			str = dboResultOfVMAS.wchEnvironmentalTemperature;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"EnvironmentalTemperature", v);


			str = dboResultOfVMAS.wchRelativeHumidity;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"RelativeHumidity", v);


			str = dboResultOfVMAS.wchAtmosphericPressure;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"AtmosphericPressure", v);

			str = dboResultOfVMAS.wchSkipRev;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"SkipRev", v);

			str = dboResultOfVMAS.wchSkipOilTemperature;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"SkipOilTemperature", v);

			// 备注
			str = dboResultOfVMAS.wchRemark;

			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Remark", v);

			// 保留字段,以后备用
			str = dboResultOfVMAS.wchReserved1;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved1", v);

			// 保留字段,以后备用
			str = dboResultOfVMAS.wchReserved2;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved2", v);

			// 保留字段,以后备用
			str = dboResultOfVMAS.wchReserved3;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved3", v);

			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD SetDboResultOfVMAS_Zip(const SResultOfVMAS &sResultOfVMAS)
{
	assert(&sResultOfVMAS != NULL);

	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"select * from ResultOfVMAS where RunningNumber='%s'", sResultOfVMAS.strRunningNumber.c_str());

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if(pRecordset->adoEOF)
			{
				pRecordset->AddNew();    //添加新记录
			}

			PutFieldDataEx(pRecordset, L"RunningNumber", VT_BSTR, sResultOfVMAS.strRunningNumber);
			PutFieldDataEx(pRecordset, L"ReportNumber", VT_BSTR, sResultOfVMAS.strReportNumber);
			PutFieldDataEx(pRecordset, L"FuelTypeCode", VT_INT, sResultOfVMAS.strFuelTypeCode);
			PutFieldDataEx(pRecordset, L"FuelTypeName", VT_BSTR, sResultOfVMAS.strFuelTypeName);			
			PutFieldDataEx(pRecordset, L"NeedTestHCNOx", VT_BOOL, sResultOfVMAS.strNeedTestHCNOx);
			PutFieldDataEx(pRecordset, L"O2", VT_R4, sResultOfVMAS.strO2);
			PutFieldDataEx(pRecordset, L"CO2", VT_R4, sResultOfVMAS.strCO2);
			PutFieldDataEx(pRecordset, L"HC", VT_R4, sResultOfVMAS.strHC);
			PutFieldDataEx(pRecordset, L"CO", VT_R4, sResultOfVMAS.strCO);
			PutFieldDataEx(pRecordset, L"NOx", VT_R4, sResultOfVMAS.strNOx);
			PutFieldDataEx(pRecordset, L"HCNOx", VT_R4, sResultOfVMAS.strHCNOx);
			PutFieldDataEx(pRecordset, L"LimitOfHC", VT_R4, sResultOfVMAS.strLimitOfHC);
			PutFieldDataEx(pRecordset, L"LimitOfHC_EDP", VT_INT, sResultOfVMAS.strLimitOfHC_EDP);
			PutFieldDataEx(pRecordset, L"LimitOfCO", VT_R4, sResultOfVMAS.strLimitOfCO);
			PutFieldDataEx(pRecordset, L"LimitOfCO_EDP", VT_INT, sResultOfVMAS.strLimitOfCO_EDP);
			PutFieldDataEx(pRecordset, L"LimitOfNOx", VT_R4, sResultOfVMAS.strLimitOfNOx);
			PutFieldDataEx(pRecordset, L"LimitOfNOx_EDP", VT_INT, sResultOfVMAS.strLimitOfNOx_EDP);
			PutFieldDataEx(pRecordset, L"LimitOfHCNOx", VT_R4, sResultOfVMAS.strLimitOfHCNOx);
			PutFieldDataEx(pRecordset, L"LimitOfHCNOx_EDP", VT_INT, sResultOfVMAS.strLimitOfHCNOx_EDP);
			PutFieldDataEx(pRecordset, L"NeedTestHCNOx", VT_BOOL, sResultOfVMAS.strNeedTestHCNOx);
			PutFieldDataEx(pRecordset, L"PassOfHC", VT_BOOL, sResultOfVMAS.strPassOfHC);
			PutFieldDataEx(pRecordset, L"PassOfCO", VT_BOOL, sResultOfVMAS.strPassOfCO);
			PutFieldDataEx(pRecordset, L"PassOfNOx", VT_BOOL, sResultOfVMAS.strPassOfNOx);
			PutFieldDataEx(pRecordset, L"PassOfHCNOx", VT_BOOL, sResultOfVMAS.strPassOfHCNOx);
			PutFieldDataEx(pRecordset, L"Pass", VT_BOOL, sResultOfVMAS.strPass);
			PutFieldDataEx(pRecordset, L"Power50", VT_R4, sResultOfVMAS.strPower50);
			PutFieldDataEx(pRecordset, L"TravelledDistance", VT_R4, sResultOfVMAS.strTravelledDistance);
			PutFieldDataEx(pRecordset, L"FuleConsumptionPer100KM", VT_R4, sResultOfVMAS.strFuleConsumptionPer100KM);
			PutFieldDataEx(pRecordset, L"DeviateTime", VT_INT, sResultOfVMAS.strDeviateTime);
			PutFieldDataEx(pRecordset, L"DeviateCount", VT_INT, sResultOfVMAS.strDeviateCount);
			PutFieldDataEx(pRecordset, L"Lambda", VT_R4, sResultOfVMAS.strLambda);
			PutFieldDataEx(pRecordset, L"OilTemperature", VT_R4, sResultOfVMAS.strOilTemperature);
			PutFieldDataEx(pRecordset, L"VolOfGas", VT_R4, sResultOfVMAS.strVolOfGas);
			PutFieldDataEx(pRecordset, L"VolOfExhaust", VT_R4, sResultOfVMAS.strVolOfExhaust);
			PutFieldDataEx(pRecordset, L"EnvironmentalTemperature", VT_R4, sResultOfVMAS.strEnvironmentalTemperature);
			PutFieldDataEx(pRecordset, L"RelativeHumidity", VT_R4, sResultOfVMAS.strRelativeHumidity);
			PutFieldDataEx(pRecordset, L"AtmosphericPressure", VT_R4, sResultOfVMAS.strAtmosphericPressure);
			PutFieldDataEx(pRecordset, L"SkipRev", VT_BOOL, sResultOfVMAS.strSkipRev);
			PutFieldDataEx(pRecordset, L"SkipOilTemperature", VT_BOOL, sResultOfVMAS.strSkipOilTemperature);
			// 写二进制字段
			PutImageFieldData(pRecordset, L"RTDataZip", sResultOfVMAS.strRTDataZip);
			PutFieldDataEx(pRecordset, L"Hash", VT_BSTR, sResultOfVMAS.strHash);
			PutFieldDataEx(pRecordset, L"Remark", VT_BSTR, sResultOfVMAS.strRemark);
			PutFieldDataEx(pRecordset, L"Reserved1", VT_BSTR, sResultOfVMAS.strReserved1);
			PutFieldDataEx(pRecordset, L"Reserved2", VT_BSTR, sResultOfVMAS.strReserved2);
			PutFieldDataEx(pRecordset, L"Reserved3", VT_BSTR, sResultOfVMAS.strReserved3);
			
			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboRealTimeDataOfVMAS(const wchar_t wchSql[SQLMAX], list<REALTIMEDATAOFVMAS> &listRealTimeDataOfVMAS)
{
	assert(NULL != wchSql);

	DWORD dwReturn(0x00);
	listRealTimeDataOfVMAS.clear();

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			REALTIMEDATAOFVMAS sRealTimeDataOfVMAS;

			if (!pRecordset->adoEOF)
			{
				while(!pRecordset->adoEOF)
				{
					_variant_t v;
					wstring s;

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"AutoID", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfVMAS.wchAutoID, NH_INT_TO_WCHART, L"%d", (int)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfVMAS.wchAutoID, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"RunningNumber", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfVMAS.wchRunningNumber, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfVMAS.wchRunningNumber, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"ReportNumber", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfVMAS.wchReportNumber, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfVMAS.wchReportNumber, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"FuelTypeCode", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfVMAS.wchFuelTypeCode, NH_INT_TO_WCHART, L"%d", (int)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfVMAS.wchFuelTypeCode, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"FuelTypeName", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfVMAS.wchFuelTypeName, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfVMAS.wchFuelTypeName,L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"Time", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfVMAS.wchTime, NH_INT_TO_WCHART, L"%d", (int)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfVMAS.wchTime, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"SamplingTime", v);
					if(VT_NULL != v.vt)
					{
						/*s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfVMAS.wchSamplingTime, s.c_str());*/

						wchar_t wch[50] = {0};
						SYSTEMTIME dt;
						VariantTimeToSystemTime(v, &dt);
						swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
						wcscpy_s(sRealTimeDataOfVMAS.wchSamplingTime, wch);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfVMAS.wchSamplingTime, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"Velocity", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfVMAS.wchVelocity, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfVMAS.wchVelocity, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"Power", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfVMAS.wchPower, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfVMAS.wchPower, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"Force", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfVMAS.wchForce, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfVMAS.wchForce, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"IHP", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfVMAS.wchIHP, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfVMAS.wchIHP, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"PLHP", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfVMAS.wchPLHP, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfVMAS.wchPLHP, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"HC", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfVMAS.wchHC, NH_INT_TO_WCHART, L"%d", (int)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfVMAS.wchHC, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"CO", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfVMAS.wchCO, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfVMAS.wchCO, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"NO", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfVMAS.wchNO, NH_INT_TO_WCHART, L"%d", (int)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfVMAS.wchNO, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"O2", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfVMAS.wchO2, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfVMAS.wchO2, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"CO2", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfVMAS.wchCO2, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfVMAS.wchCO2, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"EngineRev", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfVMAS.wchEngineRev, NH_INT_TO_WCHART, L"%d", (int)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfVMAS.wchEngineRev, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"OilTemperature", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfVMAS.wchOilTemperature, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfVMAS.wchOilTemperature, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"Lambda", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfVMAS.wchLambda, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfVMAS.wchLambda, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"O2OfFlowmeter", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfVMAS.wchO2OfFlowmeter, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfVMAS.wchO2OfFlowmeter, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"O2OfEnvironment", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfVMAS.wchO2OfEnvironment, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfVMAS.wchO2OfEnvironment, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"HCm", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfVMAS.wchHCm, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfVMAS.wchHCm, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"COm", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfVMAS.wchCOm, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfVMAS.wchCOm, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"NOm", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfVMAS.wchNOm, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfVMAS.wchNOm, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"O2m", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfVMAS.wchO2m, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfVMAS.wchO2m, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"CO2m", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfVMAS.wchCO2m, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfVMAS.wchCO2m, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"PressureOfFlowmeter", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfVMAS.wchPressureOfFlowmeter, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfVMAS.wchPressureOfFlowmeter, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"TemperatureOfFlowmeter", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfVMAS.wchTemperatureOfFlowmeter, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfVMAS.wchTemperatureOfFlowmeter, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"DR", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfVMAS.wchDR, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfVMAS.wchDR, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"ActualFluxOfGas", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfVMAS.wchActualFluxOfGas, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfVMAS.wchActualFluxOfGas, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"StandardFluxOfGas", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfVMAS.wchStandardFluxOfGas, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfVMAS.wchStandardFluxOfGas, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"FluxOfExhaust", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfVMAS.wchFluxOfExhaust, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfVMAS.wchFluxOfExhaust, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"EnvironmentalTemperature", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfVMAS.wchEnvironmentalTemperature, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfVMAS.wchEnvironmentalTemperature, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"AtmosphericPressure", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfVMAS.wchAtmosphericPressure, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfVMAS.wchAtmosphericPressure, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"RelativeHumidity", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfVMAS.wchRelativeHumidity, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfVMAS.wchRelativeHumidity, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"HumidityCorrectionFactor", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfVMAS.wchHumidityCorrectionFactor, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfVMAS.wchHumidityCorrectionFactor, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"DilutionCorrectionFactor", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfVMAS.wchDilutionCorrectionFactor, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfVMAS.wchDilutionCorrectionFactor, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"InertiaSimulationError", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfVMAS.wchInertiaSimulationError, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfVMAS.wchInertiaSimulationError, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"Remark", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfVMAS.wchRemark, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfVMAS.wchRemark, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"Reserved1", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfVMAS.wchReserved1, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfVMAS.wchReserved1, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"Reserved2", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfVMAS.wchReserved2, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfVMAS.wchReserved2, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"Reserved3", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfVMAS.wchReserved3, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfVMAS.wchReserved3, L"");
					}

					listRealTimeDataOfVMAS.push_back(sRealTimeDataOfVMAS);
					pRecordset->MoveNext();
				}
				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}
DWORD GetDboRealTimeDataOfVMAS_Zip(const wchar_t wchSql[SQLMAX], list<REALTIMEDATAOFVMAS> &listRealTimeDataOfVMAS)
{
	assert(NULL != wchSql);

	DWORD dwReturn(0x00);
	listRealTimeDataOfVMAS.clear();

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			SRealTimeDataOfVMAS_Zip sRealTimeDataOfVMAS_Zip;
			while (!pRecordset->adoEOF)
			{
				GetStringFromDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strFuelTypeCode, L"FuelTypeCode");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strFuelTypeName, L"FuelTypeName");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strTime, L"Time");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strSamplingTime, L"SamplingTime");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strVelocity, L"Velocity");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strPower, L"Power");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strForce, L"Force");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strIHP, L"IHP");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strPLHP, L"PLHP");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strHC, L"HC");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strCO, L"CO");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strNO, L"NO");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strO2, L"O2");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strCO2, L"CO2");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strEngineRev, L"EngineRev");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strLambda, L"Lambda");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strOilTemperature, L"OilTemperature");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strO2OfFlowmeter, L"O2OfFlowmeter");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strO2OfEnvironment, L"O2OfEnvironment");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strHCm, L"HCm");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strCOm, L"COm");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strNOm, L"NOm");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strO2m, L"O2m");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strCO2m, L"CO2m");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strPressureOfFlowmeter, L"PressureOfFlowmeter");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strTemperatureOfFlowmeter, L"TemperatureOfFlowmeter");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strDR, L"DR");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strActualFluxOfGas, L"ActualFluxOfGas");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strStandardFluxOfGas, L"StandardFluxOfGas");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strFluxOfExhaust, L"FluxOfExhaust");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strEnvironmentalTemperature, L"EnvironmentalTemperature");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strRelativeHumidity, L"RelativeHumidity");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strAtmosphericPressure, L"AtmosphericPressure");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strHumidityCorrectionFactor, L"HumidityCorrectionFactor");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strDilutionCorrectionFactor, L"DilutionCorrectionFactor");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strInertiaSimulationError, L"InertiaSimulationError");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strRemark, L"Remark");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strReserved1, L"Reserved1");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strReserved2, L"Reserved2");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strReserved3, L"Reserved3");

				while(1)
				{
					REALTIMEDATAOFVMAS sRealTimeDataOfVMAS;

					if (!SplitString(sRealTimeDataOfVMAS_Zip.strTime, sRealTimeDataOfVMAS.wchTime, g_pchSplit))
					{
						break;
					}

					_variant_t v;
					wstring s;

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"RunningNumber", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfVMAS.wchRunningNumber, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfVMAS.wchRunningNumber, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"ReportNumber", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfVMAS.wchReportNumber, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfVMAS.wchReportNumber, L"");
					}

					SplitString(sRealTimeDataOfVMAS_Zip.strFuelTypeCode, sRealTimeDataOfVMAS.wchFuelTypeCode, g_pchSplit);
					SplitString(sRealTimeDataOfVMAS_Zip.strFuelTypeName, sRealTimeDataOfVMAS.wchFuelTypeName, g_pchSplit);
					SplitString(sRealTimeDataOfVMAS_Zip.strSamplingTime, sRealTimeDataOfVMAS.wchSamplingTime, g_pchSplit);
					SplitString(sRealTimeDataOfVMAS_Zip.strVelocity, sRealTimeDataOfVMAS.wchVelocity, g_pchSplit);
					SplitString(sRealTimeDataOfVMAS_Zip.strPower, sRealTimeDataOfVMAS.wchPower, g_pchSplit);
					SplitString(sRealTimeDataOfVMAS_Zip.strForce, sRealTimeDataOfVMAS.wchForce, g_pchSplit);
					SplitString(sRealTimeDataOfVMAS_Zip.strIHP, sRealTimeDataOfVMAS.wchIHP, g_pchSplit);
					SplitString(sRealTimeDataOfVMAS_Zip.strPLHP, sRealTimeDataOfVMAS.wchPLHP, g_pchSplit);
					SplitString(sRealTimeDataOfVMAS_Zip.strHC, sRealTimeDataOfVMAS.wchHC, g_pchSplit);
					SplitString(sRealTimeDataOfVMAS_Zip.strCO, sRealTimeDataOfVMAS.wchCO, g_pchSplit);
					SplitString(sRealTimeDataOfVMAS_Zip.strNO, sRealTimeDataOfVMAS.wchNO, g_pchSplit);
					SplitString(sRealTimeDataOfVMAS_Zip.strO2, sRealTimeDataOfVMAS.wchO2, g_pchSplit);
					SplitString(sRealTimeDataOfVMAS_Zip.strCO2, sRealTimeDataOfVMAS.wchCO2, g_pchSplit);
					SplitString(sRealTimeDataOfVMAS_Zip.strEngineRev, sRealTimeDataOfVMAS.wchEngineRev, g_pchSplit);
					SplitString(sRealTimeDataOfVMAS_Zip.strLambda, sRealTimeDataOfVMAS.wchLambda, g_pchSplit);
					SplitString(sRealTimeDataOfVMAS_Zip.strOilTemperature, sRealTimeDataOfVMAS.wchOilTemperature, g_pchSplit);
					SplitString(sRealTimeDataOfVMAS_Zip.strO2OfFlowmeter, sRealTimeDataOfVMAS.wchO2OfFlowmeter, g_pchSplit);
					SplitString(sRealTimeDataOfVMAS_Zip.strO2OfEnvironment, sRealTimeDataOfVMAS.wchO2OfEnvironment, g_pchSplit);
					SplitString(sRealTimeDataOfVMAS_Zip.strHCm, sRealTimeDataOfVMAS.wchHCm, g_pchSplit);
					SplitString(sRealTimeDataOfVMAS_Zip.strCOm, sRealTimeDataOfVMAS.wchCOm, g_pchSplit);
					SplitString(sRealTimeDataOfVMAS_Zip.strNOm, sRealTimeDataOfVMAS.wchNOm, g_pchSplit);
					SplitString(sRealTimeDataOfVMAS_Zip.strO2m, sRealTimeDataOfVMAS.wchO2m, g_pchSplit);
					SplitString(sRealTimeDataOfVMAS_Zip.strCO2m, sRealTimeDataOfVMAS.wchCO2m, g_pchSplit);
					SplitString(sRealTimeDataOfVMAS_Zip.strPressureOfFlowmeter, sRealTimeDataOfVMAS.wchPressureOfFlowmeter, g_pchSplit);
					SplitString(sRealTimeDataOfVMAS_Zip.strTemperatureOfFlowmeter, sRealTimeDataOfVMAS.wchTemperatureOfFlowmeter, g_pchSplit);
					SplitString(sRealTimeDataOfVMAS_Zip.strDR, sRealTimeDataOfVMAS.wchDR, g_pchSplit);
					SplitString(sRealTimeDataOfVMAS_Zip.strActualFluxOfGas, sRealTimeDataOfVMAS.wchActualFluxOfGas, g_pchSplit);
					SplitString(sRealTimeDataOfVMAS_Zip.strStandardFluxOfGas, sRealTimeDataOfVMAS.wchStandardFluxOfGas, g_pchSplit);
					SplitString(sRealTimeDataOfVMAS_Zip.strFluxOfExhaust, sRealTimeDataOfVMAS.wchFluxOfExhaust, g_pchSplit);
					SplitString(sRealTimeDataOfVMAS_Zip.strEnvironmentalTemperature, sRealTimeDataOfVMAS.wchEnvironmentalTemperature, g_pchSplit);
					SplitString(sRealTimeDataOfVMAS_Zip.strRelativeHumidity, sRealTimeDataOfVMAS.wchRelativeHumidity, g_pchSplit);
					SplitString(sRealTimeDataOfVMAS_Zip.strAtmosphericPressure, sRealTimeDataOfVMAS.wchAtmosphericPressure, g_pchSplit);
					SplitString(sRealTimeDataOfVMAS_Zip.strHumidityCorrectionFactor, sRealTimeDataOfVMAS.wchHumidityCorrectionFactor, g_pchSplit);
					SplitString(sRealTimeDataOfVMAS_Zip.strDilutionCorrectionFactor, sRealTimeDataOfVMAS.wchDilutionCorrectionFactor, g_pchSplit);
					SplitString(sRealTimeDataOfVMAS_Zip.strInertiaSimulationError, sRealTimeDataOfVMAS.wchInertiaSimulationError, g_pchSplit);
					SplitString(sRealTimeDataOfVMAS_Zip.strRemark, sRealTimeDataOfVMAS.wchRemark, g_pchSplit);
					SplitString(sRealTimeDataOfVMAS_Zip.strReserved1, sRealTimeDataOfVMAS.wchReserved1, g_pchSplit);
					SplitString(sRealTimeDataOfVMAS_Zip.strReserved2, sRealTimeDataOfVMAS.wchReserved2, g_pchSplit);
					SplitString(sRealTimeDataOfVMAS_Zip.strReserved3, sRealTimeDataOfVMAS.wchReserved3, g_pchSplit);

					listRealTimeDataOfVMAS.push_back(sRealTimeDataOfVMAS);
				}

				dwReturn = 0x01;
				pRecordset->MoveNext();
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}
DWORD SetDboRealTimeDataOfVMAS(list<REALTIMEDATAOFVMAS> &listRealTimeDataOfVMAS)
{
	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"select * from RealTimeDataOfVMAS where 1=0");

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			_variant_t v;

			for(list<RealTimeDataOfVMAS>::iterator ir=listRealTimeDataOfVMAS.begin(); ir!=listRealTimeDataOfVMAS.end(); ++ir)
			{
				pRecordset->AddNew();    //添加新记录

				// 流水号
				if(0 == _tcscmp(L"", ir->wchRunningNumber))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchRunningNumber;
				}
				PutFieldData(pRecordset, L"RunningNumber", v);

				// 检测报告编号
				if(0 == _tcscmp(L"", ir->wchReportNumber))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchReportNumber;
				}
				PutFieldData(pRecordset, L"ReportNumber", v);

				// 时间[s]
				if(0 == _tcscmp(L"", ir->wchTime))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<int>(_wtoi(ir->wchTime));
				}
				PutFieldData(pRecordset, L"Time", v);

				// 采样时间
				if(0 == _tcscmp(L"", ir->wchSamplingTime))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchSamplingTime;
				}
				PutFieldData(pRecordset, L"SamplingTime", v);

				if(0 == _tcscmp(L"", ir->wchVelocity))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchVelocity));
				}
				PutFieldData(pRecordset, L"Velocity", v);

				if(0 == _tcscmp(L"", ir->wchPower))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchPower));
				}
				PutFieldData(pRecordset, L"Power", v);

				if(0 == _tcscmp(L"", ir->wchForce))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchForce));
				}
				PutFieldData(pRecordset, L"Force", v);

				if(0 == _tcscmp(L"", ir->wchIHP))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchIHP));
				}
				PutFieldData(pRecordset, L"IHP", v);

				if(0 == _tcscmp(L"", ir->wchPLHP))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchPLHP));
				}
				PutFieldData(pRecordset, L"PLHP", v);

				if(0 == _tcscmp(L"", ir->wchHC))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<int>(_wtoi(ir->wchHC));
				}
				PutFieldData(pRecordset, L"HC", v);

				if(0 == _tcscmp(L"", ir->wchCO))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchCO));
				}
				PutFieldData(pRecordset, L"CO", v);

				if(0 == _tcscmp(L"", ir->wchNO))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<int>(_wtoi(ir->wchNO));
				}
				PutFieldData(pRecordset, L"NO", v);

				if(0 == _tcscmp(L"", ir->wchO2))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchO2));
				}
				PutFieldData(pRecordset, L"O2", v);

				if(0 == _tcscmp(L"", ir->wchCO2))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchCO2));
				}
				PutFieldData(pRecordset, L"CO2", v);

				if(0 == _tcscmp(L"", ir->wchEngineRev))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<int>(_wtoi(ir->wchEngineRev));
				}
				PutFieldData(pRecordset, L"EngineRev", v);

				if(0 == _tcscmp(L"", ir->wchLambda))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchLambda));
				}
				PutFieldData(pRecordset, L"Lambda", v);

				if(0 == _tcscmp(L"", ir->wchOilTemperature))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchOilTemperature));
				}
				PutFieldData(pRecordset, L"OilTemperature", v);

				if(0 == _tcscmp(L"", ir->wchO2OfFlowmeter))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchO2OfFlowmeter));
				}
				PutFieldData(pRecordset, L"O2OfFlowmeter", v);

				if(0 == _tcscmp(L"", ir->wchO2OfEnvironment))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchO2OfEnvironment));
				}
				PutFieldData(pRecordset, L"O2OfEnvironment", v);

				if(0 == _tcscmp(L"", ir->wchHCm))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchHCm));
				}
				PutFieldData(pRecordset, L"HCm", v);

				if(0 == _tcscmp(L"", ir->wchCOm))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchCOm));
				}
				PutFieldData(pRecordset, L"COm", v);

				if(0 == _tcscmp(L"", ir->wchNOm))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchNOm));
				}
				PutFieldData(pRecordset, L"NOm", v);

				if(0 == _tcscmp(L"", ir->wchO2m))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchO2m));
				}
				PutFieldData(pRecordset, L"O2m", v);

				if(0 == _tcscmp(L"", ir->wchCO2m))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchCO2m));
				}
				PutFieldData(pRecordset, L"CO2m", v);

				if(0 == _tcscmp(L"", ir->wchPressureOfFlowmeter))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchPressureOfFlowmeter));
				}
				PutFieldData(pRecordset, L"PressureOfFlowmeter", v);

				if(0 == _tcscmp(L"", ir->wchTemperatureOfFlowmeter))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchTemperatureOfFlowmeter));
				}
				PutFieldData(pRecordset, L"TemperatureOfFlowmeter", v);

				if(0 == _tcscmp(L"", ir->wchDR))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchDR));
				}
				PutFieldData(pRecordset, L"DR", v);

				if(0 == _tcscmp(L"", ir->wchActualFluxOfGas))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchActualFluxOfGas));
				}
				PutFieldData(pRecordset, L"ActualFluxOfGas", v);

				if(0 == _tcscmp(L"", ir->wchStandardFluxOfGas))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchStandardFluxOfGas));
				}
				PutFieldData(pRecordset, L"StandardFluxOfGas", v);

				if(0 == _tcscmp(L"", ir->wchFluxOfExhaust))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchFluxOfExhaust));
				}
				PutFieldData(pRecordset, L"FluxOfExhaust", v);

				if(0 == _tcscmp(L"", ir->wchEnvironmentalTemperature))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchEnvironmentalTemperature));
				}
				PutFieldData(pRecordset, L"EnvironmentalTemperature", v);

				if(0 == _tcscmp(L"", ir->wchRelativeHumidity))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchRelativeHumidity));
				}
				PutFieldData(pRecordset, L"RelativeHumidity", v);

				if(0 == _tcscmp(L"", ir->wchAtmosphericPressure))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchAtmosphericPressure));
				}
				PutFieldData(pRecordset, L"AtmosphericPressure", v);

				if(0 == _tcscmp(L"", ir->wchHumidityCorrectionFactor))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchHumidityCorrectionFactor));
				}
				PutFieldData(pRecordset, L"HumidityCorrectionFactor", v);

				if(0 == _tcscmp(L"", ir->wchDilutionCorrectionFactor))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchDilutionCorrectionFactor));
				}
				PutFieldData(pRecordset, L"DilutionCorrectionFactor", v);

				if(0 == _tcscmp(L"", ir->wchInertiaSimulationError))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchInertiaSimulationError));
				}
				PutFieldData(pRecordset, L"InertiaSimulationError", v);

				// 备注
				if(0 == _tcscmp(L"", ir->wchRemark))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchRemark;
				}
				PutFieldData(pRecordset, L"Remark", v);

				// 保留字段,以后备用
				if(0 == _tcscmp(L"", ir->wchReserved1))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchReserved1;
				}
				PutFieldData(pRecordset, L"Reserved1", v);

				// 保留字段,以后备用
				if(0 == _tcscmp(L"", ir->wchReserved2))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchReserved2;
				}
				PutFieldData(pRecordset, L"Reserved2", v);

				// 保留字段,以后备用
				if(0 == _tcscmp(L"", ir->wchReserved3))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchReserved3;
				}
				PutFieldData(pRecordset, L"Reserved3", v);
			}

			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}
DWORD SetDboRealTimeDataOfVMAS_Zip(list<REALTIMEDATAOFVMAS> &listRealTimeDataOfVMAS)
{
	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			list<RealTimeDataOfVMAS>::iterator irTmp=listRealTimeDataOfVMAS.begin();

			wsprintf(wchSql, L"select * from RealTimeDataOfVMAS_Zip where RunningNumber = '%s'", irTmp->wchRunningNumber);
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			_variant_t v;

			if(pRecordset->adoEOF)
			{
				pRecordset->AddNew();    //添加新记录
			}
			SRealTimeDataOfVMAS_Zip sRealTimeDataOfVMAS_Zip;

			for(list<RealTimeDataOfVMAS>::iterator ir=listRealTimeDataOfVMAS.begin(); ir!=listRealTimeDataOfVMAS.end(); ++ir)
			{
				if(0 == _tcscmp(L"", ir->wchRunningNumber))
				{
					sRealTimeDataOfVMAS_Zip.strRunningNumber = L"";
				}
				else
				{
					sRealTimeDataOfVMAS_Zip.strRunningNumber = ir->wchRunningNumber;
				}
				
				// 检测报告编号
				if(0 == _tcscmp(L"", ir->wchReportNumber))
				{

					sRealTimeDataOfVMAS_Zip.strReportNumber = L"";
				}
				else
				{
					sRealTimeDataOfVMAS_Zip.strReportNumber = ir->wchReportNumber;
				}


				if(0 == _tcscmp(L"", ir->wchTime))
				{
					sRealTimeDataOfVMAS_Zip.strTime += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfVMAS_Zip.strTime += UnicodeToANSIEx(ir->wchTime);
					sRealTimeDataOfVMAS_Zip.strTime += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchSamplingTime))
				{
					sRealTimeDataOfVMAS_Zip.strSamplingTime += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfVMAS_Zip.strSamplingTime += UnicodeToANSIEx(ir->wchSamplingTime);
					sRealTimeDataOfVMAS_Zip.strSamplingTime += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchVelocity))
				{
					sRealTimeDataOfVMAS_Zip.strVelocity += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfVMAS_Zip.strVelocity += UnicodeToANSIEx(ir->wchVelocity);
					sRealTimeDataOfVMAS_Zip.strVelocity += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchPower))
				{
					sRealTimeDataOfVMAS_Zip.strPower += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfVMAS_Zip.strPower += UnicodeToANSIEx(ir->wchPower);
					sRealTimeDataOfVMAS_Zip.strPower += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchForce))
				{
					sRealTimeDataOfVMAS_Zip.strForce += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfVMAS_Zip.strForce += UnicodeToANSIEx(ir->wchForce);
					sRealTimeDataOfVMAS_Zip.strForce += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchIHP))
				{
					sRealTimeDataOfVMAS_Zip.strIHP += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfVMAS_Zip.strIHP += UnicodeToANSIEx(ir->wchIHP);
					sRealTimeDataOfVMAS_Zip.strIHP += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchPLHP))
				{
					sRealTimeDataOfVMAS_Zip.strPLHP += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfVMAS_Zip.strPLHP += UnicodeToANSIEx(ir->wchPLHP);
					sRealTimeDataOfVMAS_Zip.strPLHP += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchHC))
				{
					sRealTimeDataOfVMAS_Zip.strHC += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfVMAS_Zip.strHC += UnicodeToANSIEx(ir->wchHC);
					sRealTimeDataOfVMAS_Zip.strHC += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchCO))
				{
					sRealTimeDataOfVMAS_Zip.strCO += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfVMAS_Zip.strCO += UnicodeToANSIEx(ir->wchCO);
					sRealTimeDataOfVMAS_Zip.strCO += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchNO))
				{
					sRealTimeDataOfVMAS_Zip.strNO += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfVMAS_Zip.strNO += UnicodeToANSIEx(ir->wchNO);
					sRealTimeDataOfVMAS_Zip.strNO += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchO2))
				{
					sRealTimeDataOfVMAS_Zip.strO2 += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfVMAS_Zip.strO2 += UnicodeToANSIEx(ir->wchO2);
					sRealTimeDataOfVMAS_Zip.strO2 += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchCO2))
				{
					sRealTimeDataOfVMAS_Zip.strCO2 += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfVMAS_Zip.strCO2 += UnicodeToANSIEx(ir->wchCO2);
					sRealTimeDataOfVMAS_Zip.strCO2 += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchEngineRev))
				{
					sRealTimeDataOfVMAS_Zip.strEngineRev += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfVMAS_Zip.strEngineRev += UnicodeToANSIEx(ir->wchEngineRev);
					sRealTimeDataOfVMAS_Zip.strEngineRev += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchLambda))
				{
					sRealTimeDataOfVMAS_Zip.strLambda += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfVMAS_Zip.strLambda += UnicodeToANSIEx(ir->wchLambda);
					sRealTimeDataOfVMAS_Zip.strLambda += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchOilTemperature))
				{
					sRealTimeDataOfVMAS_Zip.strOilTemperature += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfVMAS_Zip.strOilTemperature += UnicodeToANSIEx(ir->wchOilTemperature);
					sRealTimeDataOfVMAS_Zip.strOilTemperature += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchO2OfFlowmeter))
				{
					sRealTimeDataOfVMAS_Zip.strO2OfFlowmeter += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfVMAS_Zip.strO2OfFlowmeter += UnicodeToANSIEx(ir->wchO2OfFlowmeter);
					sRealTimeDataOfVMAS_Zip.strO2OfFlowmeter += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchO2OfEnvironment))
				{
					sRealTimeDataOfVMAS_Zip.strO2OfEnvironment += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfVMAS_Zip.strO2OfEnvironment += UnicodeToANSIEx(ir->wchO2OfEnvironment);
					sRealTimeDataOfVMAS_Zip.strO2OfEnvironment += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchHCm))
				{
					sRealTimeDataOfVMAS_Zip.strHCm += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfVMAS_Zip.strHCm += UnicodeToANSIEx(ir->wchHCm);
					sRealTimeDataOfVMAS_Zip.strHCm += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchCOm))
				{
					sRealTimeDataOfVMAS_Zip.strCOm += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfVMAS_Zip.strCOm += UnicodeToANSIEx(ir->wchCOm);
					sRealTimeDataOfVMAS_Zip.strCOm += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchNOm))
				{
					sRealTimeDataOfVMAS_Zip.strNOm += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfVMAS_Zip.strNOm += UnicodeToANSIEx(ir->wchNOm);
					sRealTimeDataOfVMAS_Zip.strNOm += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchO2m))
				{
					sRealTimeDataOfVMAS_Zip.strO2m += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfVMAS_Zip.strO2m += UnicodeToANSIEx(ir->wchO2m);
					sRealTimeDataOfVMAS_Zip.strO2m += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchCO2m))
				{
					sRealTimeDataOfVMAS_Zip.strCO2m += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfVMAS_Zip.strCO2m += UnicodeToANSIEx(ir->wchCO2m);
					sRealTimeDataOfVMAS_Zip.strCO2m += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchPressureOfFlowmeter))
				{
					sRealTimeDataOfVMAS_Zip.strPressureOfFlowmeter += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfVMAS_Zip.strPressureOfFlowmeter += UnicodeToANSIEx(ir->wchPressureOfFlowmeter);
					sRealTimeDataOfVMAS_Zip.strPressureOfFlowmeter += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchTemperatureOfFlowmeter))
				{
					sRealTimeDataOfVMAS_Zip.strTemperatureOfFlowmeter += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfVMAS_Zip.strTemperatureOfFlowmeter += UnicodeToANSIEx(ir->wchTemperatureOfFlowmeter);
					sRealTimeDataOfVMAS_Zip.strTemperatureOfFlowmeter += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchDR))
				{
					sRealTimeDataOfVMAS_Zip.strDR += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfVMAS_Zip.strDR += UnicodeToANSIEx(ir->wchDR);
					sRealTimeDataOfVMAS_Zip.strDR += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchActualFluxOfGas))
				{
					sRealTimeDataOfVMAS_Zip.strActualFluxOfGas += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfVMAS_Zip.strActualFluxOfGas += UnicodeToANSIEx(ir->wchActualFluxOfGas);
					sRealTimeDataOfVMAS_Zip.strActualFluxOfGas += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchStandardFluxOfGas))
				{
					sRealTimeDataOfVMAS_Zip.strStandardFluxOfGas += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfVMAS_Zip.strStandardFluxOfGas += UnicodeToANSIEx(ir->wchStandardFluxOfGas);
					sRealTimeDataOfVMAS_Zip.strStandardFluxOfGas += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchFluxOfExhaust))
				{
					sRealTimeDataOfVMAS_Zip.strFluxOfExhaust += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfVMAS_Zip.strFluxOfExhaust += UnicodeToANSIEx(ir->wchFluxOfExhaust);
					sRealTimeDataOfVMAS_Zip.strFluxOfExhaust += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchEnvironmentalTemperature))
				{
					sRealTimeDataOfVMAS_Zip.strEnvironmentalTemperature += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfVMAS_Zip.strEnvironmentalTemperature += UnicodeToANSIEx(ir->wchEnvironmentalTemperature);
					sRealTimeDataOfVMAS_Zip.strEnvironmentalTemperature += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchRelativeHumidity))
				{
					sRealTimeDataOfVMAS_Zip.strRelativeHumidity += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfVMAS_Zip.strRelativeHumidity += UnicodeToANSIEx(ir->wchRelativeHumidity);
					sRealTimeDataOfVMAS_Zip.strRelativeHumidity += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchAtmosphericPressure))
				{
					sRealTimeDataOfVMAS_Zip.strAtmosphericPressure += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfVMAS_Zip.strAtmosphericPressure += UnicodeToANSIEx(ir->wchAtmosphericPressure);
					sRealTimeDataOfVMAS_Zip.strAtmosphericPressure += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchHumidityCorrectionFactor))
				{
					sRealTimeDataOfVMAS_Zip.strHumidityCorrectionFactor += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfVMAS_Zip.strHumidityCorrectionFactor += UnicodeToANSIEx(ir->wchHumidityCorrectionFactor);
					sRealTimeDataOfVMAS_Zip.strHumidityCorrectionFactor += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchDilutionCorrectionFactor))
				{
					sRealTimeDataOfVMAS_Zip.strDilutionCorrectionFactor += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfVMAS_Zip.strDilutionCorrectionFactor += UnicodeToANSIEx(ir->wchDilutionCorrectionFactor);
					sRealTimeDataOfVMAS_Zip.strDilutionCorrectionFactor += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchInertiaSimulationError))
				{
					sRealTimeDataOfVMAS_Zip.strInertiaSimulationError += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfVMAS_Zip.strInertiaSimulationError += UnicodeToANSIEx(ir->wchInertiaSimulationError);
					sRealTimeDataOfVMAS_Zip.strInertiaSimulationError += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchRemark))
				{
					sRealTimeDataOfVMAS_Zip.strRemark += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfVMAS_Zip.strRemark += UnicodeToANSIEx(ir->wchRemark);
					sRealTimeDataOfVMAS_Zip.strRemark += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchReserved1))
				{
					sRealTimeDataOfVMAS_Zip.strReserved1 += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfVMAS_Zip.strReserved1 += UnicodeToANSIEx(ir->wchReserved1);
					sRealTimeDataOfVMAS_Zip.strReserved1 += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchReserved2))
				{
					sRealTimeDataOfVMAS_Zip.strReserved2 += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfVMAS_Zip.strReserved2 += UnicodeToANSIEx(ir->wchReserved2);
					sRealTimeDataOfVMAS_Zip.strReserved2 += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchReserved3))
				{
					sRealTimeDataOfVMAS_Zip.strReserved3 += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfVMAS_Zip.strReserved3 += UnicodeToANSIEx(ir->wchReserved3);
					sRealTimeDataOfVMAS_Zip.strReserved3 += g_pchSplit;
				}
			}

			v.ChangeType(VT_NULL);
			v = sRealTimeDataOfVMAS_Zip.strRunningNumber.c_str();
			PutFieldData(pRecordset, L"RunningNumber", v);
			
			v.ChangeType(VT_NULL);
			v = sRealTimeDataOfVMAS_Zip.strReportNumber.c_str();
			PutFieldData(pRecordset, L"ReportNumber", v);

			SetStringToDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strTime, L"Time");
			SetStringToDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strSamplingTime, L"SamplingTime");
			SetStringToDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strVelocity, L"Velocity");
			SetStringToDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strPower, L"Power");
			SetStringToDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strForce, L"Force");
			SetStringToDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strIHP, L"IHP");
			SetStringToDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strPLHP, L"PLHP");
			SetStringToDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strHC, L"HC");
			SetStringToDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strCO, L"CO");
			SetStringToDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strNO, L"NO");
			SetStringToDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strO2, L"O2");
			SetStringToDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strCO2, L"CO2");
			SetStringToDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strEngineRev, L"EngineRev");
			SetStringToDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strLambda, L"Lambda");
			SetStringToDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strOilTemperature, L"OilTemperature");
			SetStringToDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strO2OfFlowmeter, L"O2OfFlowmeter");
			SetStringToDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strO2OfEnvironment, L"O2OfEnvironment");
			SetStringToDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strHCm, L"HCm");
			SetStringToDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strCOm, L"COm");
			SetStringToDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strNOm, L"NOm");
			SetStringToDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strO2m, L"O2m");
			SetStringToDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strCO2m, L"CO2m");
			SetStringToDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strPressureOfFlowmeter, L"PressureOfFlowmeter");
			SetStringToDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strTemperatureOfFlowmeter, L"TemperatureOfFlowmeter");
			SetStringToDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strDR, L"DR");
			SetStringToDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strActualFluxOfGas, L"ActualFluxOfGas");
			SetStringToDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strStandardFluxOfGas, L"StandardFluxOfGas");
			SetStringToDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strFluxOfExhaust, L"FluxOfExhaust");
			SetStringToDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strEnvironmentalTemperature, L"EnvironmentalTemperature");
			SetStringToDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strRelativeHumidity, L"RelativeHumidity");
			SetStringToDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strAtmosphericPressure, L"AtmosphericPressure");
			SetStringToDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strHumidityCorrectionFactor, L"HumidityCorrectionFactor");
			SetStringToDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strDilutionCorrectionFactor, L"DilutionCorrectionFactor");
			SetStringToDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strInertiaSimulationError, L"InertiaSimulationError");
			SetStringToDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strRemark, L"Remark");
			SetStringToDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strReserved1, L"Reserved1");
			SetStringToDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strReserved2, L"Reserved2");
			SetStringToDBImage(pRecordset, sRealTimeDataOfVMAS_Zip.strReserved3, L"Reserved3");

			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboResultOfLUGDOWN(const wchar_t wchSql[SQLMAX], PRESULTOFLUGDOWN const pDboResultOfLUGDOWN)
{
	assert(NULL != wchSql);
	assert(NULL != pDboResultOfLUGDOWN);

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			if(!pRecordset->adoEOF)
			{
				_variant_t v;
				wstring s;

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AutoID", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfLUGDOWN->wchAutoID, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchAutoID, L"");
				}
				
				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"RunningNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfLUGDOWN->wchRunningNumber, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchRunningNumber, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"ReportNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfLUGDOWN->wchReportNumber, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchReportNumber, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FuelTypeCode", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfLUGDOWN->wchFuelTypeCode, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchFuelTypeCode, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FuelTypeName", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfLUGDOWN->wchFuelTypeName, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchFuelTypeName,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"K100", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfLUGDOWN->wchK100, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchK100, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"N100", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfLUGDOWN->wchN100, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchN100, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"P100", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfLUGDOWN->wchP100, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchP100, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NOx100", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfLUGDOWN->wchNOx100, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchNOx100, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EngineRev100", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfLUGDOWN->wchEngineRev100, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchEngineRev100, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OilTemperature100", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfLUGDOWN->wchOilTemperature100, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchOilTemperature100, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"K90", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfLUGDOWN->wchK90, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchK90, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"N90", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfLUGDOWN->wchN90, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchN90, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"P90", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfLUGDOWN->wchP90, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchP90, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EngineRev90", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfLUGDOWN->wchEngineRev90, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchEngineRev90, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OilTemperature90", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfLUGDOWN->wchOilTemperature90, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchOilTemperature90, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"K80", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfLUGDOWN->wchK80, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchK80, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"N80", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfLUGDOWN->wchN80, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchN80, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"P80", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfLUGDOWN->wchP80, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchP80, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NOx80", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfLUGDOWN->wchNOx80, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchNOx80, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EngineRev80", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfLUGDOWN->wchEngineRev80, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchEngineRev80, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OilTemperature80", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfLUGDOWN->wchOilTemperature80, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchOilTemperature80, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"KLimit", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfLUGDOWN->wchKLimit, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchKLimit, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"KLimit_EDP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfLUGDOWN->wchKLimit_EDP, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchKLimit_EDP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NLimit", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfLUGDOWN->wchNLimit, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchNLimit, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NLimit_EDP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfLUGDOWN->wchNLimit_EDP, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchNLimit_EDP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NOxLimit", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfLUGDOWN->wchNOxLimit, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchNOxLimit, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PowerCorrectionFactor", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfLUGDOWN->wchPowerCorrectionFactor, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchPowerCorrectionFactor, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"CorrectedPower", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfLUGDOWN->wchCorrectedPower, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchCorrectedPower, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"MinHP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfLUGDOWN->wchMinHP, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchMinHP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"RatedRev", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfLUGDOWN->wchRatedRev, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchRatedRev, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PassOfK100", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfLUGDOWN->wchPassOfK100, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfLUGDOWN->wchPassOfK100, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchPassOfK100, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PassOfNOx100", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfLUGDOWN->wchPassOfNOx100, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfLUGDOWN->wchPassOfNOx100, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchPassOfNOx100, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PassOfK90", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfLUGDOWN->wchPassOfK90, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfLUGDOWN->wchPassOfK90, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchPassOfK90, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PassOfK80", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfLUGDOWN->wchPassOfK80, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfLUGDOWN->wchPassOfK80, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchPassOfK80, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PassOfNOx80", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfLUGDOWN->wchPassOfNOx80, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfLUGDOWN->wchPassOfNOx80, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchPassOfNOx80, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PassOfP", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfLUGDOWN->wchPassOfP, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfLUGDOWN->wchPassOfP, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchPassOfP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PassOfRev", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfLUGDOWN->wchPassOfRev, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfLUGDOWN->wchPassOfRev, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchPassOfRev, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Pass", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfLUGDOWN->wchPass, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfLUGDOWN->wchPass, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchPass, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"MaxHP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfLUGDOWN->wchMaxHP, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchMaxHP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"ActualVelMaxHP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfLUGDOWN->wchActualVelMaxHP, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchActualVelMaxHP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"CalculatedVelMaxHP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfLUGDOWN->wchCalculatedVelMaxHP, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchCalculatedVelMaxHP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"MaxRPM", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfLUGDOWN->wchMaxRPM, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchMaxRPM, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"IdleRev", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfLUGDOWN->wchIdleRev, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchIdleRev, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"TotalDuration", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfLUGDOWN->wchTotalDuration, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchTotalDuration, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"ModeDuration", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfLUGDOWN->wchModeDuration, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchModeDuration, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OilTemperature", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfLUGDOWN->wchOilTemperature, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchOilTemperature, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EnvironmentalTemperature", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfLUGDOWN->wchEnvironmentalTemperature, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchEnvironmentalTemperature, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"RelativeHumidity", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfLUGDOWN->wchRelativeHumidity, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchRelativeHumidity, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AtmosphericPressure", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfLUGDOWN->wchAtmosphericPressure, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchAtmosphericPressure, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"SkipRev", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfLUGDOWN->wchSkipRev, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfLUGDOWN->wchSkipRev, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchSkipRev, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"SkipOilTemperature", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfLUGDOWN->wchSkipOilTemperature, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfLUGDOWN->wchSkipOilTemperature, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchSkipOilTemperature, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"SkipRevJudgement", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfLUGDOWN->wchSkipRevJudgement, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfLUGDOWN->wchSkipRevJudgement, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchSkipRevJudgement, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"RevPassRange", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfLUGDOWN->wchRevPassRange, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchRevPassRange, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Remark", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfLUGDOWN->wchRemark, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchRemark,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved1", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfLUGDOWN->wchReserved1, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchReserved1,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved2", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfLUGDOWN->wchReserved2, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchReserved2,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved3", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfLUGDOWN->wchReserved3, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfLUGDOWN->wchReserved3,L"");
				}

				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboResultOfLUGDOWN_Zip(const wchar_t wchSQL[SQLMAX], SResultOfLUGDOWN* const pResultOfLUGDOWN)
{
	assert(NULL != wchSQL);
	assert(NULL != pResultOfLUGDOWN);

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSQL,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			if (!pRecordset->adoEOF)
			{
				pResultOfLUGDOWN->strAutoID = GetFieldDataEx(pRecordset, L"AutoID");
				pResultOfLUGDOWN->strRunningNumber = GetFieldDataEx(pRecordset, L"RunningNumber");
				pResultOfLUGDOWN->strReportNumber = GetFieldDataEx(pRecordset, L"ReportNumber");
				pResultOfLUGDOWN->strFuelTypeCode = GetFieldDataEx(pRecordset, L"FuelTypeCode");
				pResultOfLUGDOWN->strFuelTypeName = GetFieldDataEx(pRecordset, L"FuelTypeName");
				pResultOfLUGDOWN->strK100 = GetFieldDataEx(pRecordset, L"K100");
				pResultOfLUGDOWN->strN100 = GetFieldDataEx(pRecordset, L"N100");
				pResultOfLUGDOWN->strP100 = GetFieldDataEx(pRecordset, L"P100");
				pResultOfLUGDOWN->strNOx100 = GetFieldDataEx(pRecordset, L"NOx100");
				pResultOfLUGDOWN->strEngineRev100 = GetFieldDataEx(pRecordset, L"EngineRev100");
				pResultOfLUGDOWN->strOilTemperature100 = GetFieldDataEx(pRecordset, L"OilTemperature100");
				pResultOfLUGDOWN->strK90 = GetFieldDataEx(pRecordset, L"K90");
				pResultOfLUGDOWN->strN90 = GetFieldDataEx(pRecordset, L"N90");				
				pResultOfLUGDOWN->strP90 = GetFieldDataEx(pRecordset, L"P90");
				pResultOfLUGDOWN->strEngineRev90 = GetFieldDataEx(pRecordset, L"EngineRev90");
				pResultOfLUGDOWN->strOilTemperature90 = GetFieldDataEx(pRecordset, L"OilTemperature90");
				pResultOfLUGDOWN->strK80 = GetFieldDataEx(pRecordset, L"K80");
				pResultOfLUGDOWN->strN80 = GetFieldDataEx(pRecordset, L"N80");
				pResultOfLUGDOWN->strP80 = GetFieldDataEx(pRecordset, L"P80");
				pResultOfLUGDOWN->strNOx80 = GetFieldDataEx(pRecordset, L"NOx80");
				pResultOfLUGDOWN->strEngineRev80 = GetFieldDataEx(pRecordset, L"EngineRev80");
				pResultOfLUGDOWN->strOilTemperature80 = GetFieldDataEx(pRecordset, L"OilTemperature80");
				pResultOfLUGDOWN->strKLimit = GetFieldDataEx(pRecordset, L"KLimit");
				pResultOfLUGDOWN->strKLimit_EDP = GetFieldDataEx(pRecordset, L"KLimit_EDP");
				pResultOfLUGDOWN->strNLimit = GetFieldDataEx(pRecordset, L"NLimit");
				pResultOfLUGDOWN->strNLimit_EDP = GetFieldDataEx(pRecordset, L"NLimit_EDP");
				pResultOfLUGDOWN->strNOxLimit = GetFieldDataEx(pRecordset, L"NOxLimit");
				pResultOfLUGDOWN->strPowerCorrectionFactor = GetFieldDataEx(pRecordset, L"PowerCorrectionFactor");
				pResultOfLUGDOWN->strCorrectedPower = GetFieldDataEx(pRecordset, L"CorrectedPower");
				pResultOfLUGDOWN->strMinHP = GetFieldDataEx(pRecordset, L"MinHP");
				pResultOfLUGDOWN->strRatedRev = GetFieldDataEx(pRecordset, L"RatedRev");
				pResultOfLUGDOWN->strPassOfK100 = GetFieldDataEx(pRecordset, L"PassOfK100");
				pResultOfLUGDOWN->strPassOfNOx100 = GetFieldDataEx(pRecordset, L"PassOfNOx100");
				pResultOfLUGDOWN->strPassOfK90 = GetFieldDataEx(pRecordset, L"PassOfK90");
				pResultOfLUGDOWN->strPassOfK80 = GetFieldDataEx(pRecordset, L"PassOfK80");
				pResultOfLUGDOWN->strPassOfNOx80 = GetFieldDataEx(pRecordset, L"PassOfNOx80");
				pResultOfLUGDOWN->strPassOfP = GetFieldDataEx(pRecordset, L"PassOfP");
				pResultOfLUGDOWN->strPassOfRev = GetFieldDataEx(pRecordset, L"PassOfRev");
				pResultOfLUGDOWN->strPass = GetFieldDataEx(pRecordset, L"Pass");
				pResultOfLUGDOWN->strMaxHP = GetFieldDataEx(pRecordset, L"MaxHP");
				pResultOfLUGDOWN->strActualVelMaxHP = GetFieldDataEx(pRecordset, L"ActualVelMaxHP");
				pResultOfLUGDOWN->strCalculatedVelMaxHP = GetFieldDataEx(pRecordset, L"CalculatedVelMaxHP");
				pResultOfLUGDOWN->strMaxRPM = GetFieldDataEx(pRecordset, L"MaxRPM");
				pResultOfLUGDOWN->strIdleRev = GetFieldDataEx(pRecordset, L"IdleRev");
				pResultOfLUGDOWN->strTotalDuration = GetFieldDataEx(pRecordset, L"TotalDuration");
				pResultOfLUGDOWN->strModeDuration = GetFieldDataEx(pRecordset, L"ModeDuration");
				pResultOfLUGDOWN->strOilTemperature = GetFieldDataEx(pRecordset, L"OilTemperature");
				pResultOfLUGDOWN->strEnvironmentalTemperature = GetFieldDataEx(pRecordset, L"EnvironmentalTemperature");
				pResultOfLUGDOWN->strRelativeHumidity = GetFieldDataEx(pRecordset, L"RelativeHumidity");
				pResultOfLUGDOWN->strAtmosphericPressure = GetFieldDataEx(pRecordset, L"AtmosphericPressure");
				pResultOfLUGDOWN->strSkipRev = GetFieldDataEx(pRecordset, L"SkipRev");
				pResultOfLUGDOWN->strSkipOilTemperature = GetFieldDataEx(pRecordset, L"SkipOilTemperature");
				pResultOfLUGDOWN->strSkipRevJudgement = GetFieldDataEx(pRecordset, L"SkipRevJudgement");
				pResultOfLUGDOWN->strRevPassRange = GetFieldDataEx(pRecordset, L"RevPassRange");
				// 读取二进制字段
				GetImageFieldData(pRecordset, L"RTDataZip", pResultOfLUGDOWN->strRTDataZip);
				pResultOfLUGDOWN->strHash = GetFieldDataEx(pRecordset, L"Hash");
				pResultOfLUGDOWN->strRemark = GetFieldDataEx(pRecordset, L"Remark");
				pResultOfLUGDOWN->strReserved1 = GetFieldDataEx(pRecordset, L"Reserved1");
				pResultOfLUGDOWN->strReserved2 = GetFieldDataEx(pRecordset, L"Reserved2");
				pResultOfLUGDOWN->strReserved3 = GetFieldDataEx(pRecordset, L"Reserved3");

				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD SetDboResultOfLUGDOWN(const RESULTOFLUGDOWN &dboResultOfLUGDOWN)
{
	assert(&dboResultOfLUGDOWN != NULL);

	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			//wsprintf(wchSql, L"select * from ResultOfLUGDOWN where ReportNumber = '%s'", dboResultOfLUGDOWN.wchReportNumber);
			wsprintf(wchSql, L"select * from ResultOfLUGDOWN where RunningNumber = '%s'", dboResultOfLUGDOWN.wchRunningNumber);

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if(pRecordset->adoEOF)
			{
				pRecordset->AddNew();    //添加新记录
			}

			wstring str;
			_variant_t v;

			str = dboResultOfLUGDOWN.wchRunningNumber;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"RunningNumber", v);

			str = dboResultOfLUGDOWN.wchReportNumber;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"ReportNumber", v);

			str = dboResultOfLUGDOWN.wchFuelTypeCode;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"FuelTypeCode", v);

			str = dboResultOfLUGDOWN.wchFuelTypeName;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"FuelTypeName", v);

			str = dboResultOfLUGDOWN.wchK100;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"K100", v);

			str = dboResultOfLUGDOWN.wchN100;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"N100", v);

			str = dboResultOfLUGDOWN.wchP100;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"P100", v);

			str = dboResultOfLUGDOWN.wchNOx100;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"NOx100", v);

			str = dboResultOfLUGDOWN.wchEngineRev100;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"EngineRev100", v);

			str = dboResultOfLUGDOWN.wchOilTemperature100;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"OilTemperature100", v);

			str = dboResultOfLUGDOWN.wchK90;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"K90", v);

			str = dboResultOfLUGDOWN.wchN90;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"N90", v);

			str = dboResultOfLUGDOWN.wchP90;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"P90", v);

			str = dboResultOfLUGDOWN.wchEngineRev90;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"EngineRev90", v);

			str = dboResultOfLUGDOWN.wchOilTemperature90;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"OilTemperature90", v);

			str = dboResultOfLUGDOWN.wchK80;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"K80", v);

			str = dboResultOfLUGDOWN.wchN80;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"N80", v);

			str = dboResultOfLUGDOWN.wchP80;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"P80", v);

			str = dboResultOfLUGDOWN.wchNOx80;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"NOx80", v);

			str = dboResultOfLUGDOWN.wchEngineRev80;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"EngineRev80", v);

			str = dboResultOfLUGDOWN.wchOilTemperature80;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"OilTemperature80", v);

			str = dboResultOfLUGDOWN.wchKLimit;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"KLimit", v);

			str = dboResultOfLUGDOWN.wchKLimit_EDP;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"KLimit_EDP", v);

			str = dboResultOfLUGDOWN.wchNLimit;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"NLimit", v);

			str = dboResultOfLUGDOWN.wchNLimit_EDP;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"NLimit_EDP", v);

			str = dboResultOfLUGDOWN.wchNOxLimit;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"NOxLimit", v);

			str = dboResultOfLUGDOWN.wchPowerCorrectionFactor;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"PowerCorrectionFactor", v);

			str = dboResultOfLUGDOWN.wchCorrectedPower;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"CorrectedPower", v);

			str = dboResultOfLUGDOWN.wchMinHP;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"MinHP", v);

			str = dboResultOfLUGDOWN.wchRatedRev;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"RatedRev", v);

			str = dboResultOfLUGDOWN.wchPassOfK100;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"PassOfK100", v);

			str = dboResultOfLUGDOWN.wchPassOfNOx100;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"PassOfNOx100", v);

			str = dboResultOfLUGDOWN.wchPassOfK90;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"PassOfK90", v);

			str = dboResultOfLUGDOWN.wchPassOfK80;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"PassOfK80", v);

			str = dboResultOfLUGDOWN.wchPassOfNOx80;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"PassOfNOx80", v);

			str = dboResultOfLUGDOWN.wchPassOfP;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"PassOfP", v);

			str = dboResultOfLUGDOWN.wchPassOfRev;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"PassOfRev", v);

			str = dboResultOfLUGDOWN.wchPass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"Pass", v);

			str = dboResultOfLUGDOWN.wchMaxHP;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"MaxHP", v);

			str = dboResultOfLUGDOWN.wchActualVelMaxHP;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"ActualVelMaxHP", v);

			str = dboResultOfLUGDOWN.wchCalculatedVelMaxHP;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"CalculatedVelMaxHP", v);

			str = dboResultOfLUGDOWN.wchMaxRPM;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"MaxRPM", v);

			str = dboResultOfLUGDOWN.wchIdleRev;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"IdleRev", v);

			str = dboResultOfLUGDOWN.wchTotalDuration;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"TotalDuration", v);

			str = dboResultOfLUGDOWN.wchModeDuration;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"ModeDuration", v);

			str = dboResultOfLUGDOWN.wchOilTemperature;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"OilTemperature", v);

			str = dboResultOfLUGDOWN.wchEnvironmentalTemperature;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"EnvironmentalTemperature", v);

			str = dboResultOfLUGDOWN.wchRelativeHumidity;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"RelativeHumidity", v);

			str = dboResultOfLUGDOWN.wchAtmosphericPressure;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"AtmosphericPressure", v);

			str = dboResultOfLUGDOWN.wchSkipRev;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"SkipRev", v);

			str = dboResultOfLUGDOWN.wchSkipOilTemperature;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"SkipOilTemperature", v);

			str = dboResultOfLUGDOWN.wchSkipRevJudgement;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"SkipRevJudgement", v);

			str = dboResultOfLUGDOWN.wchRevPassRange;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"RevPassRange", v);

			// 备注
			str = dboResultOfLUGDOWN.wchRemark;

			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Remark", v);

			// 保留字段,以后备用
			str = dboResultOfLUGDOWN.wchReserved1;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved1", v);

			// 保留字段,以后备用
			str = dboResultOfLUGDOWN.wchReserved2;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved2", v);

			// 保留字段,以后备用
			str = dboResultOfLUGDOWN.wchReserved3;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved3", v);

			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD SetDboResultOfLUGDOWN_Zip(const SResultOfLUGDOWN &sResultOfLUGDOWN)
{
	assert(&sResultOfLUGDOWN != NULL);

	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"select * from ResultOfLUGDOWN where RunningNumber='%s'", sResultOfLUGDOWN.strRunningNumber.c_str());

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if(pRecordset->adoEOF)
			{
				pRecordset->AddNew();    //添加新记录
			}
			
			PutFieldDataEx(pRecordset, L"RunningNumber", VT_BSTR, sResultOfLUGDOWN.strRunningNumber);
			PutFieldDataEx(pRecordset, L"ReportNumber", VT_BSTR, sResultOfLUGDOWN.strReportNumber);
			PutFieldDataEx(pRecordset, L"FuelTypeCode", VT_INT, sResultOfLUGDOWN.strFuelTypeCode);
			PutFieldDataEx(pRecordset, L"FuelTypeName", VT_BSTR, sResultOfLUGDOWN.strFuelTypeName);			
			PutFieldDataEx(pRecordset, L"K100", VT_R4, sResultOfLUGDOWN.strK100);
			PutFieldDataEx(pRecordset, L"N100", VT_R4, sResultOfLUGDOWN.strN100);
			PutFieldDataEx(pRecordset, L"P100", VT_R4, sResultOfLUGDOWN.strP100);
			PutFieldDataEx(pRecordset, L"NOx100", VT_INT, sResultOfLUGDOWN.strNOx100);
			PutFieldDataEx(pRecordset, L"EngineRev100", VT_INT, sResultOfLUGDOWN.strEngineRev100);
			PutFieldDataEx(pRecordset, L"OilTemperature100", VT_R4, sResultOfLUGDOWN.strOilTemperature100);			
			PutFieldDataEx(pRecordset, L"K90", VT_R4, sResultOfLUGDOWN.strK90);
			PutFieldDataEx(pRecordset, L"N90", VT_R4, sResultOfLUGDOWN.strN90);
			PutFieldDataEx(pRecordset, L"P90", VT_R4, sResultOfLUGDOWN.strP90);
			PutFieldDataEx(pRecordset, L"EngineRev90", VT_INT, sResultOfLUGDOWN.strEngineRev90);
			PutFieldDataEx(pRecordset, L"OilTemperature90", VT_R4, sResultOfLUGDOWN.strOilTemperature90);
			PutFieldDataEx(pRecordset, L"K80", VT_R4, sResultOfLUGDOWN.strK80);
			PutFieldDataEx(pRecordset, L"N80", VT_R4, sResultOfLUGDOWN.strN80);
			PutFieldDataEx(pRecordset, L"P80", VT_R4, sResultOfLUGDOWN.strP80);
			PutFieldDataEx(pRecordset, L"NOx80", VT_INT, sResultOfLUGDOWN.strNOx80);
			PutFieldDataEx(pRecordset, L"EngineRev80", VT_INT, sResultOfLUGDOWN.strEngineRev80);
			PutFieldDataEx(pRecordset, L"OilTemperature80", VT_R4, sResultOfLUGDOWN.strOilTemperature80);
			PutFieldDataEx(pRecordset, L"KLimit", VT_R4, sResultOfLUGDOWN.strKLimit);
			PutFieldDataEx(pRecordset, L"KLimit_EDP", VT_INT, sResultOfLUGDOWN.strKLimit_EDP);
			PutFieldDataEx(pRecordset, L"NLimit", VT_R4, sResultOfLUGDOWN.strNLimit);
			PutFieldDataEx(pRecordset, L"NLimit_EDP", VT_INT, sResultOfLUGDOWN.strNLimit_EDP);
			PutFieldDataEx(pRecordset, L"NOxLimit", VT_INT, sResultOfLUGDOWN.strNOxLimit);
			PutFieldDataEx(pRecordset, L"PowerCorrectionFactor", VT_R4, sResultOfLUGDOWN.strPowerCorrectionFactor);
			PutFieldDataEx(pRecordset, L"CorrectedPower", VT_R4, sResultOfLUGDOWN.strCorrectedPower);
			PutFieldDataEx(pRecordset, L"MinHP", VT_R4, sResultOfLUGDOWN.strMinHP);
			PutFieldDataEx(pRecordset, L"RatedRev", VT_INT, sResultOfLUGDOWN.strRatedRev);
			PutFieldDataEx(pRecordset, L"PassOfK100", VT_BOOL, sResultOfLUGDOWN.strPassOfK100);
			PutFieldDataEx(pRecordset, L"PassOfNOx100", VT_BOOL, sResultOfLUGDOWN.strPassOfNOx100);
			PutFieldDataEx(pRecordset, L"PassOfK90", VT_BOOL, sResultOfLUGDOWN.strPassOfK90);
			PutFieldDataEx(pRecordset, L"PassOfK80", VT_BOOL, sResultOfLUGDOWN.strPassOfK80);
			PutFieldDataEx(pRecordset, L"PassOfNOx80", VT_BOOL, sResultOfLUGDOWN.strPassOfNOx80);
			PutFieldDataEx(pRecordset, L"PassOfP", VT_BOOL, sResultOfLUGDOWN.strPassOfP);
			PutFieldDataEx(pRecordset, L"PassOfRev", VT_BOOL, sResultOfLUGDOWN.strPassOfRev);
			PutFieldDataEx(pRecordset, L"Pass", VT_BOOL, sResultOfLUGDOWN.strPass);
			PutFieldDataEx(pRecordset, L"MaxHP", VT_R4, sResultOfLUGDOWN.strMaxHP);
			PutFieldDataEx(pRecordset, L"ActualVelMaxHP", VT_R4, sResultOfLUGDOWN.strActualVelMaxHP);
			PutFieldDataEx(pRecordset, L"CalculatedVelMaxHP", VT_R4, sResultOfLUGDOWN.strCalculatedVelMaxHP);
			PutFieldDataEx(pRecordset, L"MaxRPM", VT_INT, sResultOfLUGDOWN.strMaxRPM);
			PutFieldDataEx(pRecordset, L"IdleRev", VT_INT, sResultOfLUGDOWN.strIdleRev);
			PutFieldDataEx(pRecordset, L"TotalDuration", VT_INT, sResultOfLUGDOWN.strTotalDuration);
			PutFieldDataEx(pRecordset, L"ModeDuration", VT_INT, sResultOfLUGDOWN.strModeDuration);
			PutFieldDataEx(pRecordset, L"OilTemperature", VT_R4, sResultOfLUGDOWN.strOilTemperature);
			PutFieldDataEx(pRecordset, L"EnvironmentalTemperature", VT_R4, sResultOfLUGDOWN.strEnvironmentalTemperature);
			PutFieldDataEx(pRecordset, L"RelativeHumidity", VT_R4, sResultOfLUGDOWN.strRelativeHumidity);
			PutFieldDataEx(pRecordset, L"AtmosphericPressure", VT_R4, sResultOfLUGDOWN.strAtmosphericPressure);
			PutFieldDataEx(pRecordset, L"SkipRev", VT_BOOL, sResultOfLUGDOWN.strSkipRev);
			PutFieldDataEx(pRecordset, L"SkipOilTemperature", VT_BOOL, sResultOfLUGDOWN.strSkipOilTemperature);
			PutFieldDataEx(pRecordset, L"SkipRevJudgement", VT_BOOL, sResultOfLUGDOWN.strSkipRevJudgement);
			PutFieldDataEx(pRecordset, L"RevPassRange", VT_INT, sResultOfLUGDOWN.strRevPassRange);
			// 写二进制字段
			PutImageFieldData(pRecordset, L"RTDataZip", sResultOfLUGDOWN.strRTDataZip);
			PutFieldDataEx(pRecordset, L"Hash", VT_BSTR, sResultOfLUGDOWN.strHash);
			PutFieldDataEx(pRecordset, L"Remark", VT_BSTR, sResultOfLUGDOWN.strRemark);
			PutFieldDataEx(pRecordset, L"Reserved1", VT_BSTR, sResultOfLUGDOWN.strReserved1);
			PutFieldDataEx(pRecordset, L"Reserved2", VT_BSTR, sResultOfLUGDOWN.strReserved2);
			PutFieldDataEx(pRecordset, L"Reserved3", VT_BSTR, sResultOfLUGDOWN.strReserved3);			

			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboRealTimeDataOfLUGDOWN(const wchar_t wchSql[SQLMAX], list<REALTIMEDATAOFLUGDOWN> &listRealTimeDataOfLUGDOWN)
{
	assert(NULL != wchSql);

	DWORD dwReturn(0x00);
	listRealTimeDataOfLUGDOWN.clear();

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			REALTIMEDATAOFLUGDOWN sRealTimeDataOfLUGDOWN;

			if (!pRecordset->adoEOF)
			{
				while(!pRecordset->adoEOF)
				{
					_variant_t v;
					wstring s;

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"AutoID", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfLUGDOWN.wchAutoID, NH_INT_TO_WCHART, L"%d", (int)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfLUGDOWN.wchAutoID,L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"RunningNumber", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfLUGDOWN.wchRunningNumber, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfLUGDOWN.wchRunningNumber, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"ReportNumber", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfLUGDOWN.wchReportNumber, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfLUGDOWN.wchReportNumber, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"FuelTypeCode", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfLUGDOWN.wchFuelTypeCode, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfLUGDOWN.wchFuelTypeCode, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"FuelTypeName", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfLUGDOWN.wchFuelTypeName, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfLUGDOWN.wchFuelTypeName, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"Time", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfLUGDOWN.wchTime, NH_INT_TO_WCHART, L"%d", (int)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfLUGDOWN.wchTime, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"SamplingTime", v);
					if(VT_NULL != v.vt)
					{
						/*s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfLUGDOWN.wchSamplingTime, s.c_str());*/

						wchar_t wch[50] = {0};
						SYSTEMTIME dt;
						VariantTimeToSystemTime(v, &dt);
						swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
						wcscpy_s(sRealTimeDataOfLUGDOWN.wchSamplingTime, wch);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfLUGDOWN.wchSamplingTime, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"Velocity", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfLUGDOWN.wchVelocity, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfLUGDOWN.wchVelocity, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"Power", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfLUGDOWN.wchPower, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfLUGDOWN.wchPower, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"Force", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfLUGDOWN.wchForce, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfLUGDOWN.wchForce, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"IHP", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfLUGDOWN.wchIHP, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfLUGDOWN.wchIHP, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"PLHP", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfLUGDOWN.wchPLHP, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfLUGDOWN.wchPLHP, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"State", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfLUGDOWN.wchState, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfLUGDOWN.wchState, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"K", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfLUGDOWN.wchK, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfLUGDOWN.wchK, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"N", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfLUGDOWN.wchN, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfLUGDOWN.wchN, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"EngineRev", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfLUGDOWN.wchEngineRev, NH_INT_TO_WCHART, L"%d", (int)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfLUGDOWN.wchEngineRev, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"OilTemperature", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfLUGDOWN.wchOilTemperature, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfLUGDOWN.wchOilTemperature, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"EnvironmentalTemperature", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfLUGDOWN.wchEnvironmentalTemperature, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfLUGDOWN.wchEnvironmentalTemperature, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"AtmosphericPressure", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfLUGDOWN.wchAtmosphericPressure, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfLUGDOWN.wchAtmosphericPressure, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"RelativeHumidity", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfLUGDOWN.wchRelativeHumidity, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfLUGDOWN.wchRelativeHumidity, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"PowerCorrectionFactor", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfLUGDOWN.wchPowerCorrectionFactor, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfLUGDOWN.wchPowerCorrectionFactor, L"");
					}
					
					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"CO", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfLUGDOWN.wchCO, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);  
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfLUGDOWN.wchCO, L"");
					}
					
					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"HC", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfLUGDOWN.wchHC, NH_INT_TO_WCHART, L"%d", (int)v);  
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfLUGDOWN.wchHC, L"");
					}
					
					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"NO", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfLUGDOWN.wchNO, NH_INT_TO_WCHART, L"%d", (int)v);  
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfLUGDOWN.wchNO, L"");
					}
					
					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"NO2", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfLUGDOWN.wchNO2, NH_INT_TO_WCHART, L"%d", (int)v);  
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfLUGDOWN.wchNO2, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"CO2", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfLUGDOWN.wchCO2, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);  
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfLUGDOWN.wchCO2, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"O2", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfLUGDOWN.wchO2, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);  
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfLUGDOWN.wchO2, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"HumidityCorrectionFactor", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfLUGDOWN.wchHumidityCorrectionFactor, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);  
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfLUGDOWN.wchHumidityCorrectionFactor, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"Remark", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfLUGDOWN.wchRemark, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfLUGDOWN.wchRemark, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"Reserved1", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfLUGDOWN.wchReserved1, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfLUGDOWN.wchReserved1, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"Reserved2", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfLUGDOWN.wchReserved2, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfLUGDOWN.wchReserved2, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"Reserved3", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfLUGDOWN.wchReserved3, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfLUGDOWN.wchReserved3, L"");
					}

					listRealTimeDataOfLUGDOWN.push_back(sRealTimeDataOfLUGDOWN);
					pRecordset->MoveNext();
				}
				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}
DWORD GetDboRealTimeDataOfLUGDOWN_Zip(const wchar_t wchSql[SQLMAX], list<REALTIMEDATAOFLUGDOWN> &listRealTimeDataOfLUGDOWN)
{
	assert(NULL != wchSql);

	DWORD dwReturn(0x00);
	listRealTimeDataOfLUGDOWN.clear();

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			SRealTimeDataOfLUGDOWN_Zip sRealTimeDataOfLUGDOWN_Zip;
			while (!pRecordset->adoEOF)
			{
				GetStringFromDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strFuelTypeCode, L"FuelTypeCode");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strFuelTypeName, L"FuelTypeName");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strTime, L"Time");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strSamplingTime, L"SamplingTime");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strVelocity, L"Velocity");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strPower, L"Power");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strForce, L"Force");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strIHP, L"IHP");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strPLHP, L"PLHP");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strState, L"State");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strK, L"K");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strN, L"N");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strEngineRev, L"EngineRev");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strOilTemperature, L"OilTemperature");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strEnvironmentalTemperature, L"EnvironmentalTemperature");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strRelativeHumidity, L"RelativeHumidity");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strAtmosphericPressure, L"AtmosphericPressure");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strPowerCorrectionFactor, L"PowerCorrectionFactor");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strCO, L"CO");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strHC, L"HC");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strNO, L"NO");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strNO2, L"NO2");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strCO2, L"CO2");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strO2, L"O2");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strHumidityCorrectionFactor, L"HumidityCorrectionFactor");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strRemark, L"Remark");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strReserved1, L"Reserved1");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strReserved2, L"Reserved2");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strReserved3, L"Reserved3");

				while(1)
				{
					REALTIMEDATAOFLUGDOWN sRealTimeDataOfLUGDOWN;

					if (!SplitString(sRealTimeDataOfLUGDOWN_Zip.strTime, sRealTimeDataOfLUGDOWN.wchTime, g_pchSplit))
					{
						break;
					}

					_variant_t v;
					wstring s;

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"RunningNumber", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfLUGDOWN.wchRunningNumber, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfLUGDOWN.wchRunningNumber, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"ReportNumber", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfLUGDOWN.wchReportNumber, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfLUGDOWN.wchReportNumber, L"");
					}
					SplitString(sRealTimeDataOfLUGDOWN_Zip.strFuelTypeCode, sRealTimeDataOfLUGDOWN.wchFuelTypeCode, g_pchSplit);
					SplitString(sRealTimeDataOfLUGDOWN_Zip.strFuelTypeName, sRealTimeDataOfLUGDOWN.wchFuelTypeName, g_pchSplit);
					SplitString(sRealTimeDataOfLUGDOWN_Zip.strSamplingTime, sRealTimeDataOfLUGDOWN.wchSamplingTime, g_pchSplit);
					SplitString(sRealTimeDataOfLUGDOWN_Zip.strVelocity, sRealTimeDataOfLUGDOWN.wchVelocity, g_pchSplit);
					SplitString(sRealTimeDataOfLUGDOWN_Zip.strPower, sRealTimeDataOfLUGDOWN.wchPower, g_pchSplit);
					SplitString(sRealTimeDataOfLUGDOWN_Zip.strForce, sRealTimeDataOfLUGDOWN.wchForce, g_pchSplit);
					SplitString(sRealTimeDataOfLUGDOWN_Zip.strIHP, sRealTimeDataOfLUGDOWN.wchIHP, g_pchSplit);
					SplitString(sRealTimeDataOfLUGDOWN_Zip.strPLHP, sRealTimeDataOfLUGDOWN.wchPLHP, g_pchSplit);
					SplitString(sRealTimeDataOfLUGDOWN_Zip.strState, sRealTimeDataOfLUGDOWN.wchState, g_pchSplit);
					SplitString(sRealTimeDataOfLUGDOWN_Zip.strK, sRealTimeDataOfLUGDOWN.wchK, g_pchSplit);
					SplitString(sRealTimeDataOfLUGDOWN_Zip.strN, sRealTimeDataOfLUGDOWN.wchN, g_pchSplit);
					SplitString(sRealTimeDataOfLUGDOWN_Zip.strEngineRev, sRealTimeDataOfLUGDOWN.wchEngineRev, g_pchSplit);
					SplitString(sRealTimeDataOfLUGDOWN_Zip.strOilTemperature, sRealTimeDataOfLUGDOWN.wchOilTemperature, g_pchSplit);
					SplitString(sRealTimeDataOfLUGDOWN_Zip.strEnvironmentalTemperature, sRealTimeDataOfLUGDOWN.wchEnvironmentalTemperature, g_pchSplit);
					SplitString(sRealTimeDataOfLUGDOWN_Zip.strRelativeHumidity, sRealTimeDataOfLUGDOWN.wchRelativeHumidity, g_pchSplit);
					SplitString(sRealTimeDataOfLUGDOWN_Zip.strAtmosphericPressure, sRealTimeDataOfLUGDOWN.wchAtmosphericPressure, g_pchSplit);
					SplitString(sRealTimeDataOfLUGDOWN_Zip.strPowerCorrectionFactor, sRealTimeDataOfLUGDOWN.wchPowerCorrectionFactor, g_pchSplit);
					SplitString(sRealTimeDataOfLUGDOWN_Zip.strCO, sRealTimeDataOfLUGDOWN.wchCO, g_pchSplit);
					SplitString(sRealTimeDataOfLUGDOWN_Zip.strHC, sRealTimeDataOfLUGDOWN.wchHC, g_pchSplit);
					SplitString(sRealTimeDataOfLUGDOWN_Zip.strNO, sRealTimeDataOfLUGDOWN.wchNO, g_pchSplit);
					SplitString(sRealTimeDataOfLUGDOWN_Zip.strNO2, sRealTimeDataOfLUGDOWN.wchNO2, g_pchSplit);
					SplitString(sRealTimeDataOfLUGDOWN_Zip.strCO2, sRealTimeDataOfLUGDOWN.wchCO2, g_pchSplit);
					SplitString(sRealTimeDataOfLUGDOWN_Zip.strO2, sRealTimeDataOfLUGDOWN.wchO2, g_pchSplit);
					SplitString(sRealTimeDataOfLUGDOWN_Zip.strHumidityCorrectionFactor, sRealTimeDataOfLUGDOWN.wchHumidityCorrectionFactor, g_pchSplit);
					SplitString(sRealTimeDataOfLUGDOWN_Zip.strRemark, sRealTimeDataOfLUGDOWN.wchRemark, g_pchSplit);
					SplitString(sRealTimeDataOfLUGDOWN_Zip.strReserved1, sRealTimeDataOfLUGDOWN.wchReserved1, g_pchSplit);
					SplitString(sRealTimeDataOfLUGDOWN_Zip.strReserved2, sRealTimeDataOfLUGDOWN.wchReserved2, g_pchSplit);
					SplitString(sRealTimeDataOfLUGDOWN_Zip.strReserved3, sRealTimeDataOfLUGDOWN.wchReserved3, g_pchSplit);

					listRealTimeDataOfLUGDOWN.push_back(sRealTimeDataOfLUGDOWN);
				}
				pRecordset->MoveNext();
				dwReturn = 0x01;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}
DWORD SetDboRealTimeDataOfLUGDOWN(list<REALTIMEDATAOFLUGDOWN> &listRealTimeDataOfLUGDOWN)
{
	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"select * from RealTimeDataOfLUGDOWN where 1=0");

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			_variant_t v;

			for(list<RealTimeDataOfLUGDOWN>::iterator ir=listRealTimeDataOfLUGDOWN.begin(); ir!=listRealTimeDataOfLUGDOWN.end(); ++ir)
			{
				pRecordset->AddNew();    //添加新记录

				// 流水号
				if(0 == _tcscmp(L"", ir->wchRunningNumber))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchRunningNumber;
				}
				PutFieldData(pRecordset, L"RunningNumber", v);

				// 检测报告编号
				if(0 == _tcscmp(L"", ir->wchReportNumber))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchReportNumber;
				}
				PutFieldData(pRecordset, L"ReportNumber", v);

				// 时间[s]
				if(0 == _tcscmp(L"", ir->wchTime))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<int>(_wtoi(ir->wchTime));
				}
				PutFieldData(pRecordset, L"Time", v);

				// 采样时间
				if(0 == _tcscmp(L"", ir->wchSamplingTime))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchSamplingTime;
				}
				PutFieldData(pRecordset, L"SamplingTime", v);

				if(0 == _tcscmp(L"", ir->wchVelocity))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchVelocity));
				}
				PutFieldData(pRecordset, L"Velocity", v);

				if(0 == _tcscmp(L"", ir->wchPower))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchPower));
				}
				PutFieldData(pRecordset, L"Power", v);

				if(0 == _tcscmp(L"", ir->wchForce))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchForce));
				}
				PutFieldData(pRecordset, L"Force", v);

				if(0 == _tcscmp(L"", ir->wchIHP))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchIHP));
				}
				PutFieldData(pRecordset, L"IHP", v);

				if(0 == _tcscmp(L"", ir->wchPLHP))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchPLHP));
				}
				PutFieldData(pRecordset, L"PLHP", v);

				if(0 == _tcscmp(L"", ir->wchState))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchState;
				}
				PutFieldData(pRecordset, L"State", v);

				if(0 == _tcscmp(L"", ir->wchK))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchK));
				}
				PutFieldData(pRecordset, L"K", v);

				if(0 == _tcscmp(L"", ir->wchN))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchN));
				}
				PutFieldData(pRecordset, L"N", v);

				if(0 == _tcscmp(L"", ir->wchEngineRev))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<int>(_wtoi(ir->wchEngineRev));
				}
				PutFieldData(pRecordset, L"EngineRev", v);

				if(0 == _tcscmp(L"", ir->wchOilTemperature))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchOilTemperature));
				}
				PutFieldData(pRecordset, L"OilTemperature", v);

				if(0 == _tcscmp(L"", ir->wchEnvironmentalTemperature))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchEnvironmentalTemperature));
				}
				PutFieldData(pRecordset, L"EnvironmentalTemperature", v);

				if(0 == _tcscmp(L"", ir->wchRelativeHumidity))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchRelativeHumidity));
				}
				PutFieldData(pRecordset, L"RelativeHumidity", v);

				if(0 == _tcscmp(L"", ir->wchAtmosphericPressure))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchAtmosphericPressure));
				}
				PutFieldData(pRecordset, L"AtmosphericPressure", v);

				if(0 == _tcscmp(L"", ir->wchPowerCorrectionFactor))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchPowerCorrectionFactor));
				}
				PutFieldData(pRecordset, L"PowerCorrectionFactor", v);
				
				v.ChangeType(VT_NULL);
				if (0 != _tcscmp(L"", ir->wchCO))
				{
					v = static_cast<float>(_wtof(ir->wchCO));
				}
				PutFieldData(pRecordset, L"CO", v);

				v.ChangeType(VT_NULL);
				if (0 != _tcscmp(L"", ir->wchHC))
				{
					v = static_cast<int>(_wtoi(ir->wchHC));
				}
				PutFieldData(pRecordset, L"HC", v);

				v.ChangeType(VT_NULL);
				if (0 != _tcscmp(L"", ir->wchNO))
				{
					v = static_cast<int>(_wtoi(ir->wchNO));
				}
				PutFieldData(pRecordset, L"NO", v);

				v.ChangeType(VT_NULL);
				if (0 != _tcscmp(L"", ir->wchNO2))
				{
					v = static_cast<int>(_wtoi(ir->wchNO2));
				}
				PutFieldData(pRecordset, L"NO2", v);

				v.ChangeType(VT_NULL);
				if (0 != _tcscmp(L"", ir->wchCO2))
				{
					v = static_cast<float>(_wtof(ir->wchCO2));
				}
				PutFieldData(pRecordset, L"CO2", v);

				v.ChangeType(VT_NULL);
				if (0 != _tcscmp(L"", ir->wchO2))
				{
					v = static_cast<float>(_wtof(ir->wchO2));
				}
				PutFieldData(pRecordset, L"O2", v);

				v.ChangeType(VT_NULL);
				if (0 != _tcscmp(L"", ir->wchHumidityCorrectionFactor))
				{
					v = static_cast<float>(_wtof(ir->wchHumidityCorrectionFactor));
				}
				PutFieldData(pRecordset, L"HumidityCorrectionFactor", v);

				// 备注
				if(0 == _tcscmp(L"", ir->wchRemark))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchRemark;
				}
				PutFieldData(pRecordset, L"Remark", v);

				// 保留字段,以后备用
				if(0 == _tcscmp(L"", ir->wchReserved1))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchReserved1;
				}
				PutFieldData(pRecordset, L"Reserved1", v);

				// 保留字段,以后备用
				if(0 == _tcscmp(L"", ir->wchReserved2))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchReserved2;
				}
				PutFieldData(pRecordset, L"Reserved2", v);

				// 保留字段,以后备用
				if(0 == _tcscmp(L"", ir->wchReserved3))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchReserved3;
				}
				PutFieldData(pRecordset, L"Reserved3", v);
			}

			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}
DWORD SetDboRealTimeDataOfLUGDOWN_Zip(list<REALTIMEDATAOFLUGDOWN> &listRealTimeDataOfLUGDOWN)
{
	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			list<RealTimeDataOfLUGDOWN>::iterator irTmp=listRealTimeDataOfLUGDOWN.begin();

			wsprintf(wchSql, L"select * from RealTimeDataOfLUGDOWN_Zip where RunningNumber = '%s'", irTmp->wchRunningNumber);
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			_variant_t v;

			if(pRecordset->adoEOF)
			{
				pRecordset->AddNew();    //添加新记录
			}
			SRealTimeDataOfLUGDOWN_Zip sRealTimeDataOfLUGDOWN_Zip;


			for(list<RealTimeDataOfLUGDOWN>::iterator ir=listRealTimeDataOfLUGDOWN.begin(); ir!=listRealTimeDataOfLUGDOWN.end(); ++ir)
			{
				if(0 == _tcscmp(L"", ir->wchRunningNumber))
				{
					sRealTimeDataOfLUGDOWN_Zip.strRunningNumber = L"";
				}
				else
				{
					sRealTimeDataOfLUGDOWN_Zip.strRunningNumber = ir->wchRunningNumber;
				}
				
				// 检测报告编号
				if(0 == _tcscmp(L"", ir->wchReportNumber))
				{

					sRealTimeDataOfLUGDOWN_Zip.strReportNumber = L"";
				}
				else
				{
					sRealTimeDataOfLUGDOWN_Zip.strReportNumber = ir->wchReportNumber;
				}

				if(0 == _tcscmp(L"", ir->wchTime))
				{
					sRealTimeDataOfLUGDOWN_Zip.strTime += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfLUGDOWN_Zip.strTime += UnicodeToANSIEx(ir->wchTime);
					sRealTimeDataOfLUGDOWN_Zip.strTime += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchSamplingTime))
				{
					sRealTimeDataOfLUGDOWN_Zip.strSamplingTime += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfLUGDOWN_Zip.strSamplingTime += UnicodeToANSIEx(ir->wchSamplingTime);
					sRealTimeDataOfLUGDOWN_Zip.strSamplingTime += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchVelocity))
				{
					sRealTimeDataOfLUGDOWN_Zip.strVelocity += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfLUGDOWN_Zip.strVelocity += UnicodeToANSIEx(ir->wchVelocity);
					sRealTimeDataOfLUGDOWN_Zip.strVelocity += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchPower))
				{
					sRealTimeDataOfLUGDOWN_Zip.strPower += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfLUGDOWN_Zip.strPower += UnicodeToANSIEx(ir->wchPower);
					sRealTimeDataOfLUGDOWN_Zip.strPower += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchForce))
				{
					sRealTimeDataOfLUGDOWN_Zip.strForce += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfLUGDOWN_Zip.strForce += UnicodeToANSIEx(ir->wchForce);
					sRealTimeDataOfLUGDOWN_Zip.strForce += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchIHP))
				{
					sRealTimeDataOfLUGDOWN_Zip.strIHP += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfLUGDOWN_Zip.strIHP += UnicodeToANSIEx(ir->wchIHP);
					sRealTimeDataOfLUGDOWN_Zip.strIHP += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchPLHP))
				{
					sRealTimeDataOfLUGDOWN_Zip.strPLHP += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfLUGDOWN_Zip.strPLHP += UnicodeToANSIEx(ir->wchPLHP);
					sRealTimeDataOfLUGDOWN_Zip.strPLHP += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchState))
				{
					sRealTimeDataOfLUGDOWN_Zip.strState += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfLUGDOWN_Zip.strState += UnicodeToANSIEx(ir->wchState);
					sRealTimeDataOfLUGDOWN_Zip.strState += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchK))
				{
					sRealTimeDataOfLUGDOWN_Zip.strK += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfLUGDOWN_Zip.strK += UnicodeToANSIEx(ir->wchK);
					sRealTimeDataOfLUGDOWN_Zip.strK += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchN))
				{
					sRealTimeDataOfLUGDOWN_Zip.strN += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfLUGDOWN_Zip.strN += UnicodeToANSIEx(ir->wchN);
					sRealTimeDataOfLUGDOWN_Zip.strN += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchEngineRev))
				{
					sRealTimeDataOfLUGDOWN_Zip.strEngineRev += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfLUGDOWN_Zip.strEngineRev += UnicodeToANSIEx(ir->wchEngineRev);
					sRealTimeDataOfLUGDOWN_Zip.strEngineRev += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchOilTemperature))
				{
					sRealTimeDataOfLUGDOWN_Zip.strOilTemperature += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfLUGDOWN_Zip.strOilTemperature += UnicodeToANSIEx(ir->wchOilTemperature);
					sRealTimeDataOfLUGDOWN_Zip.strOilTemperature += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchEnvironmentalTemperature))
				{
					sRealTimeDataOfLUGDOWN_Zip.strEnvironmentalTemperature += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfLUGDOWN_Zip.strEnvironmentalTemperature += UnicodeToANSIEx(ir->wchEnvironmentalTemperature);
					sRealTimeDataOfLUGDOWN_Zip.strEnvironmentalTemperature += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchRelativeHumidity))
				{
					sRealTimeDataOfLUGDOWN_Zip.strRelativeHumidity += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfLUGDOWN_Zip.strRelativeHumidity += UnicodeToANSIEx(ir->wchRelativeHumidity);
					sRealTimeDataOfLUGDOWN_Zip.strRelativeHumidity += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchAtmosphericPressure))
				{
					sRealTimeDataOfLUGDOWN_Zip.strAtmosphericPressure += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfLUGDOWN_Zip.strAtmosphericPressure += UnicodeToANSIEx(ir->wchAtmosphericPressure);
					sRealTimeDataOfLUGDOWN_Zip.strAtmosphericPressure += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchPowerCorrectionFactor))
				{
					sRealTimeDataOfLUGDOWN_Zip.strPowerCorrectionFactor += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfLUGDOWN_Zip.strPowerCorrectionFactor += UnicodeToANSIEx(ir->wchPowerCorrectionFactor);
					sRealTimeDataOfLUGDOWN_Zip.strPowerCorrectionFactor += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchCO))
				{
					sRealTimeDataOfLUGDOWN_Zip.strCO += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfLUGDOWN_Zip.strCO += UnicodeToANSIEx(ir->wchCO);
					sRealTimeDataOfLUGDOWN_Zip.strCO += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchHC))
				{
					sRealTimeDataOfLUGDOWN_Zip.strHC += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfLUGDOWN_Zip.strHC += UnicodeToANSIEx(ir->wchHC);
					sRealTimeDataOfLUGDOWN_Zip.strHC += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchNO))
				{
					sRealTimeDataOfLUGDOWN_Zip.strNO += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfLUGDOWN_Zip.strNO += UnicodeToANSIEx(ir->wchNO);
					sRealTimeDataOfLUGDOWN_Zip.strNO += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchNO2))
				{
					sRealTimeDataOfLUGDOWN_Zip.strNO2 += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfLUGDOWN_Zip.strNO2 += UnicodeToANSIEx(ir->wchNO2);
					sRealTimeDataOfLUGDOWN_Zip.strNO2 += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchCO2))
				{
					sRealTimeDataOfLUGDOWN_Zip.strCO2 += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfLUGDOWN_Zip.strCO2 += UnicodeToANSIEx(ir->wchCO2);
					sRealTimeDataOfLUGDOWN_Zip.strCO2 += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchO2))
				{
					sRealTimeDataOfLUGDOWN_Zip.strO2 += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfLUGDOWN_Zip.strO2 += UnicodeToANSIEx(ir->wchO2);
					sRealTimeDataOfLUGDOWN_Zip.strO2 += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchHumidityCorrectionFactor))
				{
					sRealTimeDataOfLUGDOWN_Zip.strHumidityCorrectionFactor += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfLUGDOWN_Zip.strHumidityCorrectionFactor += UnicodeToANSIEx(ir->wchHumidityCorrectionFactor);
					sRealTimeDataOfLUGDOWN_Zip.strHumidityCorrectionFactor += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchRemark))
				{
					sRealTimeDataOfLUGDOWN_Zip.strRemark += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfLUGDOWN_Zip.strRemark += UnicodeToANSIEx(ir->wchRemark);
					sRealTimeDataOfLUGDOWN_Zip.strRemark += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchReserved1))
				{
					sRealTimeDataOfLUGDOWN_Zip.strReserved1 += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfLUGDOWN_Zip.strReserved1 += UnicodeToANSIEx(ir->wchReserved1);
					sRealTimeDataOfLUGDOWN_Zip.strReserved1 += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchReserved2))
				{
					sRealTimeDataOfLUGDOWN_Zip.strReserved2 += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfLUGDOWN_Zip.strReserved2 += UnicodeToANSIEx(ir->wchReserved2);
					sRealTimeDataOfLUGDOWN_Zip.strReserved2 += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchReserved3))
				{
					sRealTimeDataOfLUGDOWN_Zip.strReserved3 += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfLUGDOWN_Zip.strReserved3 += UnicodeToANSIEx(ir->wchReserved3);
					sRealTimeDataOfLUGDOWN_Zip.strReserved3 += g_pchSplit;
				}
			}

			v.ChangeType(VT_NULL);
			v = sRealTimeDataOfLUGDOWN_Zip.strRunningNumber.c_str();
			PutFieldData(pRecordset, L"RunningNumber", v);

			v.ChangeType(VT_NULL);
			v = sRealTimeDataOfLUGDOWN_Zip.strReportNumber.c_str();
			PutFieldData(pRecordset, L"ReportNumber", v);

			SetStringToDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strTime, L"Time");
			SetStringToDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strSamplingTime, L"SamplingTime");
			SetStringToDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strVelocity, L"Velocity");
			SetStringToDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strPower, L"Power");
			SetStringToDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strForce, L"Force");
			SetStringToDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strIHP, L"IHP");
			SetStringToDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strPLHP, L"PLHP");
			SetStringToDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strState, L"State");
			SetStringToDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strK, L"K");
			SetStringToDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strN, L"N");
			SetStringToDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strEngineRev, L"EngineRev");
			SetStringToDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strOilTemperature, L"OilTemperature");
			SetStringToDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strEnvironmentalTemperature, L"EnvironmentalTemperature");
			SetStringToDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strRelativeHumidity, L"RelativeHumidity");
			SetStringToDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strAtmosphericPressure, L"AtmosphericPressure");
			SetStringToDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strPowerCorrectionFactor, L"PowerCorrectionFactor");
			SetStringToDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strCO, L"CO");
			SetStringToDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strHC, L"HC");
			SetStringToDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strNO, L"NO");
			SetStringToDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strNO2, L"NO2");
			SetStringToDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strCO2, L"CO2");
			SetStringToDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strO2, L"O2");
			SetStringToDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strHumidityCorrectionFactor, L"HumidityCorrectionFactor");
			SetStringToDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strRemark, L"Remark");
			SetStringToDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strReserved1, L"Reserved1");
			SetStringToDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strReserved2, L"Reserved2");
			SetStringToDBImage(pRecordset, sRealTimeDataOfLUGDOWN_Zip.strReserved3, L"Reserved3");

			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboResultOfFSUNHT(const wchar_t wchSql[SQLMAX], PRESULTOFFSUNHT const pDboResultOfFSUNHT)
{
	assert(NULL != wchSql);
	assert(NULL != pDboResultOfFSUNHT);

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			if(!pRecordset->adoEOF)
			{
				_variant_t v;
				wstring s;

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AutoID", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfFSUNHT->wchAutoID, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfFSUNHT->wchAutoID, L"");
				}
				
				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"RunningNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfFSUNHT->wchRunningNumber, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfFSUNHT->wchRunningNumber, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"ReportNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfFSUNHT->wchReportNumber, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfFSUNHT->wchReportNumber, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FuelTypeCode", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfFSUNHT->wchFuelTypeCode, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfFSUNHT->wchFuelTypeCode, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FuelTypeName", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfFSUNHT->wchFuelTypeName, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfFSUNHT->wchFuelTypeName,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EngineRev", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfFSUNHT->wchEngineRev, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfFSUNHT->wchEngineRev, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Value1", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfFSUNHT->wchValue1, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfFSUNHT->wchValue1, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Value2", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfFSUNHT->wchValue2, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfFSUNHT->wchValue2, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Value3", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfFSUNHT->wchValue3, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfFSUNHT->wchValue3, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Value4", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfFSUNHT->wchValue4, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfFSUNHT->wchValue4, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Average", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfFSUNHT->wchAverage, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfFSUNHT->wchAverage, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Limit", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfFSUNHT->wchLimit, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfFSUNHT->wchLimit, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Limit_EDP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfFSUNHT->wchLimit_EDP, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfFSUNHT->wchLimit_EDP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Pass", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfFSUNHT->wchPass, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfFSUNHT->wchPass, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfFSUNHT->wchPass, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EnvironmentalTemperature", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfFSUNHT->wchEnvironmentalTemperature, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfFSUNHT->wchEnvironmentalTemperature, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"RelativeHumidity", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfFSUNHT->wchRelativeHumidity, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfFSUNHT->wchRelativeHumidity, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AtmosphericPressure", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfFSUNHT->wchAtmosphericPressure, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfFSUNHT->wchAtmosphericPressure, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OilTemperature", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfFSUNHT->wchOilTemperature, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfFSUNHT->wchOilTemperature, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"SkipRev", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfFSUNHT->wchSkipRev, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfFSUNHT->wchSkipRev, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfFSUNHT->wchSkipRev, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"SkipOilTemperature", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfFSUNHT->wchSkipOilTemperature, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfFSUNHT->wchSkipOilTemperature, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfFSUNHT->wchSkipOilTemperature, L"");
				}


				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Remark", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfFSUNHT->wchRemark, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfFSUNHT->wchRemark,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved1", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfFSUNHT->wchReserved1, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfFSUNHT->wchReserved1,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved2", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfFSUNHT->wchReserved2, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfFSUNHT->wchReserved2,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved3", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfFSUNHT->wchReserved3, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfFSUNHT->wchReserved3,L"");
				}

				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboResultOfFSUNHT_Zip(const wchar_t wchSQL[SQLMAX], SResultOfFSUNHT* const pResultOfFSUNHT)
{
	assert(NULL != wchSQL);
	assert(NULL != pResultOfFSUNHT);

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSQL,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			if (!pRecordset->adoEOF)
			{

				pResultOfFSUNHT->strAutoID = GetFieldDataEx(pRecordset, L"AutoID");
				pResultOfFSUNHT->strRunningNumber = GetFieldDataEx(pRecordset, L"RunningNumber");
				pResultOfFSUNHT->strReportNumber = GetFieldDataEx(pRecordset, L"ReportNumber");
				pResultOfFSUNHT->strFuelTypeCode = GetFieldDataEx(pRecordset, L"FuelTypeCode");
				pResultOfFSUNHT->strFuelTypeName = GetFieldDataEx(pRecordset, L"FuelTypeName");
				pResultOfFSUNHT->strEngineRev = GetFieldDataEx(pRecordset, L"EngineRev");
				pResultOfFSUNHT->strValue1 = GetFieldDataEx(pRecordset, L"Value1");
				pResultOfFSUNHT->strValue2 = GetFieldDataEx(pRecordset, L"Value2");
				pResultOfFSUNHT->strValue3 = GetFieldDataEx(pRecordset, L"Value3");
				pResultOfFSUNHT->strValue4 = GetFieldDataEx(pRecordset, L"Value4");
				pResultOfFSUNHT->strAverage = GetFieldDataEx(pRecordset, L"Average");
				pResultOfFSUNHT->strLimit = GetFieldDataEx(pRecordset, L"Limit");
				pResultOfFSUNHT->strLimit_EDP = GetFieldDataEx(pRecordset, L"Limit_EDP");
				pResultOfFSUNHT->strPass = GetFieldDataEx(pRecordset, L"Pass");
				pResultOfFSUNHT->strEnvironmentalTemperature = GetFieldDataEx(pRecordset, L"EnvironmentalTemperature");
				pResultOfFSUNHT->strRelativeHumidity = GetFieldDataEx(pRecordset, L"RelativeHumidity");
				pResultOfFSUNHT->strAtmosphericPressure = GetFieldDataEx(pRecordset, L"AtmosphericPressure");
				pResultOfFSUNHT->strOilTemperature = GetFieldDataEx(pRecordset, L"OilTemperature");
				pResultOfFSUNHT->strSkipRev = GetFieldDataEx(pRecordset, L"SkipRev");
				pResultOfFSUNHT->strSkipOilTemperature = GetFieldDataEx(pRecordset, L"SkipOilTemperature");
				// 读取二进制字段
				GetImageFieldData(pRecordset, L"RTDataZip", pResultOfFSUNHT->strRTDataZip);
				pResultOfFSUNHT->strHash = GetFieldDataEx(pRecordset, L"Hash");
				pResultOfFSUNHT->strRemark = GetFieldDataEx(pRecordset, L"Remark");
				pResultOfFSUNHT->strReserved1 = GetFieldDataEx(pRecordset, L"Reserved1");
				pResultOfFSUNHT->strReserved2 = GetFieldDataEx(pRecordset, L"Reserved2");
				pResultOfFSUNHT->strReserved3 = GetFieldDataEx(pRecordset, L"Reserved3");

				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD SetDboResultOfFSUNHT(const RESULTOFFSUNHT &dboResultOfFSUNHT)
{
	assert(&dboResultOfFSUNHT != NULL);

	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			//wsprintf(wchSql, L"select * from ResultOfFSUNHT where ReportNumber = '%s'", dboResultOfFSUNHT.wchReportNumber);
			wsprintf(wchSql, L"select * from ResultOfFSUNHT where RunningNumber = '%s'", dboResultOfFSUNHT.wchRunningNumber);

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if(pRecordset->adoEOF)
			{
				pRecordset->AddNew();    //添加新记录
			}

			wstring str;
			_variant_t v;

			str = dboResultOfFSUNHT.wchRunningNumber;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"RunningNumber", v);

			str = dboResultOfFSUNHT.wchReportNumber;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"ReportNumber", v);

			str = dboResultOfFSUNHT.wchFuelTypeCode;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"FuelTypeCode", v);

			str = dboResultOfFSUNHT.wchFuelTypeName;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"FuelTypeName", v);

			str = dboResultOfFSUNHT.wchEngineRev;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"EngineRev", v);

			str = dboResultOfFSUNHT.wchValue1;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"Value1", v);

			str = dboResultOfFSUNHT.wchValue2;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"Value2", v);

			str = dboResultOfFSUNHT.wchValue3;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"Value3", v);

			str = dboResultOfFSUNHT.wchValue4;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"Value4", v);

			str = dboResultOfFSUNHT.wchAverage;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"Average", v);

			str = dboResultOfFSUNHT.wchLimit;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"Limit", v);

			str = dboResultOfFSUNHT.wchLimit_EDP;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"Limit_EDP", v);

			str = dboResultOfFSUNHT.wchPass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"Pass", v);

			str = dboResultOfFSUNHT.wchEnvironmentalTemperature;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"EnvironmentalTemperature", v);


			str = dboResultOfFSUNHT.wchRelativeHumidity;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"RelativeHumidity", v);


			str = dboResultOfFSUNHT.wchAtmosphericPressure;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"AtmosphericPressure", v);


			str = dboResultOfFSUNHT.wchOilTemperature;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"OilTemperature", v);

			str = dboResultOfFSUNHT.wchSkipRev;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"SkipRev", v);

			str = dboResultOfFSUNHT.wchSkipOilTemperature;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"SkipOilTemperature", v);

			// 备注
			str = dboResultOfFSUNHT.wchRemark;

			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Remark", v);

			// 保留字段,以后备用
			str = dboResultOfFSUNHT.wchReserved1;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved1", v);

			// 保留字段,以后备用
			str = dboResultOfFSUNHT.wchReserved2;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved2", v);

			// 保留字段,以后备用
			str = dboResultOfFSUNHT.wchReserved3;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved3", v);

			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD SetDboResultOfFSUNHT_Zip(const SResultOfFSUNHT &sResultOfFSUNHT)
{
	assert(&sResultOfFSUNHT != NULL);

	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"select * from ResultOfFSUNHT where RunningNumber='%s'", sResultOfFSUNHT.strRunningNumber.c_str());

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if(pRecordset->adoEOF)
			{
				pRecordset->AddNew();    //添加新记录
			}
			
			PutFieldDataEx(pRecordset, L"RunningNumber", VT_BSTR, sResultOfFSUNHT.strRunningNumber);
			PutFieldDataEx(pRecordset, L"ReportNumber", VT_BSTR, sResultOfFSUNHT.strReportNumber);
			PutFieldDataEx(pRecordset, L"FuelTypeCode", VT_INT, sResultOfFSUNHT.strFuelTypeCode);
			PutFieldDataEx(pRecordset, L"FuelTypeName", VT_BSTR, sResultOfFSUNHT.strFuelTypeName);
			PutFieldDataEx(pRecordset, L"EngineRev", VT_INT, sResultOfFSUNHT.strEngineRev);
			PutFieldDataEx(pRecordset, L"Value1", VT_R4, sResultOfFSUNHT.strValue1);
			PutFieldDataEx(pRecordset, L"Value2", VT_R4, sResultOfFSUNHT.strValue2);
			PutFieldDataEx(pRecordset, L"Value3", VT_R4, sResultOfFSUNHT.strValue3);
			PutFieldDataEx(pRecordset, L"Value4", VT_R4, sResultOfFSUNHT.strValue4);
			PutFieldDataEx(pRecordset, L"Average", VT_R4, sResultOfFSUNHT.strAverage);
			PutFieldDataEx(pRecordset, L"Limit", VT_R4, sResultOfFSUNHT.strLimit);
			PutFieldDataEx(pRecordset, L"Limit_EDP", VT_INT, sResultOfFSUNHT.strLimit_EDP);
			PutFieldDataEx(pRecordset, L"Pass", VT_BOOL, sResultOfFSUNHT.strPass);
			PutFieldDataEx(pRecordset, L"EnvironmentalTemperature", VT_R4, sResultOfFSUNHT.strEnvironmentalTemperature);
			PutFieldDataEx(pRecordset, L"RelativeHumidity", VT_R4, sResultOfFSUNHT.strRelativeHumidity);
			PutFieldDataEx(pRecordset, L"AtmosphericPressure", VT_R4, sResultOfFSUNHT.strAtmosphericPressure);
			PutFieldDataEx(pRecordset, L"OilTemperature", VT_R4, sResultOfFSUNHT.strOilTemperature);
			PutFieldDataEx(pRecordset, L"SkipRev", VT_BOOL, sResultOfFSUNHT.strSkipRev);
			PutFieldDataEx(pRecordset, L"SkipOilTemperature", VT_BOOL, sResultOfFSUNHT.strSkipOilTemperature);
			// 写二进制字段
			PutImageFieldData(pRecordset, L"RTDataZip", sResultOfFSUNHT.strRTDataZip);
			PutFieldDataEx(pRecordset, L"Hash", VT_BSTR, sResultOfFSUNHT.strHash);
			PutFieldDataEx(pRecordset, L"Remark", VT_BSTR, sResultOfFSUNHT.strRemark);
			PutFieldDataEx(pRecordset, L"Reserved1", VT_BSTR, sResultOfFSUNHT.strReserved1);
			PutFieldDataEx(pRecordset, L"Reserved2", VT_BSTR, sResultOfFSUNHT.strReserved2);
			PutFieldDataEx(pRecordset, L"Reserved3", VT_BSTR, sResultOfFSUNHT.strReserved3);

			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboRealTimeDataOfFSUNHT(const wchar_t wchSql[SQLMAX], list<REALTIMEDATAOFFSUNHT> &listRealTimeDataOfFSUNHT)
{
	assert(NULL != wchSql);

	DWORD dwReturn(0x00);

	listRealTimeDataOfFSUNHT.clear();

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			REALTIMEDATAOFFSUNHT sRealTimeDataOfFSUNHT;

			if (!pRecordset->adoEOF)
			{
				while(!pRecordset->adoEOF)
				{
					_variant_t v;
					wstring s;

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"AutoID", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfFSUNHT.wchAutoID, NH_INT_TO_WCHART, L"%d", (int)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfFSUNHT.wchAutoID,L"");
					}

					
					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"RunningNumber", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfFSUNHT.wchRunningNumber, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfFSUNHT.wchRunningNumber, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"ReportNumber", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfFSUNHT.wchReportNumber, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfFSUNHT.wchReportNumber, L"");
					}

					
					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"Order", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfFSUNHT.wchOrder, NH_INT_TO_WCHART, L"%d", (int)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfFSUNHT.wchOrder, L"");
					}

					
					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"Time", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfFSUNHT.wchTime, NH_INT_TO_WCHART, L"%d", (int)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfFSUNHT.wchTime, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"SamplingTime", v);
					if(VT_NULL != v.vt)
					{
						wchar_t wch[50] = {0};
						SYSTEMTIME dt;
						VariantTimeToSystemTime(v, &dt);
						swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
						wcscpy_s(sRealTimeDataOfFSUNHT.wchSamplingTime, wch);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfFSUNHT.wchSamplingTime, L"");
					}
										
					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"K", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfFSUNHT.wchK, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfFSUNHT.wchK, L"");
					}

					
					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"N", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfFSUNHT.wchN, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfFSUNHT.wchN, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"EngineRev", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfFSUNHT.wchEngineRev, NH_INT_TO_WCHART, L"%d", (int)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfFSUNHT.wchEngineRev, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"OilTemperature", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfFSUNHT.wchOilTemperature, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfFSUNHT.wchOilTemperature, L"");
					}
										
					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"EnvironmentalTemperature", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfFSUNHT.wchEnvironmentalTemperature, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfFSUNHT.wchEnvironmentalTemperature, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"RelativeHumidity", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfFSUNHT.wchRelativeHumidity, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfFSUNHT.wchRelativeHumidity, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"AtmosphericPressure", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfFSUNHT.wchAtmosphericPressure, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfFSUNHT.wchAtmosphericPressure, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"Remark", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfFSUNHT.wchRemark, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfFSUNHT.wchRemark, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"Reserved1", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfFSUNHT.wchReserved1, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfFSUNHT.wchReserved1, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"Reserved2", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfFSUNHT.wchReserved2, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfFSUNHT.wchReserved2, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"Reserved3", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfFSUNHT.wchReserved3, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfFSUNHT.wchReserved3, L"");
					}

					listRealTimeDataOfFSUNHT.push_back(sRealTimeDataOfFSUNHT);
					pRecordset->MoveNext();
				}
				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboRealTimeDataOfFSUNHT_Zip(const wchar_t wchSql[SQLMAX], list<REALTIMEDATAOFFSUNHT> &listRealTimeDataOfFSUNHT)
{
	assert(NULL != wchSql);

	DWORD dwReturn(0x00);
	listRealTimeDataOfFSUNHT.clear();
	bool bEndTime = true;//是否最后一条数据
	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			SRealTimeDataOfFSUNHT_Zip sRealTimeDataOfFSUNHT_Zip;
			while (!pRecordset->adoEOF)
			{
				GetStringFromDBImage(pRecordset, sRealTimeDataOfFSUNHT_Zip.strOrder, L"Order");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfFSUNHT_Zip.strTime, L"Time");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfFSUNHT_Zip.strSamplingTime, L"SamplingTime");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfFSUNHT_Zip.strK, L"K");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfFSUNHT_Zip.strN, L"N");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfFSUNHT_Zip.strEngineRev, L"EngineRev");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfFSUNHT_Zip.strOilTemperature, L"OilTemperature");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfFSUNHT_Zip.strEnvironmentalTemperature, L"EnvironmentalTemperature");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfFSUNHT_Zip.strRelativeHumidity, L"RelativeHumidity");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfFSUNHT_Zip.strAtmosphericPressure, L"AtmosphericPressure");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfFSUNHT_Zip.strRemark, L"Remark");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfFSUNHT_Zip.strReserved1, L"Reserved1");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfFSUNHT_Zip.strReserved2, L"Reserved2");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfFSUNHT_Zip.strReserved3, L"Reserved3");
				
				while(1)
				{
					REALTIMEDATAOFFSUNHT sRealTimeDataOfFSUNHT;
					bEndTime = SplitString(sRealTimeDataOfFSUNHT_Zip.strOrder, sRealTimeDataOfFSUNHT.wchOrder, g_pchSplit);
					if (!bEndTime)
					{
						break;
					}
					_variant_t v;
					wstring s;

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"RunningNumber", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfFSUNHT.wchRunningNumber, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfFSUNHT.wchRunningNumber, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"ReportNumber", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfFSUNHT.wchReportNumber, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfFSUNHT.wchReportNumber, L"");
					}

					SplitString(sRealTimeDataOfFSUNHT_Zip.strTime, sRealTimeDataOfFSUNHT.wchTime, g_pchSplit);
					SplitString(sRealTimeDataOfFSUNHT_Zip.strSamplingTime, sRealTimeDataOfFSUNHT.wchSamplingTime, g_pchSplit);
					SplitString(sRealTimeDataOfFSUNHT_Zip.strK, sRealTimeDataOfFSUNHT.wchK, g_pchSplit);
					SplitString(sRealTimeDataOfFSUNHT_Zip.strN, sRealTimeDataOfFSUNHT.wchN, g_pchSplit);
					SplitString(sRealTimeDataOfFSUNHT_Zip.strEngineRev, sRealTimeDataOfFSUNHT.wchEngineRev, g_pchSplit);
					SplitString(sRealTimeDataOfFSUNHT_Zip.strOilTemperature, sRealTimeDataOfFSUNHT.wchOilTemperature, g_pchSplit);
					SplitString(sRealTimeDataOfFSUNHT_Zip.strEnvironmentalTemperature, sRealTimeDataOfFSUNHT.wchEnvironmentalTemperature, g_pchSplit);
					SplitString(sRealTimeDataOfFSUNHT_Zip.strRelativeHumidity, sRealTimeDataOfFSUNHT.wchRelativeHumidity, g_pchSplit);
					SplitString(sRealTimeDataOfFSUNHT_Zip.strAtmosphericPressure, sRealTimeDataOfFSUNHT.wchAtmosphericPressure, g_pchSplit);
					SplitString(sRealTimeDataOfFSUNHT_Zip.strRemark, sRealTimeDataOfFSUNHT.wchRemark, g_pchSplit);
					SplitString(sRealTimeDataOfFSUNHT_Zip.strReserved1, sRealTimeDataOfFSUNHT.wchReserved1, g_pchSplit);
					SplitString(sRealTimeDataOfFSUNHT_Zip.strReserved2, sRealTimeDataOfFSUNHT.wchReserved2, g_pchSplit);
					SplitString(sRealTimeDataOfFSUNHT_Zip.strReserved3, sRealTimeDataOfFSUNHT.wchReserved3, g_pchSplit);

					listRealTimeDataOfFSUNHT.push_back(sRealTimeDataOfFSUNHT);
				}
				pRecordset->MoveNext();
				dwReturn = 0x01;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD SetDboRealTimeDataOfFSUNHT(list<REALTIMEDATAOFFSUNHT> &listRealTimeDataOfFSUNHT)
{
	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"select * from RealTimeDataOfFSUNHT where 1=0");

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			_variant_t v;

			for(list<REALTIMEDATAOFFSUNHT>::iterator ir=listRealTimeDataOfFSUNHT.begin(); ir!=listRealTimeDataOfFSUNHT.end(); ++ir)
			{
				pRecordset->AddNew();    //添加新记录

				// 流水号
				if(0 == _tcscmp(L"", ir->wchRunningNumber))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchRunningNumber;
				}
				PutFieldData(pRecordset, L"RunningNumber", v);

				// 检测报告编号
				if(0 == _tcscmp(L"", ir->wchReportNumber))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchReportNumber;
				}
				PutFieldData(pRecordset, L"ReportNumber", v);

				// 检测时序号
				if(0 == _tcscmp(L"", ir->wchOrder))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = _wtoi(ir->wchOrder);
				}
				PutFieldData(pRecordset, L"Order", v);

				// 时间[s]
				if(0 == _tcscmp(L"", ir->wchTime))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = _wtoi(ir->wchTime);
				}
				PutFieldData(pRecordset, L"Time", v);

				// 采样时间
				if(0 == _tcscmp(L"", ir->wchSamplingTime))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchSamplingTime;
				}
				PutFieldData(pRecordset, L"SamplingTime", v);
				
				// K
				if(0 == _tcscmp(L"", ir->wchK))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchK));
				}
				PutFieldData(pRecordset, L"K", v);

				// N
				if(0 == _tcscmp(L"", ir->wchN))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = _wtoi(ir->wchN);
				}
				PutFieldData(pRecordset, L"N", v);

				// 发动机转速[r/min]
				if(0 == _tcscmp(L"", ir->wchEngineRev))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = _wtoi(ir->wchEngineRev);
				}
				PutFieldData(pRecordset, L"EngineRev", v);

				// 油温[℃]
				if(0 == _tcscmp(L"", ir->wchOilTemperature))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchOilTemperature));
				}
				PutFieldData(pRecordset, L"OilTemperature", v);

				// 环境温度[℃]
				if(0 == _tcscmp(L"", ir->wchEnvironmentalTemperature))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchEnvironmentalTemperature));
				}
				PutFieldData(pRecordset, L"EnvironmentalTemperature", v);

				// 相对湿度[%]
				if(0 == _tcscmp(L"", ir->wchRelativeHumidity))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchRelativeHumidity));
				}
				PutFieldData(pRecordset, L"RelativeHumidity", v);

				// 大气压力[kPa]
				if(0 == _tcscmp(L"", ir->wchAtmosphericPressure))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchAtmosphericPressure));
				}
				PutFieldData(pRecordset, L"AtmosphericPressure", v);

				// 备注
				if(0 == _tcscmp(L"", ir->wchRemark))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchRemark;
				}
				PutFieldData(pRecordset, L"Remark", v);

				// 保留字段,以后备用
				if(0 == _tcscmp(L"", ir->wchReserved1))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchReserved1;
				}
				PutFieldData(pRecordset, L"Reserved1", v);

				// 保留字段,以后备用
				if(0 == _tcscmp(L"", ir->wchReserved2))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchReserved2;
				}
				PutFieldData(pRecordset, L"Reserved2", v);

				// 保留字段,以后备用
				if(0 == _tcscmp(L"", ir->wchReserved3))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchReserved3;
				}
				PutFieldData(pRecordset, L"Reserved3", v);
			}

			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	} 

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD SetDboRealTimeDataOfFSUNHT_Zip(list<REALTIMEDATAOFFSUNHT> &listRealTimeDataOfFSUNHT)
{
	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			list<RealTimeDataOfFSUNHT>::iterator irTmp=listRealTimeDataOfFSUNHT.begin();

			wsprintf(wchSql, L"select * from RealTimeDataOfFSUNHT_Zip where RunningNumber = '%s'", irTmp->wchRunningNumber);
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			_variant_t v;

			if(pRecordset->adoEOF)
			{
				pRecordset->AddNew();    //添加新记录
			}

			SRealTimeDataOfFSUNHT_Zip sRealTimeDataOfFSUNHT_Zip;


			for(list<RealTimeDataOfFSUNHT>::iterator ir=listRealTimeDataOfFSUNHT.begin(); ir!=listRealTimeDataOfFSUNHT.end(); ++ir)
			{
				if(0 == _tcscmp(L"", ir->wchRunningNumber))
				{
					sRealTimeDataOfFSUNHT_Zip.strRunningNumber = L"";
				}
				else
				{
					sRealTimeDataOfFSUNHT_Zip.strRunningNumber = ir->wchRunningNumber;
				}
				
				// 检测报告编号
				if(0 == _tcscmp(L"", ir->wchReportNumber))
				{

					sRealTimeDataOfFSUNHT_Zip.strReportNumber = L"";
				}
				else
				{
					sRealTimeDataOfFSUNHT_Zip.strReportNumber = ir->wchReportNumber;
				}

				//检测时序
				if(0 == _tcscmp(L"", ir->wchOrder))
				{
					sRealTimeDataOfFSUNHT_Zip.strOrder += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfFSUNHT_Zip.strOrder += UnicodeToANSIEx(ir->wchOrder);
					sRealTimeDataOfFSUNHT_Zip.strOrder += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchTime))
				{
					sRealTimeDataOfFSUNHT_Zip.strTime += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfFSUNHT_Zip.strTime += UnicodeToANSIEx(ir->wchTime);
					sRealTimeDataOfFSUNHT_Zip.strTime += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchSamplingTime))
				{
					sRealTimeDataOfFSUNHT_Zip.strSamplingTime += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfFSUNHT_Zip.strSamplingTime += UnicodeToANSIEx(ir->wchSamplingTime);
					sRealTimeDataOfFSUNHT_Zip.strSamplingTime += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchK))
				{
					sRealTimeDataOfFSUNHT_Zip.strK += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfFSUNHT_Zip.strK += UnicodeToANSIEx(ir->wchK);
					sRealTimeDataOfFSUNHT_Zip.strK += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchN))
				{
					sRealTimeDataOfFSUNHT_Zip.strN += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfFSUNHT_Zip.strN += UnicodeToANSIEx(ir->wchN);
					sRealTimeDataOfFSUNHT_Zip.strN += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchEngineRev))
				{
					sRealTimeDataOfFSUNHT_Zip.strEngineRev += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfFSUNHT_Zip.strEngineRev += UnicodeToANSIEx(ir->wchEngineRev);
					sRealTimeDataOfFSUNHT_Zip.strEngineRev += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchOilTemperature))
				{
					sRealTimeDataOfFSUNHT_Zip.strOilTemperature += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfFSUNHT_Zip.strOilTemperature += UnicodeToANSIEx(ir->wchOilTemperature);
					sRealTimeDataOfFSUNHT_Zip.strOilTemperature += g_pchSplit;
				}
				
				if(0 == _tcscmp(L"", ir->wchEnvironmentalTemperature))
				{
					sRealTimeDataOfFSUNHT_Zip.strEnvironmentalTemperature += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfFSUNHT_Zip.strEnvironmentalTemperature += UnicodeToANSIEx(ir->wchEnvironmentalTemperature);
					sRealTimeDataOfFSUNHT_Zip.strEnvironmentalTemperature += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchRelativeHumidity))
				{
					sRealTimeDataOfFSUNHT_Zip.strRelativeHumidity += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfFSUNHT_Zip.strRelativeHumidity += UnicodeToANSIEx(ir->wchRelativeHumidity);
					sRealTimeDataOfFSUNHT_Zip.strRelativeHumidity += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchAtmosphericPressure))
				{
					sRealTimeDataOfFSUNHT_Zip.strAtmosphericPressure += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfFSUNHT_Zip.strAtmosphericPressure += UnicodeToANSIEx(ir->wchAtmosphericPressure);
					sRealTimeDataOfFSUNHT_Zip.strAtmosphericPressure += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchRemark))
				{
					sRealTimeDataOfFSUNHT_Zip.strRemark += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfFSUNHT_Zip.strRemark += UnicodeToANSIEx(ir->wchRemark);
					sRealTimeDataOfFSUNHT_Zip.strRemark += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchReserved1))
				{
					sRealTimeDataOfFSUNHT_Zip.strReserved1 += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfFSUNHT_Zip.strReserved1 += UnicodeToANSIEx(ir->wchReserved1);
					sRealTimeDataOfFSUNHT_Zip.strReserved1 += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchReserved2))
				{
					sRealTimeDataOfFSUNHT_Zip.strReserved2 += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfFSUNHT_Zip.strReserved2 += UnicodeToANSIEx(ir->wchReserved2);
					sRealTimeDataOfFSUNHT_Zip.strReserved2 += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchReserved3))
				{
					sRealTimeDataOfFSUNHT_Zip.strReserved3 += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfFSUNHT_Zip.strReserved3 += UnicodeToANSIEx(ir->wchReserved3);
					sRealTimeDataOfFSUNHT_Zip.strReserved3 += g_pchSplit;
				}
			}
			
			v.ChangeType(VT_NULL);
			v = sRealTimeDataOfFSUNHT_Zip.strRunningNumber.c_str();
			PutFieldData(pRecordset, L"RunningNumber", v);
			
			v.ChangeType(VT_NULL);
			v = sRealTimeDataOfFSUNHT_Zip.strReportNumber.c_str();
			PutFieldData(pRecordset, L"ReportNumber", v);

			SetStringToDBImage(pRecordset, sRealTimeDataOfFSUNHT_Zip.strOrder, L"Order");
			SetStringToDBImage(pRecordset, sRealTimeDataOfFSUNHT_Zip.strTime, L"Time");
			SetStringToDBImage(pRecordset, sRealTimeDataOfFSUNHT_Zip.strSamplingTime, L"SamplingTime");
			SetStringToDBImage(pRecordset, sRealTimeDataOfFSUNHT_Zip.strK, L"K");
			SetStringToDBImage(pRecordset, sRealTimeDataOfFSUNHT_Zip.strN, L"N");
			SetStringToDBImage(pRecordset, sRealTimeDataOfFSUNHT_Zip.strEngineRev, L"EngineRev");
			SetStringToDBImage(pRecordset, sRealTimeDataOfFSUNHT_Zip.strOilTemperature, L"OilTemperature");
			SetStringToDBImage(pRecordset, sRealTimeDataOfFSUNHT_Zip.strEnvironmentalTemperature, L"EnvironmentalTemperature");
			SetStringToDBImage(pRecordset, sRealTimeDataOfFSUNHT_Zip.strRelativeHumidity, L"RelativeHumidity");
			SetStringToDBImage(pRecordset, sRealTimeDataOfFSUNHT_Zip.strAtmosphericPressure, L"AtmosphericPressure");
			SetStringToDBImage(pRecordset, sRealTimeDataOfFSUNHT_Zip.strRemark, L"Remark");
			SetStringToDBImage(pRecordset, sRealTimeDataOfFSUNHT_Zip.strReserved1, L"Reserved1");
			SetStringToDBImage(pRecordset, sRealTimeDataOfFSUNHT_Zip.strReserved2, L"Reserved2");
			SetStringToDBImage(pRecordset, sRealTimeDataOfFSUNHT_Zip.strReserved3, L"Reserved3");

			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	} 

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboResultOfFSUYD(const wchar_t wchSql[SQLMAX], PRESULTOFFSUYD const pDboResultOfFSUYD)
{
	assert(NULL != wchSql);
	assert(NULL != pDboResultOfFSUYD);

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			if(!pRecordset->adoEOF)
			{
				_variant_t v;
				wstring s;

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AutoID", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfFSUYD->wchAutoID, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfFSUYD->wchAutoID, L"");
				}
				
				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"RunningNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfFSUYD->wchRunningNumber, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfFSUYD->wchRunningNumber, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"ReportNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfFSUYD->wchReportNumber, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfFSUYD->wchReportNumber, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FuelTypeCode", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfFSUYD->wchFuelTypeCode, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfFSUYD->wchFuelTypeCode, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FuelTypeName", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfFSUYD->wchFuelTypeName, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfFSUYD->wchFuelTypeName,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EngineRev", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfFSUYD->wchEngineRev, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfFSUYD->wchEngineRev, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Value1", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfFSUYD->wchValue1, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfFSUYD->wchValue1, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Value2", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfFSUYD->wchValue2, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfFSUYD->wchValue2, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Value3", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfFSUYD->wchValue3, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfFSUYD->wchValue3, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Value4", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfFSUYD->wchValue4, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfFSUYD->wchValue4, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Average", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfFSUYD->wchAverage, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfFSUYD->wchAverage, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Limit", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfFSUYD->wchLimit, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfFSUYD->wchLimit, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Limit_EDP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfFSUYD->wchLimit_EDP, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfFSUYD->wchLimit_EDP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Pass", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfFSUYD->wchPass, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfFSUYD->wchPass, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfFSUYD->wchPass, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EnvironmentalTemperature", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfFSUYD->wchEnvironmentalTemperature, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfFSUYD->wchEnvironmentalTemperature, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"RelativeHumidity", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfFSUYD->wchRelativeHumidity, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfFSUYD->wchRelativeHumidity, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AtmosphericPressure", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfFSUYD->wchAtmosphericPressure, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfFSUYD->wchAtmosphericPressure, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OilTemperature", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfFSUYD->wchOilTemperature, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfFSUYD->wchOilTemperature, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"SkipRev", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfFSUYD->wchSkipRev, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfFSUYD->wchSkipRev, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfFSUYD->wchSkipRev, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"SkipOilTemperature", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfFSUYD->wchSkipOilTemperature, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfFSUYD->wchSkipOilTemperature, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfFSUYD->wchSkipOilTemperature, L"");
				}


				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Remark", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfFSUYD->wchRemark, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfFSUYD->wchRemark,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved1", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfFSUYD->wchReserved1, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfFSUYD->wchReserved1,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved2", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfFSUYD->wchReserved2, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfFSUYD->wchReserved2,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved3", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfFSUYD->wchReserved3, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfFSUYD->wchReserved3,L"");
				}

				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}
DWORD SetDboResultOfFSUYD(const RESULTOFFSUYD &dboResultOfFSUYD)
{
	assert(&dboResultOfFSUYD != NULL);

	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			//wsprintf(wchSql, L"select * from ResultOfFSUYD where ReportNumber = '%s'", dboResultOfFSUYD.wchReportNumber);
			wsprintf(wchSql, L"select * from ResultOfFSUYD where RunningNumber = '%s'", dboResultOfFSUYD.wchRunningNumber);

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if(pRecordset->adoEOF)
			{
				pRecordset->AddNew();    //添加新记录
			}

			wstring str;
			_variant_t v;

			str = dboResultOfFSUYD.wchRunningNumber;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"RunningNumber", v);

			str = dboResultOfFSUYD.wchReportNumber;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"ReportNumber", v);

			str = dboResultOfFSUYD.wchFuelTypeCode;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"FuelTypeCode", v);

			str = dboResultOfFSUYD.wchFuelTypeName;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"FuelTypeName", v);

			str = dboResultOfFSUYD.wchEngineRev;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"EngineRev", v);

			str = dboResultOfFSUYD.wchValue1;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"Value1", v);

			str = dboResultOfFSUYD.wchValue2;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"Value2", v);

			str = dboResultOfFSUYD.wchValue3;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"Value3", v);

			str = dboResultOfFSUYD.wchValue4;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"Value4", v);

			str = dboResultOfFSUYD.wchAverage;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"Average", v);

			str = dboResultOfFSUYD.wchLimit;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"Limit", v);

			str = dboResultOfFSUYD.wchLimit_EDP;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"Limit_EDP", v);

			str = dboResultOfFSUYD.wchPass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"Pass", v);

			str = dboResultOfFSUYD.wchEnvironmentalTemperature;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"EnvironmentalTemperature", v);


			str = dboResultOfFSUYD.wchRelativeHumidity;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"RelativeHumidity", v);


			str = dboResultOfFSUYD.wchAtmosphericPressure;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"AtmosphericPressure", v);


			str = dboResultOfFSUYD.wchOilTemperature;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"OilTemperature", v);

			str = dboResultOfFSUYD.wchSkipRev;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"SkipRev", v);

			str = dboResultOfFSUYD.wchSkipOilTemperature;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"SkipOilTemperature", v);

			// 备注
			str = dboResultOfFSUYD.wchRemark;

			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Remark", v);

			// 保留字段,以后备用
			str = dboResultOfFSUYD.wchReserved1;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved1", v);

			// 保留字段,以后备用
			str = dboResultOfFSUYD.wchReserved2;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved2", v);

			// 保留字段,以后备用
			str = dboResultOfFSUYD.wchReserved3;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved3", v);

			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboResultOfAVFSU(const wchar_t wchSql[SQLMAX], PRESULTOFAVFSU const pDboResultOfAVFSU)
{
	assert(NULL != wchSql);
	assert(NULL != pDboResultOfAVFSU);

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			if(!pRecordset->adoEOF)
			{
				_variant_t v;
				wstring s;

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AutoID", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfAVFSU->wchAutoID, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfAVFSU->wchAutoID, L"");
				}
				
				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"RunningNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfAVFSU->wchRunningNumber, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfAVFSU->wchRunningNumber, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"ReportNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfAVFSU->wchReportNumber, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfAVFSU->wchReportNumber, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FuelTypeCode", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfAVFSU->wchFuelTypeCode, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfAVFSU->wchFuelTypeCode, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FuelTypeName", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfAVFSU->wchFuelTypeName, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfAVFSU->wchFuelTypeName,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EngineRev", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfAVFSU->wchEngineRev, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfAVFSU->wchEngineRev, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Value1", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfAVFSU->wchValue1, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfAVFSU->wchValue1, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Value2", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfAVFSU->wchValue2, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfAVFSU->wchValue2, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Value3", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfAVFSU->wchValue3, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfAVFSU->wchValue3, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Average", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfAVFSU->wchAverage, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfAVFSU->wchAverage, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Limit", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfAVFSU->wchLimit, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfAVFSU->wchLimit, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Limit_EDP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfAVFSU->wchLimit_EDP, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfAVFSU->wchLimit_EDP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Pass", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfAVFSU->wchPass, NH_BOOL_TO_WCHART, L"1"); 
					}
					else
					{
						swprintf_s(pDboResultOfAVFSU->wchPass, NH_BOOL_TO_WCHART, L"0"); 
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfAVFSU->wchPass, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EnvironmentalTemperature", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfAVFSU->wchEnvironmentalTemperature, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfAVFSU->wchEnvironmentalTemperature, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"RelativeHumidity", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfAVFSU->wchRelativeHumidity, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfAVFSU->wchRelativeHumidity, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AtmosphericPressure", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfAVFSU->wchAtmosphericPressure, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfAVFSU->wchAtmosphericPressure, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OilTemperature", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfAVFSU->wchOilTemperature, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfAVFSU->wchOilTemperature, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"SkipRev", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfAVFSU->wchSkipRev, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfAVFSU->wchSkipRev, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfAVFSU->wchSkipRev, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"SkipOilTemperature", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfAVFSU->wchSkipOilTemperature, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfAVFSU->wchSkipOilTemperature, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfAVFSU->wchSkipOilTemperature, L"");
				}


				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Remark", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfAVFSU->wchRemark, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfAVFSU->wchRemark,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved1", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfAVFSU->wchReserved1, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfAVFSU->wchReserved1,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved2", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfAVFSU->wchReserved2, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfAVFSU->wchReserved2,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved3", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfAVFSU->wchReserved3, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfAVFSU->wchReserved3,L"");
				}

				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}
DWORD SetDboResultOfAVFSU(const RESULTOFAVFSU &dboResultOfAVFSU)
{
	assert(&dboResultOfAVFSU != NULL);

	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			//wsprintf(wchSql, L"select * from ResultOfAVFSU where ReportNumber = '%s'", dboResultOfAVFSU.wchReportNumber);
			wsprintf(wchSql, L"select * from ResultOfAVFSU where RunningNumber = '%s'", dboResultOfAVFSU.wchRunningNumber);

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if(pRecordset->adoEOF)
			{
				pRecordset->AddNew();    //添加新记录
			}

			wstring str;
			_variant_t v;

			str = dboResultOfAVFSU.wchRunningNumber;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"RunningNumber", v);

			str = dboResultOfAVFSU.wchReportNumber;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"ReportNumber", v);

			str = dboResultOfAVFSU.wchFuelTypeCode;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"FuelTypeCode", v);

			str = dboResultOfAVFSU.wchFuelTypeName;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"FuelTypeName", v);

			str = dboResultOfAVFSU.wchEngineRev;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"EngineRev", v);

			str = dboResultOfAVFSU.wchValue1;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"Value1", v);

			str = dboResultOfAVFSU.wchValue2;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"Value2", v);

			str = dboResultOfAVFSU.wchValue3;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"Value3", v);

			//str = dboResultOfAVFSU.wchValue4;
			//if( 0 ==str.compare(L""))
			//{
			//	v.ChangeType(VT_NULL);
			//}
			//else
			//{
			//	v = static_cast<float>(_wtof(str.c_str()));
			//}
			//PutFieldData(pRecordset, L"Value4", v);

			str = dboResultOfAVFSU.wchAverage;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"Average", v);

			str = dboResultOfAVFSU.wchLimit;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"Limit", v);

			str = dboResultOfAVFSU.wchLimit_EDP;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"Limit_EDP", v);

			str = dboResultOfAVFSU.wchPass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"Pass", v);

			str = dboResultOfAVFSU.wchEnvironmentalTemperature;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"EnvironmentalTemperature", v);


			str = dboResultOfAVFSU.wchRelativeHumidity;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"RelativeHumidity", v);


			str = dboResultOfAVFSU.wchAtmosphericPressure;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"AtmosphericPressure", v);


			str = dboResultOfAVFSU.wchOilTemperature;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"OilTemperature", v);

			str = dboResultOfAVFSU.wchSkipRev;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"SkipRev", v);

			str = dboResultOfAVFSU.wchSkipOilTemperature;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"SkipOilTemperature", v);

			// 备注
			str = dboResultOfAVFSU.wchRemark;

			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Remark", v);

			// 保留字段,以后备用
			str = dboResultOfAVFSU.wchReserved1;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved1", v);

			// 保留字段,以后备用
			str = dboResultOfAVFSU.wchReserved2;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved2", v);

			// 保留字段,以后备用
			str = dboResultOfAVFSU.wchReserved3;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved3", v);

			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboResultOfMI(const wchar_t wchSql[SQLMAX], PRESULTOFMI const pDboResultOfMI)
{
	assert(NULL != wchSql);
	assert(NULL != pDboResultOfMI);

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			if(!pRecordset->adoEOF)
			{
				_variant_t v;
				wstring s;

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AutoID", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMI->wchAutoID, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMI->wchAutoID, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"RunningNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfMI->wchRunningNumber, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfMI->wchRunningNumber, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"ReportNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfMI->wchReportNumber, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfMI->wchReportNumber, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FuelTypeCode", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMI->wchFuelTypeCode, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMI->wchFuelTypeCode, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FuelTypeName", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfMI->wchFuelTypeName, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfMI->wchFuelTypeName,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LimitOfHC", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMI->wchLimitOfHC, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMI->wchLimitOfHC, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LimitOfHC_EDP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMI->wchLimitOfHC_EDP, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMI->wchLimitOfHC_EDP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LimitOfCO", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMI->wchLimitOfCO, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMI->wchLimitOfCO, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LimitOfCO_EDP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMI->wchLimitOfCO_EDP, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMI->wchLimitOfCO_EDP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Rev_1", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMI->wchRev_1, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMI->wchRev_1, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OilTemperature_1", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMI->wchOilTemperature_1, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMI->wchOilTemperature_1, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Lambda_1", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMI->wchLambda_1, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMI->wchLambda_1, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NO_1", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMI->wchNO_1, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMI->wchNO_1, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"CO2_1", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMI->wchCO2_1, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMI->wchCO2_1, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"O2_1", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMI->wchO2_1, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMI->wchO2_1, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HC_1", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMI->wchHC_1, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMI->wchHC_1, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"CO_1", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMI->wchCO_1, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMI->wchCO_1, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Rev_2", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMI->wchRev_2, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMI->wchRev_2, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OilTemperature_2", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMI->wchOilTemperature_2, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMI->wchOilTemperature_2, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Lambda_2", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMI->wchLambda_2, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMI->wchLambda_2, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NO_2", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMI->wchNO_2, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMI->wchNO_2, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"CO2_2", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMI->wchCO2_2, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMI->wchCO2_2, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"O2_2", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMI->wchO2_2, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMI->wchO2_2, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HC_2", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMI->wchHC_2, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMI->wchHC_2, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"CO_2", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMI->wchCO_2, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMI->wchCO_2, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HCAverage", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMI->wchHCAverage, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMI->wchHCAverage, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"COAverage", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMI->wchCOAverage, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMI->wchCOAverage, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LambdaAverage", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMI->wchLambdaAverage, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMI->wchLambdaAverage, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PassOfHC", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfMI->wchPassOfHC, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfMI->wchPassOfHC, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfMI->wchPassOfHC, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PassOfCO", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfMI->wchPassOfCO, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfMI->wchPassOfCO, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfMI->wchPassOfCO, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Pass", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfMI->wchPass, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfMI->wchPass, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfMI->wchPass, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EnvironmentalTemperature", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMI->wchEnvironmentalTemperature, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMI->wchEnvironmentalTemperature, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"RelativeHumidity", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMI->wchRelativeHumidity, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMI->wchRelativeHumidity, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AtmosphericPressure", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMI->wchAtmosphericPressure, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMI->wchAtmosphericPressure, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"SkipRev", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfMI->wchSkipRev, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfMI->wchSkipRev, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfMI->wchSkipRev, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"SkipOilTemperature", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfMI->wchSkipOilTemperature, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfMI->wchSkipOilTemperature, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfMI->wchSkipOilTemperature, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Remark", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfMI->wchRemark, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfMI->wchRemark,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved1", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfMI->wchReserved1, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfMI->wchReserved1,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved2", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfMI->wchReserved2, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfMI->wchReserved2,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved3", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfMI->wchReserved3, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfMI->wchReserved3,L"");
				}

				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}
DWORD SetDboResultOfMI(const RESULTOFMI &dboResultOfMI)
{
	assert(&dboResultOfMI != NULL);

	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			//wsprintf(wchSql, L"select * from ResultOfMI where ReportNumber = '%s'", dboResultOfMI.wchReportNumber);
			wsprintf(wchSql, L"select * from ResultOfMI where RunningNumber = '%s'", dboResultOfMI.wchRunningNumber);

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if(pRecordset->adoEOF)
			{
				pRecordset->AddNew();    //添加新记录
			}

			wstring str;
			_variant_t v;

			str = dboResultOfMI.wchRunningNumber;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"RunningNumber", v);

			str = dboResultOfMI.wchReportNumber;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"ReportNumber", v);

			str = dboResultOfMI.wchFuelTypeCode;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"FuelTypeCode", v);

			str = dboResultOfMI.wchFuelTypeName;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"FuelTypeName", v);

			str = dboResultOfMI.wchLimitOfHC;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"LimitOfHC", v);

			str = dboResultOfMI.wchLimitOfHC_EDP;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"LimitOfHC_EDP", v);

			str = dboResultOfMI.wchLimitOfCO;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"LimitOfCO", v);

			str = dboResultOfMI.wchLimitOfCO_EDP;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"LimitOfCO_EDP", v);

			str = dboResultOfMI.wchRev_1;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"Rev_1", v);

			str = dboResultOfMI.wchOilTemperature_1;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"OilTemperature_1", v);

			str = dboResultOfMI.wchLambda_1;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"Lambda_1", v);

			str = dboResultOfMI.wchNO_1;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"NO_1", v);

			str = dboResultOfMI.wchCO2_1;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"CO2_1", v);

			str = dboResultOfMI.wchCO2_1;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"O2_1", v);

			str = dboResultOfMI.wchHC_1;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"HC_1", v);

			str = dboResultOfMI.wchCO_1;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"CO_1", v);

			str = dboResultOfMI.wchRev_2;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"Rev_2", v);

			str = dboResultOfMI.wchOilTemperature_2;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"OilTemperature_2", v);

			str = dboResultOfMI.wchLambda_2;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"Lambda_2", v);

			str = dboResultOfMI.wchNO_2;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"NO_2", v);

			str = dboResultOfMI.wchCO2_2;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"CO2_2", v);

			str = dboResultOfMI.wchCO2_2;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"O2_2", v);

			str = dboResultOfMI.wchHC_2;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"HC_2", v);

			str = dboResultOfMI.wchCO_2;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"CO_2", v);

			str = dboResultOfMI.wchHCAverage;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"HCAverage", v);

			str = dboResultOfMI.wchCOAverage;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"COAverage", v);

			str = dboResultOfMI.wchLambdaAverage;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"LambdaAverage", v);

			str = dboResultOfMI.wchPassOfHC;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"PassOfHC", v);

			str = dboResultOfMI.wchPassOfCO;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"PassOfCO", v);

			str = dboResultOfMI.wchPass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"Pass", v);

			str = dboResultOfMI.wchEnvironmentalTemperature;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"EnvironmentalTemperature", v);

			str = dboResultOfMI.wchRelativeHumidity;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"RelativeHumidity", v);

			str = dboResultOfMI.wchAtmosphericPressure;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"AtmosphericPressure", v);

			str = dboResultOfMI.wchSkipRev;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"SkipRev", v);

			str = dboResultOfMI.wchSkipOilTemperature;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"SkipOilTemperature", v);

			// 备注
			str = dboResultOfMI.wchRemark;

			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Remark", v);

			// 保留字段,以后备用
			str = dboResultOfMI.wchReserved1;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved1", v);

			// 保留字段,以后备用
			str = dboResultOfMI.wchReserved2;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved2", v);

			// 保留字段,以后备用
			str = dboResultOfMI.wchReserved3;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved3", v);

			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboRealTimeDataOfMI(const wchar_t wchSql[SQLMAX], list<REALTIMEDATAOFMI> &listRealTimeDataOfMI)
{
	assert(NULL != wchSql);

	DWORD dwReturn(0x00);
	listRealTimeDataOfMI.clear();

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			REALTIMEDATAOFMI sRealTimeDataOfMI;

			if (!pRecordset->adoEOF)
			{
				while(!pRecordset->adoEOF)
				{
					_variant_t v;
					wstring s;

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"AutoID", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfMI.wchAutoID, NH_INT_TO_WCHART, L"%d", (int)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfMI.wchAutoID,L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"RunningNumber", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfMI.wchRunningNumber, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfMI.wchRunningNumber, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"ReportNumber", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfMI.wchReportNumber, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfMI.wchReportNumber, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"FuelTypeCode", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfMI.wchFuelTypeCode, NH_INT_TO_WCHART, L"%d", (int)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfMI.wchFuelTypeCode, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"FuelTypeName", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfMI.wchFuelTypeName, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfMI.wchFuelTypeName,L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"Time", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfMI.wchTime, NH_INT_TO_WCHART, L"%d", (int)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfMI.wchTime, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"SamplingTime", v);
					if(VT_NULL != v.vt)
					{
						/*s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfMI.wchSamplingTime, s.c_str());*/

						wchar_t wch[50] = {0};
						SYSTEMTIME dt;
						VariantTimeToSystemTime(v, &dt);
						swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
						wcscpy_s(sRealTimeDataOfMI.wchSamplingTime, wch);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfMI.wchSamplingTime, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"State", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfMI.wchState, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfMI.wchState, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"HC", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfMI.wchHC, NH_INT_TO_WCHART, L"%d", (int)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfMI.wchHC, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"CO", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfMI.wchCO, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfMI.wchCO, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"NO", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfMI.wchNO, NH_INT_TO_WCHART, L"%d", (int)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfMI.wchNO, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"O2", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfMI.wchO2, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfMI.wchO2, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"CO2", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfMI.wchCO2, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfMI.wchCO2, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"EngineRev", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfMI.wchEngineRev, NH_INT_TO_WCHART, L"%d", (int)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfMI.wchEngineRev, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"OilTemperature", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfMI.wchOilTemperature, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfMI.wchOilTemperature, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"Lambda", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfMI.wchLambda, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfMI.wchLambda, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"EnvironmentalTemperature", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfMI.wchEnvironmentalTemperature, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfMI.wchEnvironmentalTemperature, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"AtmosphericPressure", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfMI.wchAtmosphericPressure, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfMI.wchAtmosphericPressure, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"RelativeHumidity", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfMI.wchRelativeHumidity, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfMI.wchRelativeHumidity, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"Remark", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfMI.wchRemark, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfMI.wchRemark, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"Reserved1", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfMI.wchReserved1, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfMI.wchReserved1, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"Reserved2", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfMI.wchReserved2, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfMI.wchReserved2, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"Reserved3", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfMI.wchReserved3, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfMI.wchReserved3, L"");
					}

					listRealTimeDataOfMI.push_back(sRealTimeDataOfMI);
					pRecordset->MoveNext();
				}
				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}
DWORD GetDboRealTimeDataOfMI_Zip(const wchar_t wchSql[SQLMAX], list<REALTIMEDATAOFMI> &listRealTimeDataOfMI)
{
	assert(NULL != wchSql);

	DWORD dwReturn(0x00);
	listRealTimeDataOfMI.clear();

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			SRealTimeDataOfMI_Zip sRealTimeDataOfMI_Zip;
			while (!pRecordset->adoEOF)
			{
				GetStringFromDBImage(pRecordset, sRealTimeDataOfMI_Zip.strFuelTypeCode, L"FuelTypeCode");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfMI_Zip.strFuelTypeName, L"FuelTypeName");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfMI_Zip.strTime, L"Time");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfMI_Zip.strSamplingTime, L"SamplingTime");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfMI_Zip.strState, L"State");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfMI_Zip.strHC, L"HC");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfMI_Zip.strCO, L"CO");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfMI_Zip.strO2, L"O2");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfMI_Zip.strCO2, L"CO2");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfMI_Zip.strNO, L"NO");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfMI_Zip.strEngineRev, L"EngineRev");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfMI_Zip.strOilTemperature, L"OilTemperature");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfMI_Zip.strLambda, L"Lambda");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfMI_Zip.strEnvironmentalTemperature, L"EnvironmentalTemperature");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfMI_Zip.strRelativeHumidity, L"RelativeHumidity");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfMI_Zip.strAtmosphericPressure, L"AtmosphericPressure");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfMI_Zip.strRemark, L"Remark");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfMI_Zip.strReserved1, L"Reserved1");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfMI_Zip.strReserved2, L"Reserved2");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfMI_Zip.strReserved3, L"Reserved3");

				while(1)
				{
					REALTIMEDATAOFMI sRealTimeDataOfMI;

					if (!SplitString(sRealTimeDataOfMI_Zip.strTime, sRealTimeDataOfMI.wchTime, g_pchSplit))
					{
						break;
					}

					_variant_t v;
					wstring s;

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"RunningNumber", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfMI.wchRunningNumber, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfMI.wchRunningNumber, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"ReportNumber", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfMI.wchReportNumber, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfMI.wchReportNumber, L"");
					}

					SplitString(sRealTimeDataOfMI_Zip.strFuelTypeCode, sRealTimeDataOfMI.wchFuelTypeCode, g_pchSplit);
					SplitString(sRealTimeDataOfMI_Zip.strFuelTypeName, sRealTimeDataOfMI.wchFuelTypeName, g_pchSplit);
					SplitString(sRealTimeDataOfMI_Zip.strSamplingTime, sRealTimeDataOfMI.wchSamplingTime, g_pchSplit);
					SplitString(sRealTimeDataOfMI_Zip.strState, sRealTimeDataOfMI.wchState, g_pchSplit);
					SplitString(sRealTimeDataOfMI_Zip.strHC, sRealTimeDataOfMI.wchHC, g_pchSplit);
					SplitString(sRealTimeDataOfMI_Zip.strCO, sRealTimeDataOfMI.wchCO, g_pchSplit);
					SplitString(sRealTimeDataOfMI_Zip.strO2, sRealTimeDataOfMI.wchO2, g_pchSplit);
					SplitString(sRealTimeDataOfMI_Zip.strCO2, sRealTimeDataOfMI.wchCO2, g_pchSplit);
					SplitString(sRealTimeDataOfMI_Zip.strNO, sRealTimeDataOfMI.wchNO, g_pchSplit);
					SplitString(sRealTimeDataOfMI_Zip.strEngineRev, sRealTimeDataOfMI.wchEngineRev, g_pchSplit);
					SplitString(sRealTimeDataOfMI_Zip.strOilTemperature, sRealTimeDataOfMI.wchOilTemperature, g_pchSplit);
					SplitString(sRealTimeDataOfMI_Zip.strLambda, sRealTimeDataOfMI.wchLambda, g_pchSplit);
					SplitString(sRealTimeDataOfMI_Zip.strEnvironmentalTemperature, sRealTimeDataOfMI.wchEnvironmentalTemperature, g_pchSplit);
					SplitString(sRealTimeDataOfMI_Zip.strRelativeHumidity, sRealTimeDataOfMI.wchRelativeHumidity, g_pchSplit);
					SplitString(sRealTimeDataOfMI_Zip.strAtmosphericPressure, sRealTimeDataOfMI.wchAtmosphericPressure, g_pchSplit);
					SplitString(sRealTimeDataOfMI_Zip.strRemark, sRealTimeDataOfMI.wchRemark, g_pchSplit);
					SplitString(sRealTimeDataOfMI_Zip.strReserved1, sRealTimeDataOfMI.wchReserved1, g_pchSplit);
					SplitString(sRealTimeDataOfMI_Zip.strReserved2, sRealTimeDataOfMI.wchReserved2, g_pchSplit);
					SplitString(sRealTimeDataOfMI_Zip.strReserved3, sRealTimeDataOfMI.wchReserved3, g_pchSplit);

					listRealTimeDataOfMI.push_back(sRealTimeDataOfMI);
				}
				pRecordset->MoveNext();
				dwReturn = 0x01;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}
DWORD SetDboRealTimeDataOfMI(list<REALTIMEDATAOFMI> &listRealTimeDataOfMI)
{
	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"select * from RealTimeDataOfMI where 1=0");

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			_variant_t v;

			for(list<REALTIMEDATAOFMI>::iterator ir=listRealTimeDataOfMI.begin(); ir!=listRealTimeDataOfMI.end(); ++ir)
			{
				pRecordset->AddNew();    //添加新记录

				// 流水号
				if(0 == _tcscmp(L"", ir->wchRunningNumber))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchRunningNumber;
				}
				PutFieldData(pRecordset, L"RunningNumber", v);

				// 检测报告编号
				if(0 == _tcscmp(L"", ir->wchReportNumber))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchReportNumber;
				}
				PutFieldData(pRecordset, L"ReportNumber", v);

				// 时间[s]
				if(0 == _tcscmp(L"", ir->wchTime))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = _wtoi(ir->wchTime);
				}
				PutFieldData(pRecordset, L"Time", v);

				// 采样时间
				if(0 == _tcscmp(L"", ir->wchSamplingTime))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchSamplingTime;
				}
				PutFieldData(pRecordset, L"SamplingTime", v);

				// 状态
				if(0 == _tcscmp(L"", ir->wchState))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchState;
				}
				PutFieldData(pRecordset, L"State", v);

				// HC[10-6]
				if(0 == _tcscmp(L"", ir->wchHC))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = _wtoi(ir->wchHC);
				}
				PutFieldData(pRecordset, L"HC", v);

				// CO[%]
				if(0 == _tcscmp(L"", ir->wchCO))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchCO));
				}
				PutFieldData(pRecordset, L"CO", v);

				// O2[%]
				if(0 == _tcscmp(L"", ir->wchO2))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchO2));
				}
				PutFieldData(pRecordset, L"O2", v);

				// CO2[%]
				if(0 == _tcscmp(L"", ir->wchCO2))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchCO2));
				}
				PutFieldData(pRecordset, L"CO2", v);

				// NO[10-6]
				if(0 == _tcscmp(L"", ir->wchNO))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = _wtoi(ir->wchNO);
				}
				PutFieldData(pRecordset, L"NO", v);

				// 发动机转速[r/min]
				if(0 == _tcscmp(L"", ir->wchEngineRev))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = _wtoi(ir->wchEngineRev);
				}
				PutFieldData(pRecordset, L"EngineRev", v);

				// 油温[℃]
				if(0 == _tcscmp(L"", ir->wchOilTemperature))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchOilTemperature));
				}
				PutFieldData(pRecordset, L"OilTemperature", v);

				// 过量空气系数
				if(0 == _tcscmp(L"", ir->wchLambda))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchLambda));
				}
				PutFieldData(pRecordset, L"Lambda", v);

				// 环境温度[℃]
				if(0 == _tcscmp(L"", ir->wchEnvironmentalTemperature))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchEnvironmentalTemperature));
				}
				PutFieldData(pRecordset, L"EnvironmentalTemperature", v);

				// 相对湿度[%]
				if(0 == _tcscmp(L"", ir->wchRelativeHumidity))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchRelativeHumidity));
				}
				PutFieldData(pRecordset, L"RelativeHumidity", v);

				// 大气压力[kPa]
				if(0 == _tcscmp(L"", ir->wchAtmosphericPressure))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchAtmosphericPressure));
				}
				PutFieldData(pRecordset, L"AtmosphericPressure", v);

				// 备注
				if(0 == _tcscmp(L"", ir->wchRemark))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchRemark;
				}
				PutFieldData(pRecordset, L"Remark", v);

				// 保留字段,以后备用
				if(0 == _tcscmp(L"", ir->wchReserved1))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchReserved1;
				}
				PutFieldData(pRecordset, L"Reserved1", v);

				// 保留字段,以后备用
				if(0 == _tcscmp(L"", ir->wchReserved2))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchReserved2;
				}
				PutFieldData(pRecordset, L"Reserved2", v);

				// 保留字段,以后备用
				if(0 == _tcscmp(L"", ir->wchReserved3))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchReserved3;
				}
				PutFieldData(pRecordset, L"Reserved3", v);
			}

			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}
DWORD SetDboRealTimeDataOfMI_Zip(list<REALTIMEDATAOFMI> &listRealTimeDataOfMI)
{
	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			list<RealTimeDataOfMI>::iterator irTmp=listRealTimeDataOfMI.begin();

			wsprintf(wchSql, L"select * from RealTimeDataOfMI_Zip where RunningNumber = '%s'", irTmp->wchRunningNumber);
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			_variant_t v;

			if(pRecordset->adoEOF)
			{
				pRecordset->AddNew();    //添加新记录
			}
			SRealTimeDataOfMI_Zip sRealTimeDataOfMI_Zip;


			for(list<RealTimeDataOfMI>::iterator ir=listRealTimeDataOfMI.begin(); ir!=listRealTimeDataOfMI.end(); ++ir)
			{
				if(0 == _tcscmp(L"", ir->wchRunningNumber))
				{
					sRealTimeDataOfMI_Zip.strRunningNumber = L"";
				}
				else
				{
					sRealTimeDataOfMI_Zip.strRunningNumber = ir->wchRunningNumber;
				}
				
				// 检测报告编号
				if(0 == _tcscmp(L"", ir->wchReportNumber))
				{

					sRealTimeDataOfMI_Zip.strReportNumber = L"";
				}
				else
				{
					sRealTimeDataOfMI_Zip.strReportNumber = ir->wchReportNumber;
				}


				if(0 == _tcscmp(L"", ir->wchTime))
				{
					sRealTimeDataOfMI_Zip.strTime += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfMI_Zip.strTime += UnicodeToANSIEx(ir->wchTime);
					sRealTimeDataOfMI_Zip.strTime += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchSamplingTime))
				{
					sRealTimeDataOfMI_Zip.strSamplingTime += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfMI_Zip.strSamplingTime += UnicodeToANSIEx(ir->wchSamplingTime);
					sRealTimeDataOfMI_Zip.strSamplingTime += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchState))
				{
					sRealTimeDataOfMI_Zip.strState += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfMI_Zip.strState += UnicodeToANSIEx(ir->wchState);
					sRealTimeDataOfMI_Zip.strState += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchHC))
				{
					sRealTimeDataOfMI_Zip.strHC += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfMI_Zip.strHC += UnicodeToANSIEx(ir->wchHC);
					sRealTimeDataOfMI_Zip.strHC += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchCO))
				{
					sRealTimeDataOfMI_Zip.strCO += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfMI_Zip.strCO += UnicodeToANSIEx(ir->wchCO);
					sRealTimeDataOfMI_Zip.strCO += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchO2))
				{
					sRealTimeDataOfMI_Zip.strO2 += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfMI_Zip.strO2 += UnicodeToANSIEx(ir->wchO2);
					sRealTimeDataOfMI_Zip.strO2 += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchCO2))
				{
					sRealTimeDataOfMI_Zip.strCO2 += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfMI_Zip.strCO2 += UnicodeToANSIEx(ir->wchCO2);
					sRealTimeDataOfMI_Zip.strCO2 += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchNO))
				{
					sRealTimeDataOfMI_Zip.strNO += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfMI_Zip.strNO += UnicodeToANSIEx(ir->wchNO);
					sRealTimeDataOfMI_Zip.strNO += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchEngineRev))
				{
					sRealTimeDataOfMI_Zip.strEngineRev += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfMI_Zip.strEngineRev += UnicodeToANSIEx(ir->wchEngineRev);
					sRealTimeDataOfMI_Zip.strEngineRev += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchOilTemperature))
				{
					sRealTimeDataOfMI_Zip.strOilTemperature += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfMI_Zip.strOilTemperature += UnicodeToANSIEx(ir->wchOilTemperature);
					sRealTimeDataOfMI_Zip.strOilTemperature += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchLambda))
				{
					sRealTimeDataOfMI_Zip.strLambda += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfMI_Zip.strLambda += UnicodeToANSIEx(ir->wchLambda);
					sRealTimeDataOfMI_Zip.strLambda += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchEnvironmentalTemperature))
				{
					sRealTimeDataOfMI_Zip.strEnvironmentalTemperature += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfMI_Zip.strEnvironmentalTemperature += UnicodeToANSIEx(ir->wchEnvironmentalTemperature);
					sRealTimeDataOfMI_Zip.strEnvironmentalTemperature += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchRelativeHumidity))
				{
					sRealTimeDataOfMI_Zip.strRelativeHumidity += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfMI_Zip.strRelativeHumidity += UnicodeToANSIEx(ir->wchRelativeHumidity);
					sRealTimeDataOfMI_Zip.strRelativeHumidity += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchAtmosphericPressure))
				{
					sRealTimeDataOfMI_Zip.strAtmosphericPressure += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfMI_Zip.strAtmosphericPressure += UnicodeToANSIEx(ir->wchAtmosphericPressure);
					sRealTimeDataOfMI_Zip.strAtmosphericPressure += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchRemark))
				{
					sRealTimeDataOfMI_Zip.strRemark += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfMI_Zip.strRemark += UnicodeToANSIEx(ir->wchRemark);
					sRealTimeDataOfMI_Zip.strRemark += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchReserved1))
				{
					sRealTimeDataOfMI_Zip.strReserved1 += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfMI_Zip.strReserved1 += UnicodeToANSIEx(ir->wchReserved1);
					sRealTimeDataOfMI_Zip.strReserved1 += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchReserved2))
				{
					sRealTimeDataOfMI_Zip.strReserved2 += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfMI_Zip.strReserved2 += UnicodeToANSIEx(ir->wchReserved2);
					sRealTimeDataOfMI_Zip.strReserved2 += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchReserved3))
				{
					sRealTimeDataOfMI_Zip.strReserved3 += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfMI_Zip.strReserved3 += UnicodeToANSIEx(ir->wchReserved3);
					sRealTimeDataOfMI_Zip.strReserved3 += g_pchSplit;
				}
			}

			v.ChangeType(VT_NULL);
			v = sRealTimeDataOfMI_Zip.strRunningNumber.c_str();
			PutFieldData(pRecordset, L"RunningNumber", v);

			v.ChangeType(VT_NULL);
			v = sRealTimeDataOfMI_Zip.strReportNumber.c_str();
			PutFieldData(pRecordset, L"ReportNumber", v);

			SetStringToDBImage(pRecordset, sRealTimeDataOfMI_Zip.strTime, L"Time");
			SetStringToDBImage(pRecordset, sRealTimeDataOfMI_Zip.strSamplingTime, L"SamplingTime");
			SetStringToDBImage(pRecordset, sRealTimeDataOfMI_Zip.strState, L"State");
			SetStringToDBImage(pRecordset, sRealTimeDataOfMI_Zip.strHC, L"HC");
			SetStringToDBImage(pRecordset, sRealTimeDataOfMI_Zip.strCO, L"CO");
			SetStringToDBImage(pRecordset, sRealTimeDataOfMI_Zip.strO2, L"O2");
			SetStringToDBImage(pRecordset, sRealTimeDataOfMI_Zip.strCO2, L"CO2");
			SetStringToDBImage(pRecordset, sRealTimeDataOfMI_Zip.strNO, L"NO");
			SetStringToDBImage(pRecordset, sRealTimeDataOfMI_Zip.strEngineRev, L"EngineRev");
			SetStringToDBImage(pRecordset, sRealTimeDataOfMI_Zip.strOilTemperature, L"OilTemperature");
			SetStringToDBImage(pRecordset, sRealTimeDataOfMI_Zip.strLambda, L"Lambda");
			SetStringToDBImage(pRecordset, sRealTimeDataOfMI_Zip.strEnvironmentalTemperature, L"EnvironmentalTemperature");
			SetStringToDBImage(pRecordset, sRealTimeDataOfMI_Zip.strRelativeHumidity, L"RelativeHumidity");
			SetStringToDBImage(pRecordset, sRealTimeDataOfMI_Zip.strAtmosphericPressure, L"AtmosphericPressure");
			SetStringToDBImage(pRecordset, sRealTimeDataOfMI_Zip.strRemark, L"Remark");
			SetStringToDBImage(pRecordset, sRealTimeDataOfMI_Zip.strReserved1, L"Reserved1");
			SetStringToDBImage(pRecordset, sRealTimeDataOfMI_Zip.strReserved2, L"Reserved2");
			std::string strReserved3;

			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboResultOfMDIS(const wchar_t wchSql[SQLMAX], PRESULTOFMDIS const pDboResultOfMDIS)
{
	assert(NULL != wchSql);
	assert(NULL != pDboResultOfMDIS);

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			if(!pRecordset->adoEOF)
			{
				_variant_t v;
				wstring s;

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AutoID", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMDIS->wchAutoID, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchAutoID, L"");
				}
				
				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"RunningNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfMDIS->wchRunningNumber, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchRunningNumber, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"ReportNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfMDIS->wchReportNumber, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchReportNumber, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FuelTypeCode", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMDIS->wchFuelTypeCode, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchFuelTypeCode, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FuelTypeName", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfMDIS->wchFuelTypeName, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchFuelTypeName,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LimitOfHCHigh", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMDIS->wchLimitOfHCHigh, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchLimitOfHCHigh, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LimitOfHCHigh_EDP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMDIS->wchLimitOfHCHigh_EDP, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchLimitOfHCHigh_EDP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LimitOfCOHigh", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMDIS->wchLimitOfCOHigh, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchLimitOfCOHigh, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LimitOfCOHigh_EDP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMDIS->wchLimitOfCOHigh_EDP, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchLimitOfCOHigh_EDP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LimitOfHCLow", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMDIS->wchLimitOfHCLow, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchLimitOfHCLow, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LimitOfHCLow_EDP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMDIS->wchLimitOfHCLow_EDP, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchLimitOfHCLow_EDP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LimitOfCOLow", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMDIS->wchLimitOfCOLow, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchLimitOfCOLow, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LimitOfCOLow_EDP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMDIS->wchLimitOfCOLow_EDP, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchLimitOfCOLow_EDP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LowerLimitOfLambda", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMDIS->wchLowerLimitOfLambda, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchLowerLimitOfLambda, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"UpperLimitOfLambda", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMDIS->wchUpperLimitOfLambda, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchUpperLimitOfLambda, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LimitOfLambda_EDP", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMDIS->wchLimitOfLambda_EDP, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchLimitOfLambda_EDP, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"RevHigh", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMDIS->wchRevHigh, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchRevHigh, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OilTemperatureHigh", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMDIS->wchOilTemperatureHigh, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchOilTemperatureHigh, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LambdaHigh", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMDIS->wchLambdaHigh, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchLambdaHigh, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NOHigh", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMDIS->wchNOHigh, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchNOHigh, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"CO2High", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMDIS->wchCO2High, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchCO2High, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"O2High", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMDIS->wchO2High, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchO2High, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HCHigh", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMDIS->wchHCHigh, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchHCHigh, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"COHigh", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMDIS->wchCOHigh, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchCOHigh, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PassOfHCHigh", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfMDIS->wchPassOfHCHigh, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfMDIS->wchPassOfHCHigh, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchPassOfHCHigh, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"SkipHISJudgement", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfMDIS->wchSkipHISJudgement, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfMDIS->wchSkipHISJudgement, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchSkipHISJudgement, L"0");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PassOfCOHigh", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfMDIS->wchPassOfCOHigh, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfMDIS->wchPassOfCOHigh, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchPassOfCOHigh, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NeedTestLambda", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfMDIS->wchNeedTestLambda, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfMDIS->wchNeedTestLambda, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchNeedTestLambda, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Lambda", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMDIS->wchLambda, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchLambda, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PassOfLambda", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfMDIS->wchPassOfLambda, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfMDIS->wchPassOfLambda, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchPassOfLambda, L"");
				}

				//v.ChangeType(VT_NULL);
				//GetFieldData(pRecordset, L"NeedTestLIS", v);
				//if(VT_NULL != v.vt)
				//{
				//	if (v.boolVal)
				//	{
				//		swprintf_s(pDboResultOfMDIS->wchNeedTestLIS, NH_BOOL_TO_WCHART, L"1");
				//	}
				//	else
				//	{
				//		swprintf_s(pDboResultOfMDIS->wchNeedTestLIS, NH_BOOL_TO_WCHART, L"0");
				//	}
				//}
				//else
				//{
				//	_tcscpy_s(pDboResultOfMDIS->wchNeedTestLIS, L"");
				//}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"RevLow", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMDIS->wchRevLow, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchRevLow, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OilTemperatureLow", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMDIS->wchOilTemperatureLow, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchOilTemperatureLow, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LambdaLow", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMDIS->wchLambdaLow, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchLambdaLow, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"NOLow", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMDIS->wchNOLow, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchNOLow, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"CO2Low", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMDIS->wchCO2Low, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchCO2Low, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"O2Low", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMDIS->wchO2Low, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchO2Low, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HCLow", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMDIS->wchHCLow, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchHCLow, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"COLow", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMDIS->wchCOLow, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchCOLow, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PassOfHCLow", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfMDIS->wchPassOfHCLow, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfMDIS->wchPassOfHCLow, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchPassOfHCLow, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PassOfCOLow", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfMDIS->wchPassOfCOLow, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfMDIS->wchPassOfCOLow, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchPassOfCOLow, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Pass", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfMDIS->wchPass, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfMDIS->wchPass, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchPass, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EnvironmentalTemperature", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMDIS->wchEnvironmentalTemperature, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchEnvironmentalTemperature, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"RelativeHumidity", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMDIS->wchRelativeHumidity, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchRelativeHumidity, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AtmosphericPressure", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMDIS->wchAtmosphericPressure, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchAtmosphericPressure, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"SkipRev", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfMDIS->wchSkipRev, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfMDIS->wchSkipRev, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchSkipRev, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"SkipOilTemperature", v);
				if(VT_NULL != v.vt)
				{
					if (v.boolVal)
					{
						swprintf_s(pDboResultOfMDIS->wchSkipOilTemperature, NH_BOOL_TO_WCHART, L"1");
					}
					else
					{
						swprintf_s(pDboResultOfMDIS->wchSkipOilTemperature, NH_BOOL_TO_WCHART, L"0");
					}
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchSkipOilTemperature, L"");
				}


				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"COHighAmend", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMDIS->wchCOHighAmend, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchCOHighAmend, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"COLowAmend", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMDIS->wchCOLowAmend, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchCOLowAmend, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"COHighRound", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMDIS->wchCOHighRound, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchCOHighRound, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"CO2HighRound", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMDIS->wchCO2HighRound, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchCO2HighRound, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"COLowRound", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMDIS->wchCOLowRound, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchCOLowRound, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"CO2LowRound", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMDIS->wchCO2LowRound, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchCO2LowRound, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HCHighRound", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMDIS->wchHCHighRound, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchHCHighRound, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HCLowRound", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboResultOfMDIS->wchHCLowRound, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchHCLowRound, L"");
				}


				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Remark", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfMDIS->wchRemark, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchRemark,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved1", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfMDIS->wchReserved1, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchReserved1,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved2", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfMDIS->wchReserved2, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchReserved2,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved3", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboResultOfMDIS->wchReserved3, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboResultOfMDIS->wchReserved3,L"");
				}

				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}
DWORD SetDboResultOfMDIS(const RESULTOFMDIS &dboResultOfMDIS)
{
	assert(&dboResultOfMDIS != NULL);

	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			//wsprintf(wchSql, L"select * from ResultOfMDIS where ReportNumber = '%s'", dboResultOfMDIS.wchReportNumber);
			wsprintf(wchSql, L"select * from ResultOfMDIS where RunningNumber = '%s'", dboResultOfMDIS.wchRunningNumber);

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if(pRecordset->adoEOF)
			{
				pRecordset->AddNew();    //添加新记录
			}

			wstring str;
			_variant_t v;

			str = dboResultOfMDIS.wchRunningNumber;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"RunningNumber", v);

			str = dboResultOfMDIS.wchReportNumber;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"ReportNumber", v);

			str = dboResultOfMDIS.wchFuelTypeCode;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"FuelTypeCode", v);

			str = dboResultOfMDIS.wchFuelTypeName;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"FuelTypeName", v);

			str = dboResultOfMDIS.wchLimitOfHCHigh;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"LimitOfHCHigh", v);

			str = dboResultOfMDIS.wchLimitOfHCHigh_EDP;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"LimitOfHCHigh_EDP", v);

			str = dboResultOfMDIS.wchLimitOfCOHigh;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"LimitOfCOHigh", v);

			str = dboResultOfMDIS.wchLimitOfCOHigh_EDP;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"LimitOfCOHigh_EDP", v);

			str = dboResultOfMDIS.wchLimitOfHCLow;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"LimitOfHCLow", v);

			str = dboResultOfMDIS.wchLimitOfHCLow_EDP;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"LimitOfHCLow_EDP", v);

			str = dboResultOfMDIS.wchLimitOfCOLow;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"LimitOfCOLow", v);

			str = dboResultOfMDIS.wchLimitOfCOLow_EDP;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"LimitOfCOLow_EDP", v);

			str = dboResultOfMDIS.wchUpperLimitOfLambda;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"UpperLimitOfLambda", v);

			str = dboResultOfMDIS.wchLowerLimitOfLambda;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"LowerLimitOfLambda", v);

			str = dboResultOfMDIS.wchRevHigh;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"RevHigh", v);

			str = dboResultOfMDIS.wchOilTemperatureHigh;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"OilTemperatureHigh", v);

			str = dboResultOfMDIS.wchLambdaHigh;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"LambdaHigh", v);

			str = dboResultOfMDIS.wchNOHigh;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"NOHigh", v);

			str = dboResultOfMDIS.wchCO2High;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"CO2High", v);

			str = dboResultOfMDIS.wchCO2High;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"O2High", v);

			str = dboResultOfMDIS.wchHCHigh;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"HCHigh", v);

			str = dboResultOfMDIS.wchCOHigh;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"COHigh", v);

			str = dboResultOfMDIS.wchPassOfHCHigh;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"PassOfHCHigh", v);

			str = dboResultOfMDIS.wchPassOfCOHigh;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"PassOfCOHigh", v);

			str = dboResultOfMDIS.wchNeedTestLambda;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"NeedTestLambda", v);

			str = dboResultOfMDIS.wchSkipHISJudgement;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"SkipHISJudgement", v);

			str = dboResultOfMDIS.wchLambda;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"Lambda", v);

			str = dboResultOfMDIS.wchPassOfLambda;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"PassOfLambda", v);

			//str = dboResultOfMDIS.wchNeedTestLIS;
			//if( 0 ==str.compare(L""))
			//{
			//	v.ChangeType(VT_NULL);
			//}
			//else if( 0 ==str.compare(L"1"))
			//{
			//	v = true;
			//}
			//else
			//{
			//	v = false;
			//}
			//PutFieldData(pRecordset, L"NeedTestLIS", v);

			str = dboResultOfMDIS.wchRevLow;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"RevLow", v);

			str = dboResultOfMDIS.wchOilTemperatureLow;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"OilTemperatureLow", v);

			str = dboResultOfMDIS.wchLambdaLow;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"LambdaLow", v);

			str = dboResultOfMDIS.wchNOLow;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"NOLow", v);

			str = dboResultOfMDIS.wchCO2Low;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"CO2Low", v);

			str = dboResultOfMDIS.wchO2Low;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"O2Low", v);

			str = dboResultOfMDIS.wchHCLow;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"HCLow", v);

			str = dboResultOfMDIS.wchCOLow;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"COLow", v);

			str = dboResultOfMDIS.wchPassOfHCLow;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"PassOfHCLow", v);

			str = dboResultOfMDIS.wchPassOfCOLow;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"PassOfCOLow", v);

			str = dboResultOfMDIS.wchPass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"Pass", v);

			str = dboResultOfMDIS.wchEnvironmentalTemperature;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"EnvironmentalTemperature", v);

			str = dboResultOfMDIS.wchRelativeHumidity;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"RelativeHumidity", v);

			str = dboResultOfMDIS.wchAtmosphericPressure;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"AtmosphericPressure", v);

			str = dboResultOfMDIS.wchSkipRev;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"SkipRev", v);

			str = dboResultOfMDIS.wchSkipOilTemperature;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"SkipOilTemperature", v);


			str = dboResultOfMDIS.wchCOHighAmend;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"COHighAmend", v);

			str = dboResultOfMDIS.wchCOLowAmend;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"COLowAmend", v);

			str = dboResultOfMDIS.wchCOHighRound;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"COHighRound", v);

			str = dboResultOfMDIS.wchCO2HighRound;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"CO2HighRound", v);

			str = dboResultOfMDIS.wchCOLowRound;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"COLowRound", v);

			str = dboResultOfMDIS.wchCO2LowRound;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"CO2LowRound", v);

			str = dboResultOfMDIS.wchHCHighRound;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"HCHighRound", v);

			str = dboResultOfMDIS.wchHCLowRound;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"HCLowRound", v);


			// 备注
			str = dboResultOfMDIS.wchRemark;

			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Remark", v);

			// 保留字段,以后备用
			str = dboResultOfMDIS.wchReserved1;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved1", v);

			// 保留字段,以后备用
			str = dboResultOfMDIS.wchReserved2;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved2", v);

			// 保留字段,以后备用
			str = dboResultOfMDIS.wchReserved3;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved3", v);

			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboRealTimeDataOfMDIS(const wchar_t wchSql[SQLMAX], list<REALTIMEDATAOFMDIS> &listRealTimeDataOfMDIS)
{
	assert(NULL != wchSql);

	DWORD dwReturn(0x00);
	listRealTimeDataOfMDIS.clear();

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			REALTIMEDATAOFMDIS sRealTimeDataOfMDIS;

			if (!pRecordset->adoEOF)
			{
				while(!pRecordset->adoEOF)
				{
					_variant_t v;
					wstring s;

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"AutoID", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfMDIS.wchAutoID, NH_INT_TO_WCHART, L"%d", (int)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfMDIS.wchAutoID,L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"RunningNumber", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfMDIS.wchRunningNumber, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfMDIS.wchRunningNumber, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"ReportNumber", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfMDIS.wchReportNumber, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfMDIS.wchReportNumber, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"FuelTypeCode", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfMDIS.wchFuelTypeCode, NH_INT_TO_WCHART, L"%d", (int)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfMDIS.wchFuelTypeCode, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"FuelTypeName", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfMDIS.wchFuelTypeName, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfMDIS.wchFuelTypeName,L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"Time", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfMDIS.wchTime, NH_INT_TO_WCHART, L"%d", (int)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfMDIS.wchTime, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"SamplingTime", v);
					if(VT_NULL != v.vt)
					{
						/*s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfMDIS.wchSamplingTime, s.c_str());*/

						wchar_t wch[50] = {0};
						SYSTEMTIME dt;
						VariantTimeToSystemTime(v, &dt);
						swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
						wcscpy_s(sRealTimeDataOfMDIS.wchSamplingTime, wch);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfMDIS.wchSamplingTime, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"State", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfMDIS.wchState, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfMDIS.wchState, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"HC", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfMDIS.wchHC, NH_INT_TO_WCHART, L"%d", (int)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfMDIS.wchHC, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"CO", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfMDIS.wchCO, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfMDIS.wchCO, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"NO", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfMDIS.wchNO, NH_INT_TO_WCHART, L"%d", (int)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfMDIS.wchNO, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"O2", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfMDIS.wchO2, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfMDIS.wchO2, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"CO2", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfMDIS.wchCO2, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfMDIS.wchCO2, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"EngineRev", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfMDIS.wchEngineRev, NH_INT_TO_WCHART, L"%d", (int)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfMDIS.wchEngineRev, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"OilTemperature", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfMDIS.wchOilTemperature, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfMDIS.wchOilTemperature, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"Lambda", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfMDIS.wchLambda, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfMDIS.wchLambda, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"EnvironmentalTemperature", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfMDIS.wchEnvironmentalTemperature, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfMDIS.wchEnvironmentalTemperature, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"AtmosphericPressure", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfMDIS.wchAtmosphericPressure, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfMDIS.wchAtmosphericPressure, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"RelativeHumidity", v);
					if(VT_NULL != v.vt)
					{
						swprintf_s(sRealTimeDataOfMDIS.wchRelativeHumidity, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfMDIS.wchRelativeHumidity, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"Remark", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfMDIS.wchRemark, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfMDIS.wchRemark, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"Reserved1", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfMDIS.wchReserved1, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfMDIS.wchReserved1, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"Reserved2", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfMDIS.wchReserved2, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfMDIS.wchReserved2, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"Reserved3", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfMDIS.wchReserved3, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfMDIS.wchReserved3, L"");
					}

					listRealTimeDataOfMDIS.push_back(sRealTimeDataOfMDIS);
					pRecordset->MoveNext();
				}
				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}
DWORD GetDboRealTimeDataOfMDIS_Zip(const wchar_t wchSql[SQLMAX], list<REALTIMEDATAOFMDIS> &listRealTimeDataOfMDIS)
{
	assert(NULL != wchSql);

	DWORD dwReturn(0x00);
	listRealTimeDataOfMDIS.clear();

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			SRealTimeDataOfMDIS_Zip sRealTimeDataOfMDIS_Zip;
			while (!pRecordset->adoEOF)
			{
				GetStringFromDBImage(pRecordset, sRealTimeDataOfMDIS_Zip.strFuelTypeCode, L"FuelTypeCode");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfMDIS_Zip.strFuelTypeName, L"FuelTypeName");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfMDIS_Zip.strTime, L"Time");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfMDIS_Zip.strSamplingTime, L"SamplingTime");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfMDIS_Zip.strState, L"State");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfMDIS_Zip.strHC, L"HC");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfMDIS_Zip.strCO, L"CO");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfMDIS_Zip.strO2, L"O2");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfMDIS_Zip.strCO2, L"CO2");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfMDIS_Zip.strNO, L"NO");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfMDIS_Zip.strEngineRev, L"EngineRev");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfMDIS_Zip.strOilTemperature, L"OilTemperature");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfMDIS_Zip.strLambda, L"Lambda");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfMDIS_Zip.strEnvironmentalTemperature, L"EnvironmentalTemperature");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfMDIS_Zip.strRelativeHumidity, L"RelativeHumidity");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfMDIS_Zip.strAtmosphericPressure, L"AtmosphericPressure");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfMDIS_Zip.strRemark, L"Remark");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfMDIS_Zip.strReserved1, L"Reserved1");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfMDIS_Zip.strReserved2, L"Reserved2");
				GetStringFromDBImage(pRecordset, sRealTimeDataOfMDIS_Zip.strReserved3, L"Reserved3");

				while(1)
				{
					REALTIMEDATAOFMDIS sRealTimeDataOfMDIS;

					if (!SplitString(sRealTimeDataOfMDIS_Zip.strTime, sRealTimeDataOfMDIS.wchTime, g_pchSplit))
					{
						break;
					}

					_variant_t v;
					wstring s;

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"RunningNumber", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfMDIS.wchRunningNumber, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfMDIS.wchRunningNumber, L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset, L"ReportNumber", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						wcscpy_s(sRealTimeDataOfMDIS.wchReportNumber, s.c_str());
					}
					else
					{
						_tcscpy_s(sRealTimeDataOfMDIS.wchReportNumber, L"");
					}

					SplitString(sRealTimeDataOfMDIS_Zip.strFuelTypeCode, sRealTimeDataOfMDIS.wchFuelTypeCode, g_pchSplit);
					SplitString(sRealTimeDataOfMDIS_Zip.strFuelTypeName, sRealTimeDataOfMDIS.wchFuelTypeName, g_pchSplit);
					SplitString(sRealTimeDataOfMDIS_Zip.strSamplingTime, sRealTimeDataOfMDIS.wchSamplingTime, g_pchSplit);
					SplitString(sRealTimeDataOfMDIS_Zip.strState, sRealTimeDataOfMDIS.wchState, g_pchSplit);
					SplitString(sRealTimeDataOfMDIS_Zip.strHC, sRealTimeDataOfMDIS.wchHC, g_pchSplit);
					SplitString(sRealTimeDataOfMDIS_Zip.strCO, sRealTimeDataOfMDIS.wchCO, g_pchSplit);
					SplitString(sRealTimeDataOfMDIS_Zip.strO2, sRealTimeDataOfMDIS.wchO2, g_pchSplit);
					SplitString(sRealTimeDataOfMDIS_Zip.strCO2, sRealTimeDataOfMDIS.wchCO2, g_pchSplit);
					SplitString(sRealTimeDataOfMDIS_Zip.strNO, sRealTimeDataOfMDIS.wchNO, g_pchSplit);
					SplitString(sRealTimeDataOfMDIS_Zip.strEngineRev, sRealTimeDataOfMDIS.wchEngineRev, g_pchSplit);
					SplitString(sRealTimeDataOfMDIS_Zip.strOilTemperature, sRealTimeDataOfMDIS.wchOilTemperature, g_pchSplit);
					SplitString(sRealTimeDataOfMDIS_Zip.strLambda, sRealTimeDataOfMDIS.wchLambda, g_pchSplit);
					SplitString(sRealTimeDataOfMDIS_Zip.strEnvironmentalTemperature, sRealTimeDataOfMDIS.wchEnvironmentalTemperature, g_pchSplit);
					SplitString(sRealTimeDataOfMDIS_Zip.strRelativeHumidity, sRealTimeDataOfMDIS.wchRelativeHumidity, g_pchSplit);
					SplitString(sRealTimeDataOfMDIS_Zip.strAtmosphericPressure, sRealTimeDataOfMDIS.wchAtmosphericPressure, g_pchSplit);
					SplitString(sRealTimeDataOfMDIS_Zip.strRemark, sRealTimeDataOfMDIS.wchRemark, g_pchSplit);
					SplitString(sRealTimeDataOfMDIS_Zip.strReserved1, sRealTimeDataOfMDIS.wchReserved1, g_pchSplit);
					SplitString(sRealTimeDataOfMDIS_Zip.strReserved2, sRealTimeDataOfMDIS.wchReserved2, g_pchSplit);
					SplitString(sRealTimeDataOfMDIS_Zip.strReserved3, sRealTimeDataOfMDIS.wchReserved3, g_pchSplit);

					listRealTimeDataOfMDIS.push_back(sRealTimeDataOfMDIS);
				}
				pRecordset->MoveNext();
				dwReturn = 0x01;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}
DWORD SetDboRealTimeDataOfMDIS(list<REALTIMEDATAOFMDIS> &listRealTimeDataOfMDIS)
{
	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"select * from RealTimeDataOfMDIS where 1=0");

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			_variant_t v;

			for(list<REALTIMEDATAOFMDIS>::iterator ir=listRealTimeDataOfMDIS.begin(); ir!=listRealTimeDataOfMDIS.end(); ++ir)
			{
				pRecordset->AddNew();    //添加新记录

				// 流水号
				if(0 == _tcscmp(L"", ir->wchRunningNumber))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchRunningNumber;
				}
				PutFieldData(pRecordset, L"RunningNumber", v);

				// 检测报告编号
				if(0 == _tcscmp(L"", ir->wchReportNumber))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchReportNumber;
				}
				PutFieldData(pRecordset, L"ReportNumber", v);

				// 时间[s]
				if(0 == _tcscmp(L"", ir->wchTime))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = _wtoi(ir->wchTime);
				}
				PutFieldData(pRecordset, L"Time", v);

				// 采样时间
				if(0 == _tcscmp(L"", ir->wchSamplingTime))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchSamplingTime;
				}
				PutFieldData(pRecordset, L"SamplingTime", v);

				// 状态
				if(0 == _tcscmp(L"", ir->wchState))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchState;
				}
				PutFieldData(pRecordset, L"State", v);

				// HC[10-6]
				if(0 == _tcscmp(L"", ir->wchHC))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = _wtoi(ir->wchHC);
				}
				PutFieldData(pRecordset, L"HC", v);

				// CO[%]
				if(0 == _tcscmp(L"", ir->wchCO))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchCO));
				}
				PutFieldData(pRecordset, L"CO", v);

				// O2[%]
				if(0 == _tcscmp(L"", ir->wchO2))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchO2));
				}
				PutFieldData(pRecordset, L"O2", v);

				// CO2[%]
				if(0 == _tcscmp(L"", ir->wchCO2))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchCO2));
				}
				PutFieldData(pRecordset, L"CO2", v);

				// NO[10-6]
				if(0 == _tcscmp(L"", ir->wchNO))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = _wtoi(ir->wchNO);
				}
				PutFieldData(pRecordset, L"NO", v);

				// 发动机转速[r/min]
				if(0 == _tcscmp(L"", ir->wchEngineRev))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = _wtoi(ir->wchEngineRev);
				}
				PutFieldData(pRecordset, L"EngineRev", v);

				// 油温[℃]
				if(0 == _tcscmp(L"", ir->wchOilTemperature))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchOilTemperature));
				}
				PutFieldData(pRecordset, L"OilTemperature", v);

				// 过量空气系数
				if(0 == _tcscmp(L"", ir->wchLambda))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchLambda));
				}
				PutFieldData(pRecordset, L"Lambda", v);

				// 环境温度[℃]
				if(0 == _tcscmp(L"", ir->wchEnvironmentalTemperature))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchEnvironmentalTemperature));
				}
				PutFieldData(pRecordset, L"EnvironmentalTemperature", v);

				// 相对湿度[%]
				if(0 == _tcscmp(L"", ir->wchRelativeHumidity))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchRelativeHumidity));
				}
				PutFieldData(pRecordset, L"RelativeHumidity", v);

				// 大气压力[kPa]
				if(0 == _tcscmp(L"", ir->wchAtmosphericPressure))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = static_cast<float>(_wtof(ir->wchAtmosphericPressure));
				}
				PutFieldData(pRecordset, L"AtmosphericPressure", v);

				// 备注
				if(0 == _tcscmp(L"", ir->wchRemark))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchRemark;
				}
				PutFieldData(pRecordset, L"Remark", v);

				// 保留字段,以后备用
				if(0 == _tcscmp(L"", ir->wchReserved1))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchReserved1;
				}
				PutFieldData(pRecordset, L"Reserved1", v);

				// 保留字段,以后备用
				if(0 == _tcscmp(L"", ir->wchReserved2))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchReserved2;
				}
				PutFieldData(pRecordset, L"Reserved2", v);

				// 保留字段,以后备用
				if(0 == _tcscmp(L"", ir->wchReserved3))
				{
					v.ChangeType(VT_NULL);
				}
				else
				{
					v = ir->wchReserved3;
				}
				PutFieldData(pRecordset, L"Reserved3", v);
			}

			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}
DWORD SetDboRealTimeDataOfMDIS_Zip(list<REALTIMEDATAOFMDIS> &listRealTimeDataOfMDIS)
{
	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			list<RealTimeDataOfMDIS>::iterator irTmp=listRealTimeDataOfMDIS.begin();

			wsprintf(wchSql, L"select * from RealTimeDataOfMDIS_Zip where RunningNumber = '%s'", irTmp->wchRunningNumber);
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			_variant_t v;

			if(pRecordset->adoEOF)
			{
				pRecordset->AddNew();    //添加新记录
			}
			SRealTimeDataOfMDIS_Zip sRealTimeDataOfMDIS_Zip;


			for(list<RealTimeDataOfMDIS>::iterator ir=listRealTimeDataOfMDIS.begin(); ir!=listRealTimeDataOfMDIS.end(); ++ir)
			{
				if(0 == _tcscmp(L"", ir->wchRunningNumber))
				{
					sRealTimeDataOfMDIS_Zip.strRunningNumber = L"";
				}
				else
				{
					sRealTimeDataOfMDIS_Zip.strRunningNumber = ir->wchRunningNumber;
				}
				
				// 检测报告编号
				if(0 == _tcscmp(L"", ir->wchReportNumber))
				{

					sRealTimeDataOfMDIS_Zip.strReportNumber = L"";
				}
				else
				{
					sRealTimeDataOfMDIS_Zip.strReportNumber = ir->wchReportNumber;
				}


				if(0 == _tcscmp(L"", ir->wchTime))
				{
					sRealTimeDataOfMDIS_Zip.strTime += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfMDIS_Zip.strTime += UnicodeToANSIEx(ir->wchTime);
					sRealTimeDataOfMDIS_Zip.strTime += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchSamplingTime))
				{
					sRealTimeDataOfMDIS_Zip.strSamplingTime += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfMDIS_Zip.strSamplingTime += UnicodeToANSIEx(ir->wchSamplingTime);
					sRealTimeDataOfMDIS_Zip.strSamplingTime += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchState))
				{
					sRealTimeDataOfMDIS_Zip.strState += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfMDIS_Zip.strState += UnicodeToANSIEx(ir->wchState);
					sRealTimeDataOfMDIS_Zip.strState += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchHC))
				{
					sRealTimeDataOfMDIS_Zip.strHC += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfMDIS_Zip.strHC += UnicodeToANSIEx(ir->wchHC);
					sRealTimeDataOfMDIS_Zip.strHC += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchCO))
				{
					sRealTimeDataOfMDIS_Zip.strCO += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfMDIS_Zip.strCO += UnicodeToANSIEx(ir->wchCO);
					sRealTimeDataOfMDIS_Zip.strCO += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchO2))
				{
					sRealTimeDataOfMDIS_Zip.strO2 += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfMDIS_Zip.strO2 += UnicodeToANSIEx(ir->wchO2);
					sRealTimeDataOfMDIS_Zip.strO2 += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchCO2))
				{
					sRealTimeDataOfMDIS_Zip.strCO2 += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfMDIS_Zip.strCO2 += UnicodeToANSIEx(ir->wchCO2);
					sRealTimeDataOfMDIS_Zip.strCO2 += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchNO))
				{
					sRealTimeDataOfMDIS_Zip.strNO += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfMDIS_Zip.strNO += UnicodeToANSIEx(ir->wchNO);
					sRealTimeDataOfMDIS_Zip.strNO += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchEngineRev))
				{
					sRealTimeDataOfMDIS_Zip.strEngineRev += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfMDIS_Zip.strEngineRev += UnicodeToANSIEx(ir->wchEngineRev);
					sRealTimeDataOfMDIS_Zip.strEngineRev += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchOilTemperature))
				{
					sRealTimeDataOfMDIS_Zip.strOilTemperature += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfMDIS_Zip.strOilTemperature += UnicodeToANSIEx(ir->wchOilTemperature);
					sRealTimeDataOfMDIS_Zip.strOilTemperature += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchLambda))
				{
					sRealTimeDataOfMDIS_Zip.strLambda += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfMDIS_Zip.strLambda += UnicodeToANSIEx(ir->wchLambda);
					sRealTimeDataOfMDIS_Zip.strLambda += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchEnvironmentalTemperature))
				{
					sRealTimeDataOfMDIS_Zip.strEnvironmentalTemperature += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfMDIS_Zip.strEnvironmentalTemperature += UnicodeToANSIEx(ir->wchEnvironmentalTemperature);
					sRealTimeDataOfMDIS_Zip.strEnvironmentalTemperature += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchRelativeHumidity))
				{
					sRealTimeDataOfMDIS_Zip.strRelativeHumidity += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfMDIS_Zip.strRelativeHumidity += UnicodeToANSIEx(ir->wchRelativeHumidity);
					sRealTimeDataOfMDIS_Zip.strRelativeHumidity += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchAtmosphericPressure))
				{
					sRealTimeDataOfMDIS_Zip.strAtmosphericPressure += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfMDIS_Zip.strAtmosphericPressure += UnicodeToANSIEx(ir->wchAtmosphericPressure);
					sRealTimeDataOfMDIS_Zip.strAtmosphericPressure += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchRemark))
				{
					sRealTimeDataOfMDIS_Zip.strRemark += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfMDIS_Zip.strRemark += UnicodeToANSIEx(ir->wchRemark);
					sRealTimeDataOfMDIS_Zip.strRemark += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchReserved1))
				{
					sRealTimeDataOfMDIS_Zip.strReserved1 += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfMDIS_Zip.strReserved1 += UnicodeToANSIEx(ir->wchReserved1);
					sRealTimeDataOfMDIS_Zip.strReserved1 += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchReserved2))
				{
					sRealTimeDataOfMDIS_Zip.strReserved2 += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfMDIS_Zip.strReserved2 += UnicodeToANSIEx(ir->wchReserved2);
					sRealTimeDataOfMDIS_Zip.strReserved2 += g_pchSplit;
				}

				if(0 == _tcscmp(L"", ir->wchReserved3))
				{
					sRealTimeDataOfMDIS_Zip.strReserved3 += g_pchSplit;
				}
				else
				{
					sRealTimeDataOfMDIS_Zip.strReserved3 += UnicodeToANSIEx(ir->wchReserved3);
					sRealTimeDataOfMDIS_Zip.strReserved3 += g_pchSplit;
				}
			}

			v.ChangeType(VT_NULL);
			v = sRealTimeDataOfMDIS_Zip.strRunningNumber.c_str();
			PutFieldData(pRecordset, L"RunningNumber", v);

			v.ChangeType(VT_NULL);
			v = sRealTimeDataOfMDIS_Zip.strReportNumber.c_str();
			PutFieldData(pRecordset, L"ReportNumber", v);

			SetStringToDBImage(pRecordset, sRealTimeDataOfMDIS_Zip.strTime, L"Time");
			SetStringToDBImage(pRecordset, sRealTimeDataOfMDIS_Zip.strSamplingTime, L"SamplingTime");
			SetStringToDBImage(pRecordset, sRealTimeDataOfMDIS_Zip.strState, L"State");
			SetStringToDBImage(pRecordset, sRealTimeDataOfMDIS_Zip.strHC, L"HC");
			SetStringToDBImage(pRecordset, sRealTimeDataOfMDIS_Zip.strCO, L"CO");
			SetStringToDBImage(pRecordset, sRealTimeDataOfMDIS_Zip.strO2, L"O2");
			SetStringToDBImage(pRecordset, sRealTimeDataOfMDIS_Zip.strCO2, L"CO2");
			SetStringToDBImage(pRecordset, sRealTimeDataOfMDIS_Zip.strNO, L"NO");
			SetStringToDBImage(pRecordset, sRealTimeDataOfMDIS_Zip.strEngineRev, L"EngineRev");
			SetStringToDBImage(pRecordset, sRealTimeDataOfMDIS_Zip.strOilTemperature, L"OilTemperature");
			SetStringToDBImage(pRecordset, sRealTimeDataOfMDIS_Zip.strLambda, L"Lambda");
			SetStringToDBImage(pRecordset, sRealTimeDataOfMDIS_Zip.strEnvironmentalTemperature, L"EnvironmentalTemperature");
			SetStringToDBImage(pRecordset, sRealTimeDataOfMDIS_Zip.strRelativeHumidity, L"RelativeHumidity");
			SetStringToDBImage(pRecordset, sRealTimeDataOfMDIS_Zip.strAtmosphericPressure, L"AtmosphericPressure");
			SetStringToDBImage(pRecordset, sRealTimeDataOfMDIS_Zip.strRemark, L"Remark");
			SetStringToDBImage(pRecordset, sRealTimeDataOfMDIS_Zip.strReserved1, L"Reserved1");
			SetStringToDBImage(pRecordset, sRealTimeDataOfMDIS_Zip.strReserved2, L"Reserved2");
			SetStringToDBImage(pRecordset, sRealTimeDataOfMDIS_Zip.strReserved3, L"Reserved3");

			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD SetDboEquCalChkInfo(const EQUCALCHKINFO &dboEquCalChkInfo)
{
	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"select * from EquCalChkInfo");

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			// 添加新记录
			pRecordset->AddNew();

			wstring str;
			_variant_t v;

			// LineNumber	检测线编号
			str = dboEquCalChkInfo.wchLineNumber;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"LineNumber", v);

			// Operator	操作员
			str = dboEquCalChkInfo.wchOperator;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Operator", v);

			// EquipmentNumber	设备编号
			str = dboEquCalChkInfo.wchEquipmentNumber;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"EquipmentNumber", v);

			// Equipment	设备
			str = dboEquCalChkInfo.wchEquipment;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Equipment", v);

			// Item	项目
			str = dboEquCalChkInfo.wchItem;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Item", v);

			// Date	日期
			str = dboEquCalChkInfo.wchDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"Date", v);

			// Data	数据
			str = dboEquCalChkInfo.wchData;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Data", v);

			// Error	误差
			str = dboEquCalChkInfo.wchError;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Error", v);

			// Judgement	判定
			str = dboEquCalChkInfo.wchJudgement;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Judgement", v);

			// 备注
			str = dboEquCalChkInfo.wchRemark;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Remark", v);

			// 保留字段,以后备用
			str = dboEquCalChkInfo.wchReserved1;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved1", v);

			// 保留字段,以后备用
			str = dboEquCalChkInfo.wchReserved2;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved2", v);

			// 保留字段,以后备用
			str = dboEquCalChkInfo.wchReserved3;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved3", v);

			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD SetDboDemarcationLog(const DEMARCATIONLOG &dboDemarcationLog)
{
	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"select * from DemarcationLog where DemarcationNumber='%s'", dboDemarcationLog.wchDemarcationNumber);

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if (pRecordset->adoEOF)
			{
				// 添加新记录
				pRecordset->AddNew();
			}

			wstring str;
			_variant_t v;

			// DemarcationNumber	标定编号
			str = dboDemarcationLog.wchDemarcationNumber;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"DemarcationNumber", v);

			// LineNumber	检测线编号
			str = dboDemarcationLog.wchLineNumber;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"LineNumber", v);

			// Operator	操作员
			str = dboDemarcationLog.wchOperator;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Operator", v);

			// EquipmentNumber	设备编号
			str = dboDemarcationLog.wchEquipmentNumber;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"EquipmentNumber", v);

			// EquipmentModel	设备型号
			str = dboDemarcationLog.wchEquipmentModel;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"EquipmentModel", v);

			// EquipmentName	设备名称
			str = dboDemarcationLog.wchEquipmentName;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"EquipmentName", v);

			// DemarcationItem	项目
			str = dboDemarcationLog.wchDemarcationItem;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"DemarcationItem", v);

			// DemarcationDate	日期
			str = dboDemarcationLog.wchDemarcationDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"DemarcationDate", v);

			// Pass	判定
			str = dboDemarcationLog.wchPass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"Pass", v);

			// 备注
			str = dboDemarcationLog.wchRemark;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Remark", v);

			// 保留字段,以后备用
			str = dboDemarcationLog.wchReserved1;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved1", v);

			// 保留字段,以后备用
			str = dboDemarcationLog.wchReserved2;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved2", v);

			// 保留字段,以后备用
			str = dboDemarcationLog.wchReserved3;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved3", v);

			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD SetDboDemarcationResultOfAnaGasCal(const DEMARCATIONRESULTOFANAGASCAL &dboResultOfAnaGasCal)
{
	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"select * from DemarcationResultOfAnaGasCal where DemarcationNumber='%s'", dboResultOfAnaGasCal.wchDemarcationNumber);

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if (pRecordset->adoEOF)
			{
				// 添加新记录
				pRecordset->AddNew();
			}

			wstring str;
			_variant_t v;

			// DemarcationNumber	标定编号
			str = dboResultOfAnaGasCal.wchDemarcationNumber;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"DemarcationNumber", v);

			// PEFMeasuredValue	PEF测量值
			str = dboResultOfAnaGasCal.wchPEFMeasuredValue;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"PEFMeasuredValue", v);

			// SkipHCCalibration	跳过校准
			str = dboResultOfAnaGasCal.wchSkipHCCalibration;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"SkipHCCalibration", v);

			// C3H8StandardValue	C3H8
			str = dboResultOfAnaGasCal.wchC3H8StandardValue;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"C3H8StandardValue", v);

			// HCMeasuredValue	HC测量值
			str = dboResultOfAnaGasCal.wchHCMeasuredValue;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"HCMeasuredValue", v);

			// SkipCOCalibration	跳过校准
			str = dboResultOfAnaGasCal.wchSkipCOCalibration;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"SkipCOCalibration", v);


			// COMeasuredValue	CO测量值
			str = dboResultOfAnaGasCal.wchCOMeasuredValue;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"COMeasuredValue", v);

			// COStandardValue	CO标准值
			str = dboResultOfAnaGasCal.wchCOStandardValue;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"COStandardValue", v);

			// SkipCO2Calibration	跳过校准
			str = dboResultOfAnaGasCal.wchSkipCO2Calibration;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"SkipCO2Calibration", v);


			// CO2MeasuredValue	CO2测量值
			str = dboResultOfAnaGasCal.wchCO2MeasuredValue;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"CO2MeasuredValue", v);

			// CO2StandardValue	CO2标准值
			str = dboResultOfAnaGasCal.wchCO2StandardValue;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"CO2StandardValue", v);

			// SkipNOCalibration	跳过校准
			str = dboResultOfAnaGasCal.wchSkipNOCalibration;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"SkipNOCalibration", v);

			// NOMeasuredValue	NO测量值
			str = dboResultOfAnaGasCal.wchNOMeasuredValue;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"NOMeasuredValue", v);

			// NOStandardValue	NO标准值
			str = dboResultOfAnaGasCal.wchNOStandardValue;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"NOStandardValue", v);

			// SkipNO2Calibration	跳过校准
			str = dboResultOfAnaGasCal.wchSkipNO2Calibration;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"SkipNO2Calibration", v);

			// NO2MeasuredValue	NO2测量值
			str = dboResultOfAnaGasCal.wchNO2MeasuredValue;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"NO2MeasuredValue", v);

			// NO2StandardValue	NO2标准值
			str = dboResultOfAnaGasCal.wchNO2StandardValue;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"NO2StandardValue", v);

			// SkipO2Calibration	跳过校准
			str = dboResultOfAnaGasCal.wchSkipO2Calibration;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"SkipO2Calibration", v);

			// O2MeasuredValue	O2测量值
			str = dboResultOfAnaGasCal.wchO2MeasuredValue;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"O2MeasuredValue", v);

			// O2StandardValue	O2标准值
			str = dboResultOfAnaGasCal.wchO2StandardValue;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"O2StandardValue", v);

			// Pass	气体校准是否通过
			str = dboResultOfAnaGasCal.wchPass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"Pass", v);

			// 备注
			str = dboResultOfAnaGasCal.wchRemark;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Remark", v);

			// 保留字段,以后备用
			str = dboResultOfAnaGasCal.wchReserved1;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved1", v);

			// 保留字段,以后备用
			str = dboResultOfAnaGasCal.wchReserved2;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved2", v);

			// 保留字段,以后备用
			str = dboResultOfAnaGasCal.wchReserved3;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved3", v);

			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD SetDboDemarcationResultOfAnaGasChk(const DEMARCATIONRESULTOFANAGASCHK &dboResultOfAnaGasChk)
{
	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"select * from DemarcationResultOfAnaGasChk where DemarcationNumber='%s'", dboResultOfAnaGasChk.wchDemarcationNumber);

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if (pRecordset->adoEOF)
			{
				// 添加新记录
				pRecordset->AddNew();
			}

			wstring str;
			_variant_t v;

			// DemarcationNumber	标定编号
			str = dboResultOfAnaGasChk.wchDemarcationNumber;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"DemarcationNumber", v);

			// PEFMeasuredValue	PEF测量值
			str = dboResultOfAnaGasChk.wchPEFMeasuredValue;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"PEFMeasuredValue", v);

			// C3H8StandardValue	C3H8
			str = dboResultOfAnaGasChk.wchC3H8StandardValue;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"C3H8StandardValue", v);

			// SkipHCJudgement	跳过判断
			str = dboResultOfAnaGasChk.wchSkipHCJudgement;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"SkipHCJudgement", v);

			// HCMeasuredValue	HC测量值
			str = dboResultOfAnaGasChk.wchHCMeasuredValue;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"HCMeasuredValue", v);

			// HCStandardValue	HC标准值
			str = dboResultOfAnaGasChk.wchHCStandardValue;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"HCStandardValue", v);

			// HCAE	HC绝对误差
			str = dboResultOfAnaGasChk.wchHCAE;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"HCAE", v);

			// HCAELimit	HC绝对误差限值
			str = dboResultOfAnaGasChk.wchHCAELimit;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"HCAELimit", v);

			// HCAEPass	HC绝对误差是否通过
			str = dboResultOfAnaGasChk.wchHCAEPass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"HCAEPass", v);

			// HCRE	HC相对误差
			str = dboResultOfAnaGasChk.wchHCRE;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"HCRE", v);

			// HCRELimit	HC相对误差限值
			str = dboResultOfAnaGasChk.wchHCRELimit;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"HCRELimit", v);

			// HCREPass	HC相对误差是否通过
			str = dboResultOfAnaGasChk.wchHCREPass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"HCREPass", v);

			// HCPass	HC检查是否通过
			str = dboResultOfAnaGasChk.wchHCPass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"HCPass", v);

			// SkipCOJudgement	跳过判断
			str = dboResultOfAnaGasChk.wchSkipCOJudgement;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"SkipCOJudgement", v);

			// COMeasuredValue	CO测量值
			str = dboResultOfAnaGasChk.wchCOMeasuredValue;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"COMeasuredValue", v);

			// COStandardValue	CO标准值
			str = dboResultOfAnaGasChk.wchCOStandardValue;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"COStandardValue", v);

			// COAE	CO绝对误差
			str = dboResultOfAnaGasChk.wchCOAE;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"COAE", v);

			// COAELimit	CO绝对误差限值
			str = dboResultOfAnaGasChk.wchCOAELimit;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"COAELimit", v);

			// COAEPass	CO绝对误差是否通过
			str = dboResultOfAnaGasChk.wchCOAEPass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"COAEPass", v);

			// CORE	CO相对误差
			str = dboResultOfAnaGasChk.wchCORE;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"CORE", v);

			// CORELimit	CO相对误差限值
			str = dboResultOfAnaGasChk.wchCORELimit;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"CORELimit", v);

			// COREPass	CO相对误差是否通过
			str = dboResultOfAnaGasChk.wchCOREPass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"COREPass", v);

			// COPass	CO检查是否通过
			str = dboResultOfAnaGasChk.wchCOPass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"COPass", v);

			// SkipCO2Judgement	跳过判断
			str = dboResultOfAnaGasChk.wchSkipCO2Judgement;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"SkipCO2Judgement", v);

			// CO2MeasuredValue	CO2测量值
			str = dboResultOfAnaGasChk.wchCO2MeasuredValue;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"CO2MeasuredValue", v);

			// CO2StandardValue	CO2标准值
			str = dboResultOfAnaGasChk.wchCO2StandardValue;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"CO2StandardValue", v);

			// CO2AE	CO2绝对误差
			str = dboResultOfAnaGasChk.wchCO2AE;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"CO2AE", v);

			// CO2AELimit	CO2绝对误差限值
			str = dboResultOfAnaGasChk.wchCO2AELimit;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"CO2AELimit", v);

			// CO2AEPass	CO2绝对误差是否通过
			str = dboResultOfAnaGasChk.wchCO2AEPass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"CO2AEPass", v);

			// CO2RE	CO2相对误差
			str = dboResultOfAnaGasChk.wchCO2RE;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"CO2RE", v);

			// CO2RELimit	CO2相对误差限值
			str = dboResultOfAnaGasChk.wchCO2RELimit;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"CO2RELimit", v);

			// CO2REPass	CO2相对误差限值是否通过
			str = dboResultOfAnaGasChk.wchCO2REPass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"CO2REPass", v);

			// CO2Pass	CO2检查是否通过
			str = dboResultOfAnaGasChk.wchCO2Pass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"CO2Pass", v);

			// SkipNOJudgement	跳过判断
			str = dboResultOfAnaGasChk.wchSkipNOJudgement;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"SkipNOJudgement", v);

			// NOMeasuredValue	NO测量值
			str = dboResultOfAnaGasChk.wchNOMeasuredValue;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"NOMeasuredValue", v);

			// NOStandardValue	NO标准值
			str = dboResultOfAnaGasChk.wchNOStandardValue;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"NOStandardValue", v);

			// NOAE	NO绝对误差
			str = dboResultOfAnaGasChk.wchNOAE;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"NOAE", v);

			// NOAELimit	NO绝对误差限值
			str = dboResultOfAnaGasChk.wchNOAELimit;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"NOAELimit", v);

			// NOAEPass	NO绝对误差是否通过
			str = dboResultOfAnaGasChk.wchNOAEPass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"NOAEPass", v);

			// NORE	NO相对误差
			str = dboResultOfAnaGasChk.wchNORE;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"NORE", v);

			// NORELimit	NO相对误差限值
			str = dboResultOfAnaGasChk.wchNORELimit;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"NORELimit", v);

			// NOREPass	NO相对误差是否通过
			str = dboResultOfAnaGasChk.wchNOREPass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"NOREPass", v);

			// NOPass	NO检查是否通过
			str = dboResultOfAnaGasChk.wchNOPass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"NOPass", v);

			// SkipNO2Judgement	跳过判断
			str = dboResultOfAnaGasChk.wchSkipNO2Judgement;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"SkipNO2Judgement", v);

			// NO2MeasuredValue	NO2测量值
			str = dboResultOfAnaGasChk.wchNO2MeasuredValue;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"NO2MeasuredValue", v);

			// NO2StandardValue	NO2标准值
			str = dboResultOfAnaGasChk.wchNO2StandardValue;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"NO2StandardValue", v);

			// NO2AE	NO2绝对误差
			str = dboResultOfAnaGasChk.wchNO2AE;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"NO2AE", v);

			// NO2AELimit	NO2绝对误差限值
			str = dboResultOfAnaGasChk.wchNO2AELimit;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"NO2AELimit", v);

			// NO2AEPass	NO2绝对误差是否通过
			str = dboResultOfAnaGasChk.wchNO2AEPass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"NO2AEPass", v);

			// NO2RE	NO2相对误差
			str = dboResultOfAnaGasChk.wchNO2RE;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"NO2RE", v);

			// NO2RELimit	NO2相对误差限值
			str = dboResultOfAnaGasChk.wchNO2RELimit;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"NO2RELimit", v);

			// NO2REPass	NO2相对误差是否通过
			str = dboResultOfAnaGasChk.wchNO2REPass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"NO2REPass", v);

			// NO2Pass	NO2检查是否通过
			str = dboResultOfAnaGasChk.wchNO2Pass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"NO2Pass", v);

			// SkipO2Judgement	跳过判断
			str = dboResultOfAnaGasChk.wchSkipO2Judgement;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"SkipO2Judgement", v);

			// O2MeasuredValue	O2测量值
			str = dboResultOfAnaGasChk.wchO2MeasuredValue;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"O2MeasuredValue", v);

			// O2StandardValue	O2标准值
			str = dboResultOfAnaGasChk.wchO2StandardValue;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"O2StandardValue", v);

			// O2AE	O2绝对误差
			str = dboResultOfAnaGasChk.wchO2AE;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"O2AE", v);

			// O2AELimit	O2绝对误差限值
			str = dboResultOfAnaGasChk.wchO2AELimit;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"O2AELimit", v);

			// O2AEPass	O2绝对误差是否通过
			str = dboResultOfAnaGasChk.wchO2AEPass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"O2AEPass", v);

			// O2RE	O2相对误差
			str = dboResultOfAnaGasChk.wchO2RE;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"O2RE", v);

			// O2RELimit	O2相对误差限值
			str = dboResultOfAnaGasChk.wchO2RELimit;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"O2RELimit", v);

			// O2REPass	O2相对误差是否通过
			str = dboResultOfAnaGasChk.wchO2REPass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"O2REPass", v);

			// O2Pass	O2检查是否通过
			str = dboResultOfAnaGasChk.wchO2Pass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"O2Pass", v);

			// Pass	气体检查是否通过
			str = dboResultOfAnaGasChk.wchPass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"Pass", v);

			// 备注
			str = dboResultOfAnaGasChk.wchRemark;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Remark", v);

			// 保留字段,以后备用
			str = dboResultOfAnaGasChk.wchReserved1;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved1", v);

			// 保留字段,以后备用
			str = dboResultOfAnaGasChk.wchReserved2;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved2", v);

			// 保留字段,以后备用
			str = dboResultOfAnaGasChk.wchReserved3;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved3", v);

			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD SetDboDemarcationResultOfOpaCalChk(const DEMARCATIONRESULTOFOPACALCHK &dboResultOfOpaCalChk)
{
	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"select * from DemarcationResultOfOpaCalChk where DemarcationNumber='%s'", dboResultOfOpaCalChk.wchDemarcationNumber);

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if (pRecordset->adoEOF)
			{
				// 添加新记录
				pRecordset->AddNew();
			}

			wstring str;
			_variant_t v;

			// DemarcationNumber	标定编号
			str = dboResultOfOpaCalChk.wchDemarcationNumber;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"DemarcationNumber", v);

			// 测量值1
			str = dboResultOfOpaCalChk.wchMeasuredValue1;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"MeasuredValue1", v);

			// 标准值1
			str = dboResultOfOpaCalChk.wchStandardValue1;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"StandardValue1", v);

			// 绝对误差1
			str = dboResultOfOpaCalChk.wchAE1;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"AE1", v);

			// 绝对误差限值1
			str = dboResultOfOpaCalChk.wchAELimit1;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"AELimit1", v);

			// 绝对误差1是否通过
			str = dboResultOfOpaCalChk.wchAEPass1;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"AEPass1", v);

			// 相对误差1
			str = dboResultOfOpaCalChk.wchRE1;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"RE1", v);

			// 相对误差限值1
			str = dboResultOfOpaCalChk.wchRELimit1;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"RELimit1", v);

			// 相对误差1是否通过
			str = dboResultOfOpaCalChk.wchREPass1;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"REPass1", v);

			// 线性度1
			str = dboResultOfOpaCalChk.wchLinearity1;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"Linearity1", v);

			// 线性度限值1
			str = dboResultOfOpaCalChk.wchLinearityLimit1;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"LinearityLimit1", v);

			// 线性度1是否通过
			str = dboResultOfOpaCalChk.wchLinearityPass1;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"LinearityPass1", v);

			// 滤光片1是否通过
			str = dboResultOfOpaCalChk.wchPass1;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"Pass1", v);

			// 测量值2
			str = dboResultOfOpaCalChk.wchMeasuredValue2;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"MeasuredValue2", v);

			// 标准值2
			str = dboResultOfOpaCalChk.wchStandardValue2;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"StandardValue2", v);

			// 绝对误差2
			str = dboResultOfOpaCalChk.wchAE2;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"AE2", v);

			// 绝对误差限值2
			str = dboResultOfOpaCalChk.wchAELimit2;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"AELimit2", v);

			// 绝对误差2是否通过
			str = dboResultOfOpaCalChk.wchAEPass2;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"AEPass2", v);

			// 相对误差2
			str = dboResultOfOpaCalChk.wchRE2;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"RE2", v);

			// 相对误差限值2
			str = dboResultOfOpaCalChk.wchRELimit2;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"RELimit2", v);

			// 相对误差2是否通过
			str = dboResultOfOpaCalChk.wchREPass2;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"REPass2", v);

			// 线性度2
			str = dboResultOfOpaCalChk.wchLinearity2;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"Linearity2", v);

			// 线性度限值2
			str = dboResultOfOpaCalChk.wchLinearityLimit2;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"LinearityLimit2", v);

			// 线性度2是否通过
			str = dboResultOfOpaCalChk.wchLinearityPass2;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"LinearityPass2", v);

			// 滤光片2是否通过
			str = dboResultOfOpaCalChk.wchPass2;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"Pass2", v);

			// Pass	校准检查是否通过
			str = dboResultOfOpaCalChk.wchPass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"Pass", v);

			// 备注
			str = dboResultOfOpaCalChk.wchRemark;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Remark", v);

			// 保留字段,以后备用
			str = dboResultOfOpaCalChk.wchReserved1;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved1", v);

			// 保留字段,以后备用
			str = dboResultOfOpaCalChk.wchReserved2;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved2", v);

			// 保留字段,以后备用
			str = dboResultOfOpaCalChk.wchReserved3;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved3", v);

			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD SetDboDemarcationResultOfSmoChk(const DEMARCATIONRESULTOFSMOCHK &dboResultOfSmoChk)
{
	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"select * from DemarcationResultOfSmoChk where DemarcationNumber='%s'", dboResultOfSmoChk.wchDemarcationNumber);

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if (pRecordset->adoEOF)
			{
				// 添加新记录
				pRecordset->AddNew();
			}

			wstring str;
			_variant_t v;

			// DemarcationNumber	标定编号
			str = dboResultOfSmoChk.wchDemarcationNumber;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"DemarcationNumber", v);

			// 重复性检查－标准值
			str = dboResultOfSmoChk.wchRepeatStandardValue;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"RepeatStandardValue", v);

			// 重复性检查－测量值1
			str = dboResultOfSmoChk.wchRepeatMeasuredValue1;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"RepeatMeasuredValue1", v);

			// 重复性检查－测量值2
			str = dboResultOfSmoChk.wchRepeatMeasuredValue2;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"RepeatMeasuredValue2", v);

			// 重复性检查－测量值3
			str = dboResultOfSmoChk.wchRepeatMeasuredValue3;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"RepeatMeasuredValue3", v);

			// 重复性检查－测量值3
			str = dboResultOfSmoChk.wchRepeatMeasuredValue3;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"RepeatMeasuredValue3", v);

			// 重复性检查－测量值4
			str = dboResultOfSmoChk.wchRepeatMeasuredValue4;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"RepeatMeasuredValue4", v);

			// 重复性检查－测量值5
			str = dboResultOfSmoChk.wchRepeatMeasuredValue5;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"RepeatMeasuredValue5", v);

			// 重复性检查－误差值1
			str = dboResultOfSmoChk.wchRepeatErrorValue1;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"RepeatErrorValue1", v);

			// 重复性检查－误差值2
			str = dboResultOfSmoChk.wchRepeatErrorValue2;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"RepeatErrorValue2", v);

			// 重复性检查－误差值3
			str = dboResultOfSmoChk.wchRepeatErrorValue3;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"RepeatErrorValue3", v);

			// 重复性检查－误差值4
			str = dboResultOfSmoChk.wchRepeatErrorValue4;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"RepeatErrorValue4", v);

			// 重复性检查－误差值5
			str = dboResultOfSmoChk.wchRepeatErrorValue5;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"RepeatErrorValue5", v);

			// 重复性检查－测量平均值
			str = dboResultOfSmoChk.wchRepeatAverageValue;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"RepeatAverageValue", v);

			// 重复性检查是否通过
			str = dboResultOfSmoChk.wchRepeatPass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"RepeatPass", v);

			// 示值误差检查－1级标准值
			str = dboResultOfSmoChk.wchBasicError1StandardValue;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"BasicError1StandardValue", v);

			// 示值误差检查－1级测量值1
			str = dboResultOfSmoChk.wchBasicError1MeasuredValue1;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"BasicError1MeasuredValue1", v);

			// 示值误差检查－1级测量值2
			str = dboResultOfSmoChk.wchBasicError1MeasuredValue2;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"BasicError1MeasuredValue2", v);

			// 示值误差检查－1级测量值3
			str = dboResultOfSmoChk.wchBasicError1MeasuredValue3;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"BasicError1MeasuredValue3", v);

			// 示值误差检查－1级测量平均值
			str = dboResultOfSmoChk.wchBasicError1AverageValue;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"BasicError1AverageValue", v);

			// 示值误差检查－2级标准值
			str = dboResultOfSmoChk.wchBasicError2StandardValue;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"BasicError2StandardValue", v);

			// 示值误差检查－2级测量值1
			str = dboResultOfSmoChk.wchBasicError2MeasuredValue1;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"BasicError2MeasuredValue1", v);

			// 示值误差检查－2级测量值2
			str = dboResultOfSmoChk.wchBasicError2MeasuredValue2;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"BasicError2MeasuredValue2", v);

			// 示值误差检查－2级测量值3
			str = dboResultOfSmoChk.wchBasicError2MeasuredValue3;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"BasicError2MeasuredValue3", v);

			// 示值误差检查－2级测量平均值
			str = dboResultOfSmoChk.wchBasicError2AverageValue;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"BasicError2AverageValue", v);

			// 示值误差检查－非校准级标准值
			str = dboResultOfSmoChk.wchBasicErrorFStandardValue;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"BasicErrorFStandardValue", v);

			// 示值误差检查－非校准级测量值1
			str = dboResultOfSmoChk.wchBasicErrorFMeasuredValue1;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"BasicErrorFMeasuredValue1", v);

			// 示值误差检查－非校准级测量值2
			str = dboResultOfSmoChk.wchBasicErrorFMeasuredValue2;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"BasicErrorFMeasuredValue2", v);

			// 示值误差检查－非校准级测量值3
			str = dboResultOfSmoChk.wchBasicErrorFMeasuredValue3;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"BasicErrorFMeasuredValue3", v);

			// 示值误差检查－非校准级测量平均值
			str = dboResultOfSmoChk.wchBasicErrorFAverageValue;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"BasicErrorFAverageValue", v);

			// 示值误差检查－5级标准值
			str = dboResultOfSmoChk.wchBasicError5StandardValue;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"BasicError5StandardValue", v);

			// 示值误差检查－5级测量值1
			str = dboResultOfSmoChk.wchBasicError5MeasuredValue1;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"BasicError5MeasuredValue1", v);

			// 示值误差检查－5级测量值2
			str = dboResultOfSmoChk.wchBasicError5MeasuredValue2;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"BasicError5MeasuredValue2", v);

			// 示值误差检查－5级测量值3
			str = dboResultOfSmoChk.wchBasicError5MeasuredValue3;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"BasicError5MeasuredValue3", v);

			// 示值误差检查－5级测量平均值
			str = dboResultOfSmoChk.wchBasicError5AverageValue;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"BasicError5AverageValue", v);

			// 示值误差检查－6级标准值
			str = dboResultOfSmoChk.wchBasicError6StandardValue;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"BasicError6StandardValue", v);

			// 示值误差检查－6级测量值1
			str = dboResultOfSmoChk.wchBasicError6MeasuredValue1;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"BasicError6MeasuredValue1", v);

			// 示值误差检查－6级测量值2
			str = dboResultOfSmoChk.wchBasicError6MeasuredValue2;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"BasicError6MeasuredValue2", v);

			// 示值误差检查－6级测量值3
			str = dboResultOfSmoChk.wchBasicError6MeasuredValue3;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"BasicError6MeasuredValue3", v);

			// 示值误差检查－6级测量平均值
			str = dboResultOfSmoChk.wchBasicError6AverageValue;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"BasicError6AverageValue", v);

			// 示值误差检查是否通过
			str = dboResultOfSmoChk.wchBasicErrorPass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"BasicErrorPass", v);

			// 检查是否通过
			str = dboResultOfSmoChk.wchPass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"Pass", v);

			// 备注
			str = dboResultOfSmoChk.wchRemark;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Remark", v);

			// 保留字段,以后备用
			str = dboResultOfSmoChk.wchReserved1;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved1", v);

			// 保留字段,以后备用
			str = dboResultOfSmoChk.wchReserved2;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved2", v);

			// 保留字段,以后备用
			str = dboResultOfSmoChk.wchReserved3;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved3", v);

			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

// 测功机加载滑行结果<DemarcationResultOfDynConstLoad>
DWORD SetDboDemarcationResultOfDynConstLoad(const DEMARCATIONRESULTOFDYNCONSTLOAD &dboResultOfDynConstLoad)
{
	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"select * from DemarcationResultOfDynConstLoad where DemarcationNumber='%s'", dboResultOfDynConstLoad.wchDemarcationNumber);

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if (pRecordset->adoEOF)
			{
				// 添加新记录
				pRecordset->AddNew();
			}

			wstring str;
			_variant_t v;

			// DemarcationNumber	标定编号
			str = dboResultOfDynConstLoad.wchDemarcationNumber;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"DemarcationNumber", v);

			// DIW	基本惯量
			str = dboResultOfDynConstLoad.wchDIW;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)_wtoi(str.c_str());
			}
			PutFieldData(pRecordset, L"DIW", v);

			// LowerVelocity	低速点[km/h]
			str = dboResultOfDynConstLoad.wchLowerVelocity;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"LowerVelocity", v);

			// UpperVelocity	高速点[km/h]
			str = dboResultOfDynConstLoad.wchUpperVelocity;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"UpperVelocity", v);

			// NomialVelocity	名义速度[km/h]
			str = dboResultOfDynConstLoad.wchNomialVelocity;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"NomialVelocity", v);

			// 根据时间判断
			str = dboResultOfDynConstLoad.wchJudgeByTime;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"JudgeByTime", v);

			// PowerMeasuredValue	加载功率测量值[kW]
			str = dboResultOfDynConstLoad.wchPowerMeasuredValue;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"PowerMeasuredValue", v);

			// PowerStandardValue	加载功率标准值[kW]
			str = dboResultOfDynConstLoad.wchPowerStandardValue;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"PowerStandardValue", v);

			// PowerAE	加载功率绝对误差[kW]
			str = dboResultOfDynConstLoad.wchPowerAE;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"PowerAE", v);

			// PowerAELimit	加载功率绝对误差限值[kW]
			str = dboResultOfDynConstLoad.wchPowerAELimit;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"PowerAELimit", v);

			// PowerAEPass 加载功率绝对误差是否合格
			str = dboResultOfDynConstLoad.wchPowerAEPass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"PowerAEPass", v);

			// PowerRE	加载功率相对误差[%]
			str = dboResultOfDynConstLoad.wchPowerRE;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"PowerRE", v);

			// PowerRELimit	加载功率相对误差限值[%]
			str = dboResultOfDynConstLoad.wchPowerRELimit;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"PowerRELimit", v);

			// PowerREPass 加载功率相对误差是否合格
			str = dboResultOfDynConstLoad.wchPowerREPass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"PowerREPass", v);

			// PowerPass 加载功率是否合格
			str = dboResultOfDynConstLoad.wchPowerPass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"PowerPass", v);

			// ACDT	加载滑行时间测量值[ms]
			str = dboResultOfDynConstLoad.wchACDT;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)_wtoi(str.c_str());
			}
			PutFieldData(pRecordset, L"ACDT", v);

			// CCDT	加载滑行时间标准值[ms]
			str = dboResultOfDynConstLoad.wchCCDT;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)_wtoi(str.c_str());
			}
			PutFieldData(pRecordset, L"CCDT", v);

			// CDTAE	加载滑行时间绝对误差[ms]
			str = dboResultOfDynConstLoad.wchCDTAE;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)_wtoi(str.c_str());
			}
			PutFieldData(pRecordset, L"CDTAE", v);

			// CDTAELimit	加载滑行时间绝对误差限值[ms]
			str = dboResultOfDynConstLoad.wchCDTAELimit;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)_wtoi(str.c_str());
			}
			PutFieldData(pRecordset, L"CDTAELimit", v);

			// CDTAEPass 加载滑行时间绝对误差是否合格
			str = dboResultOfDynConstLoad.wchCDTAEPass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"CDTAEPass", v);

			// CDTRE	加载滑行时间相对误差[%]
			str = dboResultOfDynConstLoad.wchCDTRE;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"CDTRE", v);

			// CDTRELimit	加载滑行时间相对误差限值[%]
			str = dboResultOfDynConstLoad.wchCDTRELimit;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"CDTRELimit", v);

			// CDTREPass	加载滑行时间相对误差是否合格
			str = dboResultOfDynConstLoad.wchCDTREPass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"CDTREPass", v);

			// CDTPass 加载滑行时间是否合格
			str = dboResultOfDynConstLoad.wchCDTPass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"CDTPass", v);

			// 检查是否通过
			str = dboResultOfDynConstLoad.wchPass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"Pass", v);

			// 备注
			str = dboResultOfDynConstLoad.wchRemark;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Remark", v);

			// 保留字段,以后备用
			str = dboResultOfDynConstLoad.wchReserved1;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved1", v);

			// 保留字段,以后备用
			str = dboResultOfDynConstLoad.wchReserved2;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved2", v);

			// 保留字段,以后备用
			str = dboResultOfDynConstLoad.wchReserved3;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved3", v);

			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

// 测功机力校准结果<DemarcationResultOfDynForceCal>
DWORD SetDboDemarcationResultOfDynForceCal(const DEMARCATIONRESULTOFDYNFORCECAL &dboResultOfDynForceCal)
{
	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"select * from DemarcationResultOfDynForceCal where DemarcationNumber='%s'", dboResultOfDynForceCal.wchDemarcationNumber);

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if (pRecordset->adoEOF)
			{
				// 添加新记录
				pRecordset->AddNew();
			}

			wstring str;
			_variant_t v;

			// DemarcationNumber	标定编号
			str = dboResultOfDynForceCal.wchDemarcationNumber;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"DemarcationNumber", v);

			// 检查是否通过
			str = dboResultOfDynForceCal.wchPass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"Pass", v);

			// 备注
			str = dboResultOfDynForceCal.wchRemark;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Remark", v);

			// 保留字段,以后备用
			str = dboResultOfDynForceCal.wchReserved1;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved1", v);

			// 保留字段,以后备用
			str = dboResultOfDynForceCal.wchReserved2;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved2", v);

			// 保留字段,以后备用
			str = dboResultOfDynForceCal.wchReserved3;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved3", v);

			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

// 测功机力检查结果<DemarcationResultOfDynForceChk>
DWORD SetDboDemarcationResultOfDynForceChk(const DEMARCATIONRESULTOFDYNFORCECHK &dboResultOfDynForceChk)
{
	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"select * from DemarcationResultOfDynForceChk where DemarcationNumber='%s'", dboResultOfDynForceChk.wchDemarcationNumber);

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if (pRecordset->adoEOF)
			{
				// 添加新记录
				pRecordset->AddNew();
			}

			wstring str;
			_variant_t v;

			// DemarcationNumber	标定编号
			str = dboResultOfDynForceChk.wchDemarcationNumber;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"DemarcationNumber", v);

			// 检查是否通过
			str = dboResultOfDynForceChk.wchPass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"Pass", v);

			// 备注
			str = dboResultOfDynForceChk.wchRemark;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Remark", v);

			// 保留字段,以后备用
			str = dboResultOfDynForceChk.wchReserved1;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved1", v);

			// 保留字段,以后备用
			str = dboResultOfDynForceChk.wchReserved2;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved2", v);

			// 保留字段,以后备用
			str = dboResultOfDynForceChk.wchReserved3;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved3", v);

			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

// 测功机寄生功率滑行结果<DemarcationResultOfDynPLHP>
DWORD SetDboDemarcationResultOfDynPLHP(const DEMARCATIONRESULTOFDYNPLHP &dboResultOfDynPLHP)
{
	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"select * from DemarcationResultOfDynPLHP where DemarcationNumber='%s'", dboResultOfDynPLHP.wchDemarcationNumber);

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if (pRecordset->adoEOF)
			{
				// 添加新记录
				pRecordset->AddNew();
			}

			wstring str;
			_variant_t v;

			// DemarcationNumber	标定编号
			str = dboResultOfDynPLHP.wchDemarcationNumber;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"DemarcationNumber", v);

			// DIW	基本惯量
			str = dboResultOfDynPLHP.wchDIW;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)_wtoi(str.c_str());
			}
			PutFieldData(pRecordset, L"DIW", v);

			// PLHPMode	寄生功率模式(0:平常模式,1:力模式,2:功率模式)
			str = dboResultOfDynPLHP.wchPLHPMode;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)_wtoi(str.c_str());
			}
			PutFieldData(pRecordset, L"PLHPMode", v);

			// PLHPType	寄生功率类型(1:ASM,2:VMAS,3:LUGDOWN)
			str = dboResultOfDynPLHP.wchPLHPType;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)_wtoi(str.c_str());
			}
			PutFieldData(pRecordset, L"PLHPType", v);

			// ApWithRemanence	有剩磁Ap
			str = dboResultOfDynPLHP.wchApWithRemanence;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"ApWithRemanence", v);

			// BpWithRemanence	有剩磁Bp
			str = dboResultOfDynPLHP.wchBpWithRemanence;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"BpWithRemanence", v);

			// CpWithRemanence	有剩磁Cp
			str = dboResultOfDynPLHP.wchCpWithRemanence;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"CpWithRemanence", v);

			// ApWithoutRemanence	无剩磁Ap
			str = dboResultOfDynPLHP.wchApWithoutRemanence;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"ApWithoutRemanence", v);

			// BpWithoutRemanence	无剩磁Bp
			str = dboResultOfDynPLHP.wchBpWithoutRemanence;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"BpWithoutRemanence", v);

			// CpWithoutRemanence	无剩磁Cp
			str = dboResultOfDynPLHP.wchCpWithoutRemanence;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"CpWithoutRemanence", v);

			// LowerVelocity0	低速点0[km/h]
			str = dboResultOfDynPLHP.wchLowerVelocity0;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"LowerVelocity0", v);

			// UpperVelocity0	高速点0[km/h]
			str = dboResultOfDynPLHP.wchUpperVelocity0;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"UpperVelocity0", v);

			// NomialVelocity0	名义速度0[km/h]
			str = dboResultOfDynPLHP.wchNomialVelocity0;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"NomialVelocity0", v);

			// PLHPTime0	寄生功率滑行时间0[ms]
			str = dboResultOfDynPLHP.wchPLHPTime0;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)_wtoi(str.c_str());
			}
			PutFieldData(pRecordset, L"PLHPTime0", v);

			// PLHP0	寄生功率0[kW]
			str = dboResultOfDynPLHP.wchPLHP0;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"PLHP0", v);

			// RemanenceByForce0	剩磁力0[N]
			str = dboResultOfDynPLHP.wchRemanenceByForce0;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"RemanenceByForce0", v);

			// RemanenceByPower0	剩磁功率0[kW]
			str = dboResultOfDynPLHP.wchRemanenceByPower0;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"RemanenceByPower0", v);

			// LowerVelocity1	低速点1[km/h]
			str = dboResultOfDynPLHP.wchLowerVelocity1;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"LowerVelocity1", v);

			// UpperVelocity1	高速点1[km/h]
			str = dboResultOfDynPLHP.wchUpperVelocity1;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"UpperVelocity1", v);

			// NomialVelocity1	名义速度1[km/h]
			str = dboResultOfDynPLHP.wchNomialVelocity1;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"NomialVelocity1", v);

			// PLHPTime1	寄生功率滑行时间1[ms]
			str = dboResultOfDynPLHP.wchPLHPTime1;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)_wtoi(str.c_str());
			}
			PutFieldData(pRecordset, L"PLHPTime1", v);

			// PLHP1	寄生功率1[kW]
			str = dboResultOfDynPLHP.wchPLHP1;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"PLHP1", v);

			// RemanenceByForce1	剩磁力1[N]
			str = dboResultOfDynPLHP.wchRemanenceByForce1;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"RemanenceByForce1", v);

			// RemanenceByPower1	剩磁功率1[kW]
			str = dboResultOfDynPLHP.wchRemanenceByPower1;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"RemanenceByPower1", v);

			// LowerVelocity2	低速点2[km/h]
			str = dboResultOfDynPLHP.wchLowerVelocity2;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"LowerVelocity2", v);

			// UpperVelocity2	高速点2[km/h]
			str = dboResultOfDynPLHP.wchUpperVelocity2;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"UpperVelocity2", v);

			// NomialVelocity2	名义速度2[km/h]
			str = dboResultOfDynPLHP.wchNomialVelocity2;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"NomialVelocity2", v);

			// PLHPTime2	寄生功率滑行时间2[ms]
			str = dboResultOfDynPLHP.wchPLHPTime2;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)_wtoi(str.c_str());
			}
			PutFieldData(pRecordset, L"PLHPTime2", v);

			// PLHP2	寄生功率2[kW]
			str = dboResultOfDynPLHP.wchPLHP2;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"PLHP2", v);

			// RemanenceByForce2	剩磁力2[N]
			str = dboResultOfDynPLHP.wchRemanenceByForce2;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"RemanenceByForce2", v);

			// RemanenceByPower2	剩磁功率2[kW]
			str = dboResultOfDynPLHP.wchRemanenceByPower2;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"RemanenceByPower2", v);

			// LowerVelocity3	低速点3[km/h]
			str = dboResultOfDynPLHP.wchLowerVelocity3;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"LowerVelocity3", v);

			// UpperVelocity3	高速点3[km/h]
			str = dboResultOfDynPLHP.wchUpperVelocity3;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"UpperVelocity3", v);

			// NomialVelocity3	名义速度3[km/h]
			str = dboResultOfDynPLHP.wchNomialVelocity3;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"NomialVelocity3", v);

			// PLHPTime3	寄生功率滑行时间3[ms]
			str = dboResultOfDynPLHP.wchPLHPTime3;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)_wtoi(str.c_str());
			}
			PutFieldData(pRecordset, L"PLHPTime3", v);

			// PLHP3	寄生功率3[kW]
			str = dboResultOfDynPLHP.wchPLHP3;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"PLHP3", v);

			// RemanenceByForce3	剩磁力3[N]
			str = dboResultOfDynPLHP.wchRemanenceByForce3;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"RemanenceByForce3", v);

			// RemanenceByPower3	剩磁功率3[kW]
			str = dboResultOfDynPLHP.wchRemanenceByPower3;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"RemanenceByPower3", v);

			// LowerVelocity4	低速点4[km/h]
			str = dboResultOfDynPLHP.wchLowerVelocity4;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"LowerVelocity4", v);

			// UpperVelocity4	高速点4[km/h]
			str = dboResultOfDynPLHP.wchUpperVelocity4;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"UpperVelocity4", v);

			// NomialVelocity4	名义速度4[km/h]
			str = dboResultOfDynPLHP.wchNomialVelocity4;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"NomialVelocity4", v);

			// PLHPTime4	寄生功率滑行时间4[ms]
			str = dboResultOfDynPLHP.wchPLHPTime4;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)_wtoi(str.c_str());
			}
			PutFieldData(pRecordset, L"PLHPTime4", v);

			// PLHP4	寄生功率4[kW]
			str = dboResultOfDynPLHP.wchPLHP4;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"PLHP4", v);

			// RemanenceByForce4	剩磁力4[N]
			str = dboResultOfDynPLHP.wchRemanenceByForce4;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"RemanenceByForce4", v);

			// RemanenceByPower4	剩磁功率4[kW]
			str = dboResultOfDynPLHP.wchRemanenceByPower4;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"RemanenceByPower4", v);

			// LowerVelocity5	低速点5[km/h]
			str = dboResultOfDynPLHP.wchLowerVelocity5;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"LowerVelocity5", v);

			// UpperVelocity5	高速点5[km/h]
			str = dboResultOfDynPLHP.wchUpperVelocity5;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"UpperVelocity5", v);

			// NomialVelocity5	名义速度5[km/h]
			str = dboResultOfDynPLHP.wchNomialVelocity5;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"NomialVelocity5", v);

			// PLHPTime5	寄生功率滑行时间5[ms]
			str = dboResultOfDynPLHP.wchPLHPTime5;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)_wtoi(str.c_str());
			}
			PutFieldData(pRecordset, L"PLHPTime5", v);

			// PLHP5	寄生功率5[kW]
			str = dboResultOfDynPLHP.wchPLHP5;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"PLHP5", v);

			// RemanenceByForce5	剩磁力5[N]
			str = dboResultOfDynPLHP.wchRemanenceByForce5;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"RemanenceByForce5", v);

			// RemanenceByPower5	剩磁功率5[kW]
			str = dboResultOfDynPLHP.wchRemanenceByPower5;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"RemanenceByPower5", v);

			// LowerVelocity6	低速点6[km/h]
			str = dboResultOfDynPLHP.wchLowerVelocity6;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"LowerVelocity6", v);

			// UpperVelocity6	高速点6[km/h]
			str = dboResultOfDynPLHP.wchUpperVelocity6;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"UpperVelocity6", v);

			// NomialVelocity6	名义速度6[km/h]
			str = dboResultOfDynPLHP.wchNomialVelocity6;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"NomialVelocity6", v);

			// PLHPTime6	寄生功率滑行时间6[ms]
			str = dboResultOfDynPLHP.wchPLHPTime6;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)_wtoi(str.c_str());
			}
			PutFieldData(pRecordset, L"PLHPTime6", v);

			// PLHP6	寄生功率6[kW]
			str = dboResultOfDynPLHP.wchPLHP6;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"PLHP6", v);

			// RemanenceByForce6	剩磁力6[N]
			str = dboResultOfDynPLHP.wchRemanenceByForce6;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"RemanenceByForce6", v);

			// RemanenceByPower6	剩磁功率6[kW]
			str = dboResultOfDynPLHP.wchRemanenceByPower6;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"RemanenceByPower6", v);

			// LowerVelocity7	低速点7[km/h]
			str = dboResultOfDynPLHP.wchLowerVelocity7;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"LowerVelocity7", v);

			// UpperVelocity7	高速点7[km/h]
			str = dboResultOfDynPLHP.wchUpperVelocity7;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"UpperVelocity7", v);

			// NomialVelocity7	名义速度7[km/h]
			str = dboResultOfDynPLHP.wchNomialVelocity7;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"NomialVelocity7", v);

			// PLHPTime7	寄生功率滑行时间7[ms]
			str = dboResultOfDynPLHP.wchPLHPTime7;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)_wtoi(str.c_str());
			}
			PutFieldData(pRecordset, L"PLHPTime7", v);

			// PLHP7	寄生功率7[kW]
			str = dboResultOfDynPLHP.wchPLHP7;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"PLHP7", v);

			// RemanenceByForce7	剩磁力7[N]
			str = dboResultOfDynPLHP.wchRemanenceByForce7;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"RemanenceByForce7", v);

			// RemanenceByPower7	剩磁功率7[kW]
			str = dboResultOfDynPLHP.wchRemanenceByPower7;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"RemanenceByPower7", v);

			// LowerVelocity8	低速点8[km/h]
			str = dboResultOfDynPLHP.wchLowerVelocity8;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"LowerVelocity8", v);

			// UpperVelocity8	高速点8[km/h]
			str = dboResultOfDynPLHP.wchUpperVelocity8;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"UpperVelocity8", v);

			// NomialVelocity8	名义速度8[km/h]
			str = dboResultOfDynPLHP.wchNomialVelocity8;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"NomialVelocity8", v);

			// PLHPTime8	寄生功率滑行时间8[ms]
			str = dboResultOfDynPLHP.wchPLHPTime8;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)_wtoi(str.c_str());
			}
			PutFieldData(pRecordset, L"PLHPTime8", v);

			// PLHP8	寄生功率8[kW]
			str = dboResultOfDynPLHP.wchPLHP8;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"PLHP8", v);

			// RemanenceByForce8	剩磁力8[N]
			str = dboResultOfDynPLHP.wchRemanenceByForce8;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"RemanenceByForce8", v);

			// RemanenceByPower8	剩磁功率8[kW]
			str = dboResultOfDynPLHP.wchRemanenceByPower8;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"RemanenceByPower8", v);

			// 检查是否通过
			str = dboResultOfDynPLHP.wchPass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"Pass", v);

			// 备注
			str = dboResultOfDynPLHP.wchRemark;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Remark", v);

			// 保留字段,以后备用
			str = dboResultOfDynPLHP.wchReserved1;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved1", v);

			// 保留字段,以后备用
			str = dboResultOfDynPLHP.wchReserved2;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved2", v);

			// 保留字段,以后备用
			str = dboResultOfDynPLHP.wchReserved3;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved3", v);

			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

// 流量计流量校准结果<DemarcationResultOfFloFluxCal>
DWORD SetDboDemarcationResultOfFloFluxCal(const DemarcationResultOfFloFluxCal &dboResultOfFloFluxCal)
{
	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"select * from DemarcationResultOfFloFluxCal where DemarcationNumber='%s'", dboResultOfFloFluxCal.wchDemarcationNumber);

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if (pRecordset->adoEOF)
			{
				// 添加新记录
				pRecordset->AddNew();
			}

			wstring str;
			_variant_t v;

			// DemarcationNumber	标定编号
			str = dboResultOfFloFluxCal.wchDemarcationNumber;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"DemarcationNumber", v);

			// 检查是否通过
			str = dboResultOfFloFluxCal.wchPass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"Pass", v);

			// 备注
			str = dboResultOfFloFluxCal.wchRemark;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Remark", v);

			// 保留字段,以后备用
			str = dboResultOfFloFluxCal.wchReserved1;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved1", v);

			// 保留字段,以后备用
			str = dboResultOfFloFluxCal.wchReserved2;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved2", v);

			// 保留字段,以后备用
			str = dboResultOfFloFluxCal.wchReserved3;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved3", v);

			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

// 流量计流量检查结果<DemarcationResultOfFloFluxChk>
DWORD SetDboDemarcationResultOfFloFluxChk(const DemarcationResultOfFloFluxChk &dboResultOfFloFluxChk)
{
	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"select * from DemarcationResultOfFloFluxChk where DemarcationNumber='%s'", dboResultOfFloFluxChk.wchDemarcationNumber);

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if (pRecordset->adoEOF)
			{
				// 添加新记录
				pRecordset->AddNew();
			}

			wstring str;
			_variant_t v;

			// DemarcationNumber	标定编号
			str = dboResultOfFloFluxChk.wchDemarcationNumber;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"DemarcationNumber", v);

			// 检查是否通过
			str = dboResultOfFloFluxChk.wchPass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"Pass", v);

			// 备注
			str = dboResultOfFloFluxChk.wchRemark;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Remark", v);

			// 保留字段,以后备用
			str = dboResultOfFloFluxChk.wchReserved1;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved1", v);

			// 保留字段,以后备用
			str = dboResultOfFloFluxChk.wchReserved2;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved2", v);

			// 保留字段,以后备用
			str = dboResultOfFloFluxChk.wchReserved3;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved3", v);

			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

// 流量计稀释氧校准结果<DemarcationResultOfFloDilO2Cal>
DWORD SetDboDemarcationResultOfFloDilO2Cal(const DemarcationResultOfFloDilO2Cal &dboResultOfFloDilO2Cal)
{
	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"select * from DemarcationResultOfFloDilO2Cal where DemarcationNumber='%s'", dboResultOfFloDilO2Cal.wchDemarcationNumber);

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if (pRecordset->adoEOF)
			{
				// 添加新记录
				pRecordset->AddNew();
			}

			wstring str;
			_variant_t v;

			// DemarcationNumber	标定编号
			str = dboResultOfFloDilO2Cal.wchDemarcationNumber;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"DemarcationNumber", v);

			// 检查是否通过
			str = dboResultOfFloDilO2Cal.wchPass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"Pass", v);

			// 备注
			str = dboResultOfFloDilO2Cal.wchRemark;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Remark", v);

			// 保留字段,以后备用
			str = dboResultOfFloDilO2Cal.wchReserved1;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved1", v);

			// 保留字段,以后备用
			str = dboResultOfFloDilO2Cal.wchReserved2;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved2", v);

			// 保留字段,以后备用
			str = dboResultOfFloDilO2Cal.wchReserved3;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved3", v);

			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

// 流量计压力校准结果<DemarcationResultOfFloPresCal>
DWORD SetDboDemarcationResultOfFloPresCal(const DemarcationResultOfFloPresCal &dboResultOfFloPresCal)
{
	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"select * from DemarcationResultOfFloPresCal where DemarcationNumber='%s'", dboResultOfFloPresCal.wchDemarcationNumber);

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if (pRecordset->adoEOF)
			{
				// 添加新记录
				pRecordset->AddNew();
			}

			wstring str;
			_variant_t v;

			// DemarcationNumber	标定编号
			str = dboResultOfFloPresCal.wchDemarcationNumber;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"DemarcationNumber", v);

			// 检查是否通过
			str = dboResultOfFloPresCal.wchPass;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else if( 0 ==str.compare(L"1"))
			{
				v = true;
			}
			else
			{
				v = false;
			}
			PutFieldData(pRecordset, L"Pass", v);

			// 备注
			str = dboResultOfFloPresCal.wchRemark;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Remark", v);

			// 保留字段,以后备用
			str = dboResultOfFloPresCal.wchReserved1;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved1", v);

			// 保留字段,以后备用
			str = dboResultOfFloPresCal.wchReserved2;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved2", v);

			// 保留字段,以后备用
			str = dboResultOfFloPresCal.wchReserved3;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved3", v);

			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboCertificateOfLineInfo(wchar_t const * pwchLineNumber, BYTE * const pbCertificateAuthentication, const UINT uiCALength, long& lDataSize)
{
	assert(NULL != pwchLineNumber);
	assert(NULL != pbCertificateAuthentication);
	assert(uiCALength > 0);

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		wchar_t wchSql[SQLMAX];
		swprintf_s(wchSql, SQLMAX, L"select CertificateAuthentication from LineInfo where LineNumber = '%s'", pwchLineNumber);

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			if(!pRecordset->adoEOF)
			{
				lDataSize = pRecordset->GetFields()->GetItem(L"CertificateAuthentication")->ActualSize;

				if(lDataSize > 0 && lDataSize <= (long)uiCALength)
				{
					_variant_t varBLOB;
					varBLOB = pRecordset->GetFields()->GetItem(L"CertificateAuthentication")->GetChunk(lDataSize);
					if(varBLOB.vt == (VT_ARRAY | VT_UI1))
					{
						for(long index=0;index<lDataSize;index++)
						{
							SafeArrayGetElement(varBLOB.parray, &index, &pbCertificateAuthentication[index]);
						}
					}
					dwReturn = 0x01;
				}
				else
				{
					dwReturn = 0x02;
				}

			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD SetDboCertificateOfLineInfo(wchar_t const * pwchLineNumber, BYTE * const pbCertificateAuthentication, const UINT uiCALength)
{
	assert(NULL != pwchLineNumber);
	assert(NULL != pbCertificateAuthentication);
	assert(uiCALength > 0);

	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			swprintf_s(wchSql, SQLMAX, L"select CertificateAuthentication from LineInfo where LineNumber = '%s'", pwchLineNumber);

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			// 有，update
			// 无，返回
			if(!pRecordset->adoEOF)
			{
				VARIANT varBLOB;
				SAFEARRAY *psa;
				SAFEARRAYBOUND rgsabound[1];
				rgsabound[0].lLbound = 0;
				rgsabound[0].cElements = uiCALength;
				psa = SafeArrayCreate(VT_UI1, 1, rgsabound);

				for (long i = 0; i < (long)uiCALength; i++)
				{
					SafeArrayPutElement (psa, &i, &pbCertificateAuthentication[i]);
				}
				varBLOB.vt = VT_ARRAY | VT_UI1;
				varBLOB.parray = psa;
				pRecordset->GetFields()->GetItem(L"CertificateAuthentication")->AppendChunk(varBLOB);

				pRecordset->Update();  // 保存到库中
			}
			else
			{
				dwReturn = 0x01;
			}

			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboSystemParameters(const wchar_t wchSql[SQLMAX], PSYSTEMPARAMETERS const pDboSystemParameters)
{
	assert(NULL != wchSql);
	assert(NULL != pDboSystemParameters);

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			if (!pRecordset->adoEOF)
			{
				_variant_t v;
				wstring s;

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AutoID", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboSystemParameters->wchAutoID, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					wcscpy_s(pDboSystemParameters->wchAutoID, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"TimesOfPasswordInput", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboSystemParameters->wchTimesOfPasswordInput, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					wcscpy_s(pDboSystemParameters->wchTimesOfPasswordInput, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"TimesOfNoVIDTransmission", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboSystemParameters->wchTimesOfNoVIDTransmission, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					wcscpy_s(pDboSystemParameters->wchTimesOfNoVIDTransmission, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"TimesOfDynamometerCoastDown", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboSystemParameters->wchTimesOfDynamometerCoastDown, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					wcscpy_s(pDboSystemParameters->wchTimesOfDynamometerCoastDown, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"ErrorOfDynamometerCoastDown", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboSystemParameters->wchErrorOfDynamometerCoastDown, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					wcscpy_s(pDboSystemParameters->wchErrorOfDynamometerCoastDown, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"TimesOfDynamometerRevSensorCheck", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboSystemParameters->wchTimesOfDynamometerRevSensorCheck, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					wcscpy_s(pDboSystemParameters->wchTimesOfDynamometerRevSensorCheck, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PasswordUnlock", v);
				if (VT_NULL != v.vt)
				{
					wcscpy_s(pDboSystemParameters->wchPasswordUnlock, (wchar_t*)(_bstr_t)v);
				}
				else
				{
					wcscpy_s(pDboSystemParameters->wchPasswordUnlock, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PasswordLock", v);
				if (VT_NULL != v.vt)
				{
					wcscpy_s(pDboSystemParameters->wchPasswordLock, (wchar_t*)(_bstr_t)v);
				}
				else
				{
					wcscpy_s(pDboSystemParameters->wchPasswordLock, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PeriodOfDynamometerCoastDown", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboSystemParameters->wchPeriodOfDynamometerCoastDown, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					wcscpy_s(pDboSystemParameters->wchPeriodOfDynamometerCoastDown, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PeriodOfDynamometerForceCheck", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboSystemParameters->wchPeriodOfDynamometerForceCheck, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					wcscpy_s(pDboSystemParameters->wchPeriodOfDynamometerForceCheck, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PeriodOfDynamometerRevSensorCalibration", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboSystemParameters->wchPeriodOfDynamometerRevSensorCalibration, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					wcscpy_s(pDboSystemParameters->wchPeriodOfDynamometerRevSensorCalibration, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PeriodOfEnvParamMeasurerCalibration", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboSystemParameters->wchPeriodOfEnvParamMeasurerCalibration, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					wcscpy_s(pDboSystemParameters->wchPeriodOfEnvParamMeasurerCalibration, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PeriodOfEnvParamMeasurerCheck", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboSystemParameters->wchPeriodOfEnvParamMeasurerCheck, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					wcscpy_s(pDboSystemParameters->wchPeriodOfEnvParamMeasurerCheck, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PeriodOfAnalyzerChannelCalibration", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboSystemParameters->wchPeriodOfAnalyzerChannelCalibration, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					wcscpy_s(pDboSystemParameters->wchPeriodOfAnalyzerChannelCalibration, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PeriodOfAnalyzerChannelCheck", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboSystemParameters->wchPeriodOfAnalyzerChannelCheck, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					wcscpy_s(pDboSystemParameters->wchPeriodOfAnalyzerChannelCheck, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PeriodOfFlowmeterFluxCalibration", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboSystemParameters->wchPeriodOfFlowmeterFluxCalibration, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					wcscpy_s(pDboSystemParameters->wchPeriodOfFlowmeterFluxCalibration, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PeriodOfFlowmeterFluxCheck", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboSystemParameters->wchPeriodOfFlowmeterFluxCheck, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					wcscpy_s(pDboSystemParameters->wchPeriodOfFlowmeterFluxCheck, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PeriodOfOpacimeterChannelCalibration", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboSystemParameters->wchPeriodOfOpacimeterChannelCalibration, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					wcscpy_s(pDboSystemParameters->wchPeriodOfOpacimeterChannelCalibration, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PeriodOfOpacimeterChannelCheck", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboSystemParameters->wchPeriodOfOpacimeterChannelCheck, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					wcscpy_s(pDboSystemParameters->wchPeriodOfOpacimeterChannelCheck, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PeriodOfNOxAnalyzerChannelCalibration", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboSystemParameters->wchPeriodOfNOxAnalyzerChannelCalibration, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					wcscpy_s(pDboSystemParameters->wchPeriodOfNOxAnalyzerChannelCalibration, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PeriodOfNOxAnalyzerChannelCheck", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboSystemParameters->wchPeriodOfNOxAnalyzerChannelCheck, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					wcscpy_s(pDboSystemParameters->wchPeriodOfNOxAnalyzerChannelCheck, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PeriodOfSmokemeterCalibration", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboSystemParameters->wchPeriodOfSmokemeterCalibration, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					wcscpy_s(pDboSystemParameters->wchPeriodOfSmokemeterCalibration, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PeriodOfSmokemeterCheck", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboSystemParameters->wchPeriodOfSmokemeterCheck, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					wcscpy_s(pDboSystemParameters->wchPeriodOfSmokemeterCheck, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"TestPeriod", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboSystemParameters->wchTestPeriod, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					wcscpy_s(pDboSystemParameters->wchTestPeriod, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Remark", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboSystemParameters->wchRemark, s.c_str());
				}
				else
				{
					wcscpy_s(pDboSystemParameters->wchRemark, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved1", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboSystemParameters->wchReserved1, s.c_str());
				}
				else
				{
					wcscpy_s(pDboSystemParameters->wchReserved1, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved2", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboSystemParameters->wchReserved2, s.c_str());
				}
				else
				{
					wcscpy_s(pDboSystemParameters->wchReserved2, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved3", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboSystemParameters->wchReserved3, s.c_str());
				}
				else
				{
					wcscpy_s(pDboSystemParameters->wchReserved3, L"");
				}

				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD SetDboSystemParameters(const SYSTEMPARAMETERS &dboSystemParameters)
{
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"select * from SystemParameters");
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if(pRecordset->adoEOF)
			{
				pRecordset->AddNew();    //添加新记录
			}

			wstring str;
			_variant_t v;

			str = dboSystemParameters.wchTimesOfPasswordInput;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"TimesOfPasswordInput", v);

			str = dboSystemParameters.wchTimesOfNoVIDTransmission;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"TimesOfNoVIDTransmission", v);

			str = dboSystemParameters.wchTimesOfDynamometerCoastDown;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"TimesOfDynamometerCoastDown", v);

			str = dboSystemParameters.wchErrorOfDynamometerCoastDown;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"ErrorOfDynamometerCoastDown", v);

			str = dboSystemParameters.wchTimesOfDynamometerRevSensorCheck;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"TimesOfDynamometerRevSensorCheck", v);

			str = dboSystemParameters.wchPasswordUnlock;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"PasswordUnlock", v);

			str = dboSystemParameters.wchPasswordLock;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"PasswordLock", v);

			str = dboSystemParameters.wchPeriodOfDynamometerCoastDown;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"PeriodOfDynamometerCoastDown", v);

			str = dboSystemParameters.wchPeriodOfDynamometerRevSensorCalibration;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"PeriodOfDynamometerRevSensorCalibration", v);

			str = dboSystemParameters.wchPeriodOfEnvParamMeasurerCalibration;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"PeriodOfEnvParamMeasurerCalibration", v);

			str = dboSystemParameters.wchPeriodOfEnvParamMeasurerCheck;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"PeriodOfEnvParamMeasurerCheck", v);

			str = dboSystemParameters.wchPeriodOfAnalyzerChannelCalibration;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"PeriodOfAnalyzerChannelCalibration", v);

			str = dboSystemParameters.wchPeriodOfAnalyzerChannelCheck;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"PeriodOfAnalyzerChannelCheck", v);

			str = dboSystemParameters.wchPeriodOfFlowmeterFluxCalibration;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"PeriodOfFlowmeterFluxCalibration", v);

			str = dboSystemParameters.wchPeriodOfFlowmeterFluxCheck;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"PeriodOfFlowmeterFluxCheck", v);

			str = dboSystemParameters.wchPeriodOfOpacimeterChannelCalibration;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"PeriodOfOpacimeterChannelCalibration", v);

			str = dboSystemParameters.wchPeriodOfOpacimeterChannelCheck;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"PeriodOfOpacimeterChannelCheck", v);
			
			str = dboSystemParameters.wchPeriodOfNOxAnalyzerChannelCalibration;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"PeriodOfNOxAnalyzerChannelCalibration", v);

			str = dboSystemParameters.wchPeriodOfNOxAnalyzerChannelCheck;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"PeriodOfNOxAnalyzerChannelCheck", v);

			str = dboSystemParameters.wchPeriodOfSmokemeterCalibration;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"PeriodOfSmokemeterCalibration", v);

			str = dboSystemParameters.wchPeriodOfSmokemeterCheck;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"PeriodOfSmokemeterCheck", v);

			str = dboSystemParameters.wchTestPeriod;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"TestPeriod", v);

			str = dboSystemParameters.wchRemark;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Remark", v);

			str = dboSystemParameters.wchReserved1;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved1", v);

			str = dboSystemParameters.wchReserved2;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved2", v);

			str = dboSystemParameters.wchReserved3;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved3", v);

			pRecordset->Update();  // 保存到库中

			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboTestParametersOfASM(const wchar_t wchSql[SQLMAX], PTESTPARAMETERSOFASM const pDboTestParametersOfASM)
{
	assert(NULL != wchSql);
	assert(NULL != pDboTestParametersOfASM);

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			if (!pRecordset->adoEOF)
			{
				_variant_t v;
				wstring s;

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AutoID", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfASM->wchAutoID, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfASM->wchAutoID, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LoadParamOfASM5025", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfASM->wchLoadParamOfASM5025, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfASM->wchLoadParamOfASM5025, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LoadParamOfASM2540", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfASM->wchLoadParamOfASM2540, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfASM->wchLoadParamOfASM2540, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"MinOfCOCO2OfGAS", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfASM->wchMinOfCOCO2OfGAS, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfASM->wchMinOfCOCO2OfGAS, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"MinOfCOCO2OfLPG", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfASM->wchMinOfCOCO2OfLPG, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfASM->wchMinOfCOCO2OfLPG, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"MinOfCOCO2OfCNG", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfASM->wchMinOfCOCO2OfCNG, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfASM->wchMinOfCOCO2OfCNG, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OilTempLimit", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfASM->wchOilTempLimit, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfASM->wchOilTempLimit, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Remark", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestParametersOfASM->wchRemark, s.c_str());
				}
				else
				{
					wcscpy_s(pDboTestParametersOfASM->wchRemark, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved1", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestParametersOfASM->wchReserved1, s.c_str());
				}
				else
				{
					wcscpy_s(pDboTestParametersOfASM->wchReserved1, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved2", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestParametersOfASM->wchReserved2, s.c_str());
				}
				else
				{
					wcscpy_s(pDboTestParametersOfASM->wchReserved2, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved3", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestParametersOfASM->wchReserved3, s.c_str());
				}
				else
				{
					wcscpy_s(pDboTestParametersOfASM->wchReserved3, L"");
				}

				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboTestParametersOfVMAS(const wchar_t wchSql[SQLMAX], PTESTPARAMETERSOFVMAS const pDboTestParametersOfVMAS)
{
	assert(NULL != wchSql);
	assert(NULL != pDboTestParametersOfVMAS);

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			if (!pRecordset->adoEOF)
			{
				_variant_t v;
				wstring s;

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AutoID", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfVMAS->wchAutoID, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfVMAS->wchAutoID, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Load_0_750", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfVMAS->wchLoad_0_750, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfVMAS->wchLoad_0_750, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Load_750_850", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfVMAS->wchLoad_750_850, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfVMAS->wchLoad_750_850, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Load_850_1020", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfVMAS->wchLoad_850_1020, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfVMAS->wchLoad_850_1020, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Load_1020_1250", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfVMAS->wchLoad_1020_1250, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfVMAS->wchLoad_1020_1250, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Load_1250_1470", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfVMAS->wchLoad_1250_1470, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfVMAS->wchLoad_1250_1470, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Load_1470_1700", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfVMAS->wchLoad_1470_1700, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfVMAS->wchLoad_1470_1700, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Load_1700_1930", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfVMAS->wchLoad_1700_1930, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfVMAS->wchLoad_1700_1930, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Load_1930_2150", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfVMAS->wchLoad_1930_2150, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfVMAS->wchLoad_1930_2150, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Load_2150_2380", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfVMAS->wchLoad_2150_2380, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfVMAS->wchLoad_2150_2380, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Load_2380_2610", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfVMAS->wchLoad_2380_2610, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfVMAS->wchLoad_2380_2610, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Load_2610_3500", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfVMAS->wchLoad_2610_3500, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfVMAS->wchLoad_2610_3500, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"MinOfCOCO2OfGAS", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfVMAS->wchMinOfCOCO2OfGAS, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfVMAS->wchMinOfCOCO2OfGAS, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"MinOfCOCO2OfLPG", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfVMAS->wchMinOfCOCO2OfLPG, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfVMAS->wchMinOfCOCO2OfLPG, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"MinOfCOCO2OfCNG", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfVMAS->wchMinOfCOCO2OfCNG, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfVMAS->wchMinOfCOCO2OfCNG, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OilTempLimit", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfVMAS->wchOilTempLimit, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfVMAS->wchOilTempLimit, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Remark", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestParametersOfVMAS->wchRemark, s.c_str());
				}
				else
				{
					wcscpy_s(pDboTestParametersOfVMAS->wchRemark, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved1", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestParametersOfVMAS->wchReserved1, s.c_str());
				}
				else
				{
					wcscpy_s(pDboTestParametersOfVMAS->wchReserved1, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved2", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestParametersOfVMAS->wchReserved2, s.c_str());
				}
				else
				{
					wcscpy_s(pDboTestParametersOfVMAS->wchReserved2, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved3", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestParametersOfVMAS->wchReserved3, s.c_str());
				}
				else
				{
					wcscpy_s(pDboTestParametersOfVMAS->wchReserved3, L"");
				}

				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboTestParametersOfLUGDOWNHEAVY(const wchar_t wchSql[SQLMAX], PTESTPARAMETERSOFLUGDOWNHEAVY const pDboTestParametersOfLUGDOWNHEAVY)
{
	assert(NULL != wchSql);
	assert(NULL != pDboTestParametersOfLUGDOWNHEAVY);

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			if (!pRecordset->adoEOF)
			{
				_variant_t v;
				wstring s;

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AutoID", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfLUGDOWNHEAVY->wchAutoID, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfLUGDOWNHEAVY->wchAutoID, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"MaxOfLowLoadPower", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfLUGDOWNHEAVY->wchMaxOfLowLoadPower, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfLUGDOWNHEAVY->wchMaxOfLowLoadPower, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"RollerVelocityChangeRate", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfLUGDOWNHEAVY->wchRollerVelocityChangeRate, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfLUGDOWNHEAVY->wchRollerVelocityChangeRate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"VehicleVelocityScanRange", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfLUGDOWNHEAVY->wchVehicleVelocityScanRange, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfLUGDOWNHEAVY->wchVehicleVelocityScanRange, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"SamplingTimeOfPowerScan", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfLUGDOWNHEAVY->wchSamplingTimeOfPowerScan, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfLUGDOWNHEAVY->wchSamplingTimeOfPowerScan, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"SamplingTimeOfOpacityTest", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfLUGDOWNHEAVY->wchSamplingTimeOfOpacityTest, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfLUGDOWNHEAVY->wchSamplingTimeOfOpacityTest, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"StableTimeOfPowerScan", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfLUGDOWNHEAVY->wchStableTimeOfPowerScan, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfLUGDOWNHEAVY->wchStableTimeOfPowerScan, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"StableTimeOfOpacityTest", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfLUGDOWNHEAVY->wchStableTimeOfOpacityTest, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfLUGDOWNHEAVY->wchStableTimeOfOpacityTest, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"IntervalOfTorque", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfLUGDOWNHEAVY->wchIntervalOfTorque, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfLUGDOWNHEAVY->wchIntervalOfTorque, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"IntervalOfVelocity", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfLUGDOWNHEAVY->wchIntervalOfVelocity, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfLUGDOWNHEAVY->wchIntervalOfVelocity, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PowerDiscountFactor", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfLUGDOWNHEAVY->wchPowerDiscountFactor, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfLUGDOWNHEAVY->wchPowerDiscountFactor, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OilTempLimit", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfLUGDOWNHEAVY->wchOilTempLimit, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfLUGDOWNHEAVY->wchOilTempLimit, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Remark", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestParametersOfLUGDOWNHEAVY->wchRemark, s.c_str());
				}
				else
				{
					wcscpy_s(pDboTestParametersOfLUGDOWNHEAVY->wchRemark, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved1", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestParametersOfLUGDOWNHEAVY->wchReserved1, s.c_str());
				}
				else
				{
					wcscpy_s(pDboTestParametersOfLUGDOWNHEAVY->wchReserved1, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved2", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestParametersOfLUGDOWNHEAVY->wchReserved2, s.c_str());
				}
				else
				{
					wcscpy_s(pDboTestParametersOfLUGDOWNHEAVY->wchReserved2, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved3", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestParametersOfLUGDOWNHEAVY->wchReserved3, s.c_str());
				}
				else
				{
					wcscpy_s(pDboTestParametersOfLUGDOWNHEAVY->wchReserved3, L"");
				}

				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}


DWORD GetDboTestParametersOfLUGDOWNLIGHT(const wchar_t wchSql[SQLMAX], PTESTPARAMETERSOFLUGDOWNLIGHT const pDboTestParametersOfLUGDOWNLIGHT)
{
	assert(NULL != wchSql);
	assert(NULL != pDboTestParametersOfLUGDOWNLIGHT);

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			if (!pRecordset->adoEOF)
			{
				_variant_t v;
				wstring s;

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AutoID", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfLUGDOWNLIGHT->wchAutoID, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfLUGDOWNLIGHT->wchAutoID, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"MaxOfLowLoadPower", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfLUGDOWNLIGHT->wchMaxOfLowLoadPower, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfLUGDOWNLIGHT->wchMaxOfLowLoadPower, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"RollerVelocityChangeRate", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfLUGDOWNLIGHT->wchRollerVelocityChangeRate, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfLUGDOWNLIGHT->wchRollerVelocityChangeRate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"VehicleVelocityScanRange", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfLUGDOWNLIGHT->wchVehicleVelocityScanRange, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfLUGDOWNLIGHT->wchVehicleVelocityScanRange, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"SamplingTimeOfPowerScan", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfLUGDOWNLIGHT->wchSamplingTimeOfPowerScan, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfLUGDOWNLIGHT->wchSamplingTimeOfPowerScan, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"SamplingTimeOfOpacityTest", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfLUGDOWNLIGHT->wchSamplingTimeOfOpacityTest, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfLUGDOWNLIGHT->wchSamplingTimeOfOpacityTest, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"StableTimeOfPowerScan", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfLUGDOWNLIGHT->wchStableTimeOfPowerScan, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfLUGDOWNLIGHT->wchStableTimeOfPowerScan, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"StableTimeOfOpacityTest", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfLUGDOWNLIGHT->wchStableTimeOfOpacityTest, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfLUGDOWNLIGHT->wchStableTimeOfOpacityTest, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"IntervalOfTorque", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfLUGDOWNLIGHT->wchIntervalOfTorque, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfLUGDOWNLIGHT->wchIntervalOfTorque, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"IntervalOfVelocity", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfLUGDOWNLIGHT->wchIntervalOfVelocity, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfLUGDOWNLIGHT->wchIntervalOfVelocity, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"PowerDiscountFactor", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfLUGDOWNLIGHT->wchPowerDiscountFactor, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfLUGDOWNLIGHT->wchPowerDiscountFactor, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OilTempLimit", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfLUGDOWNLIGHT->wchOilTempLimit, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfLUGDOWNLIGHT->wchOilTempLimit, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Remark", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestParametersOfLUGDOWNLIGHT->wchRemark, s.c_str());
				}
				else
				{
					wcscpy_s(pDboTestParametersOfLUGDOWNLIGHT->wchRemark, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved1", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestParametersOfLUGDOWNLIGHT->wchReserved1, s.c_str());
				}
				else
				{
					wcscpy_s(pDboTestParametersOfLUGDOWNLIGHT->wchReserved1, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved2", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestParametersOfLUGDOWNLIGHT->wchReserved2, s.c_str());
				}
				else
				{
					wcscpy_s(pDboTestParametersOfLUGDOWNLIGHT->wchReserved2, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved3", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestParametersOfLUGDOWNLIGHT->wchReserved3, s.c_str());
				}
				else
				{
					wcscpy_s(pDboTestParametersOfLUGDOWNLIGHT->wchReserved3, L"");
				}

				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboTestParametersOfDIS(const wchar_t wchSql[SQLMAX], PTESTPARAMETERSOFDIS const pDboTestParametersOfDIS)
{
	assert(NULL != wchSql);
	assert(NULL != pDboTestParametersOfDIS);

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			if (!pRecordset->adoEOF)
			{
				_variant_t v;
				wstring s;

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AutoID", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfDIS->wchAutoID, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfDIS->wchAutoID, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HISRevOfHeavyVehicle", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfDIS->wchHISRevOfHeavyVehicle, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfDIS->wchHISRevOfHeavyVehicle, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HISRevRangeOfHeavyVehicle", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfDIS->wchHISRevRangeOfHeavyVehicle, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfDIS->wchHISRevRangeOfHeavyVehicle, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HISRevOfLightVehicle", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfDIS->wchHISRevOfLightVehicle, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfDIS->wchHISRevOfLightVehicle, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"HISRevRangeOfLightVehicle", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfDIS->wchHISRevRangeOfLightVehicle, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfDIS->wchHISRevRangeOfLightVehicle, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"MinOfCOCO2OfGAS", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfDIS->wchMinOfCOCO2OfGAS, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfDIS->wchMinOfCOCO2OfGAS, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"MinOfCOCO2OfLPG", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfDIS->wchMinOfCOCO2OfLPG, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfDIS->wchMinOfCOCO2OfLPG, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"MinOfCOCO2OfCNG", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfDIS->wchMinOfCOCO2OfCNG, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfDIS->wchMinOfCOCO2OfCNG, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OilTempLimit", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfDIS->wchOilTempLimit, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfDIS->wchOilTempLimit, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Remark", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestParametersOfDIS->wchRemark, s.c_str());
				}
				else
				{
					wcscpy_s(pDboTestParametersOfDIS->wchRemark, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved1", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestParametersOfDIS->wchReserved1, s.c_str());
				}
				else
				{
					wcscpy_s(pDboTestParametersOfDIS->wchReserved1, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved2", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestParametersOfDIS->wchReserved2, s.c_str());
				}
				else
				{
					wcscpy_s(pDboTestParametersOfDIS->wchReserved2, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved3", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestParametersOfDIS->wchReserved3, s.c_str());
				}
				else
				{
					wcscpy_s(pDboTestParametersOfDIS->wchReserved3, L"");
				}

				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD SetDboTestParametersOfDIS(const TESTPARAMETERSOFDIS &dboTestParametersOfDIS)
{
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"select * from TestParametersOfDIS");
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if(pRecordset->adoEOF)
			{
				pRecordset->AddNew();    //添加新记录
			}

			wstring str;
			_variant_t v;

			str = dboTestParametersOfDIS.wchHISRevOfHeavyVehicle;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"HISRevOfHeavyVehicle", v);

			str = dboTestParametersOfDIS.wchHISRevRangeOfHeavyVehicle;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"HISRevRangeOfHeavyVehicle", v);

			str = dboTestParametersOfDIS.wchHISRevOfLightVehicle;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"HISRevOfLightVehicle", v);

			str = dboTestParametersOfDIS.wchHISRevRangeOfLightVehicle;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"HISRevRangeOfLightVehicle", v);

			str = dboTestParametersOfDIS.wchMinOfCOCO2OfGAS;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"MinOfCOCO2OfGAS", v);

			str = dboTestParametersOfDIS.wchMinOfCOCO2OfLPG;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"MinOfCOCO2OfLPG", v);

			str = dboTestParametersOfDIS.wchMinOfCOCO2OfCNG;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"MinOfCOCO2OfCNG", v);

			str = dboTestParametersOfDIS.wchOilTempLimit;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"OilTempLimit", v);

			str = dboTestParametersOfDIS.wchRemark;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Remark", v);

			str = dboTestParametersOfDIS.wchReserved1;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved1", v);

			str = dboTestParametersOfDIS.wchReserved2;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved2", v);

			str = dboTestParametersOfDIS.wchReserved3;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved3", v);

			pRecordset->Update();  // 保存到库中

			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboTestParametersOfFSUNHT(const wchar_t wchSql[SQLMAX], PTESTPARAMETERSOFFSUNHT const pDboTestParametersOfFSUNHT)
{
	assert(NULL != wchSql);
	assert(NULL != pDboTestParametersOfFSUNHT);

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			if (!pRecordset->adoEOF)
			{
				_variant_t v;
				wstring s;

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AutoID", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfFSUNHT->wchAutoID, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfFSUNHT->wchAutoID, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"RevFactor", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfFSUNHT->wchRevFactor, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfFSUNHT->wchRevFactor, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OilTempLimit", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfFSUNHT->wchOilTempLimit, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfFSUNHT->wchOilTempLimit, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Remark", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestParametersOfFSUNHT->wchRemark, s.c_str());
				}
				else
				{
					wcscpy_s(pDboTestParametersOfFSUNHT->wchRemark, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved1", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestParametersOfFSUNHT->wchReserved1, s.c_str());
				}
				else
				{
					wcscpy_s(pDboTestParametersOfFSUNHT->wchReserved1, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved2", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestParametersOfFSUNHT->wchReserved2, s.c_str());
				}
				else
				{
					wcscpy_s(pDboTestParametersOfFSUNHT->wchReserved2, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved3", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestParametersOfFSUNHT->wchReserved3, s.c_str());
				}
				else
				{
					wcscpy_s(pDboTestParametersOfFSUNHT->wchReserved3, L"");
				}

				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD SetDboTestParametersOfFSUNHT(const TESTPARAMETERSOFFSUNHT &dboTestParametersOfFSUNHT)
{
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"select * from TestParametersOfFSUNHT");
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if(pRecordset->adoEOF)
			{
				pRecordset->AddNew();    //添加新记录
			}

			wstring str;
			_variant_t v;

			str = dboTestParametersOfFSUNHT.wchRevFactor;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"RevFactor", v);

			str = dboTestParametersOfFSUNHT.wchOilTempLimit;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"OilTempLimit", v);

			str = dboTestParametersOfFSUNHT.wchRemark;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Remark", v);

			str = dboTestParametersOfFSUNHT.wchReserved1;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved1", v);

			str = dboTestParametersOfFSUNHT.wchReserved2;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved2", v);

			str = dboTestParametersOfFSUNHT.wchReserved3;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved3", v);

			pRecordset->Update();  // 保存到库中

			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboTestParametersOfFSUYD(const wchar_t wchSql[SQLMAX], PTESTPARAMETERSOFFSUYD const pDboTestParametersOfFSUYD)
{
	assert(NULL != wchSql);
	assert(NULL != pDboTestParametersOfFSUYD);

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			if (!pRecordset->adoEOF)
			{
				_variant_t v;
				wstring s;

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AutoID", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfFSUYD->wchAutoID, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfFSUYD->wchAutoID, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"RevFactor", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfFSUYD->wchRevFactor, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfFSUYD->wchRevFactor, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"OilTempLimit", v);
				if (VT_NULL != v.vt)
				{
					swprintf_s(pDboTestParametersOfFSUYD->wchOilTempLimit, NH_FLOAT_TO_WCHART, L"%.4f", (float)v);
				}
				else
				{
					wcscpy_s(pDboTestParametersOfFSUYD->wchOilTempLimit, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Remark", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestParametersOfFSUYD->wchRemark, s.c_str());
				}
				else
				{
					wcscpy_s(pDboTestParametersOfFSUYD->wchRemark, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved1", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestParametersOfFSUYD->wchReserved1, s.c_str());
				}
				else
				{
					wcscpy_s(pDboTestParametersOfFSUYD->wchReserved1, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved2", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestParametersOfFSUYD->wchReserved2, s.c_str());
				}
				else
				{
					wcscpy_s(pDboTestParametersOfFSUYD->wchReserved2, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved3", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestParametersOfFSUYD->wchReserved3, s.c_str());
				}
				else
				{
					wcscpy_s(pDboTestParametersOfFSUYD->wchReserved3, L"");
				}

				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD SetDboTestParametersOfFSUYD(const TESTPARAMETERSOFFSUYD &dboTestParametersOfFSUYD)
{
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"select * from TestParametersOfFSUYD");
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if(pRecordset->adoEOF)
			{
				pRecordset->AddNew();    //添加新记录
			}

			wstring str;
			_variant_t v;

			str = dboTestParametersOfFSUYD.wchRevFactor;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"RevFactor", v);

			str = dboTestParametersOfFSUYD.wchOilTempLimit;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"OilTempLimit", v);

			str = dboTestParametersOfFSUYD.wchRemark;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Remark", v);

			str = dboTestParametersOfFSUYD.wchReserved1;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved1", v);

			str = dboTestParametersOfFSUYD.wchReserved2;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved2", v);

			str = dboTestParametersOfFSUYD.wchReserved3;
			if( 0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved3", v);

			pRecordset->Update();  // 保存到库中

			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboTestPhoto(const wchar_t *const pwchReportNumber, BYTE **const ppbPhoto, const UINT *puiPhotoLengthInBytes, UINT *const puiActualLengthInBytes, const BYTE bPhotoNumber)
{
	assert(NULL != pwchReportNumber);
	assert(NULL != ppbPhoto);
	assert(NULL != puiPhotoLengthInBytes);
	assert(NULL != puiActualLengthInBytes);
	assert(bPhotoNumber <= 5);  // 数据库最多只有5张图片

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		wchar_t wchSql[SQLMAX];
		ZeroMemory(wchSql, sizeof(wchSql));
		_snwprintf_s(wchSql, _countof(wchSql), _TRUNCATE, L"select ReportNumber,Photo1,Photo2,Photo3,Photo4,Photo5 from TestPhoto where ReportNumber = '%s'", pwchReportNumber);

		_RecordsetPtr pRecordset(NULL);
		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			if (!pRecordset->adoEOF)
			{
				for (BYTE b=0; b<bPhotoNumber; b++)
				{
					wchar_t wchFieldName[10];
					ZeroMemory(wchFieldName, sizeof(wchFieldName));
					_snwprintf_s(wchFieldName, _countof(wchFieldName), _TRUNCATE, L"Photo%hhu", b+1);

					const long lActualSize = pRecordset->GetFields()->GetItem(wchFieldName)->ActualSize;
					// 记录实际数据大小
					puiActualLengthInBytes[b] = static_cast<UINT>(lActualSize);
					if (lActualSize>0 && lActualSize<=(long)(puiPhotoLengthInBytes[b]))
					{
						_variant_t varBLOB;
						varBLOB = pRecordset->GetFields()->GetItem(wchFieldName)->GetChunk(lActualSize);
						if (varBLOB.vt == (VT_ARRAY|VT_UI1))
						{
							char *pBuf(NULL);
							SafeArrayAccessData(varBLOB.parray, (void **)&pBuf);
							assert(NULL != ppbPhoto[b]);
							memcpy_s(ppbPhoto[b], puiPhotoLengthInBytes[b], pBuf, lActualSize);
							SafeArrayUnaccessData(varBLOB.parray);
						}
						dwReturn = 0x01;
					}
					else
					{
						dwReturn = 0x02;
					}
				}
			}

			//	const long lActualSize = pRecordset->GetFields()->GetItem(L"Photo1")->ActualSize;
			//	if (NULL != plActualLengthInBytes)
			//	{
			//		// 记录实际数据大小
			//		*plActualLengthInBytes = lActualSize;
			//	}
			//	if (lActualSize>0 && lActualSize<=(long)uiPhotoLengthInBytes)
			//	{
			//		_variant_t varBLOB;
			//		varBLOB = pRecordset->GetFields()->GetItem(L"Photo1")->GetChunk(lActualSize);
			//		if (varBLOB.vt == (VT_ARRAY|VT_UI1))
			//		{
			//			char *pBuf(NULL);
			//			SafeArrayAccessData(varBLOB.parray, (void **)&pBuf);
			//			memcpy_s(pbPhoto, uiPhotoLengthInBytes, pBuf, lActualSize);
			//			SafeArrayUnaccessData(varBLOB.parray);
			//			//for (long lIndex=0; lIndex<*plDataSize; lIndex++)
			//			//{
			//			//	SafeArrayGetElement(varBLOB.parray, &lIndex, &pbPhoto[lIndex]);
			//			//}
			//		}
			//		dwReturn = 0x01;
			//	}
			//	else
			//	{
			//		dwReturn = 0x02;
			//	}
			//}
			//else
			//{
			//	dwReturn = 0x00;
			//}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboTestPhoto(const wchar_t *const pwchRunningNumber, const wchar_t *const pwchReportNumber, BYTE **const ppbPhoto, const UINT *puiPhotoLengthInBytes, UINT *const puiActualLengthInBytes, const BYTE bPhotoNumber)
{
	assert(NULL != pwchRunningNumber);
	assert(NULL != pwchReportNumber);
	assert(NULL != ppbPhoto);
	assert(NULL != puiPhotoLengthInBytes);
	assert(NULL != puiActualLengthInBytes);
	assert(bPhotoNumber <= 5);  // 数据库最多只有5张图片

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		wchar_t wchSql[SQLMAX];
		ZeroMemory(wchSql, sizeof(wchSql));
		_snwprintf_s(wchSql, _countof(wchSql), _TRUNCATE, L"select RunningNumber,ReportNumber,Photo1,Photo2,Photo3,Photo4,Photo5 from TestPhoto where RunningNumber = '%s'", pwchRunningNumber);

		_RecordsetPtr pRecordset(NULL);
		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			if (!pRecordset->adoEOF)
			{
				for (BYTE b=0; b<bPhotoNumber; b++)
				{
					wchar_t wchFieldName[10];
					ZeroMemory(wchFieldName, sizeof(wchFieldName));
					_snwprintf_s(wchFieldName, _countof(wchFieldName), _TRUNCATE, L"Photo%hhu", b+1);

					const long lActualSize = pRecordset->GetFields()->GetItem(wchFieldName)->ActualSize;
					// 记录实际数据大小
					puiActualLengthInBytes[b] = static_cast<UINT>(lActualSize);
					if (lActualSize>0 && lActualSize<=(long)(puiPhotoLengthInBytes[b]))
					{
						_variant_t varBLOB;
						varBLOB = pRecordset->GetFields()->GetItem(wchFieldName)->GetChunk(lActualSize);
						if (varBLOB.vt == (VT_ARRAY|VT_UI1))
						{
							char *pBuf(NULL);
							SafeArrayAccessData(varBLOB.parray, (void **)&pBuf);
							assert(NULL != ppbPhoto[b]);
							memcpy_s(ppbPhoto[b], puiPhotoLengthInBytes[b], pBuf, lActualSize);
							SafeArrayUnaccessData(varBLOB.parray);
						}
						dwReturn = 0x01;
					}
					else
					{
						dwReturn = 0x02;
					}
				}
			}

			//	const long lActualSize = pRecordset->GetFields()->GetItem(L"Photo1")->ActualSize;
			//	if (NULL != plActualLengthInBytes)
			//	{
			//		// 记录实际数据大小
			//		*plActualLengthInBytes = lActualSize;
			//	}
			//	if (lActualSize>0 && lActualSize<=(long)uiPhotoLengthInBytes)
			//	{
			//		_variant_t varBLOB;
			//		varBLOB = pRecordset->GetFields()->GetItem(L"Photo1")->GetChunk(lActualSize);
			//		if (varBLOB.vt == (VT_ARRAY|VT_UI1))
			//		{
			//			char *pBuf(NULL);
			//			SafeArrayAccessData(varBLOB.parray, (void **)&pBuf);
			//			memcpy_s(pbPhoto, uiPhotoLengthInBytes, pBuf, lActualSize);
			//			SafeArrayUnaccessData(varBLOB.parray);
			//			//for (long lIndex=0; lIndex<*plDataSize; lIndex++)
			//			//{
			//			//	SafeArrayGetElement(varBLOB.parray, &lIndex, &pbPhoto[lIndex]);
			//			//}
			//		}
			//		dwReturn = 0x01;
			//	}
			//	else
			//	{
			//		dwReturn = 0x02;
			//	}
			//}
			//else
			//{
			//	dwReturn = 0x00;
			//}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD SetDboTestPhoto(const wchar_t *const pwchReportNumber, BYTE **const ppbPhoto, const UINT *puiPhotoLengthInBytes, const BYTE bPhotoNumber)
{
	assert(NULL != pwchReportNumber);
	assert(NULL != ppbPhoto);
	assert(NULL != puiPhotoLengthInBytes);
	assert(bPhotoNumber <= 5);  // 数据库最多只有5张图片

	// 返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		wchar_t wchSql[SQLMAX];
		ZeroMemory(wchSql, sizeof(wchSql));
		_snwprintf_s(wchSql, _countof(wchSql), _TRUNCATE, L"select ReportNumber,Photo1,Photo2,Photo3,Photo4,Photo5 from TestPhoto where ReportNumber = '%s'", pwchReportNumber);

		_RecordsetPtr pRecordset(NULL);
		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if (pRecordset->adoEOF)
			{
				// 添加新记录
				pRecordset->AddNew();
			}

			// 报告编号
			_variant_t v;
			if (0 == wcscmp(pwchReportNumber, L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)(pwchReportNumber);
			}
			PutFieldData(pRecordset, L"ReportNumber", v);

			for (int b=0; b<bPhotoNumber; b++)
			{
				wchar_t wchFieldName[10];
				ZeroMemory(wchFieldName, sizeof(wchFieldName));
				_snwprintf_s(wchFieldName, _countof(wchFieldName), _TRUNCATE, L"Photo%hhu", b+1);

				if (puiPhotoLengthInBytes[b] <= 0)
				{
					v.ChangeType(VT_NULL);
					PutFieldData(pRecordset, wchFieldName, v);
				}
				else
				{
					// 转为二进制格式
					VARIANT varBLOB;
					SAFEARRAYBOUND saBound[1];
					saBound[0].lLbound = 0;
					saBound[0].cElements = puiPhotoLengthInBytes[b];
					SAFEARRAY *pSA = SafeArrayCreate(VT_UI1, 1, saBound);
					for (long l=0; l<(long)(puiPhotoLengthInBytes[b]); l++)
					{
						SafeArrayPutElement(pSA, &l, (void*)&(ppbPhoto[b][l]));
					}
					varBLOB.vt = VT_ARRAY|VT_UI1;
					varBLOB.parray = pSA ;
					pRecordset->GetFields()->GetItem(wchFieldName)->AppendChunk(varBLOB);
					VariantClear(&varBLOB);
				}
			}

			//// 转为二进制格式
			//VARIANT varBLOB;
			//SAFEARRAYBOUND saBound[1];
			//saBound[0].lLbound = 0;
			//saBound[0].cElements = uiPhotoLengthInBytes;
			//SAFEARRAY *pSA = SafeArrayCreate(VT_UI1, 1, saBound);
			//for (long l=0; l<(long)uiPhotoLengthInBytes; l++)
			//{
			//	SafeArrayPutElement(pSA, &l, (void*)&pbPhoto[l]);
			//}
			//varBLOB.vt = VT_ARRAY|VT_UI1;
			//varBLOB.parray = pSA ;
			//pRecordset->GetFields()->GetItem(L"Photo1")->AppendChunk(varBLOB);
			//VariantClear(&varBLOB);

			// 保存到库中
			pRecordset->Update();

			// 关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD SetDboTestPhoto(const wchar_t *const pwchRunningNumber, const wchar_t *const pwchReportNumber, BYTE **const ppbPhoto, const UINT *puiPhotoLengthInBytes, const BYTE bPhotoNumber)
{
	assert(NULL != pwchRunningNumber);
	assert(NULL != pwchReportNumber);
	assert(NULL != ppbPhoto);
	assert(NULL != puiPhotoLengthInBytes);
	assert(bPhotoNumber <= 5);  // 数据库最多只有5张图片

	// 返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		wchar_t wchSql[SQLMAX];
		ZeroMemory(wchSql, sizeof(wchSql));
		_snwprintf_s(wchSql, _countof(wchSql), _TRUNCATE, L"select RunningNumber,ReportNumber,Photo1,Photo2,Photo3,Photo4,Photo5 from TestPhoto where RunningNumber = '%s'", pwchRunningNumber);

		_RecordsetPtr pRecordset(NULL);
		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if (pRecordset->adoEOF)
			{
				// 添加新记录
				pRecordset->AddNew();
			}

			_variant_t v;

			// 流水号
			if (0 == wcscmp(pwchRunningNumber, L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)(pwchRunningNumber);
			}
			PutFieldData(pRecordset, L"RunningNumber", v);

			// 报告编号
			if (0 == wcscmp(pwchReportNumber, L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)(pwchReportNumber);
			}
			PutFieldData(pRecordset, L"ReportNumber", v);

			for (int b=0; b<bPhotoNumber; b++)
			{
				wchar_t wchFieldName[10];
				ZeroMemory(wchFieldName, sizeof(wchFieldName));
				_snwprintf_s(wchFieldName, _countof(wchFieldName), _TRUNCATE, L"Photo%hhu", b+1);

				if (puiPhotoLengthInBytes[b] <= 0)
				{
					v.ChangeType(VT_NULL);
					PutFieldData(pRecordset, wchFieldName, v);
				}
				else
				{
					// 转为二进制格式
					VARIANT varBLOB;
					SAFEARRAYBOUND saBound[1];
					saBound[0].lLbound = 0;
					saBound[0].cElements = puiPhotoLengthInBytes[b];
					SAFEARRAY *pSA = SafeArrayCreate(VT_UI1, 1, saBound);
					for (long l=0; l<(long)(puiPhotoLengthInBytes[b]); l++)
					{
						SafeArrayPutElement(pSA, &l, (void*)&(ppbPhoto[b][l]));
					}
					varBLOB.vt = VT_ARRAY|VT_UI1;
					varBLOB.parray = pSA ;
					pRecordset->GetFields()->GetItem(wchFieldName)->AppendChunk(varBLOB);
					VariantClear(&varBLOB);
				}
			}

			//// 转为二进制格式
			//VARIANT varBLOB;
			//SAFEARRAYBOUND saBound[1];
			//saBound[0].lLbound = 0;
			//saBound[0].cElements = uiPhotoLengthInBytes;
			//SAFEARRAY *pSA = SafeArrayCreate(VT_UI1, 1, saBound);
			//for (long l=0; l<(long)uiPhotoLengthInBytes; l++)
			//{
			//	SafeArrayPutElement(pSA, &l, (void*)&pbPhoto[l]);
			//}
			//varBLOB.vt = VT_ARRAY|VT_UI1;
			//varBLOB.parray = pSA ;
			//pRecordset->GetFields()->GetItem(L"Photo1")->AppendChunk(varBLOB);
			//VariantClear(&varBLOB);

			// 保存到库中
			pRecordset->Update();

			// 关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD UpdateTestPhoto(const wchar_t *const pwchReportNumber, const wchar_t *const pwchFieldName, const LPSYSTEMTIME lpst)
{
	assert(NULL != pwchReportNumber);
	assert(NULL != pwchFieldName);
	assert(NULL != lpst);

	// 返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		wchar_t wchSql[SQLMAX];
		ZeroMemory(wchSql, sizeof(wchSql));
		_snwprintf_s(wchSql, _countof(wchSql), _TRUNCATE
			, L"Update TestPhoto Set %s='%04hu-%02hu-%02hu %02hu:%02hu:%02hu' where ReportNumber = '%s'"
			, pwchFieldName, lpst->wYear, lpst->wMonth, lpst->wDay, lpst->wHour, lpst->wMinute, lpst->wSecond, pwchReportNumber);

		try
		{
			pConnection->Execute((_bstr_t)wchSql, NULL, adCmdText);
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD UpdateTestPhoto(const wchar_t *const pwchRunningNumber, const wchar_t *const pwchReportNumber, const wchar_t *const pwchFieldName, const LPSYSTEMTIME lpst)
{
	assert(NULL != pwchRunningNumber);
	assert(NULL != pwchReportNumber);
	assert(NULL != pwchFieldName);
	assert(NULL != lpst);

	// 返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		wchar_t wchSql[SQLMAX];
		ZeroMemory(wchSql, sizeof(wchSql));
		_snwprintf_s(wchSql, _countof(wchSql), _TRUNCATE
			, L"Update TestPhoto Set %s='%04hu-%02hu-%02hu %02hu:%02hu:%02hu' where RunningNumber = '%s'"
			, pwchFieldName, lpst->wYear, lpst->wMonth, lpst->wDay, lpst->wHour, lpst->wMinute, lpst->wSecond, pwchRunningNumber);

		try
		{
			pConnection->Execute((_bstr_t)wchSql, NULL, adCmdText);
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboTestAmount(const wchar_t * const pwchLineNumber, const SYSTEMTIME &st, PTESTAMOUNT const pDboTestAmount)
{
	assert(NULL != pwchLineNumber);

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		wchar_t wchSql[SQLMAX];
		ZeroMemory(wchSql, sizeof(wchSql));
		_snwprintf_s(wchSql, _countof(wchSql), _TRUNCATE, L"select * from TestAmount where LineNumber=\'%s\' and TestDate=\'%04hu-%02hu-%02hu 00:00:00\'", pwchLineNumber, st.wYear, st.wMonth, st.wDay);

		_RecordsetPtr pRecordset(NULL);
		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if (pRecordset->adoEOF)
			{
				// 没有当天记录
				;
			}
			else
			{
				_variant_t v;
				wstring s;

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AutoID", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestAmount->wchAutoID, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboTestAmount->wchAutoID,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LineNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestAmount->wchLineNumber, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestAmount->wchLineNumber, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"TestDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestAmount->wchTestDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d",dt.wYear, dt.wMonth, dt.wDay);
					wcscpy_s(pDboTestAmount->wchTestDate, wch);
				}
				else
				{
					_tcscpy_s(pDboTestAmount->wchTestDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"ASMAmount", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestAmount->wchASMAmount, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboTestAmount->wchASMAmount, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"VMASAmount", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestAmount->wchVMASAmount, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboTestAmount->wchVMASAmount, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LUGDOWNAmount", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestAmount->wchLUGDOWNAmount, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboTestAmount->wchLUGDOWNAmount, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"DISAmount", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestAmount->wchDISAmount, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboTestAmount->wchDISAmount, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FSUNHTAmount", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestAmount->wchFSUNHTAmount, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboTestAmount->wchFSUNHTAmount, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FSUYDAmount", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestAmount->wchFSUYDAmount, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboTestAmount->wchFSUYDAmount, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AVFSUAmount", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestAmount->wchAVFSUAmount, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboTestAmount->wchAVFSUAmount, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"MIAmount", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestAmount->wchMIAmount, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboTestAmount->wchMIAmount, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LUGDOWNHeavyAmount", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestAmount->wchLUGDOWNHeavyAmount, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboTestAmount->wchLUGDOWNHeavyAmount, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LUGDOWNLightAmount", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestAmount->wchLUGDOWNLightAmount, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboTestAmount->wchLUGDOWNLightAmount, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AllAmount", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboTestAmount->wchAllAmount, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboTestAmount->wchAllAmount, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Remark", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestAmount->wchRemark, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestAmount->wchRemark, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved1", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestAmount->wchReserved1, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestAmount->wchReserved1, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved2", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestAmount->wchReserved2, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestAmount->wchReserved2, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved3", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboTestAmount->wchReserved3, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboTestAmount->wchReserved3, L"");
				}
			}
			dwReturn = 0x00;
		}
		catch(_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD SetDboTestAmount(const wchar_t * const pwchLineNumber, const SYSTEMTIME &st, const TESTAMOUNT &dboTestAmount)
{
	assert(NULL != pwchLineNumber);
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			ZeroMemory(wchSql, sizeof(wchSql));
			_snwprintf_s(wchSql, _countof(wchSql), _TRUNCATE, L"select * from TestAmount where LineNumber=\'%s\' and TestDate=\'%04hd-%02hd-%02hd 00:00:00\'", pwchLineNumber, st.wYear, st.wMonth, st.wDay);

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			// 有，update
			// 无，insert
			if(pRecordset->adoEOF)
			{
				// 添加新记录
				pRecordset->AddNew();
			}

			wstring str;
			_variant_t v;

			//检测线编号
			str = pwchLineNumber;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"LineNumber", v);

			// 检测日期
			wchar_t wchDateTime[MAX_PATH];
			ZeroMemory(wchDateTime, sizeof(wchDateTime));
			wsprintfW(wchDateTime, L"%04hu-%02hu-%02hu 00:00:00", st.wYear, st.wMonth, st.wDay);
			str = wchDateTime;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"TestDate", v);

			// ASM检测次数
			str = dboTestAmount.wchASMAmount;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"ASMAmount", v);

			// VMAS检测次数
			str = dboTestAmount.wchVMASAmount;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"VMASAmount", v);

			// LUGDOWN检测次数
			str = dboTestAmount.wchLUGDOWNAmount;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"LUGDOWNAmount", v);

			// DIS检测次数
			str = dboTestAmount.wchDISAmount;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"DISAmount", v);

			// NHT检测次数
			str = dboTestAmount.wchFSUNHTAmount;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"FSUNHTAmount", v);

			// YD检测次数
			str = dboTestAmount.wchFSUYDAmount;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"FSUYDAmount", v);

			// AVFSU检测次数
			str = dboTestAmount.wchAVFSUAmount;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"AVFSUAmount", v);

			// MI检测次数
			str = dboTestAmount.wchMIAmount;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"MIAmount", v);

			// LUGDOWNHeavy检测次数
			str = dboTestAmount.wchLUGDOWNHeavyAmount;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"LUGDOWNHeavyAmount", v);

			// LUGDOWNLight检测次数
			str = dboTestAmount.wchLUGDOWNLightAmount;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"LUGDOWNLightAmount", v);

			// 检测总次数
			str = dboTestAmount.wchAllAmount;
			if ( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"AllAmount", v);

			// 备注
			str = dboTestAmount.wchRemark;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Remark", v);

			// 保留字段,以后备用
			str = dboTestAmount.wchReserved1;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved1", v);

			// 保留字段,以后备用
			str = dboTestAmount.wchReserved2;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved2", v);

			// 保留字段,以后备用
			str = dboTestAmount.wchReserved3;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved3", v);

			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}


	return dwReturn;
}

DWORD GetDboStationTestAmount(const SYSTEMTIME &st, PTESTAMOUNT const pDboStationTestAmount)
{
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		wchar_t wchSql[SQLMAX];
		ZeroMemory(wchSql, sizeof(wchSql));
		_snwprintf_s(wchSql, _countof(wchSql), _TRUNCATE, L"select * from StationTestAmount where TestDate=\'%04hu-%02hu-%02hu 00:00:00\'", st.wYear, st.wMonth, st.wDay);

		_RecordsetPtr pRecordset(NULL);
		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if (pRecordset->adoEOF)
			{
				// 没有当天记录
				;
			}
			else
			{
				_variant_t v;
				wstring s;

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AutoID", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboStationTestAmount->wchAutoID, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboStationTestAmount->wchAutoID,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"TestDate", v);
				if(VT_NULL != v.vt)
				{
					/*s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboStationTestAmount->wchTestDate, s.c_str());*/

					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d",dt.wYear, dt.wMonth, dt.wDay);
					wcscpy_s(pDboStationTestAmount->wchTestDate, wch);
				}
				else
				{
					_tcscpy_s(pDboStationTestAmount->wchTestDate, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"ASMAmount", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboStationTestAmount->wchASMAmount, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboStationTestAmount->wchASMAmount, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"VMASAmount", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboStationTestAmount->wchVMASAmount, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboStationTestAmount->wchVMASAmount, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"LUGDOWNAmount", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboStationTestAmount->wchLUGDOWNAmount, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboStationTestAmount->wchLUGDOWNAmount, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"DISAmount", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboStationTestAmount->wchDISAmount, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboStationTestAmount->wchDISAmount, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FSUNHTAmount", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboStationTestAmount->wchFSUNHTAmount, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboStationTestAmount->wchFSUNHTAmount, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"FSUYDAmount", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboStationTestAmount->wchFSUYDAmount, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboStationTestAmount->wchFSUYDAmount, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AVFSUAmount", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboStationTestAmount->wchAVFSUAmount, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboStationTestAmount->wchAVFSUAmount, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"MIAmount", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboStationTestAmount->wchMIAmount, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboStationTestAmount->wchMIAmount, L"");
				}

				//v.ChangeType(VT_NULL);
				//GetFieldData(pRecordset, L"LUGDOWNHeavyAmount", v);
				//if(VT_NULL != v.vt)
				//{
				//	swprintf_s(pDboStationTestAmount->wchLUGDOWNHeavyAmount, NH_INT_TO_WCHART, L"%d", (int)v);
				//}
				//else
				//{
				//	_tcscpy_s(pDboStationTestAmount->wchLUGDOWNHeavyAmount, L"");
				//}

				//v.ChangeType(VT_NULL);
				//GetFieldData(pRecordset, L"LUGDOWNLightAmount", v);
				//if(VT_NULL != v.vt)
				//{
				//	swprintf_s(pDboStationTestAmount->wchLUGDOWNLightAmount, NH_INT_TO_WCHART, L"%d", (int)v);
				//}
				//else
				//{
				//	_tcscpy_s(pDboStationTestAmount->wchLUGDOWNLightAmount, L"");
				//}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AllAmount", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pDboStationTestAmount->wchAllAmount, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pDboStationTestAmount->wchAllAmount, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Remark", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboStationTestAmount->wchRemark, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboStationTestAmount->wchRemark, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved1", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboStationTestAmount->wchReserved1, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboStationTestAmount->wchReserved1, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved2", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboStationTestAmount->wchReserved2, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboStationTestAmount->wchReserved2, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved3", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pDboStationTestAmount->wchReserved3, s.c_str());
				}
				else
				{
					_tcscpy_s(pDboStationTestAmount->wchReserved3, L"");
				}
			}
			dwReturn = 0x00;
		}
		catch(_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD SetDboStationTestAmount(const SYSTEMTIME &st, const TESTAMOUNT &dboStationTestAmount)
{
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			ZeroMemory(wchSql, sizeof(wchSql));
			_snwprintf_s(wchSql, _countof(wchSql), _TRUNCATE, L"select * from StationTestAmount where TestDate=\'%04hd-%02hd-%02hd 00:00:00\'", st.wYear, st.wMonth, st.wDay);

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			// 有，update
			// 无，insert
			if(pRecordset->adoEOF)
			{
				// 添加新记录
				pRecordset->AddNew();
			}

			wstring str;
			_variant_t v;

			// 检测日期
			wchar_t wchDateTime[MAX_PATH];
			ZeroMemory(wchDateTime, sizeof(wchDateTime));
			wsprintfW(wchDateTime, L"%04hu-%02hu-%02hu 00:00:00", st.wYear, st.wMonth, st.wDay);
			str = wchDateTime;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"TestDate", v);

			// ASM检测次数
			str = dboStationTestAmount.wchASMAmount;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"ASMAmount", v);

			// VMAS检测次数
			str = dboStationTestAmount.wchVMASAmount;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"VMASAmount", v);

			// LUGDOWN检测次数
			str = dboStationTestAmount.wchLUGDOWNAmount;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"LUGDOWNAmount", v);

			// DIS检测次数
			str = dboStationTestAmount.wchDISAmount;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"DISAmount", v);

			// NHT检测次数
			str = dboStationTestAmount.wchFSUNHTAmount;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"FSUNHTAmount", v);

			// YD检测次数
			str = dboStationTestAmount.wchFSUYDAmount;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"FSUYDAmount", v);

			// AVFSU检测次数
			str = dboStationTestAmount.wchAVFSUAmount;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"AVFSUAmount", v);

			// MI检测次数
			str = dboStationTestAmount.wchMIAmount;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"MIAmount", v);

			//// LUGDOWNHeavy检测次数
			//str = dboStationTestAmount.wchLUGDOWNHeavyAmount;
			//if( 0 ==str.compare(L""))
			//{
			//	v.ChangeType(VT_NULL);
			//}
			//else
			//{
			//	v = static_cast<int>(_wtoi(str.c_str()));
			//}
			//PutFieldData(pRecordset, L"LUGDOWNHeavyAmount", v);

			//// LUGDOWNLight检测次数
			//str = dboStationTestAmount.wchLUGDOWNLightAmount;
			//if( 0 ==str.compare(L""))
			//{
			//	v.ChangeType(VT_NULL);
			//}
			//else
			//{
			//	v = static_cast<int>(_wtoi(str.c_str()));
			//}
			//PutFieldData(pRecordset, L"LUGDOWNLightAmount", v);

			// 检测总次数
			str = dboStationTestAmount.wchAllAmount;
			if ( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<int>(_wtoi(str.c_str()));
			}
			PutFieldData(pRecordset, L"AllAmount", v);

			// 备注
			str = dboStationTestAmount.wchRemark;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Remark", v);

			// 保留字段,以后备用
			str = dboStationTestAmount.wchReserved1;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved1", v);

			// 保留字段,以后备用
			str = dboStationTestAmount.wchReserved2;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved2", v);

			// 保留字段,以后备用
			str = dboStationTestAmount.wchReserved3;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved3", v);

			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}


	return dwReturn;
}

DWORD GetDboWhiteList(const wchar_t * const pwchPlateNumber, const wchar_t * const pwchPlateType)
{
	assert(NULL != pwchPlateNumber);
	assert(NULL != pwchPlateType);

	DWORD dwReturn(0xff);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		wchar_t wchSql[SQLMAX];
		ZeroMemory(wchSql, sizeof(wchSql));
		// T1 白名单表
		// A 车牌号码字段
		// B 车牌类型字段
		_snwprintf_s(wchSql, _countof(wchSql), _TRUNCATE, L"select * from T1 where A = '%s' and B = '%s'", pwchPlateNumber, pwchPlateType);

		_RecordsetPtr pRecordset(NULL);
		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			// 车辆在白名单里
			if (!pRecordset->adoEOF)
			{
				dwReturn = 0x00;
			}


		}
		catch(_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboRepeat(const wchar_t * const pwchPlateNumber, const wchar_t * const pwchPlateType, const wchar_t * const pwchTestType, wchar_t * const pwchReportNumber)
{
	assert(NULL != pwchPlateNumber);
	assert(NULL != pwchPlateType);

	DWORD dwReturn(0xff);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		wchar_t wchSql[SQLMAX];
		ZeroMemory(wchSql, sizeof(wchSql));
		// T2 重复性表
		// A 车牌号码字段
		// B 车牌类型字段
		_snwprintf_s(wchSql, _countof(wchSql), _TRUNCATE, L"select * from T2 where A = '%s' and B = '%s'", pwchPlateNumber, pwchPlateType);

		_RecordsetPtr pRecordset(NULL);
		_RecordsetPtr pRecordset1(NULL);
		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			// 车辆在白名单里
			if (!pRecordset->adoEOF)
			{
				wchar_t wchTestType[50];
				if (0 == wcscmp(pwchTestType, L"稳态"))
				{
					wcscpy_s(wchTestType, L"1");
				}
				else if (0 == wcscmp(pwchTestType, L"简易瞬态"))
				{
					wcscpy_s(wchTestType, L"2");
				}
				else if (0 == wcscmp(pwchTestType, L"加载减速"))
				{
					wcscpy_s(wchTestType, L"3");
				}
				else if (0 == wcscmp(pwchTestType, L"双怠速"))
				{
					wcscpy_s(wchTestType, L"4");
				}
				else if (0 == wcscmp(pwchTestType, L"不透光自由加速"))
				{
					wcscpy_s(wchTestType, L"5");
				}
				else if (0 == wcscmp(pwchTestType, L"滤纸式自由加速"))
				{
					wcscpy_s(wchTestType, L"6");
				}
				else if (0 == wcscmp(pwchTestType, L"农用车自由加速"))
				{
					wcscpy_s(wchTestType, L"7");
				}
				else if (0 == wcscmp(pwchTestType, L"摩托车怠速"))
				{
					wcscpy_s(wchTestType, L"8");
				}
				else if (0 == wcscmp(pwchTestType, L"摩托车双怠速"))
				{
					wcscpy_s(wchTestType, L"9");
				}

				// 此车辆已经检测过，有记录
				_snwprintf_s(wchSql, _countof(wchSql), _TRUNCATE, L"select top 1 * from TestLog where PlateNumber = '%s'and PlateType = '%s'\
																   and TestType = '%s' and TestState = '5' order by TestEndTime desc", pwchPlateNumber, pwchPlateType, wchTestType);

				pRecordset1.CreateInstance(L"ADODB.Recordset");
				pRecordset1->Open((_bstr_t)wchSql, 
					_variant_t((IDispatch*)pConnection, true), 
					adOpenStatic, 
					adLockOptimistic, 
					adCmdText);

				if (!pRecordset1->adoEOF)
				{

					_variant_t v;
					wstring s;
					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset1, L"ReportNumber", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						//swprintf(pwchReportNumber, L"%s", s.c_str());
						int n = sizeof(pwchReportNumber);
						int k = sizeof(wchar_t);
						wcscpy_s(pwchReportNumber, 50, s.c_str());
					}
					else
					{
						wcscpy_s(pwchReportNumber, sizeof(pwchReportNumber)/sizeof(wchar_t), L"");
					}

					dwReturn = 0x00;
				}
			}


		}
		catch(_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}

			//关闭记录集
			if (NULL != pRecordset1 && adStateClosed != pRecordset1->State)
			{
				pRecordset1->Close();
			}
			if (NULL != pRecordset1)
			{
				pRecordset1.Release();
				pRecordset1 = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboRepeat(const wchar_t * const pwchPlateNumber, const wchar_t * const pwchPlateType, const wchar_t * const pwchTestType, wchar_t * const pwchRunningNumber, wchar_t * const pwchReportNumber)
{
	assert(NULL != pwchPlateNumber);
	assert(NULL != pwchPlateType);

	DWORD dwReturn(0xff);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		wchar_t wchSql[SQLMAX];
		ZeroMemory(wchSql, sizeof(wchSql));
		// T2 重复性表
		// A 车牌号码字段
		// B 车牌类型字段
		_snwprintf_s(wchSql, _countof(wchSql), _TRUNCATE, L"select * from T2 where A = '%s' and B = '%s'", pwchPlateNumber, pwchPlateType);

		_RecordsetPtr pRecordset(NULL);
		_RecordsetPtr pRecordset1(NULL);
		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			// 车辆在白名单里
			if (!pRecordset->adoEOF)
			{
				wchar_t wchTestType[50];
				if (0 == wcscmp(pwchTestType, L"稳态"))
				{
					wcscpy_s(wchTestType, L"1");
				}
				else if (0 == wcscmp(pwchTestType, L"简易瞬态"))
				{
					wcscpy_s(wchTestType, L"2");
				}
				else if (0 == wcscmp(pwchTestType, L"加载减速"))
				{
					wcscpy_s(wchTestType, L"3");
				}
				else if (0 == wcscmp(pwchTestType, L"双怠速"))
				{
					wcscpy_s(wchTestType, L"4");
				}
				else if (0 == wcscmp(pwchTestType, L"不透光自由加速"))
				{
					wcscpy_s(wchTestType, L"5");
				}
				else if (0 == wcscmp(pwchTestType, L"滤纸式自由加速"))
				{
					wcscpy_s(wchTestType, L"6");
				}
				else if (0 == wcscmp(pwchTestType, L"农用车自由加速"))
				{
					wcscpy_s(wchTestType, L"7");
				}
				else if (0 == wcscmp(pwchTestType, L"摩托车怠速"))
				{
					wcscpy_s(wchTestType, L"8");
				}
				else if (0 == wcscmp(pwchTestType, L"摩托车双怠速"))
				{
					wcscpy_s(wchTestType, L"9");
				}

				// 此车辆已经检测过，有记录
				_snwprintf_s(wchSql, _countof(wchSql), _TRUNCATE, L"select top 1 * from TestLog where PlateNumber = '%s'and PlateType = '%s'\
																   and TestType = '%s' and TestState = '5' order by TestEndTime desc", pwchPlateNumber, pwchPlateType, wchTestType);

				pRecordset1.CreateInstance(L"ADODB.Recordset");
				pRecordset1->Open((_bstr_t)wchSql, 
					_variant_t((IDispatch*)pConnection, true), 
					adOpenStatic, 
					adLockOptimistic, 
					adCmdText);

				if (!pRecordset1->adoEOF)
				{

					_variant_t v;
					wstring s;

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset1, L"RunningNumber", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						//swprintf(pwchRunningNumber, L"%s", s.c_str());
						int n = sizeof(pwchRunningNumber);
						int k = sizeof(wchar_t);
						wcscpy_s(pwchRunningNumber, 50, s.c_str());
					}
					else
					{
						wcscpy_s(pwchRunningNumber, sizeof(pwchRunningNumber)/sizeof(wchar_t), L"");
					}

					v.ChangeType(VT_NULL);
					GetFieldData(pRecordset1, L"ReportNumber", v);
					if(VT_NULL != v.vt)
					{
						s = (wchar_t*)(_bstr_t)v;
						//swprintf(pwchReportNumber, L"%s", s.c_str());
						int n = sizeof(pwchReportNumber);
						int k = sizeof(wchar_t);
						wcscpy_s(pwchReportNumber, 50, s.c_str());
					}
					else
					{
						wcscpy_s(pwchReportNumber, sizeof(pwchReportNumber)/sizeof(wchar_t), L"");
					}

					dwReturn = 0x00;
				}
			}


		}
		catch(_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}

			//关闭记录集
			if (NULL != pRecordset1 && adStateClosed != pRecordset1->State)
			{
				pRecordset1->Close();
			}
			if (NULL != pRecordset1)
			{
				pRecordset1.Release();
				pRecordset1 = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

//DWORD SetDboRunningLog(const wchar_t * strMessage,wchar_t * Operator,const wchar_t * OpTime,wchar_t * Work,wchar_t * Pass)
//{
//	assert(*strMessage != NULL);
//
//	DWORD dwRet(0x00);
//
//	_ConnectionPtr pConnection(NULL);
//
//	if (0x00 == ConnectDatabase(pConnection))
//	{
//		// 打开数据库成功
//		_RecordsetPtr pRecordset(NULL);
//		try
//		{
//			wchar_t wchSql[SQLMAX];
//			wsprintf(wchSql, L"insert into RunningLog(Date,Operator,Remark,Work,Pass) Values(\'%s\', \'%s\', \'%s\',\'%s\',\'%s\')", OpTime, Operator, strMessage, Work, Pass);
//
//			pConnection->Execute((_bstr_t)wchSql, NULL, adCmdText);
//
//			// 关闭记录集
//			if (NULL != pRecordset && adStateClosed != pRecordset->State)
//			{
//				pRecordset->Close();
//			}
//			if (NULL != pRecordset)
//			{
//				pRecordset.Release();
//				pRecordset = NULL;
//			}
//		}
//		catch (_com_error &e)
//		{
//			WriteDatabaseError(e);
//			dwRet = 0xff;
//		}
//	}
//	if (0x00 != DisconnectDatabase(pConnection))
//	{
//		dwRet = 0xff;
//	}
//
//	return dwRet;
//}

DWORD SetDboSystemLog(const SYSTEMLOG &dboSystemLog)
{
	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"select * from SystemLog");

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			// 添加新记录
			pRecordset->AddNew();

			wstring str;
			_variant_t v;

			// Client	检测线编号
			str = dboSystemLog.wchClient;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Client", v);

			// Date	日期
			str = dboSystemLog.wchDate;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"Date", v);

			// LoginUser	操作员
			str = dboSystemLog.wchLoginUser;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"LoginUser", v);

			// Description	描述
			str = dboSystemLog.wchDescription;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Description", v);

			// Reason	原因
			// 1:运行记录 2:校准记录 3:故障记录 4:维修记录
			str = dboSystemLog.wchReason;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reason", v);

			// Solution	解决方案
			str = dboSystemLog.wchSolution;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Solution", v);

			// Result	结果
			str = dboSystemLog.wchResult;
			if (0 == str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Result", v);

			// 备注
			str = dboSystemLog.wchRemark;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Remark", v);

			// 保留字段,以后备用
			str = dboSystemLog.wchReserved1;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved1", v);

			// 保留字段,以后备用
			str = dboSystemLog.wchReserved2;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved2", v);

			// 保留字段,以后备用
			str = dboSystemLog.wchReserved3;
			if (0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved3", v);

			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD SetDboLineLock(const wchar_t wchLineNumber[50], bool bLock)
{
	DWORD dwRet(0x00);

	_ConnectionPtr pConnection(NULL);
	if (0x00 == ConnectDatabase(pConnection))
	{
		try
		{
			_RecordsetPtr pRecordset;
			// 打开数据库成功
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"update LineInfo set LineIsLocked = '%s' where LineNumber = '%s'", bLock?L"true":L"false", wchLineNumber);
			pConnection->Execute((_bstr_t)wchSql, NULL, adCmdText);

			// 关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwRet = 0xff;
		}
	}
	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwRet = 0xff;
	}

	return dwRet;
}

DWORD DelDboRealTimeData(const wchar_t wchSql[SQLMAX])
{
	assert(wchSql != NULL);

	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		try
		{
			pConnection->Execute((_bstr_t)wchSql, NULL, adCmdText);
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboTestLogRunningNumber(const wchar_t * const pwchReportNumber, wchar_t * const pwchRunningNumber)
{
	assert(NULL != pwchReportNumber);
	assert(NULL != pwchRunningNumber);
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;
		wchar_t wchSql[SQLMAX];
		wsprintf(wchSql, L"select RunningNumber From TestLog where ReportNumber = '%s'", pwchReportNumber);
		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			if(!pRecordset->adoEOF)
			{
				_variant_t v;
				wstring s;
				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"RunningNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pwchRunningNumber, 50, s.c_str());
				}
				else
				{
					wcscpy_s(pwchRunningNumber, sizeof(pwchRunningNumber)/sizeof(wchar_t), L"");
				}
				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboTestLogReportNumber(const wchar_t * const pwchRunningNumber, wchar_t * const pwchReportNumber)
{
	assert(NULL != pwchReportNumber);
	assert(NULL != pwchRunningNumber);
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;
		wchar_t wchSql[SQLMAX];
		wsprintf(wchSql, L"select ReportNumber From TestLog where RunningNumber = '%s'", pwchRunningNumber);
		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			if(!pRecordset->adoEOF)
			{
				_variant_t v;
				wstring s;

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"ReportNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pwchReportNumber, 50, s.c_str());
				}
				else
				{
					wcscpy_s(pwchReportNumber, sizeof(pwchReportNumber)/sizeof(wchar_t), L"");
				}
				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboDBVersion(SDBVersion& sDBVersion)
{
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];

			wsprintf(wchSql, L"IF NOT EXISTS (SELECT * FROM syscolumns WHERE id = object_id(\'DBVersion\') AND name = \'ProVer\') ALTER TABLE DBVersion ADD ProVer image");
			ExecuteDML(pConnection, wchSql);

			wsprintf(wchSql, L"select top 1 * from DBVersion");

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			if(!pRecordset->adoEOF)
			{
				_variant_t v;

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Version", v);
				if(VT_NULL != v.vt)
				{
					sDBVersion.strVersion = (wchar_t*)(_bstr_t)v;
				}
				else
				{
					sDBVersion.strVersion = L"";
				}

				GetByteFromDBImage(pRecordset, &sDBVersion.pbProVer, sDBVersion.nProVerSize, L"ProVer");

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Remark", v);
				if(VT_NULL != v.vt)
				{
					sDBVersion.strRemark = (wchar_t*)(_bstr_t)v;
				}
				else
				{
					sDBVersion.strRemark = L"";
				}

				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD SetDboDBVersion(const SDBVersion& sDBVersion)
{
	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];

			wsprintf(wchSql, L"IF NOT EXISTS (SELECT * FROM syscolumns WHERE id = object_id(\'DBVersion\') AND name = \'ProVer\') ALTER TABLE DBVersion ADD ProVer image");
			ExecuteDML(pConnection, wchSql);

			wsprintf(wchSql, L"select top 1 * from DBVersion");

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if(pRecordset->adoEOF)
			{
				pRecordset->AddNew();    //添加新记录
			}

			wstring str;
			_variant_t v;

			str = sDBVersion.strVersion;
			if( 0 ==str.compare(L""))
			{
				// 统一安环为空时写1.0.0
				//v.ChangeType(VT_NULL);
				v = (_variant_t)L"1.0.0";
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Version", v);

			SetByteToDBImage(pRecordset, sDBVersion.pbProVer, sDBVersion.nProVerSize, L"ProVer");

			str = sDBVersion.strRemark;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Remark", v);

			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}


DWORD SetDboRealTimeDataOfDIM(const REALTIMEDATAOFDIM &sRealTimeDataOfDIM)
{
	assert(&sRealTimeDataOfDIM != NULL);

	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"select TOP(1) * from RealTimeDataOfDIM where EquNum= '%s' ORDER BY AUTOID DESC",sRealTimeDataOfDIM.wchEquNum);

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if(pRecordset->adoEOF)
			{
				pRecordset->AddNew();    //添加新记录
			}

			wstring str;
			_variant_t v;


			str = sRealTimeDataOfDIM.wchEquNum;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v =(_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"EquNum", v);

			str = sRealTimeDataOfDIM.wchSamplingTime;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"SamplingTime", v);

			str = sRealTimeDataOfDIM.wchEnvironmentalTemperature;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"EnvironmentalTemperature", v);

			str = sRealTimeDataOfDIM.wchRelativeHumidity;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"RelativeHumidity", v);

			str = sRealTimeDataOfDIM.wchAtmosphericPressure;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"AtmosphericPressure", v);

			// 备注
			str = sRealTimeDataOfDIM.wchRemark;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Remark", v);

			// 保留字段,以后备用
			str = sRealTimeDataOfDIM.wchReserved1;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved1", v);

			// 保留字段,以后备用
			str = sRealTimeDataOfDIM.wchReserved2;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved2", v);

			// 保留字段,以后备用
			str = sRealTimeDataOfDIM.wchReserved3;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved3", v);

			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboRealTimeDataOfDIM(const wchar_t wchSql[SQLMAX], PREALTIMEDATAOFDIM const pRealTimeDataOfDIM)
{
	assert(NULL != wchSql);
	assert(NULL != pRealTimeDataOfDIM);

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			if(!pRecordset->adoEOF)
			{
				_variant_t v;
				wstring s;

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AutoID", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pRealTimeDataOfDIM->wchAutoID, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pRealTimeDataOfDIM->wchAutoID, L"");
				}


				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EquNum", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcsncpy_s(pRealTimeDataOfDIM->wchEquNum, s.c_str(), sizeof(s));
				}
				else
				{
					_tcscpy_s(pRealTimeDataOfDIM->wchEquNum, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"SamplingTime", v);
				if(VT_NULL != v.vt)
				{
					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pRealTimeDataOfDIM->wchSamplingTime, wch);
				}
				else
				{
					_tcscpy_s(pRealTimeDataOfDIM->wchSamplingTime, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EnvironmentalTemperature", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					swprintf_s(pRealTimeDataOfDIM->wchEnvironmentalTemperature, NH_FLOAT_TO_WCHART, L"%.1f", (float)v);
				}
				else
				{
					_tcscpy_s(pRealTimeDataOfDIM->wchEnvironmentalTemperature, L"");
				}


				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"RelativeHumidity", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					swprintf_s(pRealTimeDataOfDIM->wchRelativeHumidity, NH_FLOAT_TO_WCHART, L"%.1f", (float)v);
				}
				else
				{
					_tcscpy_s(pRealTimeDataOfDIM->wchRelativeHumidity, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AtmosphericPressure", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					swprintf_s(pRealTimeDataOfDIM->wchAtmosphericPressure, NH_FLOAT_TO_WCHART, L"%.2f", (float)v);
				}
				else
				{
					_tcscpy_s(pRealTimeDataOfDIM->wchAtmosphericPressure, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Remark", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pRealTimeDataOfDIM->wchRemark, s.c_str());
				}
				else
				{
					_tcscpy_s(pRealTimeDataOfDIM->wchRemark,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved1", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pRealTimeDataOfDIM->wchReserved1, s.c_str());
				}
				else
				{
					_tcscpy_s(pRealTimeDataOfDIM->wchReserved1,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved2", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pRealTimeDataOfDIM->wchReserved2, s.c_str());
				}
				else
				{
					_tcscpy_s(pRealTimeDataOfDIM->wchReserved2,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved3", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pRealTimeDataOfDIM->wchReserved3, s.c_str());
				}
				else
				{
					_tcscpy_s(pRealTimeDataOfDIM->wchReserved3,L"");
				}

				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboLogOfDIM(const wchar_t wchSql[SQLMAX], PLOGOFDIM const pLogOfDIM)
{
	assert(NULL != wchSql);
	assert(NULL != pLogOfDIM);

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			if(!pRecordset->adoEOF)
			{
				_variant_t v;
				wstring s;

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AutoID", v);
				if(VT_NULL != v.vt)
				{
					swprintf_s(pLogOfDIM->wchAutoID, NH_INT_TO_WCHART, L"%d", (int)v);
				}
				else
				{
					_tcscpy_s(pLogOfDIM->wchAutoID, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"RunningNumber", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcsncpy_s(pLogOfDIM->wchRunningNumber, s.c_str(), sizeof(s));
				}
				else
				{
					_tcscpy_s(pLogOfDIM->wchRunningNumber, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EquNum", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcsncpy_s(pLogOfDIM->wchEquNum, s.c_str(), sizeof(s));
				}
				else
				{
					_tcscpy_s(pLogOfDIM->wchEquNum, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"SamplingTime", v);
				if(VT_NULL != v.vt)
				{
					wchar_t wch[50] = {0};
					SYSTEMTIME dt;
					VariantTimeToSystemTime(v, &dt);
					swprintf(wch, 30, L"%04d-%02d-%02d %02d:%02d:%02d",dt.wYear, dt.wMonth, dt.wDay, dt.wHour, dt.wMinute, dt.wSecond);
					wcscpy_s(pLogOfDIM->wchSamplingTime, wch);
				}
				else
				{
					_tcscpy_s(pLogOfDIM->wchSamplingTime, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Operator", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcsncpy_s(pLogOfDIM->wchOperator, s.c_str(), sizeof(s));
				}
				else
				{
					_tcscpy_s(pLogOfDIM->wchOperator, L"");
				}


				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"EnvironmentalTemperature", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					swprintf_s(pLogOfDIM->wchEnvironmentalTemperature, NH_FLOAT_TO_WCHART, L"%.1f", (float)v);
				}
				else
				{
					_tcscpy_s(pLogOfDIM->wchEnvironmentalTemperature, L"");
				}


				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"RelativeHumidity", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					swprintf_s(pLogOfDIM->wchRelativeHumidity, NH_FLOAT_TO_WCHART, L"%.1f", (float)v);
				}
				else
				{
					_tcscpy_s(pLogOfDIM->wchRelativeHumidity, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"AtmosphericPressure", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					swprintf_s(pLogOfDIM->wchAtmosphericPressure, NH_FLOAT_TO_WCHART, L"%.2f", (float)v);
				}
				else
				{
					_tcscpy_s(pLogOfDIM->wchAtmosphericPressure, L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Remark", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pLogOfDIM->wchRemark, s.c_str());
				}
				else
				{
					_tcscpy_s(pLogOfDIM->wchRemark,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved1", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pLogOfDIM->wchReserved1, s.c_str());
				}
				else
				{
					_tcscpy_s(pLogOfDIM->wchReserved1,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved2", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pLogOfDIM->wchReserved2, s.c_str());
				}
				else
				{
					_tcscpy_s(pLogOfDIM->wchReserved2,L"");
				}

				v.ChangeType(VT_NULL);
				GetFieldData(pRecordset, L"Reserved3", v);
				if(VT_NULL != v.vt)
				{
					s = (wchar_t*)(_bstr_t)v;
					wcscpy_s(pLogOfDIM->wchReserved3, s.c_str());
				}
				else
				{
					_tcscpy_s(pLogOfDIM->wchReserved3,L"");
				}

				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD SetDboLogOfDIM(const LOGOFDIM &sLogOfDIM)
{
	assert(&sLogOfDIM != NULL);

	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"select * from LogOfDIM where SamplingTime = '%s' and EquNum= '%s'", sLogOfDIM.wchSamplingTime,sLogOfDIM.wchEquNum);

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if(pRecordset->adoEOF)
			{
				pRecordset->AddNew();    //添加新记录
			}

			wstring str;
			_variant_t v;
			v.ChangeType(VT_NULL);

			str = sLogOfDIM.wchRunningNumber;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"RunningNumber", v);

			str = sLogOfDIM.wchEquNum;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"EquNum", v);

			str = sLogOfDIM.wchSamplingTime;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				_variant_t vTime(str.c_str());
				vTime.ChangeType(VT_DATE);
				v = vTime;
			}
			PutFieldData(pRecordset, L"SamplingTime", v);

			str = sLogOfDIM.wchOperator;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = str.c_str();
			}
			PutFieldData(pRecordset, L"Operator", v);

			str = sLogOfDIM.wchEnvironmentalTemperature;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"EnvironmentalTemperature", v);

			str = sLogOfDIM.wchRelativeHumidity;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"RelativeHumidity", v);

			str = sLogOfDIM.wchAtmosphericPressure;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = static_cast<float>(_wtof(str.c_str()));
			}
			PutFieldData(pRecordset, L"AtmosphericPressure", v);

			// 备注
			str = sLogOfDIM.wchRemark;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Remark", v);

			// 保留字段,以后备用
			str = sLogOfDIM.wchReserved1;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved1", v);

			// 保留字段,以后备用
			str = sLogOfDIM.wchReserved2;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved2", v);

			// 保留字段,以后备用
			str = sLogOfDIM.wchReserved3;
			if( 0 ==str.compare(L""))
			{
				v.ChangeType(VT_NULL);
			}
			else
			{
				v = (_variant_t)str.c_str();
			}
			PutFieldData(pRecordset, L"Reserved3", v);

			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD DelDboRealTimeDataOfDIM(const wchar_t wchSql[SQLMAX])
{
	assert(wchSql != NULL);

	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		try
		{
			pConnection->Execute((_bstr_t)wchSql, NULL, adCmdText);
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD DelDboLogOfDIM(const wchar_t wchSql[SQLMAX])
{
	assert(wchSql != NULL);

	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		try
		{
			pConnection->Execute((_bstr_t)wchSql, NULL, adCmdText);
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD SynDBTime(void)
{
	//返回值
	DWORD dwReturn(0x00);
	SYSTEMTIME dt;
	GetLocalTime(&dt);
	_ConnectionPtr pConnection;
	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;
		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"SELECT GETDATE() as DT1");

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);
			//精度为秒
			variant_t v;
			v = pRecordset->GetCollect(L"DT1");
			v.ChangeType(VT_DATE);
			VariantTimeToSystemTime(v.date, &dt);
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}
	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}
	dt.wMilliseconds = 0;
	if (SetLocalTime(&dt))
	{
		CNHLogAPI::WriteLog(LOG_MSG, L"NHModeServerDB", L"同步时间成功");
	}
	else
	{
		DWORD dw = GetLastError();
		wchar_t wchComError[ERROR_MAX];
		wsprintf(wchComError, L"同步时间失败%4d-%02d-%02d %02d:%02d:%02d.%03d, 错误代码：%d\r\n", dt.wYear, dt.wMonth, dt.wDay, dt.wHour,dt.wMinute,dt.wSecond,dt.wMilliseconds, dw);
		CNHLogAPI::WriteLog(LOG_EXP, L"NHModeServerDB", wchComError);
		dwReturn = 0x01;
	}
	return dwReturn;
}

DWORD SynDBTimeWithMilliseconds(void)
{
	//返回值
	DWORD dwReturn(0x00);
	SYSTEMTIME st;
	GetLocalTime(&st);
	_ConnectionPtr pConnection;
	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;
		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"SELECT (CONVERT(varchar(100), GETDATE(), 121)) AS DT1");
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);
			//精度为毫秒
			wstring s;
			variant_t v2;
			v2 = pRecordset->GetCollect(L"DT1");
			v2.ChangeType(VT_BSTR);
			if(VT_NULL != v2.vt)
			{
				s = (wchar_t*)(_bstr_t)v2.bstrVal;
				st.wYear = _wtoi(s.substr(0,4).c_str());
				st.wMonth = _wtoi(s.substr(5,2).c_str());
				st.wDay = _wtoi(s.substr(8,2).c_str());
				st.wHour = _wtoi(s.substr(11,2).c_str());
				st.wMinute = _wtoi(s.substr(14,2).c_str());
				st.wSecond = _wtoi(s.substr(17,2).c_str());
				st.wMilliseconds = _wtoi(s.substr(20,3).c_str());
			}
			else
			{
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}
	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}
	if (SetLocalTime(&st))
	{
		CNHLogAPI::WriteLog(LOG_MSG, L"NHModeServerDB", L"同步时间成功");
	}
	else
	{
		DWORD dw = GetLastError();
		wchar_t wchComError[ERROR_MAX];
		wsprintf(wchComError, L"同步时间失败%4d-%02d-%02d %02d:%02d:%02d.%03d, 错误代码：%d\r\n", st.wYear, st.wMonth, st.wDay, st.wHour,st.wMinute,st.wSecond,st.wMilliseconds, dw);
		CNHLogAPI::WriteLog(LOG_EXP, L"NHModeServerDB", wchComError);
		dwReturn = 0x01;
	}
	return dwReturn;
}

DWORD GetEPDataFromDBNew(wchar_t *const pwchEquNum/*=NULL*/,
		float *const pfET/*=NULL*/, 
		float *const pfRH/*=NULL*/, 
		float *const pfAP/*=NULL*/, 
		float *const pfOilTemp/*=NULL*/, 
		USHORT *const pusRpm/*=NULL*/, PREALTIMEDATAOFDIM const pRealTimeDataOfDIM/*=NULL*/)
{
	DWORD dwRt(0x00);

	wchar_t wchSql[SQLMAX];
	wsprintf(wchSql, L"Select TOP(1) * FROM RealTimeDataOfDIM WHERE EquNum='%s' ORDER BY AUTOID DESC", pwchEquNum);
	REALTIMEDATAOFDIM sRealTimeDataOfDIM;
	dwRt = GetDboRealTimeDataOfDIM(wchSql, &sRealTimeDataOfDIM);
	if (0x01 != dwRt)
	{
		//if (NULL != pfET)
		//{
		//	*pfET = m_fDefaultET;
		//}
		//if (NULL != pfAP)
		//{
		//	*pfAP = m_fDefaultAP;
		//}
		//if (NULL != pfRH)
		//{
		//	*pfRH = m_fDefaultRH;
		//}
		//if (NULL != pfOilTemp)
		//{
		//	*pfOilTemp = m_fDefaultOT;
		//}
		//if (NULL != pusRpm)
		//{
		//	*pusRpm = m_usDefaultRPM;
		//}
	}
	else
	{
		if (NULL != pfET)
		{
			*pfET = (float)_wtof(sRealTimeDataOfDIM.wchEnvironmentalTemperature);
		}
		if (NULL != pfAP)
		{
			*pfAP = (float)_wtof(sRealTimeDataOfDIM.wchAtmosphericPressure);
		}
		if (NULL != pfRH)
		{
			*pfRH = (float)_wtof(sRealTimeDataOfDIM.wchRelativeHumidity);
		}
		if (NULL != pfOilTemp)
		{
			//*pfOilTemp = (float)_wtof(sRealTimeDataOfDIM.wchReserved1);
		}
		if (NULL != pusRpm)
		{
			//*pusRpm = _wtoi(sRealTimeDataOfDIM.wchReserved2);
		}
		if (NULL != pRealTimeDataOfDIM)
		{
			ZeroMemory(pRealTimeDataOfDIM, sizeof(REALTIMEDATAOFDIM));
			*pRealTimeDataOfDIM=sRealTimeDataOfDIM;
		}
	}

	return dwRt;
}


DWORD GetDboResultOfOBD(const wchar_t wchSql[SQLMAX], SResultOfOBD* const pResultOfOBD)
{
	assert(NULL != wchSql);
	assert(NULL != pResultOfOBD);

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			if (!pRecordset->adoEOF)
			{
				pResultOfOBD->strAutoID = GetFieldDataEx(pRecordset, L"AutoID");
				pResultOfOBD->strRunningNumber = GetFieldDataEx(pRecordset, L"RunningNumber");
				pResultOfOBD->strFuelType = GetFieldDataEx(pRecordset, L"FuelType");
				pResultOfOBD->strOperator = GetFieldDataEx(pRecordset, L"Operator");
				pResultOfOBD->strDetTimes = GetFieldDataEx(pRecordset, L"DetTimes");
				pResultOfOBD->strDetBegTime = GetFieldDataEx(pRecordset, L"DetBegTime");
				pResultOfOBD->strDetEndTime = GetFieldDataEx(pRecordset, L"DetEndTime");
				pResultOfOBD->strOBDProtocol = GetFieldDataEx(pRecordset, L"OBDProtocol");
				pResultOfOBD->strComErrorJudge = GetFieldDataEx(pRecordset, L"ComErrorJudge");
				pResultOfOBD->strComErrorComment = GetFieldDataEx(pRecordset, L"ComErrorComment");
				pResultOfOBD->strVIN = GetFieldDataEx(pRecordset, L"VIN");
				pResultOfOBD->strOBDType = GetFieldDataEx(pRecordset, L"OBDType");
				pResultOfOBD->strMileage = GetFieldDataEx(pRecordset, L"Mileage");
				pResultOfOBD->strEngineCALID = GetFieldDataEx(pRecordset, L"EngineCALID");
				pResultOfOBD->strEngineCVN = GetFieldDataEx(pRecordset, L"EngineCVN");
				pResultOfOBD->strPostProcessingCALID = GetFieldDataEx(pRecordset, L"PostProcessingCALID");
				pResultOfOBD->strPostProcessingCVN = GetFieldDataEx(pRecordset, L"PostProcessingCVN");
				pResultOfOBD->strOtherCALID = GetFieldDataEx(pRecordset, L"OtherCALID");
				pResultOfOBD->strOtherCVN = GetFieldDataEx(pRecordset, L"OtherCVN");
				pResultOfOBD->strDisplayJudge = GetFieldDataEx(pRecordset, L"DisplayJudge");
				pResultOfOBD->strDisplayComment = GetFieldDataEx(pRecordset, L"DisplayComment");
				pResultOfOBD->strLampStateJudge = GetFieldDataEx(pRecordset, L"LampStateJudge");
				pResultOfOBD->strLampStateComment = GetFieldDataEx(pRecordset, L"LampStateComment");
				pResultOfOBD->strDTC = GetFieldDataEx(pRecordset, L"DTC");
				pResultOfOBD->strDTCComment = GetFieldDataEx(pRecordset, L"DTCComment");
				pResultOfOBD->strFreezeData = GetFieldDataEx(pRecordset, L"FreezeData");
				pResultOfOBD->strDTCMileage = GetFieldDataEx(pRecordset, L"DTCMileage");
				pResultOfOBD->strDTCJudge = GetFieldDataEx(pRecordset, L"DTCJudge");
				pResultOfOBD->strCheckItemJudge_MFT = GetFieldDataEx(pRecordset, L"CheckItemJudge_MFT");
				pResultOfOBD->strCheckItemJudge_FST = GetFieldDataEx(pRecordset, L"CheckItemJudge_FST");
				pResultOfOBD->strCheckItemJudge_CC = GetFieldDataEx(pRecordset, L"CheckItemJudge_CC");
				pResultOfOBD->strCheckItemJudge_CCH = GetFieldDataEx(pRecordset, L"CheckItemJudge_CCH");
				pResultOfOBD->strCheckItemJudge_OS = GetFieldDataEx(pRecordset, L"CheckItemJudge_OS");
				pResultOfOBD->strCheckItemJudge_OSH = GetFieldDataEx(pRecordset, L"CheckItemJudge_OSH");
				pResultOfOBD->strCheckItemJudge_EECS = GetFieldDataEx(pRecordset, L"CheckItemJudge_EECS");
				pResultOfOBD->strCheckItemJudge_EGR = GetFieldDataEx(pRecordset, L"CheckItemJudge_EGR");
				pResultOfOBD->strCheckItemJudge_SAIS = GetFieldDataEx(pRecordset, L"CheckItemJudge_SAIS");
				pResultOfOBD->strCheckItemJudge_ICM = GetFieldDataEx(pRecordset, L"CheckItemJudge_ICM");
				pResultOfOBD->strCheckItemJudge_VVT = GetFieldDataEx(pRecordset, L"CheckItemJudge_VVT");
				pResultOfOBD->strCheckItemJudge_DOC = GetFieldDataEx(pRecordset, L"CheckItemJudge_DOC");
				pResultOfOBD->strCheckItemJudge_SCR = GetFieldDataEx(pRecordset, L"CheckItemJudge_SCR");
				pResultOfOBD->strCheckItemJudge_DPF = GetFieldDataEx(pRecordset, L"CheckItemJudge_DPF");
				pResultOfOBD->strCheckItemJudge_ASC = GetFieldDataEx(pRecordset, L"CheckItemJudge_ASC");
				pResultOfOBD->strCheckItemJudge_POC = GetFieldDataEx(pRecordset, L"CheckItemJudge_POC");
				pResultOfOBD->strSystemCheckJudge = GetFieldDataEx(pRecordset, L"SystemCheckJudge");
				pResultOfOBD->strIsNeedReCheck = GetFieldDataEx(pRecordset, L"IsNeedReCheck");
				pResultOfOBD->strReCheckItem = GetFieldDataEx(pRecordset, L"ReCheckItem");
				pResultOfOBD->strReCheckResult = GetFieldDataEx(pRecordset, L"ReCheckResult");
				pResultOfOBD->strIUPR_OMCEC = GetFieldDataEx(pRecordset, L"IUPR_OMCEC");
				pResultOfOBD->strIUPR_ICC = GetFieldDataEx(pRecordset, L"IUPR_ICC");
				pResultOfOBD->strIUPR_CMCCB1 = GetFieldDataEx(pRecordset, L"IUPR_CMCCB1");
				pResultOfOBD->strIUPR_CMCECB1 = GetFieldDataEx(pRecordset, L"IUPR_CMCECB1");
				pResultOfOBD->strIUPR_CMCCB2 = GetFieldDataEx(pRecordset, L"IUPR_CMCCB2");
				pResultOfOBD->strIUPR_CMCECB2 = GetFieldDataEx(pRecordset, L"IUPR_CMCECB2");
				pResultOfOBD->strIUPR_O2SMCCB1 = GetFieldDataEx(pRecordset, L"IUPR_O2SMCCB1");
				pResultOfOBD->strIUPR_O2SMCECB1 = GetFieldDataEx(pRecordset, L"IUPR_O2SMCECB1");
				pResultOfOBD->strIUPR_O2SMCCB2 = GetFieldDataEx(pRecordset, L"IUPR_O2SMCCB2");
				pResultOfOBD->strIUPR_O2SMCECB2 = GetFieldDataEx(pRecordset, L"IUPR_O2SMCECB2");
				pResultOfOBD->strIUPR_RO2SMCCB1 = GetFieldDataEx(pRecordset, L"IUPR_RO2SMCCB1");
				pResultOfOBD->strIUPR_RO2SMCECB1 = GetFieldDataEx(pRecordset, L"IUPR_RO2SMCECB1");
				pResultOfOBD->strIUPR_RO2SMCCB2 = GetFieldDataEx(pRecordset, L"IUPR_RO2SMCCB2");
				pResultOfOBD->strIUPR_RO2SMCECB2 = GetFieldDataEx(pRecordset, L"IUPR_RO2SMCECB2");
				pResultOfOBD->strIUPR_EGRC = GetFieldDataEx(pRecordset, L"IUPR_EGRC");
				pResultOfOBD->strIUPR_EGREC = GetFieldDataEx(pRecordset, L"IUPR_EGREC");
				pResultOfOBD->strIUPR_GPFC1 = GetFieldDataEx(pRecordset, L"IUPR_GPFC1");
				pResultOfOBD->strIUPR_GPFEC1 = GetFieldDataEx(pRecordset, L"IUPR_GPFEC1");
				pResultOfOBD->strIUPR_GPFC2 = GetFieldDataEx(pRecordset, L"IUPR_GPFC2");
				pResultOfOBD->strIUPR_GPFEC2 = GetFieldDataEx(pRecordset, L"IUPR_GPFEC2");
				pResultOfOBD->strIUPR_AMCCC = GetFieldDataEx(pRecordset, L"IUPR_AMCCC");
				pResultOfOBD->strIUPR_AMCEC = GetFieldDataEx(pRecordset, L"IUPR_AMCEC");
				pResultOfOBD->strIUPR_EVAPC = GetFieldDataEx(pRecordset, L"IUPR_EVAPC");
				pResultOfOBD->strIUPR_EVAPEC = GetFieldDataEx(pRecordset, L"IUPR_EVAPEC");
				pResultOfOBD->strIUPR_NMHCC = GetFieldDataEx(pRecordset, L"IUPR_NMHCC");
				pResultOfOBD->strIUPR_NMHCEC = GetFieldDataEx(pRecordset, L"IUPR_NMHCEC");
				pResultOfOBD->strIUPR_NOXCC = GetFieldDataEx(pRecordset, L"IUPR_NOXCC");
				pResultOfOBD->strIUPR_NOXCEC = GetFieldDataEx(pRecordset, L"IUPR_NOXCEC");
				pResultOfOBD->strIUPR_NOXAC = GetFieldDataEx(pRecordset, L"IUPR_NOXAC");
				pResultOfOBD->strIUPR_NOXAEC = GetFieldDataEx(pRecordset, L"IUPR_NOXAEC");
				pResultOfOBD->strIUPR_PMC = GetFieldDataEx(pRecordset, L"IUPR_PMC");
				pResultOfOBD->strIUPR_PMEC = GetFieldDataEx(pRecordset, L"IUPR_PMEC");
				pResultOfOBD->strIUPR_WSC = GetFieldDataEx(pRecordset, L"IUPR_WSC");
				pResultOfOBD->strIUPR_WSEC = GetFieldDataEx(pRecordset, L"IUPR_WSEC");
				pResultOfOBD->strIUPR_PPC = GetFieldDataEx(pRecordset, L"IUPR_PPC");
				pResultOfOBD->strIUPR_PPEC = GetFieldDataEx(pRecordset, L"IUPR_PPEC");
				pResultOfOBD->strJudge = GetFieldDataEx(pRecordset, L"Judge");
				pResultOfOBD->strHash = GetFieldDataEx(pRecordset, L"Hash");
				pResultOfOBD->strRemark = GetFieldDataEx(pRecordset, L"Remark");
				pResultOfOBD->strReserved1 = GetFieldDataEx(pRecordset, L"Reserved1");
				pResultOfOBD->strReserved2 = GetFieldDataEx(pRecordset, L"Reserved2");
				pResultOfOBD->strReserved3 = GetFieldDataEx(pRecordset, L"Reserved3");

				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD SetDboResultOfOBD(const SResultOfOBD &sResultOfOBD)
{
	assert(&sResultOfOBD != NULL);

	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"select * from ResultOfOBD where RunningNumber='%s'", sResultOfOBD.strRunningNumber.c_str());

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if(pRecordset->adoEOF)
			{
				pRecordset->AddNew();    //添加新记录
			}
			
			PutFieldDataEx(pRecordset, L"RunningNumber", VT_BSTR, sResultOfOBD.strRunningNumber);
			PutFieldDataEx(pRecordset, L"FuelType", VT_BSTR, sResultOfOBD.strFuelType);
			PutFieldDataEx(pRecordset, L"Operator", VT_BSTR, sResultOfOBD.strOperator);
			PutFieldDataEx(pRecordset, L"DetTimes", VT_INT, sResultOfOBD.strDetTimes);
			PutFieldDataEx(pRecordset, L"DetBegTime", VT_DATE, sResultOfOBD.strDetBegTime);
			PutFieldDataEx(pRecordset, L"DetEndTime", VT_DATE, sResultOfOBD.strDetEndTime);
			PutFieldDataEx(pRecordset, L"OBDProtocol", VT_BSTR, sResultOfOBD.strOBDProtocol);
			PutFieldDataEx(pRecordset, L"ComErrorJudge", VT_INT, sResultOfOBD.strComErrorJudge);
			PutFieldDataEx(pRecordset, L"ComErrorComment", VT_BSTR, sResultOfOBD.strComErrorComment);
			PutFieldDataEx(pRecordset, L"VIN", VT_BSTR, sResultOfOBD.strVIN);
			PutFieldDataEx(pRecordset, L"OBDType", VT_BSTR, sResultOfOBD.strOBDType);
			PutFieldDataEx(pRecordset, L"Mileage", VT_BSTR, sResultOfOBD.strMileage);
			PutFieldDataEx(pRecordset, L"EngineCALID", VT_BSTR, sResultOfOBD.strEngineCALID);
			PutFieldDataEx(pRecordset, L"EngineCVN", VT_BSTR, sResultOfOBD.strEngineCVN);
			PutFieldDataEx(pRecordset, L"PostProcessingCALID", VT_BSTR, sResultOfOBD.strPostProcessingCALID);
			PutFieldDataEx(pRecordset, L"PostProcessingCVN", VT_BSTR, sResultOfOBD.strPostProcessingCVN);
			PutFieldDataEx(pRecordset, L"OtherCALID", VT_BSTR, sResultOfOBD.strOtherCALID);
			PutFieldDataEx(pRecordset, L"OtherCVN", VT_BSTR, sResultOfOBD.strOtherCVN);
			PutFieldDataEx(pRecordset, L"DisplayJudge", VT_INT, sResultOfOBD.strDisplayJudge);
			PutFieldDataEx(pRecordset, L"DisplayComment", VT_BSTR, sResultOfOBD.strDisplayComment);
			PutFieldDataEx(pRecordset, L"LampStateJudge", VT_INT, sResultOfOBD.strLampStateJudge);
			PutFieldDataEx(pRecordset, L"LampStateComment", VT_BSTR, sResultOfOBD.strLampStateComment);
			PutFieldDataEx(pRecordset, L"DTC", VT_BSTR, sResultOfOBD.strDTC);
			PutFieldDataEx(pRecordset, L"DTCComment", VT_BSTR, sResultOfOBD.strDTCComment);
			PutFieldDataEx(pRecordset, L"FreezeData", VT_BSTR, sResultOfOBD.strFreezeData);
			PutFieldDataEx(pRecordset, L"DTCMileage", VT_INT, sResultOfOBD.strDTCMileage);
			PutFieldDataEx(pRecordset, L"DTCJudge", VT_INT, sResultOfOBD.strDTCJudge);
			PutFieldDataEx(pRecordset, L"CheckItemJudge_MFT", VT_INT, sResultOfOBD.strCheckItemJudge_MFT);
			PutFieldDataEx(pRecordset, L"CheckItemJudge_FST", VT_INT, sResultOfOBD.strCheckItemJudge_FST);
			PutFieldDataEx(pRecordset, L"CheckItemJudge_CC", VT_INT, sResultOfOBD.strCheckItemJudge_CC);
			PutFieldDataEx(pRecordset, L"CheckItemJudge_CCH", VT_INT, sResultOfOBD.strCheckItemJudge_CCH);
			PutFieldDataEx(pRecordset, L"CheckItemJudge_OS", VT_INT, sResultOfOBD.strCheckItemJudge_OS);
			PutFieldDataEx(pRecordset, L"CheckItemJudge_OSH", VT_INT, sResultOfOBD.strCheckItemJudge_OSH);
			PutFieldDataEx(pRecordset, L"CheckItemJudge_EECS", VT_INT, sResultOfOBD.strCheckItemJudge_EECS);
			PutFieldDataEx(pRecordset, L"CheckItemJudge_EGR", VT_INT, sResultOfOBD.strCheckItemJudge_EGR);
			PutFieldDataEx(pRecordset, L"CheckItemJudge_SAIS", VT_INT, sResultOfOBD.strCheckItemJudge_SAIS);
			PutFieldDataEx(pRecordset, L"CheckItemJudge_ICM", VT_INT, sResultOfOBD.strCheckItemJudge_ICM);
			PutFieldDataEx(pRecordset, L"CheckItemJudge_VVT", VT_INT, sResultOfOBD.strCheckItemJudge_VVT);
			PutFieldDataEx(pRecordset, L"CheckItemJudge_DOC", VT_INT, sResultOfOBD.strCheckItemJudge_DOC);
			PutFieldDataEx(pRecordset, L"CheckItemJudge_SCR", VT_INT, sResultOfOBD.strCheckItemJudge_SCR);
			PutFieldDataEx(pRecordset, L"CheckItemJudge_DPF", VT_INT, sResultOfOBD.strCheckItemJudge_DPF);
			PutFieldDataEx(pRecordset, L"CheckItemJudge_ASC", VT_INT, sResultOfOBD.strCheckItemJudge_ASC);
			PutFieldDataEx(pRecordset, L"CheckItemJudge_POC", VT_INT, sResultOfOBD.strCheckItemJudge_POC);
			PutFieldDataEx(pRecordset, L"SystemCheckJudge", VT_INT, sResultOfOBD.strSystemCheckJudge);
			PutFieldDataEx(pRecordset, L"IsNeedReCheck", VT_BOOL, sResultOfOBD.strIsNeedReCheck);
			PutFieldDataEx(pRecordset, L"ReCheckItem", VT_BSTR, sResultOfOBD.strReCheckItem);
			PutFieldDataEx(pRecordset, L"ReCheckResult", VT_INT, sResultOfOBD.strReCheckResult);
			PutFieldDataEx(pRecordset, L"IUPR_OMCEC", VT_INT, sResultOfOBD.strIUPR_OMCEC);
			PutFieldDataEx(pRecordset, L"IUPR_ICC", VT_INT, sResultOfOBD.strIUPR_ICC);
			PutFieldDataEx(pRecordset, L"IUPR_CMCCB1", VT_INT, sResultOfOBD.strIUPR_CMCCB1);
			PutFieldDataEx(pRecordset, L"IUPR_CMCECB1", VT_INT, sResultOfOBD.strIUPR_CMCECB1);
			PutFieldDataEx(pRecordset, L"IUPR_CMCCB2", VT_INT, sResultOfOBD.strIUPR_CMCCB2);
			PutFieldDataEx(pRecordset, L"IUPR_CMCECB2", VT_INT, sResultOfOBD.strIUPR_CMCECB2);
			PutFieldDataEx(pRecordset, L"IUPR_O2SMCCB1", VT_INT, sResultOfOBD.strIUPR_O2SMCCB1);
			PutFieldDataEx(pRecordset, L"IUPR_O2SMCECB1", VT_INT, sResultOfOBD.strIUPR_O2SMCECB1);
			PutFieldDataEx(pRecordset, L"IUPR_O2SMCCB2", VT_INT, sResultOfOBD.strIUPR_O2SMCCB2);
			PutFieldDataEx(pRecordset, L"IUPR_O2SMCECB2", VT_INT, sResultOfOBD.strIUPR_O2SMCECB2);
			PutFieldDataEx(pRecordset, L"IUPR_RO2SMCCB1", VT_INT, sResultOfOBD.strIUPR_RO2SMCCB1);
			PutFieldDataEx(pRecordset, L"IUPR_RO2SMCECB1", VT_INT, sResultOfOBD.strIUPR_RO2SMCECB1);
			PutFieldDataEx(pRecordset, L"IUPR_RO2SMCCB2", VT_INT, sResultOfOBD.strIUPR_RO2SMCCB2);
			PutFieldDataEx(pRecordset, L"IUPR_RO2SMCECB2", VT_INT, sResultOfOBD.strIUPR_RO2SMCECB2);
			PutFieldDataEx(pRecordset, L"IUPR_EGRC", VT_INT, sResultOfOBD.strIUPR_EGRC);
			PutFieldDataEx(pRecordset, L"IUPR_EGREC", VT_INT, sResultOfOBD.strIUPR_EGREC);
			PutFieldDataEx(pRecordset, L"IUPR_GPFC1", VT_INT, sResultOfOBD.strIUPR_GPFC1);
			PutFieldDataEx(pRecordset, L"IUPR_GPFEC1", VT_INT, sResultOfOBD.strIUPR_GPFEC1);
			PutFieldDataEx(pRecordset, L"IUPR_GPFC2", VT_INT, sResultOfOBD.strIUPR_GPFC2);
			PutFieldDataEx(pRecordset, L"IUPR_GPFEC2", VT_INT, sResultOfOBD.strIUPR_GPFEC2);
			PutFieldDataEx(pRecordset, L"IUPR_AMCCC", VT_INT, sResultOfOBD.strIUPR_AMCCC);
			PutFieldDataEx(pRecordset, L"IUPR_AMCEC", VT_INT, sResultOfOBD.strIUPR_AMCEC);
			PutFieldDataEx(pRecordset, L"IUPR_EVAPC", VT_INT, sResultOfOBD.strIUPR_EVAPC);
			PutFieldDataEx(pRecordset, L"IUPR_EVAPEC", VT_INT, sResultOfOBD.strIUPR_EVAPEC);
			PutFieldDataEx(pRecordset, L"IUPR_NMHCC", VT_INT, sResultOfOBD.strIUPR_NMHCC);
			PutFieldDataEx(pRecordset, L"IUPR_NMHCEC", VT_INT, sResultOfOBD.strIUPR_NMHCEC);
			PutFieldDataEx(pRecordset, L"IUPR_NOXCC", VT_INT, sResultOfOBD.strIUPR_NOXCC);
			PutFieldDataEx(pRecordset, L"IUPR_NOXCEC", VT_INT, sResultOfOBD.strIUPR_NOXCEC);
			PutFieldDataEx(pRecordset, L"IUPR_NOXAC", VT_INT, sResultOfOBD.strIUPR_NOXAC);
			PutFieldDataEx(pRecordset, L"IUPR_NOXAEC", VT_INT, sResultOfOBD.strIUPR_NOXAEC);
			PutFieldDataEx(pRecordset, L"IUPR_PMC", VT_INT, sResultOfOBD.strIUPR_PMC);
			PutFieldDataEx(pRecordset, L"IUPR_PMEC", VT_INT, sResultOfOBD.strIUPR_PMEC);
			PutFieldDataEx(pRecordset, L"IUPR_WSC", VT_INT, sResultOfOBD.strIUPR_WSC);
			PutFieldDataEx(pRecordset, L"IUPR_WSEC", VT_INT, sResultOfOBD.strIUPR_WSEC);
			PutFieldDataEx(pRecordset, L"IUPR_PPC", VT_INT, sResultOfOBD.strIUPR_PPC);
			PutFieldDataEx(pRecordset, L"IUPR_PPEC", VT_INT, sResultOfOBD.strIUPR_PPEC);
			PutFieldDataEx(pRecordset, L"Judge", VT_INT, sResultOfOBD.strJudge);
			PutFieldDataEx(pRecordset, L"Hash", VT_INT, sResultOfOBD.strHash);
			PutFieldDataEx(pRecordset, L"Remark", VT_BSTR, sResultOfOBD.strRemark);
			PutFieldDataEx(pRecordset, L"Reserved1", VT_BSTR, sResultOfOBD.strReserved1);
			PutFieldDataEx(pRecordset, L"Reserved2", VT_BSTR, sResultOfOBD.strReserved2);
			PutFieldDataEx(pRecordset, L"Reserved3", VT_BSTR, sResultOfOBD.strReserved3);

			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboResultOfAppearance(const wchar_t wchSql[SQLMAX], SResultOfAppearance* const pResultOfAppearance)
{
	assert(NULL != wchSql);
	assert(NULL != pResultOfAppearance);

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			if (!pRecordset->adoEOF)
			{
				pResultOfAppearance->strAutoID = GetFieldDataEx(pRecordset, L"AutoID");
				pResultOfAppearance->strRunningNumber = GetFieldDataEx(pRecordset, L"RunningNumber");
				pResultOfAppearance->strOperator = GetFieldDataEx(pRecordset, L"Operator");
				pResultOfAppearance->strDetTimes = GetFieldDataEx(pRecordset, L"DetTimes");
				pResultOfAppearance->strDetBegTime = GetFieldDataEx(pRecordset, L"DetBegTime");
				pResultOfAppearance->strDetEndTime = GetFieldDataEx(pRecordset, L"DetEndTime");	
				
				wchar_t wchTemp[128] = {0};
				for (int i=0; i<MAX_APP_ITEM; i++)
				{
					wsprintf(wchTemp, L"ItemName%02d", i+1);
					pResultOfAppearance->strItemName[i] = GetFieldDataEx(pRecordset, wchTemp);
					wsprintf(wchTemp, L"ItemJudge%02d", i+1);
					pResultOfAppearance->strItemJudge[i] = GetFieldDataEx(pRecordset, wchTemp);
					wsprintf(wchTemp, L"ItemIsVeto%02d", i+1);
					pResultOfAppearance->strItemIsVeto[i] = GetFieldDataEx(pRecordset, wchTemp);
					wsprintf(wchTemp, L"ItemRemark%02d", i+1);
					pResultOfAppearance->strItemRemark[i] = GetFieldDataEx(pRecordset, wchTemp);
				}

				pResultOfAppearance->strPass = GetFieldDataEx(pRecordset, L"Pass");
				pResultOfAppearance->strRemark = GetFieldDataEx(pRecordset, L"Remark");
				pResultOfAppearance->strReserved1 = GetFieldDataEx(pRecordset, L"Reserved1");
				pResultOfAppearance->strReserved2 = GetFieldDataEx(pRecordset, L"Reserved2");
				pResultOfAppearance->strReserved3 = GetFieldDataEx(pRecordset, L"Reserved3");

				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}
	
DWORD SetDboResultOfAppearance(const SResultOfAppearance &sResultOfAppearance)
{
	//返回值
	DWORD dwReturn(0x00);	

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"SELECT * FROM ResultOfAppearance WHERE RunningNumber='%s'", sResultOfAppearance.strRunningNumber.c_str());

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if(pRecordset->adoEOF) 
			{
				pRecordset->AddNew();    //添加新记录
			}
			
			PutFieldDataEx(pRecordset, L"RunningNumber", VT_BSTR, sResultOfAppearance.strRunningNumber);
			PutFieldDataEx(pRecordset, L"Operator", VT_BSTR, sResultOfAppearance.strOperator);
			PutFieldDataEx(pRecordset, L"DetTimes", VT_INT, sResultOfAppearance.strDetTimes);
			PutFieldDataEx(pRecordset, L"DetBegTime", VT_DATE, sResultOfAppearance.strDetBegTime);
			PutFieldDataEx(pRecordset, L"DetEndTime", VT_DATE, sResultOfAppearance.strDetEndTime);	
			
			wchar_t wchTemp[128] = {0};
			for (int i=0; i<MAX_APP_ITEM; i++)
			{
				wsprintf(wchTemp, L"ItemName%02d", i+1);
				PutFieldDataEx(pRecordset, wchTemp, VT_BSTR, sResultOfAppearance.strItemName[i]);
				wsprintf(wchTemp, L"ItemJudge%02d", i+1);
				PutFieldDataEx(pRecordset, wchTemp, VT_INT, sResultOfAppearance.strItemJudge[i]);
				wsprintf(wchTemp, L"ItemIsVeto%02d", i+1);
				PutFieldDataEx(pRecordset, wchTemp, VT_BOOL, sResultOfAppearance.strItemIsVeto[i]);
				wsprintf(wchTemp, L"ItemRemark%02d", i+1);
				PutFieldDataEx(pRecordset, wchTemp, VT_BSTR, sResultOfAppearance.strItemRemark[i]);
			}
			PutFieldDataEx(pRecordset, L"Pass", VT_BOOL, sResultOfAppearance.strPass);
			PutFieldDataEx(pRecordset, L"Remark", VT_BSTR, sResultOfAppearance.strRemark);
			PutFieldDataEx(pRecordset, L"Reserved1", VT_BSTR, sResultOfAppearance.strReserved1);
			PutFieldDataEx(pRecordset, L"Reserved2", VT_BSTR, sResultOfAppearance.strReserved2);
			PutFieldDataEx(pRecordset, L"Reserved3", VT_BSTR, sResultOfAppearance.strReserved3);

			pRecordset->Update();  // 保存到库中

			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboResultOfEECS(const wchar_t wchSql[SQLMAX], SResultOfEECS* const pResultOfEECS)
{
	assert(NULL != wchSql);
	assert(NULL != pResultOfEECS);

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			if (!pRecordset->adoEOF)
			{
				pResultOfEECS->strAutoID = GetFieldDataEx(pRecordset, L"AutoID");
				pResultOfEECS->strRunningNumber = GetFieldDataEx(pRecordset, L"RunningNumber");
				pResultOfEECS->strOperator = GetFieldDataEx(pRecordset, L"Operator");
				pResultOfEECS->strDetTimes = GetFieldDataEx(pRecordset, L"DetTimes");
				pResultOfEECS->strDetBegTime = GetFieldDataEx(pRecordset, L"DetBegTime");
				pResultOfEECS->strDetEndTime = GetFieldDataEx(pRecordset, L"DetEndTime");
				pResultOfEECS->strOilinInitPress = GetFieldDataEx(pRecordset, L"OilinInitPress");
				pResultOfEECS->strOilinLostPress = GetFieldDataEx(pRecordset, L"OilinLostPress");
				pResultOfEECS->strOilinPass = GetFieldDataEx(pRecordset, L"OilinPass");
				pResultOfEECS->strCapInitPress = GetFieldDataEx(pRecordset, L"CapInitPress");
				pResultOfEECS->strCapLostPress = GetFieldDataEx(pRecordset, L"CapLostPress");
				pResultOfEECS->strCapPass = GetFieldDataEx(pRecordset, L"CapPass");
				pResultOfEECS->strPass = GetFieldDataEx(pRecordset, L"Pass");
				pResultOfEECS->strRemark = GetFieldDataEx(pRecordset, L"Remark");
				pResultOfEECS->strReserved1 = GetFieldDataEx(pRecordset, L"Reserved1");
				pResultOfEECS->strReserved2 = GetFieldDataEx(pRecordset, L"Reserved2");
				pResultOfEECS->strReserved3 = GetFieldDataEx(pRecordset, L"Reserved3");

				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD SetDboResultOfEECS(const SResultOfEECS &sResultOfEECS)
{
	assert(&sResultOfEECS != NULL);

	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"select * from ResultOfEECS where RunningNumber='%s'", sResultOfEECS.strRunningNumber.c_str());

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if(pRecordset->adoEOF)
			{
				pRecordset->AddNew();    //添加新记录
			}
			
			PutFieldDataEx(pRecordset, L"RunningNumber", VT_BSTR, sResultOfEECS.strRunningNumber);
			PutFieldDataEx(pRecordset, L"Operator", VT_BSTR, sResultOfEECS.strOperator);
			PutFieldDataEx(pRecordset, L"DetTimes", VT_INT, sResultOfEECS.strDetTimes);
			PutFieldDataEx(pRecordset, L"DetBegTime", VT_DATE, sResultOfEECS.strDetBegTime);
			PutFieldDataEx(pRecordset, L"DetEndTime", VT_DATE, sResultOfEECS.strDetEndTime);
			PutFieldDataEx(pRecordset, L"OilinInitPress", VT_INT, sResultOfEECS.strOilinInitPress);
			PutFieldDataEx(pRecordset, L"OilinLostPress", VT_INT, sResultOfEECS.strOilinLostPress);
			PutFieldDataEx(pRecordset, L"OilinPass", VT_BOOL, sResultOfEECS.strOilinPass);
			PutFieldDataEx(pRecordset, L"CapInitPress", VT_INT, sResultOfEECS.strCapInitPress);
			PutFieldDataEx(pRecordset, L"CapLostPress", VT_INT, sResultOfEECS.strCapLostPress);
			PutFieldDataEx(pRecordset, L"CapPass", VT_BOOL, sResultOfEECS.strCapPass);
			PutFieldDataEx(pRecordset, L"Pass", VT_BOOL, sResultOfEECS.strPass);
			PutFieldDataEx(pRecordset, L"Remark", VT_BSTR, sResultOfEECS.strRemark);
			PutFieldDataEx(pRecordset, L"Reserved1", VT_BSTR, sResultOfEECS.strReserved1);
			PutFieldDataEx(pRecordset, L"Reserved2", VT_BSTR, sResultOfEECS.strReserved2);
			PutFieldDataEx(pRecordset, L"Reserved3", VT_BSTR, sResultOfEECS.strReserved3);

			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboResultOfRingelmann(const wchar_t wchSql[SQLMAX], SResultOfRingelmann* const pResultOfRingelmann)
{
	assert(NULL != wchSql);
	assert(NULL != pResultOfRingelmann);

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			if (!pRecordset->adoEOF)
			{
				pResultOfRingelmann->strAutoID = GetFieldDataEx(pRecordset, L"AutoID");
				pResultOfRingelmann->strRunningNumber = GetFieldDataEx(pRecordset, L"RunningNumber");
				pResultOfRingelmann->strOperator = GetFieldDataEx(pRecordset, L"Operator");
				pResultOfRingelmann->strDetTimes = GetFieldDataEx(pRecordset, L"DetTimes");
				pResultOfRingelmann->strDetBegTime = GetFieldDataEx(pRecordset, L"DetBegTime");
				pResultOfRingelmann->strDetEndTime = GetFieldDataEx(pRecordset, L"DetEndTime");
				pResultOfRingelmann->strHasVisibleSmoke = GetFieldDataEx(pRecordset, L"HasVisibleSmoke");
				pResultOfRingelmann->strRingelmannNumber = GetFieldDataEx(pRecordset, L"RingelmannNumber");
				pResultOfRingelmann->strPass = GetFieldDataEx(pRecordset, L"Pass");
				pResultOfRingelmann->strHash = GetFieldDataEx(pRecordset, L"Hash");
				pResultOfRingelmann->strRemark = GetFieldDataEx(pRecordset, L"Remark");
				pResultOfRingelmann->strReserved1 = GetFieldDataEx(pRecordset, L"Reserved1");
				pResultOfRingelmann->strReserved2 = GetFieldDataEx(pRecordset, L"Reserved2");
				pResultOfRingelmann->strReserved3 = GetFieldDataEx(pRecordset, L"Reserved3");

				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD SetDboResultOfRingelmann(const SResultOfRingelmann &sResultOfRingelmann)
{
	assert(&sResultOfRingelmann != NULL);

	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"select * from ResultOfRingelmann where RunningNumber='%s'", sResultOfRingelmann.strRunningNumber.c_str());

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if(pRecordset->adoEOF)
			{
				pRecordset->AddNew();    //添加新记录
			}
			
			PutFieldDataEx(pRecordset, L"RunningNumber", VT_BSTR, sResultOfRingelmann.strRunningNumber);
			PutFieldDataEx(pRecordset, L"Operator", VT_BSTR, sResultOfRingelmann.strOperator);
			PutFieldDataEx(pRecordset, L"DetTimes", VT_INT, sResultOfRingelmann.strDetTimes);
			PutFieldDataEx(pRecordset, L"DetBegTime", VT_DATE, sResultOfRingelmann.strDetBegTime);
			PutFieldDataEx(pRecordset, L"DetEndTime", VT_DATE, sResultOfRingelmann.strDetEndTime);
			PutFieldDataEx(pRecordset, L"HasVisibleSmoke", VT_BOOL, sResultOfRingelmann.strHasVisibleSmoke);
			PutFieldDataEx(pRecordset, L"RingelmannNumber", VT_INT, sResultOfRingelmann.strRingelmannNumber);
			PutFieldDataEx(pRecordset, L"Pass", VT_BOOL, sResultOfRingelmann.strPass);
			PutFieldDataEx(pRecordset, L"Hash", VT_BSTR, sResultOfRingelmann.strHash);
			PutFieldDataEx(pRecordset, L"Remark", VT_BSTR, sResultOfRingelmann.strRemark);
			PutFieldDataEx(pRecordset, L"Reserved1", VT_BSTR, sResultOfRingelmann.strReserved1);
			PutFieldDataEx(pRecordset, L"Reserved2", VT_BSTR, sResultOfRingelmann.strReserved2);
			PutFieldDataEx(pRecordset, L"Reserved3", VT_BSTR, sResultOfRingelmann.strReserved3);

			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboAppPhotoInfo(const wchar_t wchSql[SQLMAX], std::vector<SAppPhotoInfo> &vtAppPhotoInfo)
{
	assert(NULL != wchSql);

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			while (!pRecordset->adoEOF)
			{
				SAppPhotoInfo sAppPhotoInfo;
				sAppPhotoInfo.strAutoID = GetFieldDataEx(pRecordset, L"AutoID");
				sAppPhotoInfo.strRunningNumber = GetFieldDataEx(pRecordset, L"RunningNumber");
				sAppPhotoInfo.strRemark = GetFieldDataEx(pRecordset, L"Remark");
				sAppPhotoInfo.strReserved1 = GetFieldDataEx(pRecordset, L"Reserved1");
				sAppPhotoInfo.strReserved2 = GetFieldDataEx(pRecordset, L"Reserved2");
				sAppPhotoInfo.strReserved3 = GetFieldDataEx(pRecordset, L"Reserved3");
				vtAppPhotoInfo.push_back(sAppPhotoInfo);

				pRecordset->MoveNext();
				dwReturn = 0x01;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD SetDboAppPhotoInfo(const std::vector<SAppPhotoInfo> &vtAppPhotoInfo)
{
	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		for (UINT i=0; i<vtAppPhotoInfo.size(); i++)
		{
			try
			{
				wchar_t wchSql[SQLMAX];
				wsprintf(wchSql, L"select * from AppPhotoInfo where RunningNumber='%s' and Code='%s'", 
					vtAppPhotoInfo[i].strRunningNumber.c_str(), vtAppPhotoInfo[i].strCode.c_str());

				pRecordset.CreateInstance(L"ADODB.Recordset");
				pRecordset->Open((_bstr_t)wchSql, 
					_variant_t((IDispatch*)pConnection, true), 
					adOpenStatic, 
					adLockOptimistic, 
					adCmdText);

				if(pRecordset->adoEOF)
				{
					pRecordset->AddNew();    //添加新记录
				}

				PutFieldDataEx(pRecordset, L"RunningNumber", VT_BSTR, vtAppPhotoInfo[i].strRunningNumber);
				PutFieldDataEx(pRecordset, L"Code", VT_BSTR, vtAppPhotoInfo[i].strCode);
				PutFieldDataEx(pRecordset, L"Name", VT_BSTR, vtAppPhotoInfo[i].strName);
				PutFieldDataEx(pRecordset, L"Remark", VT_BSTR, vtAppPhotoInfo[i].strRemark);
				PutFieldDataEx(pRecordset, L"Reserved1", VT_BSTR, vtAppPhotoInfo[i].strReserved1);
				PutFieldDataEx(pRecordset, L"Reserved2", VT_BSTR, vtAppPhotoInfo[i].strReserved2);
				PutFieldDataEx(pRecordset, L"Reserved3", VT_BSTR, vtAppPhotoInfo[i].strReserved3);

				pRecordset->Update();
			}
			catch (_com_error &e)
			{
				WriteDatabaseError(e);
				dwReturn = 0xff;
			}

			try
			{
				//关闭记录集
				if (NULL != pRecordset && adStateClosed != pRecordset->State)
				{
					pRecordset->Close();
				}
				if (NULL != pRecordset)
				{
					pRecordset.Release();
					pRecordset = NULL;
				}
			}
			catch (_com_error &e)
			{
				WriteDatabaseError(e);
				dwReturn = 0xff;
			}
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboTestPhotoData(const wchar_t wchSql[SQLMAX], std::vector<STestPhotoData> &vtTestPhotoData)
{
	assert(NULL != wchSql);

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			while (!pRecordset->adoEOF)
			{
				STestPhotoData sTestPhotoData;
				sTestPhotoData.strAutoID = GetFieldDataEx(pRecordset, L"AutoID");
				sTestPhotoData.strRunningNumber = GetFieldDataEx(pRecordset, L"RunningNumber");
				sTestPhotoData.strFileTime = GetFieldDataEx(pRecordset, L"FileTime");
				sTestPhotoData.strFilePath = GetFieldDataEx(pRecordset, L"FilePath");
				// 读取二进制字段
				GetImageFieldData(pRecordset, L"FileData", sTestPhotoData.strFileData);
				sTestPhotoData.strRemark = GetFieldDataEx(pRecordset, L"Remark");
				sTestPhotoData.strReserved1 = GetFieldDataEx(pRecordset, L"Reserved1");
				sTestPhotoData.strReserved2 = GetFieldDataEx(pRecordset, L"Reserved2");
				sTestPhotoData.strReserved3 = GetFieldDataEx(pRecordset, L"Reserved3");
				vtTestPhotoData.push_back(sTestPhotoData);

				pRecordset->MoveNext();
				dwReturn = 0x01;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD SetDboTestPhotoData(const std::vector<STestPhotoData> &vtTestPhotoData)
{
	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		for (UINT i=0; i<vtTestPhotoData.size(); i++)
		{
			try
			{
				wchar_t wchSql[SQLMAX];
				wsprintf(wchSql, L"select * from TestPhotoData where RunningNumber='%s' and Code='%s'", 
					vtTestPhotoData[i].strRunningNumber.c_str(), vtTestPhotoData[i].strCode.c_str());

				pRecordset.CreateInstance(L"ADODB.Recordset");
				pRecordset->Open((_bstr_t)wchSql, 
					_variant_t((IDispatch*)pConnection, true), 
					adOpenStatic, 
					adLockOptimistic, 
					adCmdText);

				if (pRecordset->adoEOF)
				{
					pRecordset->AddNew();    //添加新记录
				}

				PutFieldDataEx(pRecordset, L"RunningNumber", VT_BSTR, vtTestPhotoData[i].strRunningNumber);
				PutFieldDataEx(pRecordset, L"Code", VT_BSTR, vtTestPhotoData[i].strCode);
				PutFieldDataEx(pRecordset, L"Name", VT_BSTR, vtTestPhotoData[i].strName);
				PutFieldDataEx(pRecordset, L"FileTime", VT_DATE, vtTestPhotoData[i].strFileTime);
				PutFieldDataEx(pRecordset, L"FilePath", VT_BSTR, vtTestPhotoData[i].strFilePath);
				// 写二进制字段
				PutImageFieldData(pRecordset, L"FileData", vtTestPhotoData[i].strFileData);
				PutFieldDataEx(pRecordset, L"Remark", VT_BSTR, vtTestPhotoData[i].strRemark);
				PutFieldDataEx(pRecordset, L"Reserved1", VT_BSTR, vtTestPhotoData[i].strReserved1);
				PutFieldDataEx(pRecordset, L"Reserved2", VT_BSTR, vtTestPhotoData[i].strReserved2);
				PutFieldDataEx(pRecordset, L"Reserved3", VT_BSTR, vtTestPhotoData[i].strReserved3);

				pRecordset->Update();
			}
			catch (_com_error &e)
			{
				WriteDatabaseError(e);
				dwReturn = 0xff;
			}

			try
			{
				//关闭记录集
				if (NULL != pRecordset && adStateClosed != pRecordset->State)
				{
					pRecordset->Close();
				}
				if (NULL != pRecordset)
				{
					pRecordset.Release();
					pRecordset = NULL;
				}
			}
			catch (_com_error &e)
			{
				WriteDatabaseError(e);
				dwReturn = 0xff;
			}
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

// 获取白名单修改的参数
DWORD GetDboWhiteModifiedParameters(const wchar_t wchSql[SQLMAX], SWhiteModifiedParameters* const pWhiteModifiedParameters)
{
	assert(NULL != wchSql);
	assert(NULL != pWhiteModifiedParameters);

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			if (!pRecordset->adoEOF)
			{
				pWhiteModifiedParameters->strAutoID = GetFieldDataEx(pRecordset, L"AutoID");
				pWhiteModifiedParameters->strA = GetFieldDataEx(pRecordset, L"A");
				pWhiteModifiedParameters->strB = GetFieldDataEx(pRecordset, L"B");
				pWhiteModifiedParameters->strC = GetFieldDataEx(pRecordset, L"C");
				pWhiteModifiedParameters->strD = GetFieldDataEx(pRecordset, L"D");
				pWhiteModifiedParameters->strE = GetFieldDataEx(pRecordset, L"E");
				pWhiteModifiedParameters->strF = GetFieldDataEx(pRecordset, L"F");
				pWhiteModifiedParameters->strG = GetFieldDataEx(pRecordset, L"G");
				pWhiteModifiedParameters->strH = GetFieldDataEx(pRecordset, L"H");
				pWhiteModifiedParameters->strI = GetFieldDataEx(pRecordset, L"I");
				pWhiteModifiedParameters->strJ = GetFieldDataEx(pRecordset, L"J");
				pWhiteModifiedParameters->strK = GetFieldDataEx(pRecordset, L"K");
				pWhiteModifiedParameters->strL = GetFieldDataEx(pRecordset, L"L");
				pWhiteModifiedParameters->strM = GetFieldDataEx(pRecordset, L"M");
				pWhiteModifiedParameters->strN = GetFieldDataEx(pRecordset, L"N");
				pWhiteModifiedParameters->strO = GetFieldDataEx(pRecordset, L"O");
				pWhiteModifiedParameters->strP = GetFieldDataEx(pRecordset, L"P");
				pWhiteModifiedParameters->strQ = GetFieldDataEx(pRecordset, L"Q");
				pWhiteModifiedParameters->strR = GetFieldDataEx(pRecordset, L"R");
				pWhiteModifiedParameters->strS = GetFieldDataEx(pRecordset, L"S");
				pWhiteModifiedParameters->strT = GetFieldDataEx(pRecordset, L"T");
				pWhiteModifiedParameters->strU = GetFieldDataEx(pRecordset, L"U");
				pWhiteModifiedParameters->strV = GetFieldDataEx(pRecordset, L"V");
				pWhiteModifiedParameters->strW = GetFieldDataEx(pRecordset, L"W");
				pWhiteModifiedParameters->strX = GetFieldDataEx(pRecordset, L"X");
				pWhiteModifiedParameters->strY = GetFieldDataEx(pRecordset, L"Y");
				pWhiteModifiedParameters->strZ = GetFieldDataEx(pRecordset, L"Z");

				dwReturn = 0x01;
			}
			else
			{
				dwReturn = 0x00;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}

DWORD GetDboWhiteModifiedParameters(const wchar_t wchSql[SQLMAX], std::vector<SWhiteModifiedParameters> & vtWhiteModifiedParameters)
{
	assert(NULL != wchSql);

	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql,
				_variant_t((IDispatch*)pConnection, true),
				adOpenStatic,
				adLockOptimistic,
				adCmdText);

			while (!pRecordset->adoEOF)
			{
				SWhiteModifiedParameters sWhiteModifiedParameters;
				sWhiteModifiedParameters.strAutoID = GetFieldDataEx(pRecordset, L"AutoID");
				sWhiteModifiedParameters.strA = GetFieldDataEx(pRecordset, L"A");
				sWhiteModifiedParameters.strB = GetFieldDataEx(pRecordset, L"B");
				sWhiteModifiedParameters.strC = GetFieldDataEx(pRecordset, L"C");
				sWhiteModifiedParameters.strD = GetFieldDataEx(pRecordset, L"D");
				sWhiteModifiedParameters.strE = GetFieldDataEx(pRecordset, L"E");
				sWhiteModifiedParameters.strF = GetFieldDataEx(pRecordset, L"F");
				sWhiteModifiedParameters.strG = GetFieldDataEx(pRecordset, L"G");
				sWhiteModifiedParameters.strH = GetFieldDataEx(pRecordset, L"H");
				sWhiteModifiedParameters.strI = GetFieldDataEx(pRecordset, L"I");
				sWhiteModifiedParameters.strJ = GetFieldDataEx(pRecordset, L"J");
				sWhiteModifiedParameters.strK = GetFieldDataEx(pRecordset, L"K");
				sWhiteModifiedParameters.strL = GetFieldDataEx(pRecordset, L"L");
				sWhiteModifiedParameters.strM = GetFieldDataEx(pRecordset, L"M");
				sWhiteModifiedParameters.strN = GetFieldDataEx(pRecordset, L"N");
				sWhiteModifiedParameters.strO = GetFieldDataEx(pRecordset, L"O");
				sWhiteModifiedParameters.strP = GetFieldDataEx(pRecordset, L"P");
				sWhiteModifiedParameters.strQ = GetFieldDataEx(pRecordset, L"Q");
				sWhiteModifiedParameters.strR = GetFieldDataEx(pRecordset, L"R");
				sWhiteModifiedParameters.strS = GetFieldDataEx(pRecordset, L"S");
				sWhiteModifiedParameters.strT = GetFieldDataEx(pRecordset, L"T");
				sWhiteModifiedParameters.strU = GetFieldDataEx(pRecordset, L"U");
				sWhiteModifiedParameters.strV = GetFieldDataEx(pRecordset, L"V");
				sWhiteModifiedParameters.strW = GetFieldDataEx(pRecordset, L"W");
				sWhiteModifiedParameters.strX = GetFieldDataEx(pRecordset, L"X");
				sWhiteModifiedParameters.strY = GetFieldDataEx(pRecordset, L"Y");
				sWhiteModifiedParameters.strZ = GetFieldDataEx(pRecordset, L"Z");

				vtWhiteModifiedParameters.push_back(sWhiteModifiedParameters);

				pRecordset->MoveNext();

				dwReturn = 0x01;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL!=pRecordset && adStateClosed!=pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}
	}
	else
	{
		dwReturn = 0xff;
	}

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}
// 设置白名单修改的参数
DWORD SetDboWhiteModifiedParameters(const SWhiteModifiedParameters &sWhiteModifiedParameters)
{
	assert(&sWhiteModifiedParameters != NULL);

	//返回值
	DWORD dwReturn(0x00);

	_ConnectionPtr pConnection(NULL);

	if (0x00 == ConnectDatabase(pConnection))
	{
		_RecordsetPtr pRecordset;

		try
		{
			wchar_t wchSql[SQLMAX];
			wsprintf(wchSql, L"select * from WhiteModifiedParameters where A='%s'", sWhiteModifiedParameters.strA.c_str());

			pRecordset.CreateInstance(L"ADODB.Recordset");
			pRecordset->Open((_bstr_t)wchSql, 
				_variant_t((IDispatch*)pConnection, true), 
				adOpenStatic, 
				adLockOptimistic, 
				adCmdText);

			if(pRecordset->adoEOF)
			{
				pRecordset->AddNew();    //添加新记录
			}
			
			PutFieldDataEx(pRecordset, L"A", VT_BSTR, sWhiteModifiedParameters.strA);
			PutFieldDataEx(pRecordset, L"B", VT_BSTR, sWhiteModifiedParameters.strB);
			PutFieldDataEx(pRecordset, L"C", VT_BSTR, sWhiteModifiedParameters.strC);
			PutFieldDataEx(pRecordset, L"D", VT_BSTR, sWhiteModifiedParameters.strD);
			PutFieldDataEx(pRecordset, L"E", VT_BSTR, sWhiteModifiedParameters.strE);
			PutFieldDataEx(pRecordset, L"F", VT_BSTR, sWhiteModifiedParameters.strF);
			PutFieldDataEx(pRecordset, L"G", VT_BSTR, sWhiteModifiedParameters.strG);
			PutFieldDataEx(pRecordset, L"H", VT_BSTR, sWhiteModifiedParameters.strH);
			PutFieldDataEx(pRecordset, L"L", VT_BSTR, sWhiteModifiedParameters.strI);
			PutFieldDataEx(pRecordset, L"J", VT_BSTR, sWhiteModifiedParameters.strJ);
			PutFieldDataEx(pRecordset, L"K", VT_BSTR, sWhiteModifiedParameters.strK);
			PutFieldDataEx(pRecordset, L"L", VT_BSTR, sWhiteModifiedParameters.strL);
			PutFieldDataEx(pRecordset, L"M", VT_BSTR, sWhiteModifiedParameters.strM);
			PutFieldDataEx(pRecordset, L"N", VT_BSTR, sWhiteModifiedParameters.strN);
			PutFieldDataEx(pRecordset, L"O", VT_BSTR, sWhiteModifiedParameters.strO);
			PutFieldDataEx(pRecordset, L"P", VT_BSTR, sWhiteModifiedParameters.strP);
			PutFieldDataEx(pRecordset, L"Q", VT_BSTR, sWhiteModifiedParameters.strQ);
			PutFieldDataEx(pRecordset, L"R", VT_BSTR, sWhiteModifiedParameters.strR);
			PutFieldDataEx(pRecordset, L"S", VT_BSTR, sWhiteModifiedParameters.strS);
			PutFieldDataEx(pRecordset, L"T", VT_BSTR, sWhiteModifiedParameters.strT);
			PutFieldDataEx(pRecordset, L"U", VT_BSTR, sWhiteModifiedParameters.strU);
			PutFieldDataEx(pRecordset, L"V", VT_BSTR, sWhiteModifiedParameters.strV);
			PutFieldDataEx(pRecordset, L"W", VT_BSTR, sWhiteModifiedParameters.strW);
			PutFieldDataEx(pRecordset, L"X", VT_BSTR, sWhiteModifiedParameters.strX);
			PutFieldDataEx(pRecordset, L"Y", VT_BSTR, sWhiteModifiedParameters.strY);
			PutFieldDataEx(pRecordset, L"Z", VT_BSTR, sWhiteModifiedParameters.strZ);

			pRecordset->Update();
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

		try
		{
			//关闭记录集
			if (NULL != pRecordset && adStateClosed != pRecordset->State)
			{
				pRecordset->Close();
			}
			if (NULL != pRecordset)
			{
				pRecordset.Release();
				pRecordset = NULL;
			}
		}
		catch (_com_error &e)
		{
			WriteDatabaseError(e);
			dwReturn = 0xff;
		}

	}  // if (0x00 == ConnectDatabase(pConnection))

	if (0x00 != DisconnectDatabase(pConnection))
	{
		dwReturn = 0xff;
	}

	return dwReturn;
}