/* soapH.h
   Generated by gSOAP 2.8.21 from service[1].h

Copyright(C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap*, const char*, void*, size_t, int, int, size_t, unsigned int);

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_byte(soap, data),0) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_int(soap, data),0) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_LONG64
#define SOAP_TYPE_LONG64 (63)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap*, LONG64 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap*, const char*, int, const LONG64 *, const char*);
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap*, const char*, LONG64 *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap*, const LONG64 *, const char*, const char*);

#ifndef soap_write_LONG64
#define soap_write_LONG64(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_LONG64(soap, data),0) || soap_put_LONG64(soap, data, "long", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap*, LONG64 *, const char*, const char*);

#ifndef soap_read_LONG64
#define soap_read_LONG64(soap, data) ( soap_begin_recv(soap) || !soap_get_LONG64(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_std__wstring
#define SOAP_TYPE_std__wstring (59)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__wstring(struct soap*, std::wstring *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__wstring(struct soap*, const std::wstring *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__wstring(struct soap*, const char*, int, const std::wstring*, const char*);
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_std__wstring(struct soap*, const char*, std::wstring*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__wstring(struct soap*, const std::wstring *, const char*, const char*);

#ifndef soap_write_std__wstring
#define soap_write_std__wstring(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_std__wstring(soap, data),0) || soap_put_std__wstring(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_std__wstring(struct soap*, std::wstring *, const char*, const char*);

#ifndef soap_read_std__wstring
#define soap_read_std__wstring(soap, data) ( soap_begin_recv(soap) || !soap_get_std__wstring(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 std::wstring * SOAP_FMAC2 soap_instantiate_std__wstring(struct soap*, int, const char*, const char*, size_t*);

inline std::wstring * soap_new_std__wstring(struct soap *soap, int n = -1) { return soap_instantiate_std__wstring(soap, n, NULL, NULL, NULL); }

inline std::wstring * soap_new_req_std__wstring(struct soap *soap) { std::wstring *_p = soap_instantiate_std__wstring(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__wstring(soap, _p); } return _p; }

inline std::wstring * soap_new_set_std__wstring(struct soap *soap) { std::wstring *_p = soap_instantiate_std__wstring(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__wstring(soap, _p); } return _p; }

inline void soap_delete_std__wstring(struct soap *soap, std::wstring *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__wstring(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__OBDTXCheckResponse
#define SOAP_TYPE__ns1__OBDTXCheckResponse (58)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OBDTXCheckResponse(struct soap*, const char*, int, const _ns1__OBDTXCheckResponse *, const char*);
SOAP_FMAC3 _ns1__OBDTXCheckResponse * SOAP_FMAC4 soap_in__ns1__OBDTXCheckResponse(struct soap*, const char*, _ns1__OBDTXCheckResponse *, const char*);

#ifndef soap_write__ns1__OBDTXCheckResponse
#define soap_write__ns1__OBDTXCheckResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:OBDTXCheckResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__OBDTXCheckResponse * SOAP_FMAC4 soap_get__ns1__OBDTXCheckResponse(struct soap*, _ns1__OBDTXCheckResponse *, const char*, const char*);

#ifndef soap_read__ns1__OBDTXCheckResponse
#define soap_read__ns1__OBDTXCheckResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__OBDTXCheckResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__OBDTXCheckResponse * SOAP_FMAC2 soap_instantiate__ns1__OBDTXCheckResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__OBDTXCheckResponse * soap_new__ns1__OBDTXCheckResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__OBDTXCheckResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__OBDTXCheckResponse * soap_new_req__ns1__OBDTXCheckResponse(struct soap *soap, ns1__RetValue *OBDTXCheckResult) { _ns1__OBDTXCheckResponse *_p = soap_instantiate__ns1__OBDTXCheckResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__OBDTXCheckResponse::OBDTXCheckResult = OBDTXCheckResult; } return _p; }

inline _ns1__OBDTXCheckResponse * soap_new_set__ns1__OBDTXCheckResponse(struct soap *soap, ns1__RetValue *OBDTXCheckResult) { _ns1__OBDTXCheckResponse *_p = soap_instantiate__ns1__OBDTXCheckResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__OBDTXCheckResponse::OBDTXCheckResult = OBDTXCheckResult; } return _p; }

inline void soap_delete__ns1__OBDTXCheckResponse(struct soap *soap, _ns1__OBDTXCheckResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__OBDTXCheckResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__OBDTXCheck
#define SOAP_TYPE__ns1__OBDTXCheck (57)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OBDTXCheck(struct soap*, const char*, int, const _ns1__OBDTXCheck *, const char*);
SOAP_FMAC3 _ns1__OBDTXCheck * SOAP_FMAC4 soap_in__ns1__OBDTXCheck(struct soap*, const char*, _ns1__OBDTXCheck *, const char*);

#ifndef soap_write__ns1__OBDTXCheck
#define soap_write__ns1__OBDTXCheck(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:OBDTXCheck", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__OBDTXCheck * SOAP_FMAC4 soap_get__ns1__OBDTXCheck(struct soap*, _ns1__OBDTXCheck *, const char*, const char*);

#ifndef soap_read__ns1__OBDTXCheck
#define soap_read__ns1__OBDTXCheck(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__OBDTXCheck(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__OBDTXCheck * SOAP_FMAC2 soap_instantiate__ns1__OBDTXCheck(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__OBDTXCheck * soap_new__ns1__OBDTXCheck(struct soap *soap, int n = -1) { return soap_instantiate__ns1__OBDTXCheck(soap, n, NULL, NULL, NULL); }

inline _ns1__OBDTXCheck * soap_new_req__ns1__OBDTXCheck(struct soap *soap) { _ns1__OBDTXCheck *_p = soap_instantiate__ns1__OBDTXCheck(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__OBDTXCheck * soap_new_set__ns1__OBDTXCheck(struct soap *soap, std::wstring *VIN) { _ns1__OBDTXCheck *_p = soap_instantiate__ns1__OBDTXCheck(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__OBDTXCheck::VIN = VIN; } return _p; }

inline void soap_delete__ns1__OBDTXCheck(struct soap *soap, _ns1__OBDTXCheck *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__OBDTXCheck(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__OBDInspectResponse
#define SOAP_TYPE__ns1__OBDInspectResponse (56)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OBDInspectResponse(struct soap*, const char*, int, const _ns1__OBDInspectResponse *, const char*);
SOAP_FMAC3 _ns1__OBDInspectResponse * SOAP_FMAC4 soap_in__ns1__OBDInspectResponse(struct soap*, const char*, _ns1__OBDInspectResponse *, const char*);

#ifndef soap_write__ns1__OBDInspectResponse
#define soap_write__ns1__OBDInspectResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:OBDInspectResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__OBDInspectResponse * SOAP_FMAC4 soap_get__ns1__OBDInspectResponse(struct soap*, _ns1__OBDInspectResponse *, const char*, const char*);

#ifndef soap_read__ns1__OBDInspectResponse
#define soap_read__ns1__OBDInspectResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__OBDInspectResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__OBDInspectResponse * SOAP_FMAC2 soap_instantiate__ns1__OBDInspectResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__OBDInspectResponse * soap_new__ns1__OBDInspectResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__OBDInspectResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__OBDInspectResponse * soap_new_req__ns1__OBDInspectResponse(struct soap *soap, ns1__RetValue *OBDInspectResult) { _ns1__OBDInspectResponse *_p = soap_instantiate__ns1__OBDInspectResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__OBDInspectResponse::OBDInspectResult = OBDInspectResult; } return _p; }

inline _ns1__OBDInspectResponse * soap_new_set__ns1__OBDInspectResponse(struct soap *soap, ns1__RetValue *OBDInspectResult) { _ns1__OBDInspectResponse *_p = soap_instantiate__ns1__OBDInspectResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__OBDInspectResponse::OBDInspectResult = OBDInspectResult; } return _p; }

inline void soap_delete__ns1__OBDInspectResponse(struct soap *soap, _ns1__OBDInspectResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__OBDInspectResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__OBDInspect
#define SOAP_TYPE__ns1__OBDInspect (55)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OBDInspect(struct soap*, const char*, int, const _ns1__OBDInspect *, const char*);
SOAP_FMAC3 _ns1__OBDInspect * SOAP_FMAC4 soap_in__ns1__OBDInspect(struct soap*, const char*, _ns1__OBDInspect *, const char*);

#ifndef soap_write__ns1__OBDInspect
#define soap_write__ns1__OBDInspect(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:OBDInspect", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__OBDInspect * SOAP_FMAC4 soap_get__ns1__OBDInspect(struct soap*, _ns1__OBDInspect *, const char*, const char*);

#ifndef soap_read__ns1__OBDInspect
#define soap_read__ns1__OBDInspect(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__OBDInspect(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__OBDInspect * SOAP_FMAC2 soap_instantiate__ns1__OBDInspect(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__OBDInspect * soap_new__ns1__OBDInspect(struct soap *soap, int n = -1) { return soap_instantiate__ns1__OBDInspect(soap, n, NULL, NULL, NULL); }

inline _ns1__OBDInspect * soap_new_req__ns1__OBDInspect(struct soap *soap, LONG64 LineID) { _ns1__OBDInspect *_p = soap_instantiate__ns1__OBDInspect(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__OBDInspect::LineID = LineID; } return _p; }

inline _ns1__OBDInspect * soap_new_set__ns1__OBDInspect(struct soap *soap, LONG64 LineID, std::wstring *InspectID, std::wstring *sOBDData, std::wstring *Memo) { _ns1__OBDInspect *_p = soap_instantiate__ns1__OBDInspect(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__OBDInspect::LineID = LineID; _p->_ns1__OBDInspect::InspectID = InspectID; _p->_ns1__OBDInspect::sOBDData = sOBDData; _p->_ns1__OBDInspect::Memo = Memo; } return _p; }

inline void soap_delete__ns1__OBDInspect(struct soap *soap, _ns1__OBDInspect *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__OBDInspect(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetOtherInspectQueueByDateResponse
#define SOAP_TYPE__ns1__GetOtherInspectQueueByDateResponse (54)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetOtherInspectQueueByDateResponse(struct soap*, const char*, int, const _ns1__GetOtherInspectQueueByDateResponse *, const char*);
SOAP_FMAC3 _ns1__GetOtherInspectQueueByDateResponse * SOAP_FMAC4 soap_in__ns1__GetOtherInspectQueueByDateResponse(struct soap*, const char*, _ns1__GetOtherInspectQueueByDateResponse *, const char*);

#ifndef soap_write__ns1__GetOtherInspectQueueByDateResponse
#define soap_write__ns1__GetOtherInspectQueueByDateResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:GetOtherInspectQueueByDateResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetOtherInspectQueueByDateResponse * SOAP_FMAC4 soap_get__ns1__GetOtherInspectQueueByDateResponse(struct soap*, _ns1__GetOtherInspectQueueByDateResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetOtherInspectQueueByDateResponse
#define soap_read__ns1__GetOtherInspectQueueByDateResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetOtherInspectQueueByDateResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetOtherInspectQueueByDateResponse * SOAP_FMAC2 soap_instantiate__ns1__GetOtherInspectQueueByDateResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetOtherInspectQueueByDateResponse * soap_new__ns1__GetOtherInspectQueueByDateResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetOtherInspectQueueByDateResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetOtherInspectQueueByDateResponse * soap_new_req__ns1__GetOtherInspectQueueByDateResponse(struct soap *soap, ns1__RetValue *GetOtherInspectQueueByDateResult) { _ns1__GetOtherInspectQueueByDateResponse *_p = soap_instantiate__ns1__GetOtherInspectQueueByDateResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetOtherInspectQueueByDateResponse::GetOtherInspectQueueByDateResult = GetOtherInspectQueueByDateResult; } return _p; }

inline _ns1__GetOtherInspectQueueByDateResponse * soap_new_set__ns1__GetOtherInspectQueueByDateResponse(struct soap *soap, ns1__RetValue *GetOtherInspectQueueByDateResult) { _ns1__GetOtherInspectQueueByDateResponse *_p = soap_instantiate__ns1__GetOtherInspectQueueByDateResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetOtherInspectQueueByDateResponse::GetOtherInspectQueueByDateResult = GetOtherInspectQueueByDateResult; } return _p; }

inline void soap_delete__ns1__GetOtherInspectQueueByDateResponse(struct soap *soap, _ns1__GetOtherInspectQueueByDateResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetOtherInspectQueueByDateResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetOtherInspectQueueByDate
#define SOAP_TYPE__ns1__GetOtherInspectQueueByDate (53)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetOtherInspectQueueByDate(struct soap*, const char*, int, const _ns1__GetOtherInspectQueueByDate *, const char*);
SOAP_FMAC3 _ns1__GetOtherInspectQueueByDate * SOAP_FMAC4 soap_in__ns1__GetOtherInspectQueueByDate(struct soap*, const char*, _ns1__GetOtherInspectQueueByDate *, const char*);

#ifndef soap_write__ns1__GetOtherInspectQueueByDate
#define soap_write__ns1__GetOtherInspectQueueByDate(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:GetOtherInspectQueueByDate", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetOtherInspectQueueByDate * SOAP_FMAC4 soap_get__ns1__GetOtherInspectQueueByDate(struct soap*, _ns1__GetOtherInspectQueueByDate *, const char*, const char*);

#ifndef soap_read__ns1__GetOtherInspectQueueByDate
#define soap_read__ns1__GetOtherInspectQueueByDate(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetOtherInspectQueueByDate(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetOtherInspectQueueByDate * SOAP_FMAC2 soap_instantiate__ns1__GetOtherInspectQueueByDate(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetOtherInspectQueueByDate * soap_new__ns1__GetOtherInspectQueueByDate(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetOtherInspectQueueByDate(soap, n, NULL, NULL, NULL); }

inline _ns1__GetOtherInspectQueueByDate * soap_new_req__ns1__GetOtherInspectQueueByDate(struct soap *soap) { _ns1__GetOtherInspectQueueByDate *_p = soap_instantiate__ns1__GetOtherInspectQueueByDate(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetOtherInspectQueueByDate * soap_new_set__ns1__GetOtherInspectQueueByDate(struct soap *soap, std::wstring *FromDate, std::wstring *ToDate, std::wstring *QueueType, std::wstring *Memo) { _ns1__GetOtherInspectQueueByDate *_p = soap_instantiate__ns1__GetOtherInspectQueueByDate(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetOtherInspectQueueByDate::FromDate = FromDate; _p->_ns1__GetOtherInspectQueueByDate::ToDate = ToDate; _p->_ns1__GetOtherInspectQueueByDate::QueueType = QueueType; _p->_ns1__GetOtherInspectQueueByDate::Memo = Memo; } return _p; }

inline void soap_delete__ns1__GetOtherInspectQueueByDate(struct soap *soap, _ns1__GetOtherInspectQueueByDate *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetOtherInspectQueueByDate(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetOtherInspectQueueByPlateIDResponse
#define SOAP_TYPE__ns1__GetOtherInspectQueueByPlateIDResponse (52)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetOtherInspectQueueByPlateIDResponse(struct soap*, const char*, int, const _ns1__GetOtherInspectQueueByPlateIDResponse *, const char*);
SOAP_FMAC3 _ns1__GetOtherInspectQueueByPlateIDResponse * SOAP_FMAC4 soap_in__ns1__GetOtherInspectQueueByPlateIDResponse(struct soap*, const char*, _ns1__GetOtherInspectQueueByPlateIDResponse *, const char*);

#ifndef soap_write__ns1__GetOtherInspectQueueByPlateIDResponse
#define soap_write__ns1__GetOtherInspectQueueByPlateIDResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:GetOtherInspectQueueByPlateIDResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetOtherInspectQueueByPlateIDResponse * SOAP_FMAC4 soap_get__ns1__GetOtherInspectQueueByPlateIDResponse(struct soap*, _ns1__GetOtherInspectQueueByPlateIDResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetOtherInspectQueueByPlateIDResponse
#define soap_read__ns1__GetOtherInspectQueueByPlateIDResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetOtherInspectQueueByPlateIDResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetOtherInspectQueueByPlateIDResponse * SOAP_FMAC2 soap_instantiate__ns1__GetOtherInspectQueueByPlateIDResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetOtherInspectQueueByPlateIDResponse * soap_new__ns1__GetOtherInspectQueueByPlateIDResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetOtherInspectQueueByPlateIDResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetOtherInspectQueueByPlateIDResponse * soap_new_req__ns1__GetOtherInspectQueueByPlateIDResponse(struct soap *soap, ns1__RetValue *GetOtherInspectQueueByPlateIDResult) { _ns1__GetOtherInspectQueueByPlateIDResponse *_p = soap_instantiate__ns1__GetOtherInspectQueueByPlateIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetOtherInspectQueueByPlateIDResponse::GetOtherInspectQueueByPlateIDResult = GetOtherInspectQueueByPlateIDResult; } return _p; }

inline _ns1__GetOtherInspectQueueByPlateIDResponse * soap_new_set__ns1__GetOtherInspectQueueByPlateIDResponse(struct soap *soap, ns1__RetValue *GetOtherInspectQueueByPlateIDResult) { _ns1__GetOtherInspectQueueByPlateIDResponse *_p = soap_instantiate__ns1__GetOtherInspectQueueByPlateIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetOtherInspectQueueByPlateIDResponse::GetOtherInspectQueueByPlateIDResult = GetOtherInspectQueueByPlateIDResult; } return _p; }

inline void soap_delete__ns1__GetOtherInspectQueueByPlateIDResponse(struct soap *soap, _ns1__GetOtherInspectQueueByPlateIDResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetOtherInspectQueueByPlateIDResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetOtherInspectQueueByPlateID
#define SOAP_TYPE__ns1__GetOtherInspectQueueByPlateID (51)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetOtherInspectQueueByPlateID(struct soap*, const char*, int, const _ns1__GetOtherInspectQueueByPlateID *, const char*);
SOAP_FMAC3 _ns1__GetOtherInspectQueueByPlateID * SOAP_FMAC4 soap_in__ns1__GetOtherInspectQueueByPlateID(struct soap*, const char*, _ns1__GetOtherInspectQueueByPlateID *, const char*);

#ifndef soap_write__ns1__GetOtherInspectQueueByPlateID
#define soap_write__ns1__GetOtherInspectQueueByPlateID(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:GetOtherInspectQueueByPlateID", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetOtherInspectQueueByPlateID * SOAP_FMAC4 soap_get__ns1__GetOtherInspectQueueByPlateID(struct soap*, _ns1__GetOtherInspectQueueByPlateID *, const char*, const char*);

#ifndef soap_read__ns1__GetOtherInspectQueueByPlateID
#define soap_read__ns1__GetOtherInspectQueueByPlateID(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetOtherInspectQueueByPlateID(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetOtherInspectQueueByPlateID * SOAP_FMAC2 soap_instantiate__ns1__GetOtherInspectQueueByPlateID(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetOtherInspectQueueByPlateID * soap_new__ns1__GetOtherInspectQueueByPlateID(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetOtherInspectQueueByPlateID(soap, n, NULL, NULL, NULL); }

inline _ns1__GetOtherInspectQueueByPlateID * soap_new_req__ns1__GetOtherInspectQueueByPlateID(struct soap *soap, int PlateType) { _ns1__GetOtherInspectQueueByPlateID *_p = soap_instantiate__ns1__GetOtherInspectQueueByPlateID(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetOtherInspectQueueByPlateID::PlateType = PlateType; } return _p; }

inline _ns1__GetOtherInspectQueueByPlateID * soap_new_set__ns1__GetOtherInspectQueueByPlateID(struct soap *soap, std::wstring *PlateID, int PlateType, std::wstring *QueueType, std::wstring *Memo) { _ns1__GetOtherInspectQueueByPlateID *_p = soap_instantiate__ns1__GetOtherInspectQueueByPlateID(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetOtherInspectQueueByPlateID::PlateID = PlateID; _p->_ns1__GetOtherInspectQueueByPlateID::PlateType = PlateType; _p->_ns1__GetOtherInspectQueueByPlateID::QueueType = QueueType; _p->_ns1__GetOtherInspectQueueByPlateID::Memo = Memo; } return _p; }

inline void soap_delete__ns1__GetOtherInspectQueueByPlateID(struct soap *soap, _ns1__GetOtherInspectQueueByPlateID *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetOtherInspectQueueByPlateID(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetInspectParamsResponse
#define SOAP_TYPE__ns1__GetInspectParamsResponse (50)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetInspectParamsResponse(struct soap*, const char*, int, const _ns1__GetInspectParamsResponse *, const char*);
SOAP_FMAC3 _ns1__GetInspectParamsResponse * SOAP_FMAC4 soap_in__ns1__GetInspectParamsResponse(struct soap*, const char*, _ns1__GetInspectParamsResponse *, const char*);

#ifndef soap_write__ns1__GetInspectParamsResponse
#define soap_write__ns1__GetInspectParamsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:GetInspectParamsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetInspectParamsResponse * SOAP_FMAC4 soap_get__ns1__GetInspectParamsResponse(struct soap*, _ns1__GetInspectParamsResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetInspectParamsResponse
#define soap_read__ns1__GetInspectParamsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetInspectParamsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetInspectParamsResponse * SOAP_FMAC2 soap_instantiate__ns1__GetInspectParamsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetInspectParamsResponse * soap_new__ns1__GetInspectParamsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetInspectParamsResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetInspectParamsResponse * soap_new_req__ns1__GetInspectParamsResponse(struct soap *soap, ns1__RetValue *GetInspectParamsResult) { _ns1__GetInspectParamsResponse *_p = soap_instantiate__ns1__GetInspectParamsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetInspectParamsResponse::GetInspectParamsResult = GetInspectParamsResult; } return _p; }

inline _ns1__GetInspectParamsResponse * soap_new_set__ns1__GetInspectParamsResponse(struct soap *soap, ns1__RetValue *GetInspectParamsResult) { _ns1__GetInspectParamsResponse *_p = soap_instantiate__ns1__GetInspectParamsResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetInspectParamsResponse::GetInspectParamsResult = GetInspectParamsResult; } return _p; }

inline void soap_delete__ns1__GetInspectParamsResponse(struct soap *soap, _ns1__GetInspectParamsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetInspectParamsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetInspectParams
#define SOAP_TYPE__ns1__GetInspectParams (49)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetInspectParams(struct soap*, const char*, int, const _ns1__GetInspectParams *, const char*);
SOAP_FMAC3 _ns1__GetInspectParams * SOAP_FMAC4 soap_in__ns1__GetInspectParams(struct soap*, const char*, _ns1__GetInspectParams *, const char*);

#ifndef soap_write__ns1__GetInspectParams
#define soap_write__ns1__GetInspectParams(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:GetInspectParams", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetInspectParams * SOAP_FMAC4 soap_get__ns1__GetInspectParams(struct soap*, _ns1__GetInspectParams *, const char*, const char*);

#ifndef soap_read__ns1__GetInspectParams
#define soap_read__ns1__GetInspectParams(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetInspectParams(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetInspectParams * SOAP_FMAC2 soap_instantiate__ns1__GetInspectParams(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetInspectParams * soap_new__ns1__GetInspectParams(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetInspectParams(soap, n, NULL, NULL, NULL); }

inline _ns1__GetInspectParams * soap_new_req__ns1__GetInspectParams(struct soap *soap) { _ns1__GetInspectParams *_p = soap_instantiate__ns1__GetInspectParams(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetInspectParams * soap_new_set__ns1__GetInspectParams(struct soap *soap) { _ns1__GetInspectParams *_p = soap_instantiate__ns1__GetInspectParams(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__GetInspectParams(struct soap *soap, _ns1__GetInspectParams *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetInspectParams(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__FuelEvaporationInspectResponse
#define SOAP_TYPE__ns1__FuelEvaporationInspectResponse (48)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__FuelEvaporationInspectResponse(struct soap*, const char*, int, const _ns1__FuelEvaporationInspectResponse *, const char*);
SOAP_FMAC3 _ns1__FuelEvaporationInspectResponse * SOAP_FMAC4 soap_in__ns1__FuelEvaporationInspectResponse(struct soap*, const char*, _ns1__FuelEvaporationInspectResponse *, const char*);

#ifndef soap_write__ns1__FuelEvaporationInspectResponse
#define soap_write__ns1__FuelEvaporationInspectResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:FuelEvaporationInspectResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__FuelEvaporationInspectResponse * SOAP_FMAC4 soap_get__ns1__FuelEvaporationInspectResponse(struct soap*, _ns1__FuelEvaporationInspectResponse *, const char*, const char*);

#ifndef soap_read__ns1__FuelEvaporationInspectResponse
#define soap_read__ns1__FuelEvaporationInspectResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__FuelEvaporationInspectResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__FuelEvaporationInspectResponse * SOAP_FMAC2 soap_instantiate__ns1__FuelEvaporationInspectResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__FuelEvaporationInspectResponse * soap_new__ns1__FuelEvaporationInspectResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__FuelEvaporationInspectResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__FuelEvaporationInspectResponse * soap_new_req__ns1__FuelEvaporationInspectResponse(struct soap *soap, ns1__RetValue *FuelEvaporationInspectResult) { _ns1__FuelEvaporationInspectResponse *_p = soap_instantiate__ns1__FuelEvaporationInspectResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__FuelEvaporationInspectResponse::FuelEvaporationInspectResult = FuelEvaporationInspectResult; } return _p; }

inline _ns1__FuelEvaporationInspectResponse * soap_new_set__ns1__FuelEvaporationInspectResponse(struct soap *soap, ns1__RetValue *FuelEvaporationInspectResult) { _ns1__FuelEvaporationInspectResponse *_p = soap_instantiate__ns1__FuelEvaporationInspectResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__FuelEvaporationInspectResponse::FuelEvaporationInspectResult = FuelEvaporationInspectResult; } return _p; }

inline void soap_delete__ns1__FuelEvaporationInspectResponse(struct soap *soap, _ns1__FuelEvaporationInspectResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__FuelEvaporationInspectResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__FuelEvaporationInspect
#define SOAP_TYPE__ns1__FuelEvaporationInspect (47)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__FuelEvaporationInspect(struct soap*, const char*, int, const _ns1__FuelEvaporationInspect *, const char*);
SOAP_FMAC3 _ns1__FuelEvaporationInspect * SOAP_FMAC4 soap_in__ns1__FuelEvaporationInspect(struct soap*, const char*, _ns1__FuelEvaporationInspect *, const char*);

#ifndef soap_write__ns1__FuelEvaporationInspect
#define soap_write__ns1__FuelEvaporationInspect(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:FuelEvaporationInspect", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__FuelEvaporationInspect * SOAP_FMAC4 soap_get__ns1__FuelEvaporationInspect(struct soap*, _ns1__FuelEvaporationInspect *, const char*, const char*);

#ifndef soap_read__ns1__FuelEvaporationInspect
#define soap_read__ns1__FuelEvaporationInspect(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__FuelEvaporationInspect(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__FuelEvaporationInspect * SOAP_FMAC2 soap_instantiate__ns1__FuelEvaporationInspect(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__FuelEvaporationInspect * soap_new__ns1__FuelEvaporationInspect(struct soap *soap, int n = -1) { return soap_instantiate__ns1__FuelEvaporationInspect(soap, n, NULL, NULL, NULL); }

inline _ns1__FuelEvaporationInspect * soap_new_req__ns1__FuelEvaporationInspect(struct soap *soap, LONG64 ChannelID) { _ns1__FuelEvaporationInspect *_p = soap_instantiate__ns1__FuelEvaporationInspect(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__FuelEvaporationInspect::ChannelID = ChannelID; } return _p; }

inline _ns1__FuelEvaporationInspect * soap_new_set__ns1__FuelEvaporationInspect(struct soap *soap, LONG64 ChannelID, std::wstring *InspectID, std::wstring *RYZFData, std::wstring *Memo) { _ns1__FuelEvaporationInspect *_p = soap_instantiate__ns1__FuelEvaporationInspect(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__FuelEvaporationInspect::ChannelID = ChannelID; _p->_ns1__FuelEvaporationInspect::InspectID = InspectID; _p->_ns1__FuelEvaporationInspect::RYZFData = RYZFData; _p->_ns1__FuelEvaporationInspect::Memo = Memo; } return _p; }

inline void soap_delete__ns1__FuelEvaporationInspect(struct soap *soap, _ns1__FuelEvaporationInspect *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__FuelEvaporationInspect(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__TestPhotoResponse
#define SOAP_TYPE__ns1__TestPhotoResponse (46)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__TestPhotoResponse(struct soap*, const char*, int, const _ns1__TestPhotoResponse *, const char*);
SOAP_FMAC3 _ns1__TestPhotoResponse * SOAP_FMAC4 soap_in__ns1__TestPhotoResponse(struct soap*, const char*, _ns1__TestPhotoResponse *, const char*);

#ifndef soap_write__ns1__TestPhotoResponse
#define soap_write__ns1__TestPhotoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:TestPhotoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__TestPhotoResponse * SOAP_FMAC4 soap_get__ns1__TestPhotoResponse(struct soap*, _ns1__TestPhotoResponse *, const char*, const char*);

#ifndef soap_read__ns1__TestPhotoResponse
#define soap_read__ns1__TestPhotoResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__TestPhotoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__TestPhotoResponse * SOAP_FMAC2 soap_instantiate__ns1__TestPhotoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__TestPhotoResponse * soap_new__ns1__TestPhotoResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__TestPhotoResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__TestPhotoResponse * soap_new_req__ns1__TestPhotoResponse(struct soap *soap, ns1__RetValue *TestPhotoResult) { _ns1__TestPhotoResponse *_p = soap_instantiate__ns1__TestPhotoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__TestPhotoResponse::TestPhotoResult = TestPhotoResult; } return _p; }

inline _ns1__TestPhotoResponse * soap_new_set__ns1__TestPhotoResponse(struct soap *soap, ns1__RetValue *TestPhotoResult) { _ns1__TestPhotoResponse *_p = soap_instantiate__ns1__TestPhotoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__TestPhotoResponse::TestPhotoResult = TestPhotoResult; } return _p; }

inline void soap_delete__ns1__TestPhotoResponse(struct soap *soap, _ns1__TestPhotoResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__TestPhotoResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__TestPhoto
#define SOAP_TYPE__ns1__TestPhoto (45)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__TestPhoto(struct soap*, const char*, int, const _ns1__TestPhoto *, const char*);
SOAP_FMAC3 _ns1__TestPhoto * SOAP_FMAC4 soap_in__ns1__TestPhoto(struct soap*, const char*, _ns1__TestPhoto *, const char*);

#ifndef soap_write__ns1__TestPhoto
#define soap_write__ns1__TestPhoto(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:TestPhoto", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__TestPhoto * SOAP_FMAC4 soap_get__ns1__TestPhoto(struct soap*, _ns1__TestPhoto *, const char*, const char*);

#ifndef soap_read__ns1__TestPhoto
#define soap_read__ns1__TestPhoto(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__TestPhoto(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__TestPhoto * SOAP_FMAC2 soap_instantiate__ns1__TestPhoto(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__TestPhoto * soap_new__ns1__TestPhoto(struct soap *soap, int n = -1) { return soap_instantiate__ns1__TestPhoto(soap, n, NULL, NULL, NULL); }

inline _ns1__TestPhoto * soap_new_req__ns1__TestPhoto(struct soap *soap, LONG64 LineID) { _ns1__TestPhoto *_p = soap_instantiate__ns1__TestPhoto(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__TestPhoto::LineID = LineID; } return _p; }

inline _ns1__TestPhoto * soap_new_set__ns1__TestPhoto(struct soap *soap, LONG64 LineID) { _ns1__TestPhoto *_p = soap_instantiate__ns1__TestPhoto(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__TestPhoto::LineID = LineID; } return _p; }

inline void soap_delete__ns1__TestPhoto(struct soap *soap, _ns1__TestPhoto *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__TestPhoto(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__EndCalibrateResponse
#define SOAP_TYPE__ns1__EndCalibrateResponse (44)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__EndCalibrateResponse(struct soap*, const char*, int, const _ns1__EndCalibrateResponse *, const char*);
SOAP_FMAC3 _ns1__EndCalibrateResponse * SOAP_FMAC4 soap_in__ns1__EndCalibrateResponse(struct soap*, const char*, _ns1__EndCalibrateResponse *, const char*);

#ifndef soap_write__ns1__EndCalibrateResponse
#define soap_write__ns1__EndCalibrateResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:EndCalibrateResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__EndCalibrateResponse * SOAP_FMAC4 soap_get__ns1__EndCalibrateResponse(struct soap*, _ns1__EndCalibrateResponse *, const char*, const char*);

#ifndef soap_read__ns1__EndCalibrateResponse
#define soap_read__ns1__EndCalibrateResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__EndCalibrateResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__EndCalibrateResponse * SOAP_FMAC2 soap_instantiate__ns1__EndCalibrateResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__EndCalibrateResponse * soap_new__ns1__EndCalibrateResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__EndCalibrateResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__EndCalibrateResponse * soap_new_req__ns1__EndCalibrateResponse(struct soap *soap, ns1__RetValue *EndCalibrateResult) { _ns1__EndCalibrateResponse *_p = soap_instantiate__ns1__EndCalibrateResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__EndCalibrateResponse::EndCalibrateResult = EndCalibrateResult; } return _p; }

inline _ns1__EndCalibrateResponse * soap_new_set__ns1__EndCalibrateResponse(struct soap *soap, ns1__RetValue *EndCalibrateResult) { _ns1__EndCalibrateResponse *_p = soap_instantiate__ns1__EndCalibrateResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__EndCalibrateResponse::EndCalibrateResult = EndCalibrateResult; } return _p; }

inline void soap_delete__ns1__EndCalibrateResponse(struct soap *soap, _ns1__EndCalibrateResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__EndCalibrateResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__EndCalibrate
#define SOAP_TYPE__ns1__EndCalibrate (43)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__EndCalibrate(struct soap*, const char*, int, const _ns1__EndCalibrate *, const char*);
SOAP_FMAC3 _ns1__EndCalibrate * SOAP_FMAC4 soap_in__ns1__EndCalibrate(struct soap*, const char*, _ns1__EndCalibrate *, const char*);

#ifndef soap_write__ns1__EndCalibrate
#define soap_write__ns1__EndCalibrate(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:EndCalibrate", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__EndCalibrate * SOAP_FMAC4 soap_get__ns1__EndCalibrate(struct soap*, _ns1__EndCalibrate *, const char*, const char*);

#ifndef soap_read__ns1__EndCalibrate
#define soap_read__ns1__EndCalibrate(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__EndCalibrate(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__EndCalibrate * SOAP_FMAC2 soap_instantiate__ns1__EndCalibrate(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__EndCalibrate * soap_new__ns1__EndCalibrate(struct soap *soap, int n = -1) { return soap_instantiate__ns1__EndCalibrate(soap, n, NULL, NULL, NULL); }

inline _ns1__EndCalibrate * soap_new_req__ns1__EndCalibrate(struct soap *soap, LONG64 LineID) { _ns1__EndCalibrate *_p = soap_instantiate__ns1__EndCalibrate(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__EndCalibrate::LineID = LineID; } return _p; }

inline _ns1__EndCalibrate * soap_new_set__ns1__EndCalibrate(struct soap *soap, LONG64 LineID, std::wstring *Result, std::wstring *Memo) { _ns1__EndCalibrate *_p = soap_instantiate__ns1__EndCalibrate(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__EndCalibrate::LineID = LineID; _p->_ns1__EndCalibrate::Result = Result; _p->_ns1__EndCalibrate::Memo = Memo; } return _p; }

inline void soap_delete__ns1__EndCalibrate(struct soap *soap, _ns1__EndCalibrate *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__EndCalibrate(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__UploadCalibrateDataResponse
#define SOAP_TYPE__ns1__UploadCalibrateDataResponse (42)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UploadCalibrateDataResponse(struct soap*, const char*, int, const _ns1__UploadCalibrateDataResponse *, const char*);
SOAP_FMAC3 _ns1__UploadCalibrateDataResponse * SOAP_FMAC4 soap_in__ns1__UploadCalibrateDataResponse(struct soap*, const char*, _ns1__UploadCalibrateDataResponse *, const char*);

#ifndef soap_write__ns1__UploadCalibrateDataResponse
#define soap_write__ns1__UploadCalibrateDataResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:UploadCalibrateDataResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__UploadCalibrateDataResponse * SOAP_FMAC4 soap_get__ns1__UploadCalibrateDataResponse(struct soap*, _ns1__UploadCalibrateDataResponse *, const char*, const char*);

#ifndef soap_read__ns1__UploadCalibrateDataResponse
#define soap_read__ns1__UploadCalibrateDataResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__UploadCalibrateDataResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__UploadCalibrateDataResponse * SOAP_FMAC2 soap_instantiate__ns1__UploadCalibrateDataResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__UploadCalibrateDataResponse * soap_new__ns1__UploadCalibrateDataResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__UploadCalibrateDataResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__UploadCalibrateDataResponse * soap_new_req__ns1__UploadCalibrateDataResponse(struct soap *soap, ns1__RetValue *UploadCalibrateDataResult) { _ns1__UploadCalibrateDataResponse *_p = soap_instantiate__ns1__UploadCalibrateDataResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__UploadCalibrateDataResponse::UploadCalibrateDataResult = UploadCalibrateDataResult; } return _p; }

inline _ns1__UploadCalibrateDataResponse * soap_new_set__ns1__UploadCalibrateDataResponse(struct soap *soap, ns1__RetValue *UploadCalibrateDataResult) { _ns1__UploadCalibrateDataResponse *_p = soap_instantiate__ns1__UploadCalibrateDataResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__UploadCalibrateDataResponse::UploadCalibrateDataResult = UploadCalibrateDataResult; } return _p; }

inline void soap_delete__ns1__UploadCalibrateDataResponse(struct soap *soap, _ns1__UploadCalibrateDataResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__UploadCalibrateDataResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__UploadCalibrateData
#define SOAP_TYPE__ns1__UploadCalibrateData (41)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UploadCalibrateData(struct soap*, const char*, int, const _ns1__UploadCalibrateData *, const char*);
SOAP_FMAC3 _ns1__UploadCalibrateData * SOAP_FMAC4 soap_in__ns1__UploadCalibrateData(struct soap*, const char*, _ns1__UploadCalibrateData *, const char*);

#ifndef soap_write__ns1__UploadCalibrateData
#define soap_write__ns1__UploadCalibrateData(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:UploadCalibrateData", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__UploadCalibrateData * SOAP_FMAC4 soap_get__ns1__UploadCalibrateData(struct soap*, _ns1__UploadCalibrateData *, const char*, const char*);

#ifndef soap_read__ns1__UploadCalibrateData
#define soap_read__ns1__UploadCalibrateData(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__UploadCalibrateData(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__UploadCalibrateData * SOAP_FMAC2 soap_instantiate__ns1__UploadCalibrateData(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__UploadCalibrateData * soap_new__ns1__UploadCalibrateData(struct soap *soap, int n = -1) { return soap_instantiate__ns1__UploadCalibrateData(soap, n, NULL, NULL, NULL); }

inline _ns1__UploadCalibrateData * soap_new_req__ns1__UploadCalibrateData(struct soap *soap, LONG64 LineID) { _ns1__UploadCalibrateData *_p = soap_instantiate__ns1__UploadCalibrateData(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__UploadCalibrateData::LineID = LineID; } return _p; }

inline _ns1__UploadCalibrateData * soap_new_set__ns1__UploadCalibrateData(struct soap *soap, LONG64 LineID, std::wstring *ResultData, std::wstring *Memo) { _ns1__UploadCalibrateData *_p = soap_instantiate__ns1__UploadCalibrateData(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__UploadCalibrateData::LineID = LineID; _p->_ns1__UploadCalibrateData::ResultData = ResultData; _p->_ns1__UploadCalibrateData::Memo = Memo; } return _p; }

inline void soap_delete__ns1__UploadCalibrateData(struct soap *soap, _ns1__UploadCalibrateData *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__UploadCalibrateData(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__BeginCalibrateResponse
#define SOAP_TYPE__ns1__BeginCalibrateResponse (40)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__BeginCalibrateResponse(struct soap*, const char*, int, const _ns1__BeginCalibrateResponse *, const char*);
SOAP_FMAC3 _ns1__BeginCalibrateResponse * SOAP_FMAC4 soap_in__ns1__BeginCalibrateResponse(struct soap*, const char*, _ns1__BeginCalibrateResponse *, const char*);

#ifndef soap_write__ns1__BeginCalibrateResponse
#define soap_write__ns1__BeginCalibrateResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:BeginCalibrateResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__BeginCalibrateResponse * SOAP_FMAC4 soap_get__ns1__BeginCalibrateResponse(struct soap*, _ns1__BeginCalibrateResponse *, const char*, const char*);

#ifndef soap_read__ns1__BeginCalibrateResponse
#define soap_read__ns1__BeginCalibrateResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__BeginCalibrateResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__BeginCalibrateResponse * SOAP_FMAC2 soap_instantiate__ns1__BeginCalibrateResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__BeginCalibrateResponse * soap_new__ns1__BeginCalibrateResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__BeginCalibrateResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__BeginCalibrateResponse * soap_new_req__ns1__BeginCalibrateResponse(struct soap *soap, ns1__RetValue *BeginCalibrateResult) { _ns1__BeginCalibrateResponse *_p = soap_instantiate__ns1__BeginCalibrateResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__BeginCalibrateResponse::BeginCalibrateResult = BeginCalibrateResult; } return _p; }

inline _ns1__BeginCalibrateResponse * soap_new_set__ns1__BeginCalibrateResponse(struct soap *soap, ns1__RetValue *BeginCalibrateResult) { _ns1__BeginCalibrateResponse *_p = soap_instantiate__ns1__BeginCalibrateResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__BeginCalibrateResponse::BeginCalibrateResult = BeginCalibrateResult; } return _p; }

inline void soap_delete__ns1__BeginCalibrateResponse(struct soap *soap, _ns1__BeginCalibrateResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__BeginCalibrateResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__BeginCalibrate
#define SOAP_TYPE__ns1__BeginCalibrate (39)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__BeginCalibrate(struct soap*, const char*, int, const _ns1__BeginCalibrate *, const char*);
SOAP_FMAC3 _ns1__BeginCalibrate * SOAP_FMAC4 soap_in__ns1__BeginCalibrate(struct soap*, const char*, _ns1__BeginCalibrate *, const char*);

#ifndef soap_write__ns1__BeginCalibrate
#define soap_write__ns1__BeginCalibrate(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:BeginCalibrate", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__BeginCalibrate * SOAP_FMAC4 soap_get__ns1__BeginCalibrate(struct soap*, _ns1__BeginCalibrate *, const char*, const char*);

#ifndef soap_read__ns1__BeginCalibrate
#define soap_read__ns1__BeginCalibrate(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__BeginCalibrate(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__BeginCalibrate * SOAP_FMAC2 soap_instantiate__ns1__BeginCalibrate(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__BeginCalibrate * soap_new__ns1__BeginCalibrate(struct soap *soap, int n = -1) { return soap_instantiate__ns1__BeginCalibrate(soap, n, NULL, NULL, NULL); }

inline _ns1__BeginCalibrate * soap_new_req__ns1__BeginCalibrate(struct soap *soap, LONG64 LineID) { _ns1__BeginCalibrate *_p = soap_instantiate__ns1__BeginCalibrate(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__BeginCalibrate::LineID = LineID; } return _p; }

inline _ns1__BeginCalibrate * soap_new_set__ns1__BeginCalibrate(struct soap *soap, LONG64 LineID, std::wstring *Memo) { _ns1__BeginCalibrate *_p = soap_instantiate__ns1__BeginCalibrate(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__BeginCalibrate::LineID = LineID; _p->_ns1__BeginCalibrate::Memo = Memo; } return _p; }

inline void soap_delete__ns1__BeginCalibrate(struct soap *soap, _ns1__BeginCalibrate *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__BeginCalibrate(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetInspectionInfoResponse
#define SOAP_TYPE__ns1__GetInspectionInfoResponse (38)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetInspectionInfoResponse(struct soap*, const char*, int, const _ns1__GetInspectionInfoResponse *, const char*);
SOAP_FMAC3 _ns1__GetInspectionInfoResponse * SOAP_FMAC4 soap_in__ns1__GetInspectionInfoResponse(struct soap*, const char*, _ns1__GetInspectionInfoResponse *, const char*);

#ifndef soap_write__ns1__GetInspectionInfoResponse
#define soap_write__ns1__GetInspectionInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:GetInspectionInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetInspectionInfoResponse * SOAP_FMAC4 soap_get__ns1__GetInspectionInfoResponse(struct soap*, _ns1__GetInspectionInfoResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetInspectionInfoResponse
#define soap_read__ns1__GetInspectionInfoResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetInspectionInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetInspectionInfoResponse * SOAP_FMAC2 soap_instantiate__ns1__GetInspectionInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetInspectionInfoResponse * soap_new__ns1__GetInspectionInfoResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetInspectionInfoResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetInspectionInfoResponse * soap_new_req__ns1__GetInspectionInfoResponse(struct soap *soap, ns1__RetValue *GetInspectionInfoResult) { _ns1__GetInspectionInfoResponse *_p = soap_instantiate__ns1__GetInspectionInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetInspectionInfoResponse::GetInspectionInfoResult = GetInspectionInfoResult; } return _p; }

inline _ns1__GetInspectionInfoResponse * soap_new_set__ns1__GetInspectionInfoResponse(struct soap *soap, ns1__RetValue *GetInspectionInfoResult) { _ns1__GetInspectionInfoResponse *_p = soap_instantiate__ns1__GetInspectionInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetInspectionInfoResponse::GetInspectionInfoResult = GetInspectionInfoResult; } return _p; }

inline void soap_delete__ns1__GetInspectionInfoResponse(struct soap *soap, _ns1__GetInspectionInfoResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetInspectionInfoResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetInspectionInfo
#define SOAP_TYPE__ns1__GetInspectionInfo (37)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetInspectionInfo(struct soap*, const char*, int, const _ns1__GetInspectionInfo *, const char*);
SOAP_FMAC3 _ns1__GetInspectionInfo * SOAP_FMAC4 soap_in__ns1__GetInspectionInfo(struct soap*, const char*, _ns1__GetInspectionInfo *, const char*);

#ifndef soap_write__ns1__GetInspectionInfo
#define soap_write__ns1__GetInspectionInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:GetInspectionInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetInspectionInfo * SOAP_FMAC4 soap_get__ns1__GetInspectionInfo(struct soap*, _ns1__GetInspectionInfo *, const char*, const char*);

#ifndef soap_read__ns1__GetInspectionInfo
#define soap_read__ns1__GetInspectionInfo(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetInspectionInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetInspectionInfo * SOAP_FMAC2 soap_instantiate__ns1__GetInspectionInfo(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetInspectionInfo * soap_new__ns1__GetInspectionInfo(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetInspectionInfo(soap, n, NULL, NULL, NULL); }

inline _ns1__GetInspectionInfo * soap_new_req__ns1__GetInspectionInfo(struct soap *soap) { _ns1__GetInspectionInfo *_p = soap_instantiate__ns1__GetInspectionInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetInspectionInfo * soap_new_set__ns1__GetInspectionInfo(struct soap *soap, std::wstring *Memo) { _ns1__GetInspectionInfo *_p = soap_instantiate__ns1__GetInspectionInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetInspectionInfo::Memo = Memo; } return _p; }

inline void soap_delete__ns1__GetInspectionInfo(struct soap *soap, _ns1__GetInspectionInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetInspectionInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__UploadRealtimeDataResponse
#define SOAP_TYPE__ns1__UploadRealtimeDataResponse (36)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UploadRealtimeDataResponse(struct soap*, const char*, int, const _ns1__UploadRealtimeDataResponse *, const char*);
SOAP_FMAC3 _ns1__UploadRealtimeDataResponse * SOAP_FMAC4 soap_in__ns1__UploadRealtimeDataResponse(struct soap*, const char*, _ns1__UploadRealtimeDataResponse *, const char*);

#ifndef soap_write__ns1__UploadRealtimeDataResponse
#define soap_write__ns1__UploadRealtimeDataResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:UploadRealtimeDataResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__UploadRealtimeDataResponse * SOAP_FMAC4 soap_get__ns1__UploadRealtimeDataResponse(struct soap*, _ns1__UploadRealtimeDataResponse *, const char*, const char*);

#ifndef soap_read__ns1__UploadRealtimeDataResponse
#define soap_read__ns1__UploadRealtimeDataResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__UploadRealtimeDataResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__UploadRealtimeDataResponse * SOAP_FMAC2 soap_instantiate__ns1__UploadRealtimeDataResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__UploadRealtimeDataResponse * soap_new__ns1__UploadRealtimeDataResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__UploadRealtimeDataResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__UploadRealtimeDataResponse * soap_new_req__ns1__UploadRealtimeDataResponse(struct soap *soap, ns1__RetValue *UploadRealtimeDataResult) { _ns1__UploadRealtimeDataResponse *_p = soap_instantiate__ns1__UploadRealtimeDataResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__UploadRealtimeDataResponse::UploadRealtimeDataResult = UploadRealtimeDataResult; } return _p; }

inline _ns1__UploadRealtimeDataResponse * soap_new_set__ns1__UploadRealtimeDataResponse(struct soap *soap, ns1__RetValue *UploadRealtimeDataResult) { _ns1__UploadRealtimeDataResponse *_p = soap_instantiate__ns1__UploadRealtimeDataResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__UploadRealtimeDataResponse::UploadRealtimeDataResult = UploadRealtimeDataResult; } return _p; }

inline void soap_delete__ns1__UploadRealtimeDataResponse(struct soap *soap, _ns1__UploadRealtimeDataResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__UploadRealtimeDataResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__UploadRealtimeData
#define SOAP_TYPE__ns1__UploadRealtimeData (35)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UploadRealtimeData(struct soap*, const char*, int, const _ns1__UploadRealtimeData *, const char*);
SOAP_FMAC3 _ns1__UploadRealtimeData * SOAP_FMAC4 soap_in__ns1__UploadRealtimeData(struct soap*, const char*, _ns1__UploadRealtimeData *, const char*);

#ifndef soap_write__ns1__UploadRealtimeData
#define soap_write__ns1__UploadRealtimeData(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:UploadRealtimeData", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__UploadRealtimeData * SOAP_FMAC4 soap_get__ns1__UploadRealtimeData(struct soap*, _ns1__UploadRealtimeData *, const char*, const char*);

#ifndef soap_read__ns1__UploadRealtimeData
#define soap_read__ns1__UploadRealtimeData(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__UploadRealtimeData(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__UploadRealtimeData * SOAP_FMAC2 soap_instantiate__ns1__UploadRealtimeData(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__UploadRealtimeData * soap_new__ns1__UploadRealtimeData(struct soap *soap, int n = -1) { return soap_instantiate__ns1__UploadRealtimeData(soap, n, NULL, NULL, NULL); }

inline _ns1__UploadRealtimeData * soap_new_req__ns1__UploadRealtimeData(struct soap *soap) { _ns1__UploadRealtimeData *_p = soap_instantiate__ns1__UploadRealtimeData(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__UploadRealtimeData * soap_new_set__ns1__UploadRealtimeData(struct soap *soap, std::wstring *InspectID, std::wstring *RealtimeData, std::wstring *Memo) { _ns1__UploadRealtimeData *_p = soap_instantiate__ns1__UploadRealtimeData(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__UploadRealtimeData::InspectID = InspectID; _p->_ns1__UploadRealtimeData::RealtimeData = RealtimeData; _p->_ns1__UploadRealtimeData::Memo = Memo; } return _p; }

inline void soap_delete__ns1__UploadRealtimeData(struct soap *soap, _ns1__UploadRealtimeData *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__UploadRealtimeData(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__UploadSelfTestDataResponse
#define SOAP_TYPE__ns1__UploadSelfTestDataResponse (34)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UploadSelfTestDataResponse(struct soap*, const char*, int, const _ns1__UploadSelfTestDataResponse *, const char*);
SOAP_FMAC3 _ns1__UploadSelfTestDataResponse * SOAP_FMAC4 soap_in__ns1__UploadSelfTestDataResponse(struct soap*, const char*, _ns1__UploadSelfTestDataResponse *, const char*);

#ifndef soap_write__ns1__UploadSelfTestDataResponse
#define soap_write__ns1__UploadSelfTestDataResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:UploadSelfTestDataResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__UploadSelfTestDataResponse * SOAP_FMAC4 soap_get__ns1__UploadSelfTestDataResponse(struct soap*, _ns1__UploadSelfTestDataResponse *, const char*, const char*);

#ifndef soap_read__ns1__UploadSelfTestDataResponse
#define soap_read__ns1__UploadSelfTestDataResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__UploadSelfTestDataResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__UploadSelfTestDataResponse * SOAP_FMAC2 soap_instantiate__ns1__UploadSelfTestDataResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__UploadSelfTestDataResponse * soap_new__ns1__UploadSelfTestDataResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__UploadSelfTestDataResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__UploadSelfTestDataResponse * soap_new_req__ns1__UploadSelfTestDataResponse(struct soap *soap, ns1__RetValue *UploadSelfTestDataResult) { _ns1__UploadSelfTestDataResponse *_p = soap_instantiate__ns1__UploadSelfTestDataResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__UploadSelfTestDataResponse::UploadSelfTestDataResult = UploadSelfTestDataResult; } return _p; }

inline _ns1__UploadSelfTestDataResponse * soap_new_set__ns1__UploadSelfTestDataResponse(struct soap *soap, ns1__RetValue *UploadSelfTestDataResult) { _ns1__UploadSelfTestDataResponse *_p = soap_instantiate__ns1__UploadSelfTestDataResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__UploadSelfTestDataResponse::UploadSelfTestDataResult = UploadSelfTestDataResult; } return _p; }

inline void soap_delete__ns1__UploadSelfTestDataResponse(struct soap *soap, _ns1__UploadSelfTestDataResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__UploadSelfTestDataResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__UploadSelfTestData
#define SOAP_TYPE__ns1__UploadSelfTestData (33)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UploadSelfTestData(struct soap*, const char*, int, const _ns1__UploadSelfTestData *, const char*);
SOAP_FMAC3 _ns1__UploadSelfTestData * SOAP_FMAC4 soap_in__ns1__UploadSelfTestData(struct soap*, const char*, _ns1__UploadSelfTestData *, const char*);

#ifndef soap_write__ns1__UploadSelfTestData
#define soap_write__ns1__UploadSelfTestData(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:UploadSelfTestData", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__UploadSelfTestData * SOAP_FMAC4 soap_get__ns1__UploadSelfTestData(struct soap*, _ns1__UploadSelfTestData *, const char*, const char*);

#ifndef soap_read__ns1__UploadSelfTestData
#define soap_read__ns1__UploadSelfTestData(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__UploadSelfTestData(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__UploadSelfTestData * SOAP_FMAC2 soap_instantiate__ns1__UploadSelfTestData(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__UploadSelfTestData * soap_new__ns1__UploadSelfTestData(struct soap *soap, int n = -1) { return soap_instantiate__ns1__UploadSelfTestData(soap, n, NULL, NULL, NULL); }

inline _ns1__UploadSelfTestData * soap_new_req__ns1__UploadSelfTestData(struct soap *soap, LONG64 LineID) { _ns1__UploadSelfTestData *_p = soap_instantiate__ns1__UploadSelfTestData(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__UploadSelfTestData::LineID = LineID; } return _p; }

inline _ns1__UploadSelfTestData * soap_new_set__ns1__UploadSelfTestData(struct soap *soap, LONG64 LineID, std::wstring *ResultData, std::wstring *Memo) { _ns1__UploadSelfTestData *_p = soap_instantiate__ns1__UploadSelfTestData(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__UploadSelfTestData::LineID = LineID; _p->_ns1__UploadSelfTestData::ResultData = ResultData; _p->_ns1__UploadSelfTestData::Memo = Memo; } return _p; }

inline void soap_delete__ns1__UploadSelfTestData(struct soap *soap, _ns1__UploadSelfTestData *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__UploadSelfTestData(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__EndInspectResponse
#define SOAP_TYPE__ns1__EndInspectResponse (32)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__EndInspectResponse(struct soap*, const char*, int, const _ns1__EndInspectResponse *, const char*);
SOAP_FMAC3 _ns1__EndInspectResponse * SOAP_FMAC4 soap_in__ns1__EndInspectResponse(struct soap*, const char*, _ns1__EndInspectResponse *, const char*);

#ifndef soap_write__ns1__EndInspectResponse
#define soap_write__ns1__EndInspectResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:EndInspectResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__EndInspectResponse * SOAP_FMAC4 soap_get__ns1__EndInspectResponse(struct soap*, _ns1__EndInspectResponse *, const char*, const char*);

#ifndef soap_read__ns1__EndInspectResponse
#define soap_read__ns1__EndInspectResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__EndInspectResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__EndInspectResponse * SOAP_FMAC2 soap_instantiate__ns1__EndInspectResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__EndInspectResponse * soap_new__ns1__EndInspectResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__EndInspectResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__EndInspectResponse * soap_new_req__ns1__EndInspectResponse(struct soap *soap, ns1__RetValue *EndInspectResult) { _ns1__EndInspectResponse *_p = soap_instantiate__ns1__EndInspectResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__EndInspectResponse::EndInspectResult = EndInspectResult; } return _p; }

inline _ns1__EndInspectResponse * soap_new_set__ns1__EndInspectResponse(struct soap *soap, ns1__RetValue *EndInspectResult) { _ns1__EndInspectResponse *_p = soap_instantiate__ns1__EndInspectResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__EndInspectResponse::EndInspectResult = EndInspectResult; } return _p; }

inline void soap_delete__ns1__EndInspectResponse(struct soap *soap, _ns1__EndInspectResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__EndInspectResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__EndInspect
#define SOAP_TYPE__ns1__EndInspect (31)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__EndInspect(struct soap*, const char*, int, const _ns1__EndInspect *, const char*);
SOAP_FMAC3 _ns1__EndInspect * SOAP_FMAC4 soap_in__ns1__EndInspect(struct soap*, const char*, _ns1__EndInspect *, const char*);

#ifndef soap_write__ns1__EndInspect
#define soap_write__ns1__EndInspect(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:EndInspect", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__EndInspect * SOAP_FMAC4 soap_get__ns1__EndInspect(struct soap*, _ns1__EndInspect *, const char*, const char*);

#ifndef soap_read__ns1__EndInspect
#define soap_read__ns1__EndInspect(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__EndInspect(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__EndInspect * SOAP_FMAC2 soap_instantiate__ns1__EndInspect(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__EndInspect * soap_new__ns1__EndInspect(struct soap *soap, int n = -1) { return soap_instantiate__ns1__EndInspect(soap, n, NULL, NULL, NULL); }

inline _ns1__EndInspect * soap_new_req__ns1__EndInspect(struct soap *soap) { _ns1__EndInspect *_p = soap_instantiate__ns1__EndInspect(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__EndInspect * soap_new_set__ns1__EndInspect(struct soap *soap, std::wstring *InspectID, std::wstring *Result, std::wstring *Memo) { _ns1__EndInspect *_p = soap_instantiate__ns1__EndInspect(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__EndInspect::InspectID = InspectID; _p->_ns1__EndInspect::Result = Result; _p->_ns1__EndInspect::Memo = Memo; } return _p; }

inline void soap_delete__ns1__EndInspect(struct soap *soap, _ns1__EndInspect *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__EndInspect(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__StopInspectResponse
#define SOAP_TYPE__ns1__StopInspectResponse (30)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__StopInspectResponse(struct soap*, const char*, int, const _ns1__StopInspectResponse *, const char*);
SOAP_FMAC3 _ns1__StopInspectResponse * SOAP_FMAC4 soap_in__ns1__StopInspectResponse(struct soap*, const char*, _ns1__StopInspectResponse *, const char*);

#ifndef soap_write__ns1__StopInspectResponse
#define soap_write__ns1__StopInspectResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:StopInspectResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__StopInspectResponse * SOAP_FMAC4 soap_get__ns1__StopInspectResponse(struct soap*, _ns1__StopInspectResponse *, const char*, const char*);

#ifndef soap_read__ns1__StopInspectResponse
#define soap_read__ns1__StopInspectResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__StopInspectResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__StopInspectResponse * SOAP_FMAC2 soap_instantiate__ns1__StopInspectResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__StopInspectResponse * soap_new__ns1__StopInspectResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__StopInspectResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__StopInspectResponse * soap_new_req__ns1__StopInspectResponse(struct soap *soap, ns1__RetValue *StopInspectResult) { _ns1__StopInspectResponse *_p = soap_instantiate__ns1__StopInspectResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__StopInspectResponse::StopInspectResult = StopInspectResult; } return _p; }

inline _ns1__StopInspectResponse * soap_new_set__ns1__StopInspectResponse(struct soap *soap, ns1__RetValue *StopInspectResult) { _ns1__StopInspectResponse *_p = soap_instantiate__ns1__StopInspectResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__StopInspectResponse::StopInspectResult = StopInspectResult; } return _p; }

inline void soap_delete__ns1__StopInspectResponse(struct soap *soap, _ns1__StopInspectResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__StopInspectResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__StopInspect
#define SOAP_TYPE__ns1__StopInspect (29)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__StopInspect(struct soap*, const char*, int, const _ns1__StopInspect *, const char*);
SOAP_FMAC3 _ns1__StopInspect * SOAP_FMAC4 soap_in__ns1__StopInspect(struct soap*, const char*, _ns1__StopInspect *, const char*);

#ifndef soap_write__ns1__StopInspect
#define soap_write__ns1__StopInspect(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:StopInspect", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__StopInspect * SOAP_FMAC4 soap_get__ns1__StopInspect(struct soap*, _ns1__StopInspect *, const char*, const char*);

#ifndef soap_read__ns1__StopInspect
#define soap_read__ns1__StopInspect(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__StopInspect(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__StopInspect * SOAP_FMAC2 soap_instantiate__ns1__StopInspect(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__StopInspect * soap_new__ns1__StopInspect(struct soap *soap, int n = -1) { return soap_instantiate__ns1__StopInspect(soap, n, NULL, NULL, NULL); }

inline _ns1__StopInspect * soap_new_req__ns1__StopInspect(struct soap *soap) { _ns1__StopInspect *_p = soap_instantiate__ns1__StopInspect(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__StopInspect * soap_new_set__ns1__StopInspect(struct soap *soap, std::wstring *InspectID, std::wstring *Memo) { _ns1__StopInspect *_p = soap_instantiate__ns1__StopInspect(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__StopInspect::InspectID = InspectID; _p->_ns1__StopInspect::Memo = Memo; } return _p; }

inline void soap_delete__ns1__StopInspect(struct soap *soap, _ns1__StopInspect *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__StopInspect(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__WJTakePhotoResponse
#define SOAP_TYPE__ns1__WJTakePhotoResponse (28)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__WJTakePhotoResponse(struct soap*, const char*, int, const _ns1__WJTakePhotoResponse *, const char*);
SOAP_FMAC3 _ns1__WJTakePhotoResponse * SOAP_FMAC4 soap_in__ns1__WJTakePhotoResponse(struct soap*, const char*, _ns1__WJTakePhotoResponse *, const char*);

#ifndef soap_write__ns1__WJTakePhotoResponse
#define soap_write__ns1__WJTakePhotoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:WJTakePhotoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__WJTakePhotoResponse * SOAP_FMAC4 soap_get__ns1__WJTakePhotoResponse(struct soap*, _ns1__WJTakePhotoResponse *, const char*, const char*);

#ifndef soap_read__ns1__WJTakePhotoResponse
#define soap_read__ns1__WJTakePhotoResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__WJTakePhotoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__WJTakePhotoResponse * SOAP_FMAC2 soap_instantiate__ns1__WJTakePhotoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__WJTakePhotoResponse * soap_new__ns1__WJTakePhotoResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__WJTakePhotoResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__WJTakePhotoResponse * soap_new_req__ns1__WJTakePhotoResponse(struct soap *soap, ns1__RetValue *WJTakePhotoResult) { _ns1__WJTakePhotoResponse *_p = soap_instantiate__ns1__WJTakePhotoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__WJTakePhotoResponse::WJTakePhotoResult = WJTakePhotoResult; } return _p; }

inline _ns1__WJTakePhotoResponse * soap_new_set__ns1__WJTakePhotoResponse(struct soap *soap, ns1__RetValue *WJTakePhotoResult) { _ns1__WJTakePhotoResponse *_p = soap_instantiate__ns1__WJTakePhotoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__WJTakePhotoResponse::WJTakePhotoResult = WJTakePhotoResult; } return _p; }

inline void soap_delete__ns1__WJTakePhotoResponse(struct soap *soap, _ns1__WJTakePhotoResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__WJTakePhotoResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__WJTakePhoto
#define SOAP_TYPE__ns1__WJTakePhoto (27)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__WJTakePhoto(struct soap*, const char*, int, const _ns1__WJTakePhoto *, const char*);
SOAP_FMAC3 _ns1__WJTakePhoto * SOAP_FMAC4 soap_in__ns1__WJTakePhoto(struct soap*, const char*, _ns1__WJTakePhoto *, const char*);

#ifndef soap_write__ns1__WJTakePhoto
#define soap_write__ns1__WJTakePhoto(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:WJTakePhoto", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__WJTakePhoto * SOAP_FMAC4 soap_get__ns1__WJTakePhoto(struct soap*, _ns1__WJTakePhoto *, const char*, const char*);

#ifndef soap_read__ns1__WJTakePhoto
#define soap_read__ns1__WJTakePhoto(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__WJTakePhoto(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__WJTakePhoto * SOAP_FMAC2 soap_instantiate__ns1__WJTakePhoto(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__WJTakePhoto * soap_new__ns1__WJTakePhoto(struct soap *soap, int n = -1) { return soap_instantiate__ns1__WJTakePhoto(soap, n, NULL, NULL, NULL); }

inline _ns1__WJTakePhoto * soap_new_req__ns1__WJTakePhoto(struct soap *soap, LONG64 ChannelID, int PicCode) { _ns1__WJTakePhoto *_p = soap_instantiate__ns1__WJTakePhoto(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__WJTakePhoto::ChannelID = ChannelID; _p->_ns1__WJTakePhoto::PicCode = PicCode; } return _p; }

inline _ns1__WJTakePhoto * soap_new_set__ns1__WJTakePhoto(struct soap *soap, LONG64 ChannelID, std::wstring *InspectID, int PicCode, std::wstring *Memo) { _ns1__WJTakePhoto *_p = soap_instantiate__ns1__WJTakePhoto(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__WJTakePhoto::ChannelID = ChannelID; _p->_ns1__WJTakePhoto::InspectID = InspectID; _p->_ns1__WJTakePhoto::PicCode = PicCode; _p->_ns1__WJTakePhoto::Memo = Memo; } return _p; }

inline void soap_delete__ns1__WJTakePhoto(struct soap *soap, _ns1__WJTakePhoto *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__WJTakePhoto(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__TakePhotoResponse
#define SOAP_TYPE__ns1__TakePhotoResponse (26)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__TakePhotoResponse(struct soap*, const char*, int, const _ns1__TakePhotoResponse *, const char*);
SOAP_FMAC3 _ns1__TakePhotoResponse * SOAP_FMAC4 soap_in__ns1__TakePhotoResponse(struct soap*, const char*, _ns1__TakePhotoResponse *, const char*);

#ifndef soap_write__ns1__TakePhotoResponse
#define soap_write__ns1__TakePhotoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:TakePhotoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__TakePhotoResponse * SOAP_FMAC4 soap_get__ns1__TakePhotoResponse(struct soap*, _ns1__TakePhotoResponse *, const char*, const char*);

#ifndef soap_read__ns1__TakePhotoResponse
#define soap_read__ns1__TakePhotoResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__TakePhotoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__TakePhotoResponse * SOAP_FMAC2 soap_instantiate__ns1__TakePhotoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__TakePhotoResponse * soap_new__ns1__TakePhotoResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__TakePhotoResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__TakePhotoResponse * soap_new_req__ns1__TakePhotoResponse(struct soap *soap, ns1__RetValue *TakePhotoResult) { _ns1__TakePhotoResponse *_p = soap_instantiate__ns1__TakePhotoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__TakePhotoResponse::TakePhotoResult = TakePhotoResult; } return _p; }

inline _ns1__TakePhotoResponse * soap_new_set__ns1__TakePhotoResponse(struct soap *soap, ns1__RetValue *TakePhotoResult) { _ns1__TakePhotoResponse *_p = soap_instantiate__ns1__TakePhotoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__TakePhotoResponse::TakePhotoResult = TakePhotoResult; } return _p; }

inline void soap_delete__ns1__TakePhotoResponse(struct soap *soap, _ns1__TakePhotoResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__TakePhotoResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__TakePhoto
#define SOAP_TYPE__ns1__TakePhoto (25)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__TakePhoto(struct soap*, const char*, int, const _ns1__TakePhoto *, const char*);
SOAP_FMAC3 _ns1__TakePhoto * SOAP_FMAC4 soap_in__ns1__TakePhoto(struct soap*, const char*, _ns1__TakePhoto *, const char*);

#ifndef soap_write__ns1__TakePhoto
#define soap_write__ns1__TakePhoto(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:TakePhoto", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__TakePhoto * SOAP_FMAC4 soap_get__ns1__TakePhoto(struct soap*, _ns1__TakePhoto *, const char*, const char*);

#ifndef soap_read__ns1__TakePhoto
#define soap_read__ns1__TakePhoto(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__TakePhoto(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__TakePhoto * SOAP_FMAC2 soap_instantiate__ns1__TakePhoto(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__TakePhoto * soap_new__ns1__TakePhoto(struct soap *soap, int n = -1) { return soap_instantiate__ns1__TakePhoto(soap, n, NULL, NULL, NULL); }

inline _ns1__TakePhoto * soap_new_req__ns1__TakePhoto(struct soap *soap, LONG64 LineID, int PicCode) { _ns1__TakePhoto *_p = soap_instantiate__ns1__TakePhoto(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__TakePhoto::LineID = LineID; _p->_ns1__TakePhoto::PicCode = PicCode; } return _p; }

inline _ns1__TakePhoto * soap_new_set__ns1__TakePhoto(struct soap *soap, LONG64 LineID, std::wstring *InspectID, int PicCode, std::wstring *Memo) { _ns1__TakePhoto *_p = soap_instantiate__ns1__TakePhoto(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__TakePhoto::LineID = LineID; _p->_ns1__TakePhoto::InspectID = InspectID; _p->_ns1__TakePhoto::PicCode = PicCode; _p->_ns1__TakePhoto::Memo = Memo; } return _p; }

inline void soap_delete__ns1__TakePhoto(struct soap *soap, _ns1__TakePhoto *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__TakePhoto(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetLimitResponse
#define SOAP_TYPE__ns1__GetLimitResponse (24)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetLimitResponse(struct soap*, const char*, int, const _ns1__GetLimitResponse *, const char*);
SOAP_FMAC3 _ns1__GetLimitResponse * SOAP_FMAC4 soap_in__ns1__GetLimitResponse(struct soap*, const char*, _ns1__GetLimitResponse *, const char*);

#ifndef soap_write__ns1__GetLimitResponse
#define soap_write__ns1__GetLimitResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:GetLimitResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetLimitResponse * SOAP_FMAC4 soap_get__ns1__GetLimitResponse(struct soap*, _ns1__GetLimitResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetLimitResponse
#define soap_read__ns1__GetLimitResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetLimitResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetLimitResponse * SOAP_FMAC2 soap_instantiate__ns1__GetLimitResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetLimitResponse * soap_new__ns1__GetLimitResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetLimitResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetLimitResponse * soap_new_req__ns1__GetLimitResponse(struct soap *soap, ns1__RetValue *GetLimitResult) { _ns1__GetLimitResponse *_p = soap_instantiate__ns1__GetLimitResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetLimitResponse::GetLimitResult = GetLimitResult; } return _p; }

inline _ns1__GetLimitResponse * soap_new_set__ns1__GetLimitResponse(struct soap *soap, ns1__RetValue *GetLimitResult) { _ns1__GetLimitResponse *_p = soap_instantiate__ns1__GetLimitResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetLimitResponse::GetLimitResult = GetLimitResult; } return _p; }

inline void soap_delete__ns1__GetLimitResponse(struct soap *soap, _ns1__GetLimitResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetLimitResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetLimit
#define SOAP_TYPE__ns1__GetLimit (23)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetLimit(struct soap*, const char*, int, const _ns1__GetLimit *, const char*);
SOAP_FMAC3 _ns1__GetLimit * SOAP_FMAC4 soap_in__ns1__GetLimit(struct soap*, const char*, _ns1__GetLimit *, const char*);

#ifndef soap_write__ns1__GetLimit
#define soap_write__ns1__GetLimit(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:GetLimit", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetLimit * SOAP_FMAC4 soap_get__ns1__GetLimit(struct soap*, _ns1__GetLimit *, const char*, const char*);

#ifndef soap_read__ns1__GetLimit
#define soap_read__ns1__GetLimit(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetLimit(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetLimit * SOAP_FMAC2 soap_instantiate__ns1__GetLimit(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetLimit * soap_new__ns1__GetLimit(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetLimit(soap, n, NULL, NULL, NULL); }

inline _ns1__GetLimit * soap_new_req__ns1__GetLimit(struct soap *soap) { _ns1__GetLimit *_p = soap_instantiate__ns1__GetLimit(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetLimit * soap_new_set__ns1__GetLimit(struct soap *soap, std::wstring *InspectID, std::wstring *Memo) { _ns1__GetLimit *_p = soap_instantiate__ns1__GetLimit(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetLimit::InspectID = InspectID; _p->_ns1__GetLimit::Memo = Memo; } return _p; }

inline void soap_delete__ns1__GetLimit(struct soap *soap, _ns1__GetLimit *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetLimit(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__BeginInspectResponse
#define SOAP_TYPE__ns1__BeginInspectResponse (22)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__BeginInspectResponse(struct soap*, const char*, int, const _ns1__BeginInspectResponse *, const char*);
SOAP_FMAC3 _ns1__BeginInspectResponse * SOAP_FMAC4 soap_in__ns1__BeginInspectResponse(struct soap*, const char*, _ns1__BeginInspectResponse *, const char*);

#ifndef soap_write__ns1__BeginInspectResponse
#define soap_write__ns1__BeginInspectResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:BeginInspectResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__BeginInspectResponse * SOAP_FMAC4 soap_get__ns1__BeginInspectResponse(struct soap*, _ns1__BeginInspectResponse *, const char*, const char*);

#ifndef soap_read__ns1__BeginInspectResponse
#define soap_read__ns1__BeginInspectResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__BeginInspectResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__BeginInspectResponse * SOAP_FMAC2 soap_instantiate__ns1__BeginInspectResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__BeginInspectResponse * soap_new__ns1__BeginInspectResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__BeginInspectResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__BeginInspectResponse * soap_new_req__ns1__BeginInspectResponse(struct soap *soap, ns1__RetValue *BeginInspectResult) { _ns1__BeginInspectResponse *_p = soap_instantiate__ns1__BeginInspectResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__BeginInspectResponse::BeginInspectResult = BeginInspectResult; } return _p; }

inline _ns1__BeginInspectResponse * soap_new_set__ns1__BeginInspectResponse(struct soap *soap, ns1__RetValue *BeginInspectResult) { _ns1__BeginInspectResponse *_p = soap_instantiate__ns1__BeginInspectResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__BeginInspectResponse::BeginInspectResult = BeginInspectResult; } return _p; }

inline void soap_delete__ns1__BeginInspectResponse(struct soap *soap, _ns1__BeginInspectResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__BeginInspectResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__BeginInspect
#define SOAP_TYPE__ns1__BeginInspect (21)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__BeginInspect(struct soap*, const char*, int, const _ns1__BeginInspect *, const char*);
SOAP_FMAC3 _ns1__BeginInspect * SOAP_FMAC4 soap_in__ns1__BeginInspect(struct soap*, const char*, _ns1__BeginInspect *, const char*);

#ifndef soap_write__ns1__BeginInspect
#define soap_write__ns1__BeginInspect(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:BeginInspect", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__BeginInspect * SOAP_FMAC4 soap_get__ns1__BeginInspect(struct soap*, _ns1__BeginInspect *, const char*, const char*);

#ifndef soap_read__ns1__BeginInspect
#define soap_read__ns1__BeginInspect(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__BeginInspect(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__BeginInspect * SOAP_FMAC2 soap_instantiate__ns1__BeginInspect(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__BeginInspect * soap_new__ns1__BeginInspect(struct soap *soap, int n = -1) { return soap_instantiate__ns1__BeginInspect(soap, n, NULL, NULL, NULL); }

inline _ns1__BeginInspect * soap_new_req__ns1__BeginInspect(struct soap *soap, LONG64 LineID, LONG64 DriverID, LONG64 OperatorID) { _ns1__BeginInspect *_p = soap_instantiate__ns1__BeginInspect(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__BeginInspect::LineID = LineID; _p->_ns1__BeginInspect::DriverID = DriverID; _p->_ns1__BeginInspect::OperatorID = OperatorID; } return _p; }

inline _ns1__BeginInspect * soap_new_set__ns1__BeginInspect(struct soap *soap, LONG64 LineID, std::wstring *InspectID, LONG64 DriverID, LONG64 OperatorID, std::wstring *InspectParam, std::wstring *Memo) { _ns1__BeginInspect *_p = soap_instantiate__ns1__BeginInspect(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__BeginInspect::LineID = LineID; _p->_ns1__BeginInspect::InspectID = InspectID; _p->_ns1__BeginInspect::DriverID = DriverID; _p->_ns1__BeginInspect::OperatorID = OperatorID; _p->_ns1__BeginInspect::InspectParam = InspectParam; _p->_ns1__BeginInspect::Memo = Memo; } return _p; }

inline void soap_delete__ns1__BeginInspect(struct soap *soap, _ns1__BeginInspect *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__BeginInspect(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__EndRecordResponse
#define SOAP_TYPE__ns1__EndRecordResponse (20)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__EndRecordResponse(struct soap*, const char*, int, const _ns1__EndRecordResponse *, const char*);
SOAP_FMAC3 _ns1__EndRecordResponse * SOAP_FMAC4 soap_in__ns1__EndRecordResponse(struct soap*, const char*, _ns1__EndRecordResponse *, const char*);

#ifndef soap_write__ns1__EndRecordResponse
#define soap_write__ns1__EndRecordResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:EndRecordResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__EndRecordResponse * SOAP_FMAC4 soap_get__ns1__EndRecordResponse(struct soap*, _ns1__EndRecordResponse *, const char*, const char*);

#ifndef soap_read__ns1__EndRecordResponse
#define soap_read__ns1__EndRecordResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__EndRecordResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__EndRecordResponse * SOAP_FMAC2 soap_instantiate__ns1__EndRecordResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__EndRecordResponse * soap_new__ns1__EndRecordResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__EndRecordResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__EndRecordResponse * soap_new_req__ns1__EndRecordResponse(struct soap *soap, ns1__RetValue *EndRecordResult) { _ns1__EndRecordResponse *_p = soap_instantiate__ns1__EndRecordResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__EndRecordResponse::EndRecordResult = EndRecordResult; } return _p; }

inline _ns1__EndRecordResponse * soap_new_set__ns1__EndRecordResponse(struct soap *soap, ns1__RetValue *EndRecordResult) { _ns1__EndRecordResponse *_p = soap_instantiate__ns1__EndRecordResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__EndRecordResponse::EndRecordResult = EndRecordResult; } return _p; }

inline void soap_delete__ns1__EndRecordResponse(struct soap *soap, _ns1__EndRecordResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__EndRecordResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__EndRecord
#define SOAP_TYPE__ns1__EndRecord (19)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__EndRecord(struct soap*, const char*, int, const _ns1__EndRecord *, const char*);
SOAP_FMAC3 _ns1__EndRecord * SOAP_FMAC4 soap_in__ns1__EndRecord(struct soap*, const char*, _ns1__EndRecord *, const char*);

#ifndef soap_write__ns1__EndRecord
#define soap_write__ns1__EndRecord(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:EndRecord", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__EndRecord * SOAP_FMAC4 soap_get__ns1__EndRecord(struct soap*, _ns1__EndRecord *, const char*, const char*);

#ifndef soap_read__ns1__EndRecord
#define soap_read__ns1__EndRecord(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__EndRecord(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__EndRecord * SOAP_FMAC2 soap_instantiate__ns1__EndRecord(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__EndRecord * soap_new__ns1__EndRecord(struct soap *soap, int n = -1) { return soap_instantiate__ns1__EndRecord(soap, n, NULL, NULL, NULL); }

inline _ns1__EndRecord * soap_new_req__ns1__EndRecord(struct soap *soap) { _ns1__EndRecord *_p = soap_instantiate__ns1__EndRecord(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__EndRecord * soap_new_set__ns1__EndRecord(struct soap *soap, std::wstring *InspectID, std::wstring *Memo) { _ns1__EndRecord *_p = soap_instantiate__ns1__EndRecord(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__EndRecord::InspectID = InspectID; _p->_ns1__EndRecord::Memo = Memo; } return _p; }

inline void soap_delete__ns1__EndRecord(struct soap *soap, _ns1__EndRecord *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__EndRecord(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__BeginRecordResponse
#define SOAP_TYPE__ns1__BeginRecordResponse (18)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__BeginRecordResponse(struct soap*, const char*, int, const _ns1__BeginRecordResponse *, const char*);
SOAP_FMAC3 _ns1__BeginRecordResponse * SOAP_FMAC4 soap_in__ns1__BeginRecordResponse(struct soap*, const char*, _ns1__BeginRecordResponse *, const char*);

#ifndef soap_write__ns1__BeginRecordResponse
#define soap_write__ns1__BeginRecordResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:BeginRecordResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__BeginRecordResponse * SOAP_FMAC4 soap_get__ns1__BeginRecordResponse(struct soap*, _ns1__BeginRecordResponse *, const char*, const char*);

#ifndef soap_read__ns1__BeginRecordResponse
#define soap_read__ns1__BeginRecordResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__BeginRecordResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__BeginRecordResponse * SOAP_FMAC2 soap_instantiate__ns1__BeginRecordResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__BeginRecordResponse * soap_new__ns1__BeginRecordResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__BeginRecordResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__BeginRecordResponse * soap_new_req__ns1__BeginRecordResponse(struct soap *soap, ns1__RetValue *BeginRecordResult) { _ns1__BeginRecordResponse *_p = soap_instantiate__ns1__BeginRecordResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__BeginRecordResponse::BeginRecordResult = BeginRecordResult; } return _p; }

inline _ns1__BeginRecordResponse * soap_new_set__ns1__BeginRecordResponse(struct soap *soap, ns1__RetValue *BeginRecordResult) { _ns1__BeginRecordResponse *_p = soap_instantiate__ns1__BeginRecordResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__BeginRecordResponse::BeginRecordResult = BeginRecordResult; } return _p; }

inline void soap_delete__ns1__BeginRecordResponse(struct soap *soap, _ns1__BeginRecordResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__BeginRecordResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__BeginRecord
#define SOAP_TYPE__ns1__BeginRecord (17)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__BeginRecord(struct soap*, const char*, int, const _ns1__BeginRecord *, const char*);
SOAP_FMAC3 _ns1__BeginRecord * SOAP_FMAC4 soap_in__ns1__BeginRecord(struct soap*, const char*, _ns1__BeginRecord *, const char*);

#ifndef soap_write__ns1__BeginRecord
#define soap_write__ns1__BeginRecord(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:BeginRecord", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__BeginRecord * SOAP_FMAC4 soap_get__ns1__BeginRecord(struct soap*, _ns1__BeginRecord *, const char*, const char*);

#ifndef soap_read__ns1__BeginRecord
#define soap_read__ns1__BeginRecord(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__BeginRecord(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__BeginRecord * SOAP_FMAC2 soap_instantiate__ns1__BeginRecord(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__BeginRecord * soap_new__ns1__BeginRecord(struct soap *soap, int n = -1) { return soap_instantiate__ns1__BeginRecord(soap, n, NULL, NULL, NULL); }

inline _ns1__BeginRecord * soap_new_req__ns1__BeginRecord(struct soap *soap, LONG64 LineID) { _ns1__BeginRecord *_p = soap_instantiate__ns1__BeginRecord(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__BeginRecord::LineID = LineID; } return _p; }

inline _ns1__BeginRecord * soap_new_set__ns1__BeginRecord(struct soap *soap, LONG64 LineID, std::wstring *InspectID, std::wstring *Memo) { _ns1__BeginRecord *_p = soap_instantiate__ns1__BeginRecord(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__BeginRecord::LineID = LineID; _p->_ns1__BeginRecord::InspectID = InspectID; _p->_ns1__BeginRecord::Memo = Memo; } return _p; }

inline void soap_delete__ns1__BeginRecord(struct soap *soap, _ns1__BeginRecord *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__BeginRecord(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__AbortInspectResponse
#define SOAP_TYPE__ns1__AbortInspectResponse (16)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AbortInspectResponse(struct soap*, const char*, int, const _ns1__AbortInspectResponse *, const char*);
SOAP_FMAC3 _ns1__AbortInspectResponse * SOAP_FMAC4 soap_in__ns1__AbortInspectResponse(struct soap*, const char*, _ns1__AbortInspectResponse *, const char*);

#ifndef soap_write__ns1__AbortInspectResponse
#define soap_write__ns1__AbortInspectResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:AbortInspectResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__AbortInspectResponse * SOAP_FMAC4 soap_get__ns1__AbortInspectResponse(struct soap*, _ns1__AbortInspectResponse *, const char*, const char*);

#ifndef soap_read__ns1__AbortInspectResponse
#define soap_read__ns1__AbortInspectResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__AbortInspectResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__AbortInspectResponse * SOAP_FMAC2 soap_instantiate__ns1__AbortInspectResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__AbortInspectResponse * soap_new__ns1__AbortInspectResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__AbortInspectResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__AbortInspectResponse * soap_new_req__ns1__AbortInspectResponse(struct soap *soap, ns1__RetValue *AbortInspectResult) { _ns1__AbortInspectResponse *_p = soap_instantiate__ns1__AbortInspectResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__AbortInspectResponse::AbortInspectResult = AbortInspectResult; } return _p; }

inline _ns1__AbortInspectResponse * soap_new_set__ns1__AbortInspectResponse(struct soap *soap, ns1__RetValue *AbortInspectResult) { _ns1__AbortInspectResponse *_p = soap_instantiate__ns1__AbortInspectResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__AbortInspectResponse::AbortInspectResult = AbortInspectResult; } return _p; }

inline void soap_delete__ns1__AbortInspectResponse(struct soap *soap, _ns1__AbortInspectResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AbortInspectResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__AbortInspect
#define SOAP_TYPE__ns1__AbortInspect (15)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AbortInspect(struct soap*, const char*, int, const _ns1__AbortInspect *, const char*);
SOAP_FMAC3 _ns1__AbortInspect * SOAP_FMAC4 soap_in__ns1__AbortInspect(struct soap*, const char*, _ns1__AbortInspect *, const char*);

#ifndef soap_write__ns1__AbortInspect
#define soap_write__ns1__AbortInspect(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:AbortInspect", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__AbortInspect * SOAP_FMAC4 soap_get__ns1__AbortInspect(struct soap*, _ns1__AbortInspect *, const char*, const char*);

#ifndef soap_read__ns1__AbortInspect
#define soap_read__ns1__AbortInspect(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__AbortInspect(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__AbortInspect * SOAP_FMAC2 soap_instantiate__ns1__AbortInspect(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__AbortInspect * soap_new__ns1__AbortInspect(struct soap *soap, int n = -1) { return soap_instantiate__ns1__AbortInspect(soap, n, NULL, NULL, NULL); }

inline _ns1__AbortInspect * soap_new_req__ns1__AbortInspect(struct soap *soap, int Reason) { _ns1__AbortInspect *_p = soap_instantiate__ns1__AbortInspect(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__AbortInspect::Reason = Reason; } return _p; }

inline _ns1__AbortInspect * soap_new_set__ns1__AbortInspect(struct soap *soap, std::wstring *InspectID, int Reason, std::wstring *Memo) { _ns1__AbortInspect *_p = soap_instantiate__ns1__AbortInspect(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__AbortInspect::InspectID = InspectID; _p->_ns1__AbortInspect::Reason = Reason; _p->_ns1__AbortInspect::Memo = Memo; } return _p; }

inline void soap_delete__ns1__AbortInspect(struct soap *soap, _ns1__AbortInspect *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AbortInspect(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetInspectQueueByPlateIDResponse
#define SOAP_TYPE__ns1__GetInspectQueueByPlateIDResponse (14)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetInspectQueueByPlateIDResponse(struct soap*, const char*, int, const _ns1__GetInspectQueueByPlateIDResponse *, const char*);
SOAP_FMAC3 _ns1__GetInspectQueueByPlateIDResponse * SOAP_FMAC4 soap_in__ns1__GetInspectQueueByPlateIDResponse(struct soap*, const char*, _ns1__GetInspectQueueByPlateIDResponse *, const char*);

#ifndef soap_write__ns1__GetInspectQueueByPlateIDResponse
#define soap_write__ns1__GetInspectQueueByPlateIDResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:GetInspectQueueByPlateIDResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetInspectQueueByPlateIDResponse * SOAP_FMAC4 soap_get__ns1__GetInspectQueueByPlateIDResponse(struct soap*, _ns1__GetInspectQueueByPlateIDResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetInspectQueueByPlateIDResponse
#define soap_read__ns1__GetInspectQueueByPlateIDResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetInspectQueueByPlateIDResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetInspectQueueByPlateIDResponse * SOAP_FMAC2 soap_instantiate__ns1__GetInspectQueueByPlateIDResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetInspectQueueByPlateIDResponse * soap_new__ns1__GetInspectQueueByPlateIDResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetInspectQueueByPlateIDResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetInspectQueueByPlateIDResponse * soap_new_req__ns1__GetInspectQueueByPlateIDResponse(struct soap *soap, ns1__RetValue *GetInspectQueueByPlateIDResult) { _ns1__GetInspectQueueByPlateIDResponse *_p = soap_instantiate__ns1__GetInspectQueueByPlateIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetInspectQueueByPlateIDResponse::GetInspectQueueByPlateIDResult = GetInspectQueueByPlateIDResult; } return _p; }

inline _ns1__GetInspectQueueByPlateIDResponse * soap_new_set__ns1__GetInspectQueueByPlateIDResponse(struct soap *soap, ns1__RetValue *GetInspectQueueByPlateIDResult) { _ns1__GetInspectQueueByPlateIDResponse *_p = soap_instantiate__ns1__GetInspectQueueByPlateIDResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetInspectQueueByPlateIDResponse::GetInspectQueueByPlateIDResult = GetInspectQueueByPlateIDResult; } return _p; }

inline void soap_delete__ns1__GetInspectQueueByPlateIDResponse(struct soap *soap, _ns1__GetInspectQueueByPlateIDResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetInspectQueueByPlateIDResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetInspectQueueByPlateID
#define SOAP_TYPE__ns1__GetInspectQueueByPlateID (13)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetInspectQueueByPlateID(struct soap*, const char*, int, const _ns1__GetInspectQueueByPlateID *, const char*);
SOAP_FMAC3 _ns1__GetInspectQueueByPlateID * SOAP_FMAC4 soap_in__ns1__GetInspectQueueByPlateID(struct soap*, const char*, _ns1__GetInspectQueueByPlateID *, const char*);

#ifndef soap_write__ns1__GetInspectQueueByPlateID
#define soap_write__ns1__GetInspectQueueByPlateID(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:GetInspectQueueByPlateID", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetInspectQueueByPlateID * SOAP_FMAC4 soap_get__ns1__GetInspectQueueByPlateID(struct soap*, _ns1__GetInspectQueueByPlateID *, const char*, const char*);

#ifndef soap_read__ns1__GetInspectQueueByPlateID
#define soap_read__ns1__GetInspectQueueByPlateID(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetInspectQueueByPlateID(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetInspectQueueByPlateID * SOAP_FMAC2 soap_instantiate__ns1__GetInspectQueueByPlateID(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetInspectQueueByPlateID * soap_new__ns1__GetInspectQueueByPlateID(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetInspectQueueByPlateID(soap, n, NULL, NULL, NULL); }

inline _ns1__GetInspectQueueByPlateID * soap_new_req__ns1__GetInspectQueueByPlateID(struct soap *soap, int PlateType) { _ns1__GetInspectQueueByPlateID *_p = soap_instantiate__ns1__GetInspectQueueByPlateID(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetInspectQueueByPlateID::PlateType = PlateType; } return _p; }

inline _ns1__GetInspectQueueByPlateID * soap_new_set__ns1__GetInspectQueueByPlateID(struct soap *soap, std::wstring *PlateID, int PlateType, std::wstring *Memo) { _ns1__GetInspectQueueByPlateID *_p = soap_instantiate__ns1__GetInspectQueueByPlateID(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetInspectQueueByPlateID::PlateID = PlateID; _p->_ns1__GetInspectQueueByPlateID::PlateType = PlateType; _p->_ns1__GetInspectQueueByPlateID::Memo = Memo; } return _p; }

inline void soap_delete__ns1__GetInspectQueueByPlateID(struct soap *soap, _ns1__GetInspectQueueByPlateID *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetInspectQueueByPlateID(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetInspectQueueByDateResponse
#define SOAP_TYPE__ns1__GetInspectQueueByDateResponse (12)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetInspectQueueByDateResponse(struct soap*, const char*, int, const _ns1__GetInspectQueueByDateResponse *, const char*);
SOAP_FMAC3 _ns1__GetInspectQueueByDateResponse * SOAP_FMAC4 soap_in__ns1__GetInspectQueueByDateResponse(struct soap*, const char*, _ns1__GetInspectQueueByDateResponse *, const char*);

#ifndef soap_write__ns1__GetInspectQueueByDateResponse
#define soap_write__ns1__GetInspectQueueByDateResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:GetInspectQueueByDateResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetInspectQueueByDateResponse * SOAP_FMAC4 soap_get__ns1__GetInspectQueueByDateResponse(struct soap*, _ns1__GetInspectQueueByDateResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetInspectQueueByDateResponse
#define soap_read__ns1__GetInspectQueueByDateResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetInspectQueueByDateResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetInspectQueueByDateResponse * SOAP_FMAC2 soap_instantiate__ns1__GetInspectQueueByDateResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetInspectQueueByDateResponse * soap_new__ns1__GetInspectQueueByDateResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetInspectQueueByDateResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetInspectQueueByDateResponse * soap_new_req__ns1__GetInspectQueueByDateResponse(struct soap *soap, ns1__RetValue *GetInspectQueueByDateResult) { _ns1__GetInspectQueueByDateResponse *_p = soap_instantiate__ns1__GetInspectQueueByDateResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetInspectQueueByDateResponse::GetInspectQueueByDateResult = GetInspectQueueByDateResult; } return _p; }

inline _ns1__GetInspectQueueByDateResponse * soap_new_set__ns1__GetInspectQueueByDateResponse(struct soap *soap, ns1__RetValue *GetInspectQueueByDateResult) { _ns1__GetInspectQueueByDateResponse *_p = soap_instantiate__ns1__GetInspectQueueByDateResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetInspectQueueByDateResponse::GetInspectQueueByDateResult = GetInspectQueueByDateResult; } return _p; }

inline void soap_delete__ns1__GetInspectQueueByDateResponse(struct soap *soap, _ns1__GetInspectQueueByDateResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetInspectQueueByDateResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__GetInspectQueueByDate
#define SOAP_TYPE__ns1__GetInspectQueueByDate (11)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetInspectQueueByDate(struct soap*, const char*, int, const _ns1__GetInspectQueueByDate *, const char*);
SOAP_FMAC3 _ns1__GetInspectQueueByDate * SOAP_FMAC4 soap_in__ns1__GetInspectQueueByDate(struct soap*, const char*, _ns1__GetInspectQueueByDate *, const char*);

#ifndef soap_write__ns1__GetInspectQueueByDate
#define soap_write__ns1__GetInspectQueueByDate(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:GetInspectQueueByDate", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetInspectQueueByDate * SOAP_FMAC4 soap_get__ns1__GetInspectQueueByDate(struct soap*, _ns1__GetInspectQueueByDate *, const char*, const char*);

#ifndef soap_read__ns1__GetInspectQueueByDate
#define soap_read__ns1__GetInspectQueueByDate(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__GetInspectQueueByDate(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetInspectQueueByDate * SOAP_FMAC2 soap_instantiate__ns1__GetInspectQueueByDate(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetInspectQueueByDate * soap_new__ns1__GetInspectQueueByDate(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetInspectQueueByDate(soap, n, NULL, NULL, NULL); }

inline _ns1__GetInspectQueueByDate * soap_new_req__ns1__GetInspectQueueByDate(struct soap *soap) { _ns1__GetInspectQueueByDate *_p = soap_instantiate__ns1__GetInspectQueueByDate(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetInspectQueueByDate * soap_new_set__ns1__GetInspectQueueByDate(struct soap *soap, std::wstring *FromDate, std::wstring *ToDate, std::wstring *Memo) { _ns1__GetInspectQueueByDate *_p = soap_instantiate__ns1__GetInspectQueueByDate(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetInspectQueueByDate::FromDate = FromDate; _p->_ns1__GetInspectQueueByDate::ToDate = ToDate; _p->_ns1__GetInspectQueueByDate::Memo = Memo; } return _p; }

inline void soap_delete__ns1__GetInspectQueueByDate(struct soap *soap, _ns1__GetInspectQueueByDate *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetInspectQueueByDate(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__SyncResponse
#define SOAP_TYPE__ns1__SyncResponse (10)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SyncResponse(struct soap*, const char*, int, const _ns1__SyncResponse *, const char*);
SOAP_FMAC3 _ns1__SyncResponse * SOAP_FMAC4 soap_in__ns1__SyncResponse(struct soap*, const char*, _ns1__SyncResponse *, const char*);

#ifndef soap_write__ns1__SyncResponse
#define soap_write__ns1__SyncResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:SyncResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SyncResponse * SOAP_FMAC4 soap_get__ns1__SyncResponse(struct soap*, _ns1__SyncResponse *, const char*, const char*);

#ifndef soap_read__ns1__SyncResponse
#define soap_read__ns1__SyncResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__SyncResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__SyncResponse * SOAP_FMAC2 soap_instantiate__ns1__SyncResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SyncResponse * soap_new__ns1__SyncResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SyncResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__SyncResponse * soap_new_req__ns1__SyncResponse(struct soap *soap, ns1__RetValue *SyncResult) { _ns1__SyncResponse *_p = soap_instantiate__ns1__SyncResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SyncResponse::SyncResult = SyncResult; } return _p; }

inline _ns1__SyncResponse * soap_new_set__ns1__SyncResponse(struct soap *soap, ns1__RetValue *SyncResult) { _ns1__SyncResponse *_p = soap_instantiate__ns1__SyncResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SyncResponse::SyncResult = SyncResult; } return _p; }

inline void soap_delete__ns1__SyncResponse(struct soap *soap, _ns1__SyncResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SyncResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__Sync
#define SOAP_TYPE__ns1__Sync (9)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Sync(struct soap*, const char*, int, const _ns1__Sync *, const char*);
SOAP_FMAC3 _ns1__Sync * SOAP_FMAC4 soap_in__ns1__Sync(struct soap*, const char*, _ns1__Sync *, const char*);

#ifndef soap_write__ns1__Sync
#define soap_write__ns1__Sync(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:Sync", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__Sync * SOAP_FMAC4 soap_get__ns1__Sync(struct soap*, _ns1__Sync *, const char*, const char*);

#ifndef soap_read__ns1__Sync
#define soap_read__ns1__Sync(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__Sync(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__Sync * SOAP_FMAC2 soap_instantiate__ns1__Sync(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__Sync * soap_new__ns1__Sync(struct soap *soap, int n = -1) { return soap_instantiate__ns1__Sync(soap, n, NULL, NULL, NULL); }

inline _ns1__Sync * soap_new_req__ns1__Sync(struct soap *soap) { _ns1__Sync *_p = soap_instantiate__ns1__Sync(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__Sync * soap_new_set__ns1__Sync(struct soap *soap, std::wstring *Memo) { _ns1__Sync *_p = soap_instantiate__ns1__Sync(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__Sync::Memo = Memo; } return _p; }

inline void soap_delete__ns1__Sync(struct soap *soap, _ns1__Sync *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__Sync(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__RetValue
#define SOAP_TYPE_ns1__RetValue (8)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RetValue(struct soap*, const char*, int, const ns1__RetValue *, const char*);
SOAP_FMAC3 ns1__RetValue * SOAP_FMAC4 soap_in_ns1__RetValue(struct soap*, const char*, ns1__RetValue *, const char*);

#ifndef soap_write_ns1__RetValue
#define soap_write_ns1__RetValue(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:RetValue", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__RetValue * SOAP_FMAC4 soap_get_ns1__RetValue(struct soap*, ns1__RetValue *, const char*, const char*);

#ifndef soap_read_ns1__RetValue
#define soap_read_ns1__RetValue(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__RetValue(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns1__RetValue * SOAP_FMAC2 soap_instantiate_ns1__RetValue(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RetValue * soap_new_ns1__RetValue(struct soap *soap, int n = -1) { return soap_instantiate_ns1__RetValue(soap, n, NULL, NULL, NULL); }

inline ns1__RetValue * soap_new_req_ns1__RetValue(struct soap *soap, int ErrNum, int InternalErrNum) { ns1__RetValue *_p = soap_instantiate_ns1__RetValue(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__RetValue::ErrNum = ErrNum; _p->ns1__RetValue::InternalErrNum = InternalErrNum; } return _p; }

inline ns1__RetValue * soap_new_set_ns1__RetValue(struct soap *soap, int ErrNum, std::wstring *ErrMsg, int InternalErrNum, std::wstring *InternalErrMsg, std::wstring *Value, std::wstring *TipMessage, std::wstring *Memo) { ns1__RetValue *_p = soap_instantiate_ns1__RetValue(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__RetValue::ErrNum = ErrNum; _p->ns1__RetValue::ErrMsg = ErrMsg; _p->ns1__RetValue::InternalErrNum = InternalErrNum; _p->ns1__RetValue::InternalErrMsg = InternalErrMsg; _p->ns1__RetValue::Value = Value; _p->ns1__RetValue::TipMessage = TipMessage; _p->ns1__RetValue::Memo = Memo; } return _p; }

inline void soap_delete_ns1__RetValue(struct soap *soap, ns1__RetValue *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__RetValue(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (221)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, data),0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (220)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, data),0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (217)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, data),0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (215)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, data),0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (214)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, data),0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE___ns1__OBDTXCheck_
#define SOAP_TYPE___ns1__OBDTXCheck_ (213)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__OBDTXCheck_(struct soap*, struct __ns1__OBDTXCheck_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__OBDTXCheck_(struct soap*, const struct __ns1__OBDTXCheck_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__OBDTXCheck_(struct soap*, const char*, int, const struct __ns1__OBDTXCheck_ *, const char*);
SOAP_FMAC3 struct __ns1__OBDTXCheck_ * SOAP_FMAC4 soap_in___ns1__OBDTXCheck_(struct soap*, const char*, struct __ns1__OBDTXCheck_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__OBDTXCheck_(struct soap*, const struct __ns1__OBDTXCheck_ *, const char*, const char*);

#ifndef soap_write___ns1__OBDTXCheck_
#define soap_write___ns1__OBDTXCheck_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__OBDTXCheck_(soap, data),0) || soap_put___ns1__OBDTXCheck_(soap, data, "-ns1:OBDTXCheck", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__OBDTXCheck_ * SOAP_FMAC4 soap_get___ns1__OBDTXCheck_(struct soap*, struct __ns1__OBDTXCheck_ *, const char*, const char*);

#ifndef soap_read___ns1__OBDTXCheck_
#define soap_read___ns1__OBDTXCheck_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__OBDTXCheck_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__OBDTXCheck_ * SOAP_FMAC2 soap_instantiate___ns1__OBDTXCheck_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__OBDTXCheck_ * soap_new___ns1__OBDTXCheck_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__OBDTXCheck_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__OBDTXCheck_ * soap_new_req___ns1__OBDTXCheck_(struct soap *soap) { struct __ns1__OBDTXCheck_ *_p = soap_instantiate___ns1__OBDTXCheck_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__OBDTXCheck_(soap, _p); } return _p; }

inline struct __ns1__OBDTXCheck_ * soap_new_set___ns1__OBDTXCheck_(struct soap *soap, _ns1__OBDTXCheck *ns1__OBDTXCheck) { struct __ns1__OBDTXCheck_ *_p = soap_instantiate___ns1__OBDTXCheck_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__OBDTXCheck_(soap, _p); _p->ns1__OBDTXCheck = ns1__OBDTXCheck; } return _p; }

inline void soap_delete___ns1__OBDTXCheck_(struct soap *soap, struct __ns1__OBDTXCheck_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__OBDTXCheck_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__OBDInspect_
#define SOAP_TYPE___ns1__OBDInspect_ (211)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__OBDInspect_(struct soap*, struct __ns1__OBDInspect_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__OBDInspect_(struct soap*, const struct __ns1__OBDInspect_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__OBDInspect_(struct soap*, const char*, int, const struct __ns1__OBDInspect_ *, const char*);
SOAP_FMAC3 struct __ns1__OBDInspect_ * SOAP_FMAC4 soap_in___ns1__OBDInspect_(struct soap*, const char*, struct __ns1__OBDInspect_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__OBDInspect_(struct soap*, const struct __ns1__OBDInspect_ *, const char*, const char*);

#ifndef soap_write___ns1__OBDInspect_
#define soap_write___ns1__OBDInspect_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__OBDInspect_(soap, data),0) || soap_put___ns1__OBDInspect_(soap, data, "-ns1:OBDInspect", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__OBDInspect_ * SOAP_FMAC4 soap_get___ns1__OBDInspect_(struct soap*, struct __ns1__OBDInspect_ *, const char*, const char*);

#ifndef soap_read___ns1__OBDInspect_
#define soap_read___ns1__OBDInspect_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__OBDInspect_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__OBDInspect_ * SOAP_FMAC2 soap_instantiate___ns1__OBDInspect_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__OBDInspect_ * soap_new___ns1__OBDInspect_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__OBDInspect_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__OBDInspect_ * soap_new_req___ns1__OBDInspect_(struct soap *soap) { struct __ns1__OBDInspect_ *_p = soap_instantiate___ns1__OBDInspect_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__OBDInspect_(soap, _p); } return _p; }

inline struct __ns1__OBDInspect_ * soap_new_set___ns1__OBDInspect_(struct soap *soap, _ns1__OBDInspect *ns1__OBDInspect) { struct __ns1__OBDInspect_ *_p = soap_instantiate___ns1__OBDInspect_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__OBDInspect_(soap, _p); _p->ns1__OBDInspect = ns1__OBDInspect; } return _p; }

inline void soap_delete___ns1__OBDInspect_(struct soap *soap, struct __ns1__OBDInspect_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__OBDInspect_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetOtherInspectQueueByDate_
#define SOAP_TYPE___ns1__GetOtherInspectQueueByDate_ (209)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetOtherInspectQueueByDate_(struct soap*, struct __ns1__GetOtherInspectQueueByDate_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetOtherInspectQueueByDate_(struct soap*, const struct __ns1__GetOtherInspectQueueByDate_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetOtherInspectQueueByDate_(struct soap*, const char*, int, const struct __ns1__GetOtherInspectQueueByDate_ *, const char*);
SOAP_FMAC3 struct __ns1__GetOtherInspectQueueByDate_ * SOAP_FMAC4 soap_in___ns1__GetOtherInspectQueueByDate_(struct soap*, const char*, struct __ns1__GetOtherInspectQueueByDate_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetOtherInspectQueueByDate_(struct soap*, const struct __ns1__GetOtherInspectQueueByDate_ *, const char*, const char*);

#ifndef soap_write___ns1__GetOtherInspectQueueByDate_
#define soap_write___ns1__GetOtherInspectQueueByDate_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetOtherInspectQueueByDate_(soap, data),0) || soap_put___ns1__GetOtherInspectQueueByDate_(soap, data, "-ns1:GetOtherInspectQueueByDate", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetOtherInspectQueueByDate_ * SOAP_FMAC4 soap_get___ns1__GetOtherInspectQueueByDate_(struct soap*, struct __ns1__GetOtherInspectQueueByDate_ *, const char*, const char*);

#ifndef soap_read___ns1__GetOtherInspectQueueByDate_
#define soap_read___ns1__GetOtherInspectQueueByDate_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetOtherInspectQueueByDate_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetOtherInspectQueueByDate_ * SOAP_FMAC2 soap_instantiate___ns1__GetOtherInspectQueueByDate_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetOtherInspectQueueByDate_ * soap_new___ns1__GetOtherInspectQueueByDate_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetOtherInspectQueueByDate_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetOtherInspectQueueByDate_ * soap_new_req___ns1__GetOtherInspectQueueByDate_(struct soap *soap) { struct __ns1__GetOtherInspectQueueByDate_ *_p = soap_instantiate___ns1__GetOtherInspectQueueByDate_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetOtherInspectQueueByDate_(soap, _p); } return _p; }

inline struct __ns1__GetOtherInspectQueueByDate_ * soap_new_set___ns1__GetOtherInspectQueueByDate_(struct soap *soap, _ns1__GetOtherInspectQueueByDate *ns1__GetOtherInspectQueueByDate) { struct __ns1__GetOtherInspectQueueByDate_ *_p = soap_instantiate___ns1__GetOtherInspectQueueByDate_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetOtherInspectQueueByDate_(soap, _p); _p->ns1__GetOtherInspectQueueByDate = ns1__GetOtherInspectQueueByDate; } return _p; }

inline void soap_delete___ns1__GetOtherInspectQueueByDate_(struct soap *soap, struct __ns1__GetOtherInspectQueueByDate_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetOtherInspectQueueByDate_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetOtherInspectQueueByPlateID_
#define SOAP_TYPE___ns1__GetOtherInspectQueueByPlateID_ (207)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetOtherInspectQueueByPlateID_(struct soap*, struct __ns1__GetOtherInspectQueueByPlateID_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetOtherInspectQueueByPlateID_(struct soap*, const struct __ns1__GetOtherInspectQueueByPlateID_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetOtherInspectQueueByPlateID_(struct soap*, const char*, int, const struct __ns1__GetOtherInspectQueueByPlateID_ *, const char*);
SOAP_FMAC3 struct __ns1__GetOtherInspectQueueByPlateID_ * SOAP_FMAC4 soap_in___ns1__GetOtherInspectQueueByPlateID_(struct soap*, const char*, struct __ns1__GetOtherInspectQueueByPlateID_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetOtherInspectQueueByPlateID_(struct soap*, const struct __ns1__GetOtherInspectQueueByPlateID_ *, const char*, const char*);

#ifndef soap_write___ns1__GetOtherInspectQueueByPlateID_
#define soap_write___ns1__GetOtherInspectQueueByPlateID_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetOtherInspectQueueByPlateID_(soap, data),0) || soap_put___ns1__GetOtherInspectQueueByPlateID_(soap, data, "-ns1:GetOtherInspectQueueByPlateID", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetOtherInspectQueueByPlateID_ * SOAP_FMAC4 soap_get___ns1__GetOtherInspectQueueByPlateID_(struct soap*, struct __ns1__GetOtherInspectQueueByPlateID_ *, const char*, const char*);

#ifndef soap_read___ns1__GetOtherInspectQueueByPlateID_
#define soap_read___ns1__GetOtherInspectQueueByPlateID_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetOtherInspectQueueByPlateID_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetOtherInspectQueueByPlateID_ * SOAP_FMAC2 soap_instantiate___ns1__GetOtherInspectQueueByPlateID_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetOtherInspectQueueByPlateID_ * soap_new___ns1__GetOtherInspectQueueByPlateID_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetOtherInspectQueueByPlateID_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetOtherInspectQueueByPlateID_ * soap_new_req___ns1__GetOtherInspectQueueByPlateID_(struct soap *soap) { struct __ns1__GetOtherInspectQueueByPlateID_ *_p = soap_instantiate___ns1__GetOtherInspectQueueByPlateID_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetOtherInspectQueueByPlateID_(soap, _p); } return _p; }

inline struct __ns1__GetOtherInspectQueueByPlateID_ * soap_new_set___ns1__GetOtherInspectQueueByPlateID_(struct soap *soap, _ns1__GetOtherInspectQueueByPlateID *ns1__GetOtherInspectQueueByPlateID) { struct __ns1__GetOtherInspectQueueByPlateID_ *_p = soap_instantiate___ns1__GetOtherInspectQueueByPlateID_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetOtherInspectQueueByPlateID_(soap, _p); _p->ns1__GetOtherInspectQueueByPlateID = ns1__GetOtherInspectQueueByPlateID; } return _p; }

inline void soap_delete___ns1__GetOtherInspectQueueByPlateID_(struct soap *soap, struct __ns1__GetOtherInspectQueueByPlateID_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetOtherInspectQueueByPlateID_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetInspectParams_
#define SOAP_TYPE___ns1__GetInspectParams_ (205)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetInspectParams_(struct soap*, struct __ns1__GetInspectParams_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetInspectParams_(struct soap*, const struct __ns1__GetInspectParams_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetInspectParams_(struct soap*, const char*, int, const struct __ns1__GetInspectParams_ *, const char*);
SOAP_FMAC3 struct __ns1__GetInspectParams_ * SOAP_FMAC4 soap_in___ns1__GetInspectParams_(struct soap*, const char*, struct __ns1__GetInspectParams_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetInspectParams_(struct soap*, const struct __ns1__GetInspectParams_ *, const char*, const char*);

#ifndef soap_write___ns1__GetInspectParams_
#define soap_write___ns1__GetInspectParams_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetInspectParams_(soap, data),0) || soap_put___ns1__GetInspectParams_(soap, data, "-ns1:GetInspectParams", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetInspectParams_ * SOAP_FMAC4 soap_get___ns1__GetInspectParams_(struct soap*, struct __ns1__GetInspectParams_ *, const char*, const char*);

#ifndef soap_read___ns1__GetInspectParams_
#define soap_read___ns1__GetInspectParams_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetInspectParams_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetInspectParams_ * SOAP_FMAC2 soap_instantiate___ns1__GetInspectParams_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetInspectParams_ * soap_new___ns1__GetInspectParams_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetInspectParams_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetInspectParams_ * soap_new_req___ns1__GetInspectParams_(struct soap *soap) { struct __ns1__GetInspectParams_ *_p = soap_instantiate___ns1__GetInspectParams_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetInspectParams_(soap, _p); } return _p; }

inline struct __ns1__GetInspectParams_ * soap_new_set___ns1__GetInspectParams_(struct soap *soap, _ns1__GetInspectParams *ns1__GetInspectParams) { struct __ns1__GetInspectParams_ *_p = soap_instantiate___ns1__GetInspectParams_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetInspectParams_(soap, _p); _p->ns1__GetInspectParams = ns1__GetInspectParams; } return _p; }

inline void soap_delete___ns1__GetInspectParams_(struct soap *soap, struct __ns1__GetInspectParams_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetInspectParams_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__FuelEvaporationInspect_
#define SOAP_TYPE___ns1__FuelEvaporationInspect_ (203)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__FuelEvaporationInspect_(struct soap*, struct __ns1__FuelEvaporationInspect_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__FuelEvaporationInspect_(struct soap*, const struct __ns1__FuelEvaporationInspect_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__FuelEvaporationInspect_(struct soap*, const char*, int, const struct __ns1__FuelEvaporationInspect_ *, const char*);
SOAP_FMAC3 struct __ns1__FuelEvaporationInspect_ * SOAP_FMAC4 soap_in___ns1__FuelEvaporationInspect_(struct soap*, const char*, struct __ns1__FuelEvaporationInspect_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__FuelEvaporationInspect_(struct soap*, const struct __ns1__FuelEvaporationInspect_ *, const char*, const char*);

#ifndef soap_write___ns1__FuelEvaporationInspect_
#define soap_write___ns1__FuelEvaporationInspect_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__FuelEvaporationInspect_(soap, data),0) || soap_put___ns1__FuelEvaporationInspect_(soap, data, "-ns1:FuelEvaporationInspect", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__FuelEvaporationInspect_ * SOAP_FMAC4 soap_get___ns1__FuelEvaporationInspect_(struct soap*, struct __ns1__FuelEvaporationInspect_ *, const char*, const char*);

#ifndef soap_read___ns1__FuelEvaporationInspect_
#define soap_read___ns1__FuelEvaporationInspect_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__FuelEvaporationInspect_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__FuelEvaporationInspect_ * SOAP_FMAC2 soap_instantiate___ns1__FuelEvaporationInspect_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__FuelEvaporationInspect_ * soap_new___ns1__FuelEvaporationInspect_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__FuelEvaporationInspect_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__FuelEvaporationInspect_ * soap_new_req___ns1__FuelEvaporationInspect_(struct soap *soap) { struct __ns1__FuelEvaporationInspect_ *_p = soap_instantiate___ns1__FuelEvaporationInspect_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__FuelEvaporationInspect_(soap, _p); } return _p; }

inline struct __ns1__FuelEvaporationInspect_ * soap_new_set___ns1__FuelEvaporationInspect_(struct soap *soap, _ns1__FuelEvaporationInspect *ns1__FuelEvaporationInspect) { struct __ns1__FuelEvaporationInspect_ *_p = soap_instantiate___ns1__FuelEvaporationInspect_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__FuelEvaporationInspect_(soap, _p); _p->ns1__FuelEvaporationInspect = ns1__FuelEvaporationInspect; } return _p; }

inline void soap_delete___ns1__FuelEvaporationInspect_(struct soap *soap, struct __ns1__FuelEvaporationInspect_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__FuelEvaporationInspect_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__TestPhoto_
#define SOAP_TYPE___ns1__TestPhoto_ (201)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__TestPhoto_(struct soap*, struct __ns1__TestPhoto_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__TestPhoto_(struct soap*, const struct __ns1__TestPhoto_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__TestPhoto_(struct soap*, const char*, int, const struct __ns1__TestPhoto_ *, const char*);
SOAP_FMAC3 struct __ns1__TestPhoto_ * SOAP_FMAC4 soap_in___ns1__TestPhoto_(struct soap*, const char*, struct __ns1__TestPhoto_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__TestPhoto_(struct soap*, const struct __ns1__TestPhoto_ *, const char*, const char*);

#ifndef soap_write___ns1__TestPhoto_
#define soap_write___ns1__TestPhoto_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__TestPhoto_(soap, data),0) || soap_put___ns1__TestPhoto_(soap, data, "-ns1:TestPhoto", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__TestPhoto_ * SOAP_FMAC4 soap_get___ns1__TestPhoto_(struct soap*, struct __ns1__TestPhoto_ *, const char*, const char*);

#ifndef soap_read___ns1__TestPhoto_
#define soap_read___ns1__TestPhoto_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__TestPhoto_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__TestPhoto_ * SOAP_FMAC2 soap_instantiate___ns1__TestPhoto_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__TestPhoto_ * soap_new___ns1__TestPhoto_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__TestPhoto_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__TestPhoto_ * soap_new_req___ns1__TestPhoto_(struct soap *soap) { struct __ns1__TestPhoto_ *_p = soap_instantiate___ns1__TestPhoto_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__TestPhoto_(soap, _p); } return _p; }

inline struct __ns1__TestPhoto_ * soap_new_set___ns1__TestPhoto_(struct soap *soap, _ns1__TestPhoto *ns1__TestPhoto) { struct __ns1__TestPhoto_ *_p = soap_instantiate___ns1__TestPhoto_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__TestPhoto_(soap, _p); _p->ns1__TestPhoto = ns1__TestPhoto; } return _p; }

inline void soap_delete___ns1__TestPhoto_(struct soap *soap, struct __ns1__TestPhoto_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__TestPhoto_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__EndCalibrate_
#define SOAP_TYPE___ns1__EndCalibrate_ (199)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__EndCalibrate_(struct soap*, struct __ns1__EndCalibrate_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__EndCalibrate_(struct soap*, const struct __ns1__EndCalibrate_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__EndCalibrate_(struct soap*, const char*, int, const struct __ns1__EndCalibrate_ *, const char*);
SOAP_FMAC3 struct __ns1__EndCalibrate_ * SOAP_FMAC4 soap_in___ns1__EndCalibrate_(struct soap*, const char*, struct __ns1__EndCalibrate_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__EndCalibrate_(struct soap*, const struct __ns1__EndCalibrate_ *, const char*, const char*);

#ifndef soap_write___ns1__EndCalibrate_
#define soap_write___ns1__EndCalibrate_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__EndCalibrate_(soap, data),0) || soap_put___ns1__EndCalibrate_(soap, data, "-ns1:EndCalibrate", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__EndCalibrate_ * SOAP_FMAC4 soap_get___ns1__EndCalibrate_(struct soap*, struct __ns1__EndCalibrate_ *, const char*, const char*);

#ifndef soap_read___ns1__EndCalibrate_
#define soap_read___ns1__EndCalibrate_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__EndCalibrate_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__EndCalibrate_ * SOAP_FMAC2 soap_instantiate___ns1__EndCalibrate_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__EndCalibrate_ * soap_new___ns1__EndCalibrate_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__EndCalibrate_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__EndCalibrate_ * soap_new_req___ns1__EndCalibrate_(struct soap *soap) { struct __ns1__EndCalibrate_ *_p = soap_instantiate___ns1__EndCalibrate_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__EndCalibrate_(soap, _p); } return _p; }

inline struct __ns1__EndCalibrate_ * soap_new_set___ns1__EndCalibrate_(struct soap *soap, _ns1__EndCalibrate *ns1__EndCalibrate) { struct __ns1__EndCalibrate_ *_p = soap_instantiate___ns1__EndCalibrate_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__EndCalibrate_(soap, _p); _p->ns1__EndCalibrate = ns1__EndCalibrate; } return _p; }

inline void soap_delete___ns1__EndCalibrate_(struct soap *soap, struct __ns1__EndCalibrate_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__EndCalibrate_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__UploadCalibrateData_
#define SOAP_TYPE___ns1__UploadCalibrateData_ (197)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__UploadCalibrateData_(struct soap*, struct __ns1__UploadCalibrateData_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__UploadCalibrateData_(struct soap*, const struct __ns1__UploadCalibrateData_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__UploadCalibrateData_(struct soap*, const char*, int, const struct __ns1__UploadCalibrateData_ *, const char*);
SOAP_FMAC3 struct __ns1__UploadCalibrateData_ * SOAP_FMAC4 soap_in___ns1__UploadCalibrateData_(struct soap*, const char*, struct __ns1__UploadCalibrateData_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__UploadCalibrateData_(struct soap*, const struct __ns1__UploadCalibrateData_ *, const char*, const char*);

#ifndef soap_write___ns1__UploadCalibrateData_
#define soap_write___ns1__UploadCalibrateData_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__UploadCalibrateData_(soap, data),0) || soap_put___ns1__UploadCalibrateData_(soap, data, "-ns1:UploadCalibrateData", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__UploadCalibrateData_ * SOAP_FMAC4 soap_get___ns1__UploadCalibrateData_(struct soap*, struct __ns1__UploadCalibrateData_ *, const char*, const char*);

#ifndef soap_read___ns1__UploadCalibrateData_
#define soap_read___ns1__UploadCalibrateData_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__UploadCalibrateData_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__UploadCalibrateData_ * SOAP_FMAC2 soap_instantiate___ns1__UploadCalibrateData_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__UploadCalibrateData_ * soap_new___ns1__UploadCalibrateData_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__UploadCalibrateData_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__UploadCalibrateData_ * soap_new_req___ns1__UploadCalibrateData_(struct soap *soap) { struct __ns1__UploadCalibrateData_ *_p = soap_instantiate___ns1__UploadCalibrateData_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__UploadCalibrateData_(soap, _p); } return _p; }

inline struct __ns1__UploadCalibrateData_ * soap_new_set___ns1__UploadCalibrateData_(struct soap *soap, _ns1__UploadCalibrateData *ns1__UploadCalibrateData) { struct __ns1__UploadCalibrateData_ *_p = soap_instantiate___ns1__UploadCalibrateData_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__UploadCalibrateData_(soap, _p); _p->ns1__UploadCalibrateData = ns1__UploadCalibrateData; } return _p; }

inline void soap_delete___ns1__UploadCalibrateData_(struct soap *soap, struct __ns1__UploadCalibrateData_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__UploadCalibrateData_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__BeginCalibrate_
#define SOAP_TYPE___ns1__BeginCalibrate_ (195)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__BeginCalibrate_(struct soap*, struct __ns1__BeginCalibrate_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__BeginCalibrate_(struct soap*, const struct __ns1__BeginCalibrate_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__BeginCalibrate_(struct soap*, const char*, int, const struct __ns1__BeginCalibrate_ *, const char*);
SOAP_FMAC3 struct __ns1__BeginCalibrate_ * SOAP_FMAC4 soap_in___ns1__BeginCalibrate_(struct soap*, const char*, struct __ns1__BeginCalibrate_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__BeginCalibrate_(struct soap*, const struct __ns1__BeginCalibrate_ *, const char*, const char*);

#ifndef soap_write___ns1__BeginCalibrate_
#define soap_write___ns1__BeginCalibrate_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__BeginCalibrate_(soap, data),0) || soap_put___ns1__BeginCalibrate_(soap, data, "-ns1:BeginCalibrate", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__BeginCalibrate_ * SOAP_FMAC4 soap_get___ns1__BeginCalibrate_(struct soap*, struct __ns1__BeginCalibrate_ *, const char*, const char*);

#ifndef soap_read___ns1__BeginCalibrate_
#define soap_read___ns1__BeginCalibrate_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__BeginCalibrate_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__BeginCalibrate_ * SOAP_FMAC2 soap_instantiate___ns1__BeginCalibrate_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__BeginCalibrate_ * soap_new___ns1__BeginCalibrate_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__BeginCalibrate_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__BeginCalibrate_ * soap_new_req___ns1__BeginCalibrate_(struct soap *soap) { struct __ns1__BeginCalibrate_ *_p = soap_instantiate___ns1__BeginCalibrate_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__BeginCalibrate_(soap, _p); } return _p; }

inline struct __ns1__BeginCalibrate_ * soap_new_set___ns1__BeginCalibrate_(struct soap *soap, _ns1__BeginCalibrate *ns1__BeginCalibrate) { struct __ns1__BeginCalibrate_ *_p = soap_instantiate___ns1__BeginCalibrate_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__BeginCalibrate_(soap, _p); _p->ns1__BeginCalibrate = ns1__BeginCalibrate; } return _p; }

inline void soap_delete___ns1__BeginCalibrate_(struct soap *soap, struct __ns1__BeginCalibrate_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__BeginCalibrate_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetInspectionInfo_
#define SOAP_TYPE___ns1__GetInspectionInfo_ (193)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetInspectionInfo_(struct soap*, struct __ns1__GetInspectionInfo_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetInspectionInfo_(struct soap*, const struct __ns1__GetInspectionInfo_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetInspectionInfo_(struct soap*, const char*, int, const struct __ns1__GetInspectionInfo_ *, const char*);
SOAP_FMAC3 struct __ns1__GetInspectionInfo_ * SOAP_FMAC4 soap_in___ns1__GetInspectionInfo_(struct soap*, const char*, struct __ns1__GetInspectionInfo_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetInspectionInfo_(struct soap*, const struct __ns1__GetInspectionInfo_ *, const char*, const char*);

#ifndef soap_write___ns1__GetInspectionInfo_
#define soap_write___ns1__GetInspectionInfo_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetInspectionInfo_(soap, data),0) || soap_put___ns1__GetInspectionInfo_(soap, data, "-ns1:GetInspectionInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetInspectionInfo_ * SOAP_FMAC4 soap_get___ns1__GetInspectionInfo_(struct soap*, struct __ns1__GetInspectionInfo_ *, const char*, const char*);

#ifndef soap_read___ns1__GetInspectionInfo_
#define soap_read___ns1__GetInspectionInfo_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetInspectionInfo_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetInspectionInfo_ * SOAP_FMAC2 soap_instantiate___ns1__GetInspectionInfo_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetInspectionInfo_ * soap_new___ns1__GetInspectionInfo_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetInspectionInfo_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetInspectionInfo_ * soap_new_req___ns1__GetInspectionInfo_(struct soap *soap) { struct __ns1__GetInspectionInfo_ *_p = soap_instantiate___ns1__GetInspectionInfo_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetInspectionInfo_(soap, _p); } return _p; }

inline struct __ns1__GetInspectionInfo_ * soap_new_set___ns1__GetInspectionInfo_(struct soap *soap, _ns1__GetInspectionInfo *ns1__GetInspectionInfo) { struct __ns1__GetInspectionInfo_ *_p = soap_instantiate___ns1__GetInspectionInfo_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetInspectionInfo_(soap, _p); _p->ns1__GetInspectionInfo = ns1__GetInspectionInfo; } return _p; }

inline void soap_delete___ns1__GetInspectionInfo_(struct soap *soap, struct __ns1__GetInspectionInfo_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetInspectionInfo_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__UploadRealtimeData_
#define SOAP_TYPE___ns1__UploadRealtimeData_ (191)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__UploadRealtimeData_(struct soap*, struct __ns1__UploadRealtimeData_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__UploadRealtimeData_(struct soap*, const struct __ns1__UploadRealtimeData_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__UploadRealtimeData_(struct soap*, const char*, int, const struct __ns1__UploadRealtimeData_ *, const char*);
SOAP_FMAC3 struct __ns1__UploadRealtimeData_ * SOAP_FMAC4 soap_in___ns1__UploadRealtimeData_(struct soap*, const char*, struct __ns1__UploadRealtimeData_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__UploadRealtimeData_(struct soap*, const struct __ns1__UploadRealtimeData_ *, const char*, const char*);

#ifndef soap_write___ns1__UploadRealtimeData_
#define soap_write___ns1__UploadRealtimeData_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__UploadRealtimeData_(soap, data),0) || soap_put___ns1__UploadRealtimeData_(soap, data, "-ns1:UploadRealtimeData", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__UploadRealtimeData_ * SOAP_FMAC4 soap_get___ns1__UploadRealtimeData_(struct soap*, struct __ns1__UploadRealtimeData_ *, const char*, const char*);

#ifndef soap_read___ns1__UploadRealtimeData_
#define soap_read___ns1__UploadRealtimeData_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__UploadRealtimeData_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__UploadRealtimeData_ * SOAP_FMAC2 soap_instantiate___ns1__UploadRealtimeData_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__UploadRealtimeData_ * soap_new___ns1__UploadRealtimeData_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__UploadRealtimeData_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__UploadRealtimeData_ * soap_new_req___ns1__UploadRealtimeData_(struct soap *soap) { struct __ns1__UploadRealtimeData_ *_p = soap_instantiate___ns1__UploadRealtimeData_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__UploadRealtimeData_(soap, _p); } return _p; }

inline struct __ns1__UploadRealtimeData_ * soap_new_set___ns1__UploadRealtimeData_(struct soap *soap, _ns1__UploadRealtimeData *ns1__UploadRealtimeData) { struct __ns1__UploadRealtimeData_ *_p = soap_instantiate___ns1__UploadRealtimeData_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__UploadRealtimeData_(soap, _p); _p->ns1__UploadRealtimeData = ns1__UploadRealtimeData; } return _p; }

inline void soap_delete___ns1__UploadRealtimeData_(struct soap *soap, struct __ns1__UploadRealtimeData_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__UploadRealtimeData_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__UploadSelfTestData_
#define SOAP_TYPE___ns1__UploadSelfTestData_ (189)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__UploadSelfTestData_(struct soap*, struct __ns1__UploadSelfTestData_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__UploadSelfTestData_(struct soap*, const struct __ns1__UploadSelfTestData_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__UploadSelfTestData_(struct soap*, const char*, int, const struct __ns1__UploadSelfTestData_ *, const char*);
SOAP_FMAC3 struct __ns1__UploadSelfTestData_ * SOAP_FMAC4 soap_in___ns1__UploadSelfTestData_(struct soap*, const char*, struct __ns1__UploadSelfTestData_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__UploadSelfTestData_(struct soap*, const struct __ns1__UploadSelfTestData_ *, const char*, const char*);

#ifndef soap_write___ns1__UploadSelfTestData_
#define soap_write___ns1__UploadSelfTestData_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__UploadSelfTestData_(soap, data),0) || soap_put___ns1__UploadSelfTestData_(soap, data, "-ns1:UploadSelfTestData", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__UploadSelfTestData_ * SOAP_FMAC4 soap_get___ns1__UploadSelfTestData_(struct soap*, struct __ns1__UploadSelfTestData_ *, const char*, const char*);

#ifndef soap_read___ns1__UploadSelfTestData_
#define soap_read___ns1__UploadSelfTestData_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__UploadSelfTestData_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__UploadSelfTestData_ * SOAP_FMAC2 soap_instantiate___ns1__UploadSelfTestData_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__UploadSelfTestData_ * soap_new___ns1__UploadSelfTestData_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__UploadSelfTestData_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__UploadSelfTestData_ * soap_new_req___ns1__UploadSelfTestData_(struct soap *soap) { struct __ns1__UploadSelfTestData_ *_p = soap_instantiate___ns1__UploadSelfTestData_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__UploadSelfTestData_(soap, _p); } return _p; }

inline struct __ns1__UploadSelfTestData_ * soap_new_set___ns1__UploadSelfTestData_(struct soap *soap, _ns1__UploadSelfTestData *ns1__UploadSelfTestData) { struct __ns1__UploadSelfTestData_ *_p = soap_instantiate___ns1__UploadSelfTestData_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__UploadSelfTestData_(soap, _p); _p->ns1__UploadSelfTestData = ns1__UploadSelfTestData; } return _p; }

inline void soap_delete___ns1__UploadSelfTestData_(struct soap *soap, struct __ns1__UploadSelfTestData_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__UploadSelfTestData_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__EndInspect_
#define SOAP_TYPE___ns1__EndInspect_ (187)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__EndInspect_(struct soap*, struct __ns1__EndInspect_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__EndInspect_(struct soap*, const struct __ns1__EndInspect_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__EndInspect_(struct soap*, const char*, int, const struct __ns1__EndInspect_ *, const char*);
SOAP_FMAC3 struct __ns1__EndInspect_ * SOAP_FMAC4 soap_in___ns1__EndInspect_(struct soap*, const char*, struct __ns1__EndInspect_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__EndInspect_(struct soap*, const struct __ns1__EndInspect_ *, const char*, const char*);

#ifndef soap_write___ns1__EndInspect_
#define soap_write___ns1__EndInspect_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__EndInspect_(soap, data),0) || soap_put___ns1__EndInspect_(soap, data, "-ns1:EndInspect", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__EndInspect_ * SOAP_FMAC4 soap_get___ns1__EndInspect_(struct soap*, struct __ns1__EndInspect_ *, const char*, const char*);

#ifndef soap_read___ns1__EndInspect_
#define soap_read___ns1__EndInspect_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__EndInspect_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__EndInspect_ * SOAP_FMAC2 soap_instantiate___ns1__EndInspect_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__EndInspect_ * soap_new___ns1__EndInspect_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__EndInspect_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__EndInspect_ * soap_new_req___ns1__EndInspect_(struct soap *soap) { struct __ns1__EndInspect_ *_p = soap_instantiate___ns1__EndInspect_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__EndInspect_(soap, _p); } return _p; }

inline struct __ns1__EndInspect_ * soap_new_set___ns1__EndInspect_(struct soap *soap, _ns1__EndInspect *ns1__EndInspect) { struct __ns1__EndInspect_ *_p = soap_instantiate___ns1__EndInspect_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__EndInspect_(soap, _p); _p->ns1__EndInspect = ns1__EndInspect; } return _p; }

inline void soap_delete___ns1__EndInspect_(struct soap *soap, struct __ns1__EndInspect_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__EndInspect_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__StopInspect_
#define SOAP_TYPE___ns1__StopInspect_ (185)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__StopInspect_(struct soap*, struct __ns1__StopInspect_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__StopInspect_(struct soap*, const struct __ns1__StopInspect_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__StopInspect_(struct soap*, const char*, int, const struct __ns1__StopInspect_ *, const char*);
SOAP_FMAC3 struct __ns1__StopInspect_ * SOAP_FMAC4 soap_in___ns1__StopInspect_(struct soap*, const char*, struct __ns1__StopInspect_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__StopInspect_(struct soap*, const struct __ns1__StopInspect_ *, const char*, const char*);

#ifndef soap_write___ns1__StopInspect_
#define soap_write___ns1__StopInspect_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__StopInspect_(soap, data),0) || soap_put___ns1__StopInspect_(soap, data, "-ns1:StopInspect", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__StopInspect_ * SOAP_FMAC4 soap_get___ns1__StopInspect_(struct soap*, struct __ns1__StopInspect_ *, const char*, const char*);

#ifndef soap_read___ns1__StopInspect_
#define soap_read___ns1__StopInspect_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__StopInspect_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__StopInspect_ * SOAP_FMAC2 soap_instantiate___ns1__StopInspect_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__StopInspect_ * soap_new___ns1__StopInspect_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__StopInspect_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__StopInspect_ * soap_new_req___ns1__StopInspect_(struct soap *soap) { struct __ns1__StopInspect_ *_p = soap_instantiate___ns1__StopInspect_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__StopInspect_(soap, _p); } return _p; }

inline struct __ns1__StopInspect_ * soap_new_set___ns1__StopInspect_(struct soap *soap, _ns1__StopInspect *ns1__StopInspect) { struct __ns1__StopInspect_ *_p = soap_instantiate___ns1__StopInspect_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__StopInspect_(soap, _p); _p->ns1__StopInspect = ns1__StopInspect; } return _p; }

inline void soap_delete___ns1__StopInspect_(struct soap *soap, struct __ns1__StopInspect_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__StopInspect_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__WJTakePhoto_
#define SOAP_TYPE___ns1__WJTakePhoto_ (183)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__WJTakePhoto_(struct soap*, struct __ns1__WJTakePhoto_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__WJTakePhoto_(struct soap*, const struct __ns1__WJTakePhoto_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__WJTakePhoto_(struct soap*, const char*, int, const struct __ns1__WJTakePhoto_ *, const char*);
SOAP_FMAC3 struct __ns1__WJTakePhoto_ * SOAP_FMAC4 soap_in___ns1__WJTakePhoto_(struct soap*, const char*, struct __ns1__WJTakePhoto_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__WJTakePhoto_(struct soap*, const struct __ns1__WJTakePhoto_ *, const char*, const char*);

#ifndef soap_write___ns1__WJTakePhoto_
#define soap_write___ns1__WJTakePhoto_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__WJTakePhoto_(soap, data),0) || soap_put___ns1__WJTakePhoto_(soap, data, "-ns1:WJTakePhoto", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__WJTakePhoto_ * SOAP_FMAC4 soap_get___ns1__WJTakePhoto_(struct soap*, struct __ns1__WJTakePhoto_ *, const char*, const char*);

#ifndef soap_read___ns1__WJTakePhoto_
#define soap_read___ns1__WJTakePhoto_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__WJTakePhoto_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__WJTakePhoto_ * SOAP_FMAC2 soap_instantiate___ns1__WJTakePhoto_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__WJTakePhoto_ * soap_new___ns1__WJTakePhoto_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__WJTakePhoto_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__WJTakePhoto_ * soap_new_req___ns1__WJTakePhoto_(struct soap *soap) { struct __ns1__WJTakePhoto_ *_p = soap_instantiate___ns1__WJTakePhoto_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__WJTakePhoto_(soap, _p); } return _p; }

inline struct __ns1__WJTakePhoto_ * soap_new_set___ns1__WJTakePhoto_(struct soap *soap, _ns1__WJTakePhoto *ns1__WJTakePhoto) { struct __ns1__WJTakePhoto_ *_p = soap_instantiate___ns1__WJTakePhoto_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__WJTakePhoto_(soap, _p); _p->ns1__WJTakePhoto = ns1__WJTakePhoto; } return _p; }

inline void soap_delete___ns1__WJTakePhoto_(struct soap *soap, struct __ns1__WJTakePhoto_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__WJTakePhoto_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__TakePhoto_
#define SOAP_TYPE___ns1__TakePhoto_ (181)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__TakePhoto_(struct soap*, struct __ns1__TakePhoto_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__TakePhoto_(struct soap*, const struct __ns1__TakePhoto_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__TakePhoto_(struct soap*, const char*, int, const struct __ns1__TakePhoto_ *, const char*);
SOAP_FMAC3 struct __ns1__TakePhoto_ * SOAP_FMAC4 soap_in___ns1__TakePhoto_(struct soap*, const char*, struct __ns1__TakePhoto_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__TakePhoto_(struct soap*, const struct __ns1__TakePhoto_ *, const char*, const char*);

#ifndef soap_write___ns1__TakePhoto_
#define soap_write___ns1__TakePhoto_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__TakePhoto_(soap, data),0) || soap_put___ns1__TakePhoto_(soap, data, "-ns1:TakePhoto", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__TakePhoto_ * SOAP_FMAC4 soap_get___ns1__TakePhoto_(struct soap*, struct __ns1__TakePhoto_ *, const char*, const char*);

#ifndef soap_read___ns1__TakePhoto_
#define soap_read___ns1__TakePhoto_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__TakePhoto_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__TakePhoto_ * SOAP_FMAC2 soap_instantiate___ns1__TakePhoto_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__TakePhoto_ * soap_new___ns1__TakePhoto_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__TakePhoto_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__TakePhoto_ * soap_new_req___ns1__TakePhoto_(struct soap *soap) { struct __ns1__TakePhoto_ *_p = soap_instantiate___ns1__TakePhoto_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__TakePhoto_(soap, _p); } return _p; }

inline struct __ns1__TakePhoto_ * soap_new_set___ns1__TakePhoto_(struct soap *soap, _ns1__TakePhoto *ns1__TakePhoto) { struct __ns1__TakePhoto_ *_p = soap_instantiate___ns1__TakePhoto_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__TakePhoto_(soap, _p); _p->ns1__TakePhoto = ns1__TakePhoto; } return _p; }

inline void soap_delete___ns1__TakePhoto_(struct soap *soap, struct __ns1__TakePhoto_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__TakePhoto_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetLimit_
#define SOAP_TYPE___ns1__GetLimit_ (179)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetLimit_(struct soap*, struct __ns1__GetLimit_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetLimit_(struct soap*, const struct __ns1__GetLimit_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetLimit_(struct soap*, const char*, int, const struct __ns1__GetLimit_ *, const char*);
SOAP_FMAC3 struct __ns1__GetLimit_ * SOAP_FMAC4 soap_in___ns1__GetLimit_(struct soap*, const char*, struct __ns1__GetLimit_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetLimit_(struct soap*, const struct __ns1__GetLimit_ *, const char*, const char*);

#ifndef soap_write___ns1__GetLimit_
#define soap_write___ns1__GetLimit_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetLimit_(soap, data),0) || soap_put___ns1__GetLimit_(soap, data, "-ns1:GetLimit", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetLimit_ * SOAP_FMAC4 soap_get___ns1__GetLimit_(struct soap*, struct __ns1__GetLimit_ *, const char*, const char*);

#ifndef soap_read___ns1__GetLimit_
#define soap_read___ns1__GetLimit_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetLimit_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetLimit_ * SOAP_FMAC2 soap_instantiate___ns1__GetLimit_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetLimit_ * soap_new___ns1__GetLimit_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetLimit_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetLimit_ * soap_new_req___ns1__GetLimit_(struct soap *soap) { struct __ns1__GetLimit_ *_p = soap_instantiate___ns1__GetLimit_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetLimit_(soap, _p); } return _p; }

inline struct __ns1__GetLimit_ * soap_new_set___ns1__GetLimit_(struct soap *soap, _ns1__GetLimit *ns1__GetLimit) { struct __ns1__GetLimit_ *_p = soap_instantiate___ns1__GetLimit_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetLimit_(soap, _p); _p->ns1__GetLimit = ns1__GetLimit; } return _p; }

inline void soap_delete___ns1__GetLimit_(struct soap *soap, struct __ns1__GetLimit_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetLimit_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__BeginInspect_
#define SOAP_TYPE___ns1__BeginInspect_ (177)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__BeginInspect_(struct soap*, struct __ns1__BeginInspect_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__BeginInspect_(struct soap*, const struct __ns1__BeginInspect_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__BeginInspect_(struct soap*, const char*, int, const struct __ns1__BeginInspect_ *, const char*);
SOAP_FMAC3 struct __ns1__BeginInspect_ * SOAP_FMAC4 soap_in___ns1__BeginInspect_(struct soap*, const char*, struct __ns1__BeginInspect_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__BeginInspect_(struct soap*, const struct __ns1__BeginInspect_ *, const char*, const char*);

#ifndef soap_write___ns1__BeginInspect_
#define soap_write___ns1__BeginInspect_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__BeginInspect_(soap, data),0) || soap_put___ns1__BeginInspect_(soap, data, "-ns1:BeginInspect", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__BeginInspect_ * SOAP_FMAC4 soap_get___ns1__BeginInspect_(struct soap*, struct __ns1__BeginInspect_ *, const char*, const char*);

#ifndef soap_read___ns1__BeginInspect_
#define soap_read___ns1__BeginInspect_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__BeginInspect_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__BeginInspect_ * SOAP_FMAC2 soap_instantiate___ns1__BeginInspect_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__BeginInspect_ * soap_new___ns1__BeginInspect_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__BeginInspect_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__BeginInspect_ * soap_new_req___ns1__BeginInspect_(struct soap *soap) { struct __ns1__BeginInspect_ *_p = soap_instantiate___ns1__BeginInspect_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__BeginInspect_(soap, _p); } return _p; }

inline struct __ns1__BeginInspect_ * soap_new_set___ns1__BeginInspect_(struct soap *soap, _ns1__BeginInspect *ns1__BeginInspect) { struct __ns1__BeginInspect_ *_p = soap_instantiate___ns1__BeginInspect_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__BeginInspect_(soap, _p); _p->ns1__BeginInspect = ns1__BeginInspect; } return _p; }

inline void soap_delete___ns1__BeginInspect_(struct soap *soap, struct __ns1__BeginInspect_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__BeginInspect_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__EndRecord_
#define SOAP_TYPE___ns1__EndRecord_ (175)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__EndRecord_(struct soap*, struct __ns1__EndRecord_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__EndRecord_(struct soap*, const struct __ns1__EndRecord_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__EndRecord_(struct soap*, const char*, int, const struct __ns1__EndRecord_ *, const char*);
SOAP_FMAC3 struct __ns1__EndRecord_ * SOAP_FMAC4 soap_in___ns1__EndRecord_(struct soap*, const char*, struct __ns1__EndRecord_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__EndRecord_(struct soap*, const struct __ns1__EndRecord_ *, const char*, const char*);

#ifndef soap_write___ns1__EndRecord_
#define soap_write___ns1__EndRecord_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__EndRecord_(soap, data),0) || soap_put___ns1__EndRecord_(soap, data, "-ns1:EndRecord", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__EndRecord_ * SOAP_FMAC4 soap_get___ns1__EndRecord_(struct soap*, struct __ns1__EndRecord_ *, const char*, const char*);

#ifndef soap_read___ns1__EndRecord_
#define soap_read___ns1__EndRecord_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__EndRecord_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__EndRecord_ * SOAP_FMAC2 soap_instantiate___ns1__EndRecord_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__EndRecord_ * soap_new___ns1__EndRecord_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__EndRecord_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__EndRecord_ * soap_new_req___ns1__EndRecord_(struct soap *soap) { struct __ns1__EndRecord_ *_p = soap_instantiate___ns1__EndRecord_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__EndRecord_(soap, _p); } return _p; }

inline struct __ns1__EndRecord_ * soap_new_set___ns1__EndRecord_(struct soap *soap, _ns1__EndRecord *ns1__EndRecord) { struct __ns1__EndRecord_ *_p = soap_instantiate___ns1__EndRecord_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__EndRecord_(soap, _p); _p->ns1__EndRecord = ns1__EndRecord; } return _p; }

inline void soap_delete___ns1__EndRecord_(struct soap *soap, struct __ns1__EndRecord_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__EndRecord_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__BeginRecord_
#define SOAP_TYPE___ns1__BeginRecord_ (173)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__BeginRecord_(struct soap*, struct __ns1__BeginRecord_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__BeginRecord_(struct soap*, const struct __ns1__BeginRecord_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__BeginRecord_(struct soap*, const char*, int, const struct __ns1__BeginRecord_ *, const char*);
SOAP_FMAC3 struct __ns1__BeginRecord_ * SOAP_FMAC4 soap_in___ns1__BeginRecord_(struct soap*, const char*, struct __ns1__BeginRecord_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__BeginRecord_(struct soap*, const struct __ns1__BeginRecord_ *, const char*, const char*);

#ifndef soap_write___ns1__BeginRecord_
#define soap_write___ns1__BeginRecord_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__BeginRecord_(soap, data),0) || soap_put___ns1__BeginRecord_(soap, data, "-ns1:BeginRecord", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__BeginRecord_ * SOAP_FMAC4 soap_get___ns1__BeginRecord_(struct soap*, struct __ns1__BeginRecord_ *, const char*, const char*);

#ifndef soap_read___ns1__BeginRecord_
#define soap_read___ns1__BeginRecord_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__BeginRecord_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__BeginRecord_ * SOAP_FMAC2 soap_instantiate___ns1__BeginRecord_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__BeginRecord_ * soap_new___ns1__BeginRecord_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__BeginRecord_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__BeginRecord_ * soap_new_req___ns1__BeginRecord_(struct soap *soap) { struct __ns1__BeginRecord_ *_p = soap_instantiate___ns1__BeginRecord_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__BeginRecord_(soap, _p); } return _p; }

inline struct __ns1__BeginRecord_ * soap_new_set___ns1__BeginRecord_(struct soap *soap, _ns1__BeginRecord *ns1__BeginRecord) { struct __ns1__BeginRecord_ *_p = soap_instantiate___ns1__BeginRecord_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__BeginRecord_(soap, _p); _p->ns1__BeginRecord = ns1__BeginRecord; } return _p; }

inline void soap_delete___ns1__BeginRecord_(struct soap *soap, struct __ns1__BeginRecord_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__BeginRecord_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__AbortInspect_
#define SOAP_TYPE___ns1__AbortInspect_ (171)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AbortInspect_(struct soap*, struct __ns1__AbortInspect_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AbortInspect_(struct soap*, const struct __ns1__AbortInspect_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AbortInspect_(struct soap*, const char*, int, const struct __ns1__AbortInspect_ *, const char*);
SOAP_FMAC3 struct __ns1__AbortInspect_ * SOAP_FMAC4 soap_in___ns1__AbortInspect_(struct soap*, const char*, struct __ns1__AbortInspect_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AbortInspect_(struct soap*, const struct __ns1__AbortInspect_ *, const char*, const char*);

#ifndef soap_write___ns1__AbortInspect_
#define soap_write___ns1__AbortInspect_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__AbortInspect_(soap, data),0) || soap_put___ns1__AbortInspect_(soap, data, "-ns1:AbortInspect", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__AbortInspect_ * SOAP_FMAC4 soap_get___ns1__AbortInspect_(struct soap*, struct __ns1__AbortInspect_ *, const char*, const char*);

#ifndef soap_read___ns1__AbortInspect_
#define soap_read___ns1__AbortInspect_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__AbortInspect_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__AbortInspect_ * SOAP_FMAC2 soap_instantiate___ns1__AbortInspect_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__AbortInspect_ * soap_new___ns1__AbortInspect_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__AbortInspect_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__AbortInspect_ * soap_new_req___ns1__AbortInspect_(struct soap *soap) { struct __ns1__AbortInspect_ *_p = soap_instantiate___ns1__AbortInspect_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__AbortInspect_(soap, _p); } return _p; }

inline struct __ns1__AbortInspect_ * soap_new_set___ns1__AbortInspect_(struct soap *soap, _ns1__AbortInspect *ns1__AbortInspect) { struct __ns1__AbortInspect_ *_p = soap_instantiate___ns1__AbortInspect_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__AbortInspect_(soap, _p); _p->ns1__AbortInspect = ns1__AbortInspect; } return _p; }

inline void soap_delete___ns1__AbortInspect_(struct soap *soap, struct __ns1__AbortInspect_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AbortInspect_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetInspectQueueByPlateID_
#define SOAP_TYPE___ns1__GetInspectQueueByPlateID_ (169)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetInspectQueueByPlateID_(struct soap*, struct __ns1__GetInspectQueueByPlateID_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetInspectQueueByPlateID_(struct soap*, const struct __ns1__GetInspectQueueByPlateID_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetInspectQueueByPlateID_(struct soap*, const char*, int, const struct __ns1__GetInspectQueueByPlateID_ *, const char*);
SOAP_FMAC3 struct __ns1__GetInspectQueueByPlateID_ * SOAP_FMAC4 soap_in___ns1__GetInspectQueueByPlateID_(struct soap*, const char*, struct __ns1__GetInspectQueueByPlateID_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetInspectQueueByPlateID_(struct soap*, const struct __ns1__GetInspectQueueByPlateID_ *, const char*, const char*);

#ifndef soap_write___ns1__GetInspectQueueByPlateID_
#define soap_write___ns1__GetInspectQueueByPlateID_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetInspectQueueByPlateID_(soap, data),0) || soap_put___ns1__GetInspectQueueByPlateID_(soap, data, "-ns1:GetInspectQueueByPlateID", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetInspectQueueByPlateID_ * SOAP_FMAC4 soap_get___ns1__GetInspectQueueByPlateID_(struct soap*, struct __ns1__GetInspectQueueByPlateID_ *, const char*, const char*);

#ifndef soap_read___ns1__GetInspectQueueByPlateID_
#define soap_read___ns1__GetInspectQueueByPlateID_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetInspectQueueByPlateID_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetInspectQueueByPlateID_ * SOAP_FMAC2 soap_instantiate___ns1__GetInspectQueueByPlateID_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetInspectQueueByPlateID_ * soap_new___ns1__GetInspectQueueByPlateID_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetInspectQueueByPlateID_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetInspectQueueByPlateID_ * soap_new_req___ns1__GetInspectQueueByPlateID_(struct soap *soap) { struct __ns1__GetInspectQueueByPlateID_ *_p = soap_instantiate___ns1__GetInspectQueueByPlateID_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetInspectQueueByPlateID_(soap, _p); } return _p; }

inline struct __ns1__GetInspectQueueByPlateID_ * soap_new_set___ns1__GetInspectQueueByPlateID_(struct soap *soap, _ns1__GetInspectQueueByPlateID *ns1__GetInspectQueueByPlateID) { struct __ns1__GetInspectQueueByPlateID_ *_p = soap_instantiate___ns1__GetInspectQueueByPlateID_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetInspectQueueByPlateID_(soap, _p); _p->ns1__GetInspectQueueByPlateID = ns1__GetInspectQueueByPlateID; } return _p; }

inline void soap_delete___ns1__GetInspectQueueByPlateID_(struct soap *soap, struct __ns1__GetInspectQueueByPlateID_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetInspectQueueByPlateID_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetInspectQueueByDate_
#define SOAP_TYPE___ns1__GetInspectQueueByDate_ (167)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetInspectQueueByDate_(struct soap*, struct __ns1__GetInspectQueueByDate_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetInspectQueueByDate_(struct soap*, const struct __ns1__GetInspectQueueByDate_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetInspectQueueByDate_(struct soap*, const char*, int, const struct __ns1__GetInspectQueueByDate_ *, const char*);
SOAP_FMAC3 struct __ns1__GetInspectQueueByDate_ * SOAP_FMAC4 soap_in___ns1__GetInspectQueueByDate_(struct soap*, const char*, struct __ns1__GetInspectQueueByDate_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetInspectQueueByDate_(struct soap*, const struct __ns1__GetInspectQueueByDate_ *, const char*, const char*);

#ifndef soap_write___ns1__GetInspectQueueByDate_
#define soap_write___ns1__GetInspectQueueByDate_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetInspectQueueByDate_(soap, data),0) || soap_put___ns1__GetInspectQueueByDate_(soap, data, "-ns1:GetInspectQueueByDate", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetInspectQueueByDate_ * SOAP_FMAC4 soap_get___ns1__GetInspectQueueByDate_(struct soap*, struct __ns1__GetInspectQueueByDate_ *, const char*, const char*);

#ifndef soap_read___ns1__GetInspectQueueByDate_
#define soap_read___ns1__GetInspectQueueByDate_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetInspectQueueByDate_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetInspectQueueByDate_ * SOAP_FMAC2 soap_instantiate___ns1__GetInspectQueueByDate_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetInspectQueueByDate_ * soap_new___ns1__GetInspectQueueByDate_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetInspectQueueByDate_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetInspectQueueByDate_ * soap_new_req___ns1__GetInspectQueueByDate_(struct soap *soap) { struct __ns1__GetInspectQueueByDate_ *_p = soap_instantiate___ns1__GetInspectQueueByDate_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetInspectQueueByDate_(soap, _p); } return _p; }

inline struct __ns1__GetInspectQueueByDate_ * soap_new_set___ns1__GetInspectQueueByDate_(struct soap *soap, _ns1__GetInspectQueueByDate *ns1__GetInspectQueueByDate) { struct __ns1__GetInspectQueueByDate_ *_p = soap_instantiate___ns1__GetInspectQueueByDate_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetInspectQueueByDate_(soap, _p); _p->ns1__GetInspectQueueByDate = ns1__GetInspectQueueByDate; } return _p; }

inline void soap_delete___ns1__GetInspectQueueByDate_(struct soap *soap, struct __ns1__GetInspectQueueByDate_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetInspectQueueByDate_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__Sync_
#define SOAP_TYPE___ns1__Sync_ (165)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Sync_(struct soap*, struct __ns1__Sync_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Sync_(struct soap*, const struct __ns1__Sync_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Sync_(struct soap*, const char*, int, const struct __ns1__Sync_ *, const char*);
SOAP_FMAC3 struct __ns1__Sync_ * SOAP_FMAC4 soap_in___ns1__Sync_(struct soap*, const char*, struct __ns1__Sync_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Sync_(struct soap*, const struct __ns1__Sync_ *, const char*, const char*);

#ifndef soap_write___ns1__Sync_
#define soap_write___ns1__Sync_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__Sync_(soap, data),0) || soap_put___ns1__Sync_(soap, data, "-ns1:Sync", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__Sync_ * SOAP_FMAC4 soap_get___ns1__Sync_(struct soap*, struct __ns1__Sync_ *, const char*, const char*);

#ifndef soap_read___ns1__Sync_
#define soap_read___ns1__Sync_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__Sync_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__Sync_ * SOAP_FMAC2 soap_instantiate___ns1__Sync_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Sync_ * soap_new___ns1__Sync_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__Sync_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__Sync_ * soap_new_req___ns1__Sync_(struct soap *soap) { struct __ns1__Sync_ *_p = soap_instantiate___ns1__Sync_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__Sync_(soap, _p); } return _p; }

inline struct __ns1__Sync_ * soap_new_set___ns1__Sync_(struct soap *soap, _ns1__Sync *ns1__Sync) { struct __ns1__Sync_ *_p = soap_instantiate___ns1__Sync_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__Sync_(soap, _p); _p->ns1__Sync = ns1__Sync; } return _p; }

inline void soap_delete___ns1__Sync_(struct soap *soap, struct __ns1__Sync_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__Sync_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__OBDTXCheck
#define SOAP_TYPE___ns1__OBDTXCheck (163)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__OBDTXCheck(struct soap*, struct __ns1__OBDTXCheck *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__OBDTXCheck(struct soap*, const struct __ns1__OBDTXCheck *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__OBDTXCheck(struct soap*, const char*, int, const struct __ns1__OBDTXCheck *, const char*);
SOAP_FMAC3 struct __ns1__OBDTXCheck * SOAP_FMAC4 soap_in___ns1__OBDTXCheck(struct soap*, const char*, struct __ns1__OBDTXCheck *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__OBDTXCheck(struct soap*, const struct __ns1__OBDTXCheck *, const char*, const char*);

#ifndef soap_write___ns1__OBDTXCheck
#define soap_write___ns1__OBDTXCheck(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__OBDTXCheck(soap, data),0) || soap_put___ns1__OBDTXCheck(soap, data, "-ns1:OBDTXCheck", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__OBDTXCheck * SOAP_FMAC4 soap_get___ns1__OBDTXCheck(struct soap*, struct __ns1__OBDTXCheck *, const char*, const char*);

#ifndef soap_read___ns1__OBDTXCheck
#define soap_read___ns1__OBDTXCheck(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__OBDTXCheck(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__OBDTXCheck * SOAP_FMAC2 soap_instantiate___ns1__OBDTXCheck(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__OBDTXCheck * soap_new___ns1__OBDTXCheck(struct soap *soap, int n = -1) { return soap_instantiate___ns1__OBDTXCheck(soap, n, NULL, NULL, NULL); }

inline struct __ns1__OBDTXCheck * soap_new_req___ns1__OBDTXCheck(struct soap *soap) { struct __ns1__OBDTXCheck *_p = soap_instantiate___ns1__OBDTXCheck(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__OBDTXCheck(soap, _p); } return _p; }

inline struct __ns1__OBDTXCheck * soap_new_set___ns1__OBDTXCheck(struct soap *soap, _ns1__OBDTXCheck *ns1__OBDTXCheck) { struct __ns1__OBDTXCheck *_p = soap_instantiate___ns1__OBDTXCheck(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__OBDTXCheck(soap, _p); _p->ns1__OBDTXCheck = ns1__OBDTXCheck; } return _p; }

inline void soap_delete___ns1__OBDTXCheck(struct soap *soap, struct __ns1__OBDTXCheck *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__OBDTXCheck(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__OBDInspect
#define SOAP_TYPE___ns1__OBDInspect (159)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__OBDInspect(struct soap*, struct __ns1__OBDInspect *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__OBDInspect(struct soap*, const struct __ns1__OBDInspect *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__OBDInspect(struct soap*, const char*, int, const struct __ns1__OBDInspect *, const char*);
SOAP_FMAC3 struct __ns1__OBDInspect * SOAP_FMAC4 soap_in___ns1__OBDInspect(struct soap*, const char*, struct __ns1__OBDInspect *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__OBDInspect(struct soap*, const struct __ns1__OBDInspect *, const char*, const char*);

#ifndef soap_write___ns1__OBDInspect
#define soap_write___ns1__OBDInspect(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__OBDInspect(soap, data),0) || soap_put___ns1__OBDInspect(soap, data, "-ns1:OBDInspect", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__OBDInspect * SOAP_FMAC4 soap_get___ns1__OBDInspect(struct soap*, struct __ns1__OBDInspect *, const char*, const char*);

#ifndef soap_read___ns1__OBDInspect
#define soap_read___ns1__OBDInspect(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__OBDInspect(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__OBDInspect * SOAP_FMAC2 soap_instantiate___ns1__OBDInspect(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__OBDInspect * soap_new___ns1__OBDInspect(struct soap *soap, int n = -1) { return soap_instantiate___ns1__OBDInspect(soap, n, NULL, NULL, NULL); }

inline struct __ns1__OBDInspect * soap_new_req___ns1__OBDInspect(struct soap *soap) { struct __ns1__OBDInspect *_p = soap_instantiate___ns1__OBDInspect(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__OBDInspect(soap, _p); } return _p; }

inline struct __ns1__OBDInspect * soap_new_set___ns1__OBDInspect(struct soap *soap, _ns1__OBDInspect *ns1__OBDInspect) { struct __ns1__OBDInspect *_p = soap_instantiate___ns1__OBDInspect(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__OBDInspect(soap, _p); _p->ns1__OBDInspect = ns1__OBDInspect; } return _p; }

inline void soap_delete___ns1__OBDInspect(struct soap *soap, struct __ns1__OBDInspect *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__OBDInspect(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetOtherInspectQueueByDate
#define SOAP_TYPE___ns1__GetOtherInspectQueueByDate (155)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetOtherInspectQueueByDate(struct soap*, struct __ns1__GetOtherInspectQueueByDate *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetOtherInspectQueueByDate(struct soap*, const struct __ns1__GetOtherInspectQueueByDate *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetOtherInspectQueueByDate(struct soap*, const char*, int, const struct __ns1__GetOtherInspectQueueByDate *, const char*);
SOAP_FMAC3 struct __ns1__GetOtherInspectQueueByDate * SOAP_FMAC4 soap_in___ns1__GetOtherInspectQueueByDate(struct soap*, const char*, struct __ns1__GetOtherInspectQueueByDate *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetOtherInspectQueueByDate(struct soap*, const struct __ns1__GetOtherInspectQueueByDate *, const char*, const char*);

#ifndef soap_write___ns1__GetOtherInspectQueueByDate
#define soap_write___ns1__GetOtherInspectQueueByDate(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetOtherInspectQueueByDate(soap, data),0) || soap_put___ns1__GetOtherInspectQueueByDate(soap, data, "-ns1:GetOtherInspectQueueByDate", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetOtherInspectQueueByDate * SOAP_FMAC4 soap_get___ns1__GetOtherInspectQueueByDate(struct soap*, struct __ns1__GetOtherInspectQueueByDate *, const char*, const char*);

#ifndef soap_read___ns1__GetOtherInspectQueueByDate
#define soap_read___ns1__GetOtherInspectQueueByDate(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetOtherInspectQueueByDate(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetOtherInspectQueueByDate * SOAP_FMAC2 soap_instantiate___ns1__GetOtherInspectQueueByDate(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetOtherInspectQueueByDate * soap_new___ns1__GetOtherInspectQueueByDate(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetOtherInspectQueueByDate(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetOtherInspectQueueByDate * soap_new_req___ns1__GetOtherInspectQueueByDate(struct soap *soap) { struct __ns1__GetOtherInspectQueueByDate *_p = soap_instantiate___ns1__GetOtherInspectQueueByDate(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetOtherInspectQueueByDate(soap, _p); } return _p; }

inline struct __ns1__GetOtherInspectQueueByDate * soap_new_set___ns1__GetOtherInspectQueueByDate(struct soap *soap, _ns1__GetOtherInspectQueueByDate *ns1__GetOtherInspectQueueByDate) { struct __ns1__GetOtherInspectQueueByDate *_p = soap_instantiate___ns1__GetOtherInspectQueueByDate(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetOtherInspectQueueByDate(soap, _p); _p->ns1__GetOtherInspectQueueByDate = ns1__GetOtherInspectQueueByDate; } return _p; }

inline void soap_delete___ns1__GetOtherInspectQueueByDate(struct soap *soap, struct __ns1__GetOtherInspectQueueByDate *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetOtherInspectQueueByDate(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetOtherInspectQueueByPlateID
#define SOAP_TYPE___ns1__GetOtherInspectQueueByPlateID (151)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetOtherInspectQueueByPlateID(struct soap*, struct __ns1__GetOtherInspectQueueByPlateID *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetOtherInspectQueueByPlateID(struct soap*, const struct __ns1__GetOtherInspectQueueByPlateID *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetOtherInspectQueueByPlateID(struct soap*, const char*, int, const struct __ns1__GetOtherInspectQueueByPlateID *, const char*);
SOAP_FMAC3 struct __ns1__GetOtherInspectQueueByPlateID * SOAP_FMAC4 soap_in___ns1__GetOtherInspectQueueByPlateID(struct soap*, const char*, struct __ns1__GetOtherInspectQueueByPlateID *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetOtherInspectQueueByPlateID(struct soap*, const struct __ns1__GetOtherInspectQueueByPlateID *, const char*, const char*);

#ifndef soap_write___ns1__GetOtherInspectQueueByPlateID
#define soap_write___ns1__GetOtherInspectQueueByPlateID(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetOtherInspectQueueByPlateID(soap, data),0) || soap_put___ns1__GetOtherInspectQueueByPlateID(soap, data, "-ns1:GetOtherInspectQueueByPlateID", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetOtherInspectQueueByPlateID * SOAP_FMAC4 soap_get___ns1__GetOtherInspectQueueByPlateID(struct soap*, struct __ns1__GetOtherInspectQueueByPlateID *, const char*, const char*);

#ifndef soap_read___ns1__GetOtherInspectQueueByPlateID
#define soap_read___ns1__GetOtherInspectQueueByPlateID(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetOtherInspectQueueByPlateID(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetOtherInspectQueueByPlateID * SOAP_FMAC2 soap_instantiate___ns1__GetOtherInspectQueueByPlateID(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetOtherInspectQueueByPlateID * soap_new___ns1__GetOtherInspectQueueByPlateID(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetOtherInspectQueueByPlateID(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetOtherInspectQueueByPlateID * soap_new_req___ns1__GetOtherInspectQueueByPlateID(struct soap *soap) { struct __ns1__GetOtherInspectQueueByPlateID *_p = soap_instantiate___ns1__GetOtherInspectQueueByPlateID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetOtherInspectQueueByPlateID(soap, _p); } return _p; }

inline struct __ns1__GetOtherInspectQueueByPlateID * soap_new_set___ns1__GetOtherInspectQueueByPlateID(struct soap *soap, _ns1__GetOtherInspectQueueByPlateID *ns1__GetOtherInspectQueueByPlateID) { struct __ns1__GetOtherInspectQueueByPlateID *_p = soap_instantiate___ns1__GetOtherInspectQueueByPlateID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetOtherInspectQueueByPlateID(soap, _p); _p->ns1__GetOtherInspectQueueByPlateID = ns1__GetOtherInspectQueueByPlateID; } return _p; }

inline void soap_delete___ns1__GetOtherInspectQueueByPlateID(struct soap *soap, struct __ns1__GetOtherInspectQueueByPlateID *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetOtherInspectQueueByPlateID(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetInspectParams
#define SOAP_TYPE___ns1__GetInspectParams (147)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetInspectParams(struct soap*, struct __ns1__GetInspectParams *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetInspectParams(struct soap*, const struct __ns1__GetInspectParams *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetInspectParams(struct soap*, const char*, int, const struct __ns1__GetInspectParams *, const char*);
SOAP_FMAC3 struct __ns1__GetInspectParams * SOAP_FMAC4 soap_in___ns1__GetInspectParams(struct soap*, const char*, struct __ns1__GetInspectParams *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetInspectParams(struct soap*, const struct __ns1__GetInspectParams *, const char*, const char*);

#ifndef soap_write___ns1__GetInspectParams
#define soap_write___ns1__GetInspectParams(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetInspectParams(soap, data),0) || soap_put___ns1__GetInspectParams(soap, data, "-ns1:GetInspectParams", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetInspectParams * SOAP_FMAC4 soap_get___ns1__GetInspectParams(struct soap*, struct __ns1__GetInspectParams *, const char*, const char*);

#ifndef soap_read___ns1__GetInspectParams
#define soap_read___ns1__GetInspectParams(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetInspectParams(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetInspectParams * SOAP_FMAC2 soap_instantiate___ns1__GetInspectParams(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetInspectParams * soap_new___ns1__GetInspectParams(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetInspectParams(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetInspectParams * soap_new_req___ns1__GetInspectParams(struct soap *soap) { struct __ns1__GetInspectParams *_p = soap_instantiate___ns1__GetInspectParams(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetInspectParams(soap, _p); } return _p; }

inline struct __ns1__GetInspectParams * soap_new_set___ns1__GetInspectParams(struct soap *soap, _ns1__GetInspectParams *ns1__GetInspectParams) { struct __ns1__GetInspectParams *_p = soap_instantiate___ns1__GetInspectParams(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetInspectParams(soap, _p); _p->ns1__GetInspectParams = ns1__GetInspectParams; } return _p; }

inline void soap_delete___ns1__GetInspectParams(struct soap *soap, struct __ns1__GetInspectParams *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetInspectParams(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__FuelEvaporationInspect
#define SOAP_TYPE___ns1__FuelEvaporationInspect (143)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__FuelEvaporationInspect(struct soap*, struct __ns1__FuelEvaporationInspect *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__FuelEvaporationInspect(struct soap*, const struct __ns1__FuelEvaporationInspect *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__FuelEvaporationInspect(struct soap*, const char*, int, const struct __ns1__FuelEvaporationInspect *, const char*);
SOAP_FMAC3 struct __ns1__FuelEvaporationInspect * SOAP_FMAC4 soap_in___ns1__FuelEvaporationInspect(struct soap*, const char*, struct __ns1__FuelEvaporationInspect *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__FuelEvaporationInspect(struct soap*, const struct __ns1__FuelEvaporationInspect *, const char*, const char*);

#ifndef soap_write___ns1__FuelEvaporationInspect
#define soap_write___ns1__FuelEvaporationInspect(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__FuelEvaporationInspect(soap, data),0) || soap_put___ns1__FuelEvaporationInspect(soap, data, "-ns1:FuelEvaporationInspect", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__FuelEvaporationInspect * SOAP_FMAC4 soap_get___ns1__FuelEvaporationInspect(struct soap*, struct __ns1__FuelEvaporationInspect *, const char*, const char*);

#ifndef soap_read___ns1__FuelEvaporationInspect
#define soap_read___ns1__FuelEvaporationInspect(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__FuelEvaporationInspect(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__FuelEvaporationInspect * SOAP_FMAC2 soap_instantiate___ns1__FuelEvaporationInspect(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__FuelEvaporationInspect * soap_new___ns1__FuelEvaporationInspect(struct soap *soap, int n = -1) { return soap_instantiate___ns1__FuelEvaporationInspect(soap, n, NULL, NULL, NULL); }

inline struct __ns1__FuelEvaporationInspect * soap_new_req___ns1__FuelEvaporationInspect(struct soap *soap) { struct __ns1__FuelEvaporationInspect *_p = soap_instantiate___ns1__FuelEvaporationInspect(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__FuelEvaporationInspect(soap, _p); } return _p; }

inline struct __ns1__FuelEvaporationInspect * soap_new_set___ns1__FuelEvaporationInspect(struct soap *soap, _ns1__FuelEvaporationInspect *ns1__FuelEvaporationInspect) { struct __ns1__FuelEvaporationInspect *_p = soap_instantiate___ns1__FuelEvaporationInspect(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__FuelEvaporationInspect(soap, _p); _p->ns1__FuelEvaporationInspect = ns1__FuelEvaporationInspect; } return _p; }

inline void soap_delete___ns1__FuelEvaporationInspect(struct soap *soap, struct __ns1__FuelEvaporationInspect *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__FuelEvaporationInspect(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__TestPhoto
#define SOAP_TYPE___ns1__TestPhoto (139)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__TestPhoto(struct soap*, struct __ns1__TestPhoto *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__TestPhoto(struct soap*, const struct __ns1__TestPhoto *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__TestPhoto(struct soap*, const char*, int, const struct __ns1__TestPhoto *, const char*);
SOAP_FMAC3 struct __ns1__TestPhoto * SOAP_FMAC4 soap_in___ns1__TestPhoto(struct soap*, const char*, struct __ns1__TestPhoto *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__TestPhoto(struct soap*, const struct __ns1__TestPhoto *, const char*, const char*);

#ifndef soap_write___ns1__TestPhoto
#define soap_write___ns1__TestPhoto(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__TestPhoto(soap, data),0) || soap_put___ns1__TestPhoto(soap, data, "-ns1:TestPhoto", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__TestPhoto * SOAP_FMAC4 soap_get___ns1__TestPhoto(struct soap*, struct __ns1__TestPhoto *, const char*, const char*);

#ifndef soap_read___ns1__TestPhoto
#define soap_read___ns1__TestPhoto(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__TestPhoto(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__TestPhoto * SOAP_FMAC2 soap_instantiate___ns1__TestPhoto(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__TestPhoto * soap_new___ns1__TestPhoto(struct soap *soap, int n = -1) { return soap_instantiate___ns1__TestPhoto(soap, n, NULL, NULL, NULL); }

inline struct __ns1__TestPhoto * soap_new_req___ns1__TestPhoto(struct soap *soap) { struct __ns1__TestPhoto *_p = soap_instantiate___ns1__TestPhoto(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__TestPhoto(soap, _p); } return _p; }

inline struct __ns1__TestPhoto * soap_new_set___ns1__TestPhoto(struct soap *soap, _ns1__TestPhoto *ns1__TestPhoto) { struct __ns1__TestPhoto *_p = soap_instantiate___ns1__TestPhoto(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__TestPhoto(soap, _p); _p->ns1__TestPhoto = ns1__TestPhoto; } return _p; }

inline void soap_delete___ns1__TestPhoto(struct soap *soap, struct __ns1__TestPhoto *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__TestPhoto(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__EndCalibrate
#define SOAP_TYPE___ns1__EndCalibrate (135)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__EndCalibrate(struct soap*, struct __ns1__EndCalibrate *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__EndCalibrate(struct soap*, const struct __ns1__EndCalibrate *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__EndCalibrate(struct soap*, const char*, int, const struct __ns1__EndCalibrate *, const char*);
SOAP_FMAC3 struct __ns1__EndCalibrate * SOAP_FMAC4 soap_in___ns1__EndCalibrate(struct soap*, const char*, struct __ns1__EndCalibrate *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__EndCalibrate(struct soap*, const struct __ns1__EndCalibrate *, const char*, const char*);

#ifndef soap_write___ns1__EndCalibrate
#define soap_write___ns1__EndCalibrate(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__EndCalibrate(soap, data),0) || soap_put___ns1__EndCalibrate(soap, data, "-ns1:EndCalibrate", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__EndCalibrate * SOAP_FMAC4 soap_get___ns1__EndCalibrate(struct soap*, struct __ns1__EndCalibrate *, const char*, const char*);

#ifndef soap_read___ns1__EndCalibrate
#define soap_read___ns1__EndCalibrate(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__EndCalibrate(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__EndCalibrate * SOAP_FMAC2 soap_instantiate___ns1__EndCalibrate(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__EndCalibrate * soap_new___ns1__EndCalibrate(struct soap *soap, int n = -1) { return soap_instantiate___ns1__EndCalibrate(soap, n, NULL, NULL, NULL); }

inline struct __ns1__EndCalibrate * soap_new_req___ns1__EndCalibrate(struct soap *soap) { struct __ns1__EndCalibrate *_p = soap_instantiate___ns1__EndCalibrate(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__EndCalibrate(soap, _p); } return _p; }

inline struct __ns1__EndCalibrate * soap_new_set___ns1__EndCalibrate(struct soap *soap, _ns1__EndCalibrate *ns1__EndCalibrate) { struct __ns1__EndCalibrate *_p = soap_instantiate___ns1__EndCalibrate(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__EndCalibrate(soap, _p); _p->ns1__EndCalibrate = ns1__EndCalibrate; } return _p; }

inline void soap_delete___ns1__EndCalibrate(struct soap *soap, struct __ns1__EndCalibrate *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__EndCalibrate(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__UploadCalibrateData
#define SOAP_TYPE___ns1__UploadCalibrateData (131)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__UploadCalibrateData(struct soap*, struct __ns1__UploadCalibrateData *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__UploadCalibrateData(struct soap*, const struct __ns1__UploadCalibrateData *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__UploadCalibrateData(struct soap*, const char*, int, const struct __ns1__UploadCalibrateData *, const char*);
SOAP_FMAC3 struct __ns1__UploadCalibrateData * SOAP_FMAC4 soap_in___ns1__UploadCalibrateData(struct soap*, const char*, struct __ns1__UploadCalibrateData *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__UploadCalibrateData(struct soap*, const struct __ns1__UploadCalibrateData *, const char*, const char*);

#ifndef soap_write___ns1__UploadCalibrateData
#define soap_write___ns1__UploadCalibrateData(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__UploadCalibrateData(soap, data),0) || soap_put___ns1__UploadCalibrateData(soap, data, "-ns1:UploadCalibrateData", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__UploadCalibrateData * SOAP_FMAC4 soap_get___ns1__UploadCalibrateData(struct soap*, struct __ns1__UploadCalibrateData *, const char*, const char*);

#ifndef soap_read___ns1__UploadCalibrateData
#define soap_read___ns1__UploadCalibrateData(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__UploadCalibrateData(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__UploadCalibrateData * SOAP_FMAC2 soap_instantiate___ns1__UploadCalibrateData(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__UploadCalibrateData * soap_new___ns1__UploadCalibrateData(struct soap *soap, int n = -1) { return soap_instantiate___ns1__UploadCalibrateData(soap, n, NULL, NULL, NULL); }

inline struct __ns1__UploadCalibrateData * soap_new_req___ns1__UploadCalibrateData(struct soap *soap) { struct __ns1__UploadCalibrateData *_p = soap_instantiate___ns1__UploadCalibrateData(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__UploadCalibrateData(soap, _p); } return _p; }

inline struct __ns1__UploadCalibrateData * soap_new_set___ns1__UploadCalibrateData(struct soap *soap, _ns1__UploadCalibrateData *ns1__UploadCalibrateData) { struct __ns1__UploadCalibrateData *_p = soap_instantiate___ns1__UploadCalibrateData(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__UploadCalibrateData(soap, _p); _p->ns1__UploadCalibrateData = ns1__UploadCalibrateData; } return _p; }

inline void soap_delete___ns1__UploadCalibrateData(struct soap *soap, struct __ns1__UploadCalibrateData *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__UploadCalibrateData(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__BeginCalibrate
#define SOAP_TYPE___ns1__BeginCalibrate (127)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__BeginCalibrate(struct soap*, struct __ns1__BeginCalibrate *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__BeginCalibrate(struct soap*, const struct __ns1__BeginCalibrate *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__BeginCalibrate(struct soap*, const char*, int, const struct __ns1__BeginCalibrate *, const char*);
SOAP_FMAC3 struct __ns1__BeginCalibrate * SOAP_FMAC4 soap_in___ns1__BeginCalibrate(struct soap*, const char*, struct __ns1__BeginCalibrate *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__BeginCalibrate(struct soap*, const struct __ns1__BeginCalibrate *, const char*, const char*);

#ifndef soap_write___ns1__BeginCalibrate
#define soap_write___ns1__BeginCalibrate(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__BeginCalibrate(soap, data),0) || soap_put___ns1__BeginCalibrate(soap, data, "-ns1:BeginCalibrate", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__BeginCalibrate * SOAP_FMAC4 soap_get___ns1__BeginCalibrate(struct soap*, struct __ns1__BeginCalibrate *, const char*, const char*);

#ifndef soap_read___ns1__BeginCalibrate
#define soap_read___ns1__BeginCalibrate(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__BeginCalibrate(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__BeginCalibrate * SOAP_FMAC2 soap_instantiate___ns1__BeginCalibrate(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__BeginCalibrate * soap_new___ns1__BeginCalibrate(struct soap *soap, int n = -1) { return soap_instantiate___ns1__BeginCalibrate(soap, n, NULL, NULL, NULL); }

inline struct __ns1__BeginCalibrate * soap_new_req___ns1__BeginCalibrate(struct soap *soap) { struct __ns1__BeginCalibrate *_p = soap_instantiate___ns1__BeginCalibrate(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__BeginCalibrate(soap, _p); } return _p; }

inline struct __ns1__BeginCalibrate * soap_new_set___ns1__BeginCalibrate(struct soap *soap, _ns1__BeginCalibrate *ns1__BeginCalibrate) { struct __ns1__BeginCalibrate *_p = soap_instantiate___ns1__BeginCalibrate(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__BeginCalibrate(soap, _p); _p->ns1__BeginCalibrate = ns1__BeginCalibrate; } return _p; }

inline void soap_delete___ns1__BeginCalibrate(struct soap *soap, struct __ns1__BeginCalibrate *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__BeginCalibrate(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetInspectionInfo
#define SOAP_TYPE___ns1__GetInspectionInfo (123)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetInspectionInfo(struct soap*, struct __ns1__GetInspectionInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetInspectionInfo(struct soap*, const struct __ns1__GetInspectionInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetInspectionInfo(struct soap*, const char*, int, const struct __ns1__GetInspectionInfo *, const char*);
SOAP_FMAC3 struct __ns1__GetInspectionInfo * SOAP_FMAC4 soap_in___ns1__GetInspectionInfo(struct soap*, const char*, struct __ns1__GetInspectionInfo *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetInspectionInfo(struct soap*, const struct __ns1__GetInspectionInfo *, const char*, const char*);

#ifndef soap_write___ns1__GetInspectionInfo
#define soap_write___ns1__GetInspectionInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetInspectionInfo(soap, data),0) || soap_put___ns1__GetInspectionInfo(soap, data, "-ns1:GetInspectionInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetInspectionInfo * SOAP_FMAC4 soap_get___ns1__GetInspectionInfo(struct soap*, struct __ns1__GetInspectionInfo *, const char*, const char*);

#ifndef soap_read___ns1__GetInspectionInfo
#define soap_read___ns1__GetInspectionInfo(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetInspectionInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetInspectionInfo * SOAP_FMAC2 soap_instantiate___ns1__GetInspectionInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetInspectionInfo * soap_new___ns1__GetInspectionInfo(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetInspectionInfo(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetInspectionInfo * soap_new_req___ns1__GetInspectionInfo(struct soap *soap) { struct __ns1__GetInspectionInfo *_p = soap_instantiate___ns1__GetInspectionInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetInspectionInfo(soap, _p); } return _p; }

inline struct __ns1__GetInspectionInfo * soap_new_set___ns1__GetInspectionInfo(struct soap *soap, _ns1__GetInspectionInfo *ns1__GetInspectionInfo) { struct __ns1__GetInspectionInfo *_p = soap_instantiate___ns1__GetInspectionInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetInspectionInfo(soap, _p); _p->ns1__GetInspectionInfo = ns1__GetInspectionInfo; } return _p; }

inline void soap_delete___ns1__GetInspectionInfo(struct soap *soap, struct __ns1__GetInspectionInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetInspectionInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__UploadRealtimeData
#define SOAP_TYPE___ns1__UploadRealtimeData (119)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__UploadRealtimeData(struct soap*, struct __ns1__UploadRealtimeData *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__UploadRealtimeData(struct soap*, const struct __ns1__UploadRealtimeData *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__UploadRealtimeData(struct soap*, const char*, int, const struct __ns1__UploadRealtimeData *, const char*);
SOAP_FMAC3 struct __ns1__UploadRealtimeData * SOAP_FMAC4 soap_in___ns1__UploadRealtimeData(struct soap*, const char*, struct __ns1__UploadRealtimeData *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__UploadRealtimeData(struct soap*, const struct __ns1__UploadRealtimeData *, const char*, const char*);

#ifndef soap_write___ns1__UploadRealtimeData
#define soap_write___ns1__UploadRealtimeData(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__UploadRealtimeData(soap, data),0) || soap_put___ns1__UploadRealtimeData(soap, data, "-ns1:UploadRealtimeData", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__UploadRealtimeData * SOAP_FMAC4 soap_get___ns1__UploadRealtimeData(struct soap*, struct __ns1__UploadRealtimeData *, const char*, const char*);

#ifndef soap_read___ns1__UploadRealtimeData
#define soap_read___ns1__UploadRealtimeData(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__UploadRealtimeData(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__UploadRealtimeData * SOAP_FMAC2 soap_instantiate___ns1__UploadRealtimeData(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__UploadRealtimeData * soap_new___ns1__UploadRealtimeData(struct soap *soap, int n = -1) { return soap_instantiate___ns1__UploadRealtimeData(soap, n, NULL, NULL, NULL); }

inline struct __ns1__UploadRealtimeData * soap_new_req___ns1__UploadRealtimeData(struct soap *soap) { struct __ns1__UploadRealtimeData *_p = soap_instantiate___ns1__UploadRealtimeData(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__UploadRealtimeData(soap, _p); } return _p; }

inline struct __ns1__UploadRealtimeData * soap_new_set___ns1__UploadRealtimeData(struct soap *soap, _ns1__UploadRealtimeData *ns1__UploadRealtimeData) { struct __ns1__UploadRealtimeData *_p = soap_instantiate___ns1__UploadRealtimeData(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__UploadRealtimeData(soap, _p); _p->ns1__UploadRealtimeData = ns1__UploadRealtimeData; } return _p; }

inline void soap_delete___ns1__UploadRealtimeData(struct soap *soap, struct __ns1__UploadRealtimeData *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__UploadRealtimeData(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__UploadSelfTestData
#define SOAP_TYPE___ns1__UploadSelfTestData (115)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__UploadSelfTestData(struct soap*, struct __ns1__UploadSelfTestData *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__UploadSelfTestData(struct soap*, const struct __ns1__UploadSelfTestData *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__UploadSelfTestData(struct soap*, const char*, int, const struct __ns1__UploadSelfTestData *, const char*);
SOAP_FMAC3 struct __ns1__UploadSelfTestData * SOAP_FMAC4 soap_in___ns1__UploadSelfTestData(struct soap*, const char*, struct __ns1__UploadSelfTestData *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__UploadSelfTestData(struct soap*, const struct __ns1__UploadSelfTestData *, const char*, const char*);

#ifndef soap_write___ns1__UploadSelfTestData
#define soap_write___ns1__UploadSelfTestData(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__UploadSelfTestData(soap, data),0) || soap_put___ns1__UploadSelfTestData(soap, data, "-ns1:UploadSelfTestData", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__UploadSelfTestData * SOAP_FMAC4 soap_get___ns1__UploadSelfTestData(struct soap*, struct __ns1__UploadSelfTestData *, const char*, const char*);

#ifndef soap_read___ns1__UploadSelfTestData
#define soap_read___ns1__UploadSelfTestData(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__UploadSelfTestData(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__UploadSelfTestData * SOAP_FMAC2 soap_instantiate___ns1__UploadSelfTestData(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__UploadSelfTestData * soap_new___ns1__UploadSelfTestData(struct soap *soap, int n = -1) { return soap_instantiate___ns1__UploadSelfTestData(soap, n, NULL, NULL, NULL); }

inline struct __ns1__UploadSelfTestData * soap_new_req___ns1__UploadSelfTestData(struct soap *soap) { struct __ns1__UploadSelfTestData *_p = soap_instantiate___ns1__UploadSelfTestData(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__UploadSelfTestData(soap, _p); } return _p; }

inline struct __ns1__UploadSelfTestData * soap_new_set___ns1__UploadSelfTestData(struct soap *soap, _ns1__UploadSelfTestData *ns1__UploadSelfTestData) { struct __ns1__UploadSelfTestData *_p = soap_instantiate___ns1__UploadSelfTestData(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__UploadSelfTestData(soap, _p); _p->ns1__UploadSelfTestData = ns1__UploadSelfTestData; } return _p; }

inline void soap_delete___ns1__UploadSelfTestData(struct soap *soap, struct __ns1__UploadSelfTestData *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__UploadSelfTestData(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__EndInspect
#define SOAP_TYPE___ns1__EndInspect (111)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__EndInspect(struct soap*, struct __ns1__EndInspect *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__EndInspect(struct soap*, const struct __ns1__EndInspect *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__EndInspect(struct soap*, const char*, int, const struct __ns1__EndInspect *, const char*);
SOAP_FMAC3 struct __ns1__EndInspect * SOAP_FMAC4 soap_in___ns1__EndInspect(struct soap*, const char*, struct __ns1__EndInspect *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__EndInspect(struct soap*, const struct __ns1__EndInspect *, const char*, const char*);

#ifndef soap_write___ns1__EndInspect
#define soap_write___ns1__EndInspect(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__EndInspect(soap, data),0) || soap_put___ns1__EndInspect(soap, data, "-ns1:EndInspect", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__EndInspect * SOAP_FMAC4 soap_get___ns1__EndInspect(struct soap*, struct __ns1__EndInspect *, const char*, const char*);

#ifndef soap_read___ns1__EndInspect
#define soap_read___ns1__EndInspect(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__EndInspect(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__EndInspect * SOAP_FMAC2 soap_instantiate___ns1__EndInspect(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__EndInspect * soap_new___ns1__EndInspect(struct soap *soap, int n = -1) { return soap_instantiate___ns1__EndInspect(soap, n, NULL, NULL, NULL); }

inline struct __ns1__EndInspect * soap_new_req___ns1__EndInspect(struct soap *soap) { struct __ns1__EndInspect *_p = soap_instantiate___ns1__EndInspect(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__EndInspect(soap, _p); } return _p; }

inline struct __ns1__EndInspect * soap_new_set___ns1__EndInspect(struct soap *soap, _ns1__EndInspect *ns1__EndInspect) { struct __ns1__EndInspect *_p = soap_instantiate___ns1__EndInspect(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__EndInspect(soap, _p); _p->ns1__EndInspect = ns1__EndInspect; } return _p; }

inline void soap_delete___ns1__EndInspect(struct soap *soap, struct __ns1__EndInspect *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__EndInspect(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__StopInspect
#define SOAP_TYPE___ns1__StopInspect (107)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__StopInspect(struct soap*, struct __ns1__StopInspect *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__StopInspect(struct soap*, const struct __ns1__StopInspect *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__StopInspect(struct soap*, const char*, int, const struct __ns1__StopInspect *, const char*);
SOAP_FMAC3 struct __ns1__StopInspect * SOAP_FMAC4 soap_in___ns1__StopInspect(struct soap*, const char*, struct __ns1__StopInspect *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__StopInspect(struct soap*, const struct __ns1__StopInspect *, const char*, const char*);

#ifndef soap_write___ns1__StopInspect
#define soap_write___ns1__StopInspect(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__StopInspect(soap, data),0) || soap_put___ns1__StopInspect(soap, data, "-ns1:StopInspect", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__StopInspect * SOAP_FMAC4 soap_get___ns1__StopInspect(struct soap*, struct __ns1__StopInspect *, const char*, const char*);

#ifndef soap_read___ns1__StopInspect
#define soap_read___ns1__StopInspect(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__StopInspect(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__StopInspect * SOAP_FMAC2 soap_instantiate___ns1__StopInspect(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__StopInspect * soap_new___ns1__StopInspect(struct soap *soap, int n = -1) { return soap_instantiate___ns1__StopInspect(soap, n, NULL, NULL, NULL); }

inline struct __ns1__StopInspect * soap_new_req___ns1__StopInspect(struct soap *soap) { struct __ns1__StopInspect *_p = soap_instantiate___ns1__StopInspect(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__StopInspect(soap, _p); } return _p; }

inline struct __ns1__StopInspect * soap_new_set___ns1__StopInspect(struct soap *soap, _ns1__StopInspect *ns1__StopInspect) { struct __ns1__StopInspect *_p = soap_instantiate___ns1__StopInspect(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__StopInspect(soap, _p); _p->ns1__StopInspect = ns1__StopInspect; } return _p; }

inline void soap_delete___ns1__StopInspect(struct soap *soap, struct __ns1__StopInspect *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__StopInspect(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__WJTakePhoto
#define SOAP_TYPE___ns1__WJTakePhoto (103)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__WJTakePhoto(struct soap*, struct __ns1__WJTakePhoto *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__WJTakePhoto(struct soap*, const struct __ns1__WJTakePhoto *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__WJTakePhoto(struct soap*, const char*, int, const struct __ns1__WJTakePhoto *, const char*);
SOAP_FMAC3 struct __ns1__WJTakePhoto * SOAP_FMAC4 soap_in___ns1__WJTakePhoto(struct soap*, const char*, struct __ns1__WJTakePhoto *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__WJTakePhoto(struct soap*, const struct __ns1__WJTakePhoto *, const char*, const char*);

#ifndef soap_write___ns1__WJTakePhoto
#define soap_write___ns1__WJTakePhoto(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__WJTakePhoto(soap, data),0) || soap_put___ns1__WJTakePhoto(soap, data, "-ns1:WJTakePhoto", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__WJTakePhoto * SOAP_FMAC4 soap_get___ns1__WJTakePhoto(struct soap*, struct __ns1__WJTakePhoto *, const char*, const char*);

#ifndef soap_read___ns1__WJTakePhoto
#define soap_read___ns1__WJTakePhoto(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__WJTakePhoto(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__WJTakePhoto * SOAP_FMAC2 soap_instantiate___ns1__WJTakePhoto(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__WJTakePhoto * soap_new___ns1__WJTakePhoto(struct soap *soap, int n = -1) { return soap_instantiate___ns1__WJTakePhoto(soap, n, NULL, NULL, NULL); }

inline struct __ns1__WJTakePhoto * soap_new_req___ns1__WJTakePhoto(struct soap *soap) { struct __ns1__WJTakePhoto *_p = soap_instantiate___ns1__WJTakePhoto(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__WJTakePhoto(soap, _p); } return _p; }

inline struct __ns1__WJTakePhoto * soap_new_set___ns1__WJTakePhoto(struct soap *soap, _ns1__WJTakePhoto *ns1__WJTakePhoto) { struct __ns1__WJTakePhoto *_p = soap_instantiate___ns1__WJTakePhoto(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__WJTakePhoto(soap, _p); _p->ns1__WJTakePhoto = ns1__WJTakePhoto; } return _p; }

inline void soap_delete___ns1__WJTakePhoto(struct soap *soap, struct __ns1__WJTakePhoto *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__WJTakePhoto(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__TakePhoto
#define SOAP_TYPE___ns1__TakePhoto (99)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__TakePhoto(struct soap*, struct __ns1__TakePhoto *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__TakePhoto(struct soap*, const struct __ns1__TakePhoto *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__TakePhoto(struct soap*, const char*, int, const struct __ns1__TakePhoto *, const char*);
SOAP_FMAC3 struct __ns1__TakePhoto * SOAP_FMAC4 soap_in___ns1__TakePhoto(struct soap*, const char*, struct __ns1__TakePhoto *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__TakePhoto(struct soap*, const struct __ns1__TakePhoto *, const char*, const char*);

#ifndef soap_write___ns1__TakePhoto
#define soap_write___ns1__TakePhoto(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__TakePhoto(soap, data),0) || soap_put___ns1__TakePhoto(soap, data, "-ns1:TakePhoto", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__TakePhoto * SOAP_FMAC4 soap_get___ns1__TakePhoto(struct soap*, struct __ns1__TakePhoto *, const char*, const char*);

#ifndef soap_read___ns1__TakePhoto
#define soap_read___ns1__TakePhoto(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__TakePhoto(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__TakePhoto * SOAP_FMAC2 soap_instantiate___ns1__TakePhoto(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__TakePhoto * soap_new___ns1__TakePhoto(struct soap *soap, int n = -1) { return soap_instantiate___ns1__TakePhoto(soap, n, NULL, NULL, NULL); }

inline struct __ns1__TakePhoto * soap_new_req___ns1__TakePhoto(struct soap *soap) { struct __ns1__TakePhoto *_p = soap_instantiate___ns1__TakePhoto(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__TakePhoto(soap, _p); } return _p; }

inline struct __ns1__TakePhoto * soap_new_set___ns1__TakePhoto(struct soap *soap, _ns1__TakePhoto *ns1__TakePhoto) { struct __ns1__TakePhoto *_p = soap_instantiate___ns1__TakePhoto(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__TakePhoto(soap, _p); _p->ns1__TakePhoto = ns1__TakePhoto; } return _p; }

inline void soap_delete___ns1__TakePhoto(struct soap *soap, struct __ns1__TakePhoto *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__TakePhoto(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetLimit
#define SOAP_TYPE___ns1__GetLimit (95)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetLimit(struct soap*, struct __ns1__GetLimit *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetLimit(struct soap*, const struct __ns1__GetLimit *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetLimit(struct soap*, const char*, int, const struct __ns1__GetLimit *, const char*);
SOAP_FMAC3 struct __ns1__GetLimit * SOAP_FMAC4 soap_in___ns1__GetLimit(struct soap*, const char*, struct __ns1__GetLimit *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetLimit(struct soap*, const struct __ns1__GetLimit *, const char*, const char*);

#ifndef soap_write___ns1__GetLimit
#define soap_write___ns1__GetLimit(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetLimit(soap, data),0) || soap_put___ns1__GetLimit(soap, data, "-ns1:GetLimit", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetLimit * SOAP_FMAC4 soap_get___ns1__GetLimit(struct soap*, struct __ns1__GetLimit *, const char*, const char*);

#ifndef soap_read___ns1__GetLimit
#define soap_read___ns1__GetLimit(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetLimit(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetLimit * SOAP_FMAC2 soap_instantiate___ns1__GetLimit(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetLimit * soap_new___ns1__GetLimit(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetLimit(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetLimit * soap_new_req___ns1__GetLimit(struct soap *soap) { struct __ns1__GetLimit *_p = soap_instantiate___ns1__GetLimit(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetLimit(soap, _p); } return _p; }

inline struct __ns1__GetLimit * soap_new_set___ns1__GetLimit(struct soap *soap, _ns1__GetLimit *ns1__GetLimit) { struct __ns1__GetLimit *_p = soap_instantiate___ns1__GetLimit(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetLimit(soap, _p); _p->ns1__GetLimit = ns1__GetLimit; } return _p; }

inline void soap_delete___ns1__GetLimit(struct soap *soap, struct __ns1__GetLimit *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetLimit(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__BeginInspect
#define SOAP_TYPE___ns1__BeginInspect (91)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__BeginInspect(struct soap*, struct __ns1__BeginInspect *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__BeginInspect(struct soap*, const struct __ns1__BeginInspect *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__BeginInspect(struct soap*, const char*, int, const struct __ns1__BeginInspect *, const char*);
SOAP_FMAC3 struct __ns1__BeginInspect * SOAP_FMAC4 soap_in___ns1__BeginInspect(struct soap*, const char*, struct __ns1__BeginInspect *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__BeginInspect(struct soap*, const struct __ns1__BeginInspect *, const char*, const char*);

#ifndef soap_write___ns1__BeginInspect
#define soap_write___ns1__BeginInspect(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__BeginInspect(soap, data),0) || soap_put___ns1__BeginInspect(soap, data, "-ns1:BeginInspect", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__BeginInspect * SOAP_FMAC4 soap_get___ns1__BeginInspect(struct soap*, struct __ns1__BeginInspect *, const char*, const char*);

#ifndef soap_read___ns1__BeginInspect
#define soap_read___ns1__BeginInspect(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__BeginInspect(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__BeginInspect * SOAP_FMAC2 soap_instantiate___ns1__BeginInspect(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__BeginInspect * soap_new___ns1__BeginInspect(struct soap *soap, int n = -1) { return soap_instantiate___ns1__BeginInspect(soap, n, NULL, NULL, NULL); }

inline struct __ns1__BeginInspect * soap_new_req___ns1__BeginInspect(struct soap *soap) { struct __ns1__BeginInspect *_p = soap_instantiate___ns1__BeginInspect(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__BeginInspect(soap, _p); } return _p; }

inline struct __ns1__BeginInspect * soap_new_set___ns1__BeginInspect(struct soap *soap, _ns1__BeginInspect *ns1__BeginInspect) { struct __ns1__BeginInspect *_p = soap_instantiate___ns1__BeginInspect(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__BeginInspect(soap, _p); _p->ns1__BeginInspect = ns1__BeginInspect; } return _p; }

inline void soap_delete___ns1__BeginInspect(struct soap *soap, struct __ns1__BeginInspect *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__BeginInspect(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__EndRecord
#define SOAP_TYPE___ns1__EndRecord (87)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__EndRecord(struct soap*, struct __ns1__EndRecord *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__EndRecord(struct soap*, const struct __ns1__EndRecord *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__EndRecord(struct soap*, const char*, int, const struct __ns1__EndRecord *, const char*);
SOAP_FMAC3 struct __ns1__EndRecord * SOAP_FMAC4 soap_in___ns1__EndRecord(struct soap*, const char*, struct __ns1__EndRecord *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__EndRecord(struct soap*, const struct __ns1__EndRecord *, const char*, const char*);

#ifndef soap_write___ns1__EndRecord
#define soap_write___ns1__EndRecord(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__EndRecord(soap, data),0) || soap_put___ns1__EndRecord(soap, data, "-ns1:EndRecord", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__EndRecord * SOAP_FMAC4 soap_get___ns1__EndRecord(struct soap*, struct __ns1__EndRecord *, const char*, const char*);

#ifndef soap_read___ns1__EndRecord
#define soap_read___ns1__EndRecord(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__EndRecord(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__EndRecord * SOAP_FMAC2 soap_instantiate___ns1__EndRecord(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__EndRecord * soap_new___ns1__EndRecord(struct soap *soap, int n = -1) { return soap_instantiate___ns1__EndRecord(soap, n, NULL, NULL, NULL); }

inline struct __ns1__EndRecord * soap_new_req___ns1__EndRecord(struct soap *soap) { struct __ns1__EndRecord *_p = soap_instantiate___ns1__EndRecord(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__EndRecord(soap, _p); } return _p; }

inline struct __ns1__EndRecord * soap_new_set___ns1__EndRecord(struct soap *soap, _ns1__EndRecord *ns1__EndRecord) { struct __ns1__EndRecord *_p = soap_instantiate___ns1__EndRecord(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__EndRecord(soap, _p); _p->ns1__EndRecord = ns1__EndRecord; } return _p; }

inline void soap_delete___ns1__EndRecord(struct soap *soap, struct __ns1__EndRecord *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__EndRecord(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__BeginRecord
#define SOAP_TYPE___ns1__BeginRecord (83)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__BeginRecord(struct soap*, struct __ns1__BeginRecord *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__BeginRecord(struct soap*, const struct __ns1__BeginRecord *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__BeginRecord(struct soap*, const char*, int, const struct __ns1__BeginRecord *, const char*);
SOAP_FMAC3 struct __ns1__BeginRecord * SOAP_FMAC4 soap_in___ns1__BeginRecord(struct soap*, const char*, struct __ns1__BeginRecord *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__BeginRecord(struct soap*, const struct __ns1__BeginRecord *, const char*, const char*);

#ifndef soap_write___ns1__BeginRecord
#define soap_write___ns1__BeginRecord(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__BeginRecord(soap, data),0) || soap_put___ns1__BeginRecord(soap, data, "-ns1:BeginRecord", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__BeginRecord * SOAP_FMAC4 soap_get___ns1__BeginRecord(struct soap*, struct __ns1__BeginRecord *, const char*, const char*);

#ifndef soap_read___ns1__BeginRecord
#define soap_read___ns1__BeginRecord(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__BeginRecord(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__BeginRecord * SOAP_FMAC2 soap_instantiate___ns1__BeginRecord(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__BeginRecord * soap_new___ns1__BeginRecord(struct soap *soap, int n = -1) { return soap_instantiate___ns1__BeginRecord(soap, n, NULL, NULL, NULL); }

inline struct __ns1__BeginRecord * soap_new_req___ns1__BeginRecord(struct soap *soap) { struct __ns1__BeginRecord *_p = soap_instantiate___ns1__BeginRecord(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__BeginRecord(soap, _p); } return _p; }

inline struct __ns1__BeginRecord * soap_new_set___ns1__BeginRecord(struct soap *soap, _ns1__BeginRecord *ns1__BeginRecord) { struct __ns1__BeginRecord *_p = soap_instantiate___ns1__BeginRecord(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__BeginRecord(soap, _p); _p->ns1__BeginRecord = ns1__BeginRecord; } return _p; }

inline void soap_delete___ns1__BeginRecord(struct soap *soap, struct __ns1__BeginRecord *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__BeginRecord(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__AbortInspect
#define SOAP_TYPE___ns1__AbortInspect (79)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AbortInspect(struct soap*, struct __ns1__AbortInspect *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AbortInspect(struct soap*, const struct __ns1__AbortInspect *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AbortInspect(struct soap*, const char*, int, const struct __ns1__AbortInspect *, const char*);
SOAP_FMAC3 struct __ns1__AbortInspect * SOAP_FMAC4 soap_in___ns1__AbortInspect(struct soap*, const char*, struct __ns1__AbortInspect *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AbortInspect(struct soap*, const struct __ns1__AbortInspect *, const char*, const char*);

#ifndef soap_write___ns1__AbortInspect
#define soap_write___ns1__AbortInspect(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__AbortInspect(soap, data),0) || soap_put___ns1__AbortInspect(soap, data, "-ns1:AbortInspect", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__AbortInspect * SOAP_FMAC4 soap_get___ns1__AbortInspect(struct soap*, struct __ns1__AbortInspect *, const char*, const char*);

#ifndef soap_read___ns1__AbortInspect
#define soap_read___ns1__AbortInspect(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__AbortInspect(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__AbortInspect * SOAP_FMAC2 soap_instantiate___ns1__AbortInspect(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__AbortInspect * soap_new___ns1__AbortInspect(struct soap *soap, int n = -1) { return soap_instantiate___ns1__AbortInspect(soap, n, NULL, NULL, NULL); }

inline struct __ns1__AbortInspect * soap_new_req___ns1__AbortInspect(struct soap *soap) { struct __ns1__AbortInspect *_p = soap_instantiate___ns1__AbortInspect(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__AbortInspect(soap, _p); } return _p; }

inline struct __ns1__AbortInspect * soap_new_set___ns1__AbortInspect(struct soap *soap, _ns1__AbortInspect *ns1__AbortInspect) { struct __ns1__AbortInspect *_p = soap_instantiate___ns1__AbortInspect(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__AbortInspect(soap, _p); _p->ns1__AbortInspect = ns1__AbortInspect; } return _p; }

inline void soap_delete___ns1__AbortInspect(struct soap *soap, struct __ns1__AbortInspect *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AbortInspect(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetInspectQueueByPlateID
#define SOAP_TYPE___ns1__GetInspectQueueByPlateID (75)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetInspectQueueByPlateID(struct soap*, struct __ns1__GetInspectQueueByPlateID *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetInspectQueueByPlateID(struct soap*, const struct __ns1__GetInspectQueueByPlateID *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetInspectQueueByPlateID(struct soap*, const char*, int, const struct __ns1__GetInspectQueueByPlateID *, const char*);
SOAP_FMAC3 struct __ns1__GetInspectQueueByPlateID * SOAP_FMAC4 soap_in___ns1__GetInspectQueueByPlateID(struct soap*, const char*, struct __ns1__GetInspectQueueByPlateID *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetInspectQueueByPlateID(struct soap*, const struct __ns1__GetInspectQueueByPlateID *, const char*, const char*);

#ifndef soap_write___ns1__GetInspectQueueByPlateID
#define soap_write___ns1__GetInspectQueueByPlateID(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetInspectQueueByPlateID(soap, data),0) || soap_put___ns1__GetInspectQueueByPlateID(soap, data, "-ns1:GetInspectQueueByPlateID", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetInspectQueueByPlateID * SOAP_FMAC4 soap_get___ns1__GetInspectQueueByPlateID(struct soap*, struct __ns1__GetInspectQueueByPlateID *, const char*, const char*);

#ifndef soap_read___ns1__GetInspectQueueByPlateID
#define soap_read___ns1__GetInspectQueueByPlateID(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetInspectQueueByPlateID(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetInspectQueueByPlateID * SOAP_FMAC2 soap_instantiate___ns1__GetInspectQueueByPlateID(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetInspectQueueByPlateID * soap_new___ns1__GetInspectQueueByPlateID(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetInspectQueueByPlateID(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetInspectQueueByPlateID * soap_new_req___ns1__GetInspectQueueByPlateID(struct soap *soap) { struct __ns1__GetInspectQueueByPlateID *_p = soap_instantiate___ns1__GetInspectQueueByPlateID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetInspectQueueByPlateID(soap, _p); } return _p; }

inline struct __ns1__GetInspectQueueByPlateID * soap_new_set___ns1__GetInspectQueueByPlateID(struct soap *soap, _ns1__GetInspectQueueByPlateID *ns1__GetInspectQueueByPlateID) { struct __ns1__GetInspectQueueByPlateID *_p = soap_instantiate___ns1__GetInspectQueueByPlateID(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetInspectQueueByPlateID(soap, _p); _p->ns1__GetInspectQueueByPlateID = ns1__GetInspectQueueByPlateID; } return _p; }

inline void soap_delete___ns1__GetInspectQueueByPlateID(struct soap *soap, struct __ns1__GetInspectQueueByPlateID *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetInspectQueueByPlateID(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__GetInspectQueueByDate
#define SOAP_TYPE___ns1__GetInspectQueueByDate (71)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetInspectQueueByDate(struct soap*, struct __ns1__GetInspectQueueByDate *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetInspectQueueByDate(struct soap*, const struct __ns1__GetInspectQueueByDate *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetInspectQueueByDate(struct soap*, const char*, int, const struct __ns1__GetInspectQueueByDate *, const char*);
SOAP_FMAC3 struct __ns1__GetInspectQueueByDate * SOAP_FMAC4 soap_in___ns1__GetInspectQueueByDate(struct soap*, const char*, struct __ns1__GetInspectQueueByDate *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetInspectQueueByDate(struct soap*, const struct __ns1__GetInspectQueueByDate *, const char*, const char*);

#ifndef soap_write___ns1__GetInspectQueueByDate
#define soap_write___ns1__GetInspectQueueByDate(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__GetInspectQueueByDate(soap, data),0) || soap_put___ns1__GetInspectQueueByDate(soap, data, "-ns1:GetInspectQueueByDate", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetInspectQueueByDate * SOAP_FMAC4 soap_get___ns1__GetInspectQueueByDate(struct soap*, struct __ns1__GetInspectQueueByDate *, const char*, const char*);

#ifndef soap_read___ns1__GetInspectQueueByDate
#define soap_read___ns1__GetInspectQueueByDate(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__GetInspectQueueByDate(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetInspectQueueByDate * SOAP_FMAC2 soap_instantiate___ns1__GetInspectQueueByDate(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetInspectQueueByDate * soap_new___ns1__GetInspectQueueByDate(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetInspectQueueByDate(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetInspectQueueByDate * soap_new_req___ns1__GetInspectQueueByDate(struct soap *soap) { struct __ns1__GetInspectQueueByDate *_p = soap_instantiate___ns1__GetInspectQueueByDate(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetInspectQueueByDate(soap, _p); } return _p; }

inline struct __ns1__GetInspectQueueByDate * soap_new_set___ns1__GetInspectQueueByDate(struct soap *soap, _ns1__GetInspectQueueByDate *ns1__GetInspectQueueByDate) { struct __ns1__GetInspectQueueByDate *_p = soap_instantiate___ns1__GetInspectQueueByDate(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetInspectQueueByDate(soap, _p); _p->ns1__GetInspectQueueByDate = ns1__GetInspectQueueByDate; } return _p; }

inline void soap_delete___ns1__GetInspectQueueByDate(struct soap *soap, struct __ns1__GetInspectQueueByDate *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetInspectQueueByDate(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__Sync
#define SOAP_TYPE___ns1__Sync (67)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Sync(struct soap*, struct __ns1__Sync *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Sync(struct soap*, const struct __ns1__Sync *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Sync(struct soap*, const char*, int, const struct __ns1__Sync *, const char*);
SOAP_FMAC3 struct __ns1__Sync * SOAP_FMAC4 soap_in___ns1__Sync(struct soap*, const char*, struct __ns1__Sync *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Sync(struct soap*, const struct __ns1__Sync *, const char*, const char*);

#ifndef soap_write___ns1__Sync
#define soap_write___ns1__Sync(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___ns1__Sync(soap, data),0) || soap_put___ns1__Sync(soap, data, "-ns1:Sync", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__Sync * SOAP_FMAC4 soap_get___ns1__Sync(struct soap*, struct __ns1__Sync *, const char*, const char*);

#ifndef soap_read___ns1__Sync
#define soap_read___ns1__Sync(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__Sync(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__Sync * SOAP_FMAC2 soap_instantiate___ns1__Sync(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Sync * soap_new___ns1__Sync(struct soap *soap, int n = -1) { return soap_instantiate___ns1__Sync(soap, n, NULL, NULL, NULL); }

inline struct __ns1__Sync * soap_new_req___ns1__Sync(struct soap *soap) { struct __ns1__Sync *_p = soap_instantiate___ns1__Sync(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__Sync(soap, _p); } return _p; }

inline struct __ns1__Sync * soap_new_set___ns1__Sync(struct soap *soap, _ns1__Sync *ns1__Sync) { struct __ns1__Sync *_p = soap_instantiate___ns1__Sync(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__Sync(soap, _p); _p->ns1__Sync = ns1__Sync; } return _p; }

inline void soap_delete___ns1__Sync(struct soap *soap, struct __ns1__Sync *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__Sync(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (223)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Reason(soap, data),0) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (222)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Detail(soap, data),0) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (216)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Code(soap, data),0) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE_PointerTo_ns1__OBDTXCheck
#define SOAP_TYPE_PointerTo_ns1__OBDTXCheck (160)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__OBDTXCheck(struct soap*, _ns1__OBDTXCheck *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__OBDTXCheck(struct soap*, const char *, int, _ns1__OBDTXCheck *const*, const char *);
SOAP_FMAC3 _ns1__OBDTXCheck ** SOAP_FMAC4 soap_in_PointerTo_ns1__OBDTXCheck(struct soap*, const char*, _ns1__OBDTXCheck **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__OBDTXCheck(struct soap*, _ns1__OBDTXCheck *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__OBDTXCheck
#define soap_write_PointerTo_ns1__OBDTXCheck(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__OBDTXCheck(soap, data),0) || soap_put_PointerTo_ns1__OBDTXCheck(soap, data, "ns1:OBDTXCheck", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__OBDTXCheck ** SOAP_FMAC4 soap_get_PointerTo_ns1__OBDTXCheck(struct soap*, _ns1__OBDTXCheck **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__OBDTXCheck
#define soap_read_PointerTo_ns1__OBDTXCheck(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__OBDTXCheck(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__OBDInspect
#define SOAP_TYPE_PointerTo_ns1__OBDInspect (156)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__OBDInspect(struct soap*, _ns1__OBDInspect *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__OBDInspect(struct soap*, const char *, int, _ns1__OBDInspect *const*, const char *);
SOAP_FMAC3 _ns1__OBDInspect ** SOAP_FMAC4 soap_in_PointerTo_ns1__OBDInspect(struct soap*, const char*, _ns1__OBDInspect **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__OBDInspect(struct soap*, _ns1__OBDInspect *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__OBDInspect
#define soap_write_PointerTo_ns1__OBDInspect(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__OBDInspect(soap, data),0) || soap_put_PointerTo_ns1__OBDInspect(soap, data, "ns1:OBDInspect", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__OBDInspect ** SOAP_FMAC4 soap_get_PointerTo_ns1__OBDInspect(struct soap*, _ns1__OBDInspect **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__OBDInspect
#define soap_read_PointerTo_ns1__OBDInspect(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__OBDInspect(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetOtherInspectQueueByDate
#define SOAP_TYPE_PointerTo_ns1__GetOtherInspectQueueByDate (152)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetOtherInspectQueueByDate(struct soap*, _ns1__GetOtherInspectQueueByDate *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetOtherInspectQueueByDate(struct soap*, const char *, int, _ns1__GetOtherInspectQueueByDate *const*, const char *);
SOAP_FMAC3 _ns1__GetOtherInspectQueueByDate ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetOtherInspectQueueByDate(struct soap*, const char*, _ns1__GetOtherInspectQueueByDate **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetOtherInspectQueueByDate(struct soap*, _ns1__GetOtherInspectQueueByDate *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetOtherInspectQueueByDate
#define soap_write_PointerTo_ns1__GetOtherInspectQueueByDate(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetOtherInspectQueueByDate(soap, data),0) || soap_put_PointerTo_ns1__GetOtherInspectQueueByDate(soap, data, "ns1:GetOtherInspectQueueByDate", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetOtherInspectQueueByDate ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetOtherInspectQueueByDate(struct soap*, _ns1__GetOtherInspectQueueByDate **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetOtherInspectQueueByDate
#define soap_read_PointerTo_ns1__GetOtherInspectQueueByDate(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetOtherInspectQueueByDate(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetOtherInspectQueueByPlateID
#define SOAP_TYPE_PointerTo_ns1__GetOtherInspectQueueByPlateID (148)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetOtherInspectQueueByPlateID(struct soap*, _ns1__GetOtherInspectQueueByPlateID *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetOtherInspectQueueByPlateID(struct soap*, const char *, int, _ns1__GetOtherInspectQueueByPlateID *const*, const char *);
SOAP_FMAC3 _ns1__GetOtherInspectQueueByPlateID ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetOtherInspectQueueByPlateID(struct soap*, const char*, _ns1__GetOtherInspectQueueByPlateID **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetOtherInspectQueueByPlateID(struct soap*, _ns1__GetOtherInspectQueueByPlateID *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetOtherInspectQueueByPlateID
#define soap_write_PointerTo_ns1__GetOtherInspectQueueByPlateID(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetOtherInspectQueueByPlateID(soap, data),0) || soap_put_PointerTo_ns1__GetOtherInspectQueueByPlateID(soap, data, "ns1:GetOtherInspectQueueByPlateID", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetOtherInspectQueueByPlateID ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetOtherInspectQueueByPlateID(struct soap*, _ns1__GetOtherInspectQueueByPlateID **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetOtherInspectQueueByPlateID
#define soap_read_PointerTo_ns1__GetOtherInspectQueueByPlateID(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetOtherInspectQueueByPlateID(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetInspectParams
#define SOAP_TYPE_PointerTo_ns1__GetInspectParams (144)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetInspectParams(struct soap*, _ns1__GetInspectParams *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetInspectParams(struct soap*, const char *, int, _ns1__GetInspectParams *const*, const char *);
SOAP_FMAC3 _ns1__GetInspectParams ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetInspectParams(struct soap*, const char*, _ns1__GetInspectParams **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetInspectParams(struct soap*, _ns1__GetInspectParams *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetInspectParams
#define soap_write_PointerTo_ns1__GetInspectParams(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetInspectParams(soap, data),0) || soap_put_PointerTo_ns1__GetInspectParams(soap, data, "ns1:GetInspectParams", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetInspectParams ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetInspectParams(struct soap*, _ns1__GetInspectParams **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetInspectParams
#define soap_read_PointerTo_ns1__GetInspectParams(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetInspectParams(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__FuelEvaporationInspect
#define SOAP_TYPE_PointerTo_ns1__FuelEvaporationInspect (140)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__FuelEvaporationInspect(struct soap*, _ns1__FuelEvaporationInspect *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__FuelEvaporationInspect(struct soap*, const char *, int, _ns1__FuelEvaporationInspect *const*, const char *);
SOAP_FMAC3 _ns1__FuelEvaporationInspect ** SOAP_FMAC4 soap_in_PointerTo_ns1__FuelEvaporationInspect(struct soap*, const char*, _ns1__FuelEvaporationInspect **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__FuelEvaporationInspect(struct soap*, _ns1__FuelEvaporationInspect *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__FuelEvaporationInspect
#define soap_write_PointerTo_ns1__FuelEvaporationInspect(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__FuelEvaporationInspect(soap, data),0) || soap_put_PointerTo_ns1__FuelEvaporationInspect(soap, data, "ns1:FuelEvaporationInspect", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__FuelEvaporationInspect ** SOAP_FMAC4 soap_get_PointerTo_ns1__FuelEvaporationInspect(struct soap*, _ns1__FuelEvaporationInspect **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__FuelEvaporationInspect
#define soap_read_PointerTo_ns1__FuelEvaporationInspect(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__FuelEvaporationInspect(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__TestPhoto
#define SOAP_TYPE_PointerTo_ns1__TestPhoto (136)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__TestPhoto(struct soap*, _ns1__TestPhoto *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__TestPhoto(struct soap*, const char *, int, _ns1__TestPhoto *const*, const char *);
SOAP_FMAC3 _ns1__TestPhoto ** SOAP_FMAC4 soap_in_PointerTo_ns1__TestPhoto(struct soap*, const char*, _ns1__TestPhoto **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__TestPhoto(struct soap*, _ns1__TestPhoto *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__TestPhoto
#define soap_write_PointerTo_ns1__TestPhoto(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__TestPhoto(soap, data),0) || soap_put_PointerTo_ns1__TestPhoto(soap, data, "ns1:TestPhoto", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__TestPhoto ** SOAP_FMAC4 soap_get_PointerTo_ns1__TestPhoto(struct soap*, _ns1__TestPhoto **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__TestPhoto
#define soap_read_PointerTo_ns1__TestPhoto(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__TestPhoto(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__EndCalibrate
#define SOAP_TYPE_PointerTo_ns1__EndCalibrate (132)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__EndCalibrate(struct soap*, _ns1__EndCalibrate *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__EndCalibrate(struct soap*, const char *, int, _ns1__EndCalibrate *const*, const char *);
SOAP_FMAC3 _ns1__EndCalibrate ** SOAP_FMAC4 soap_in_PointerTo_ns1__EndCalibrate(struct soap*, const char*, _ns1__EndCalibrate **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__EndCalibrate(struct soap*, _ns1__EndCalibrate *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__EndCalibrate
#define soap_write_PointerTo_ns1__EndCalibrate(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__EndCalibrate(soap, data),0) || soap_put_PointerTo_ns1__EndCalibrate(soap, data, "ns1:EndCalibrate", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__EndCalibrate ** SOAP_FMAC4 soap_get_PointerTo_ns1__EndCalibrate(struct soap*, _ns1__EndCalibrate **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__EndCalibrate
#define soap_read_PointerTo_ns1__EndCalibrate(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__EndCalibrate(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__UploadCalibrateData
#define SOAP_TYPE_PointerTo_ns1__UploadCalibrateData (128)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__UploadCalibrateData(struct soap*, _ns1__UploadCalibrateData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__UploadCalibrateData(struct soap*, const char *, int, _ns1__UploadCalibrateData *const*, const char *);
SOAP_FMAC3 _ns1__UploadCalibrateData ** SOAP_FMAC4 soap_in_PointerTo_ns1__UploadCalibrateData(struct soap*, const char*, _ns1__UploadCalibrateData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__UploadCalibrateData(struct soap*, _ns1__UploadCalibrateData *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__UploadCalibrateData
#define soap_write_PointerTo_ns1__UploadCalibrateData(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__UploadCalibrateData(soap, data),0) || soap_put_PointerTo_ns1__UploadCalibrateData(soap, data, "ns1:UploadCalibrateData", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__UploadCalibrateData ** SOAP_FMAC4 soap_get_PointerTo_ns1__UploadCalibrateData(struct soap*, _ns1__UploadCalibrateData **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__UploadCalibrateData
#define soap_read_PointerTo_ns1__UploadCalibrateData(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__UploadCalibrateData(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__BeginCalibrate
#define SOAP_TYPE_PointerTo_ns1__BeginCalibrate (124)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__BeginCalibrate(struct soap*, _ns1__BeginCalibrate *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__BeginCalibrate(struct soap*, const char *, int, _ns1__BeginCalibrate *const*, const char *);
SOAP_FMAC3 _ns1__BeginCalibrate ** SOAP_FMAC4 soap_in_PointerTo_ns1__BeginCalibrate(struct soap*, const char*, _ns1__BeginCalibrate **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__BeginCalibrate(struct soap*, _ns1__BeginCalibrate *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__BeginCalibrate
#define soap_write_PointerTo_ns1__BeginCalibrate(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__BeginCalibrate(soap, data),0) || soap_put_PointerTo_ns1__BeginCalibrate(soap, data, "ns1:BeginCalibrate", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__BeginCalibrate ** SOAP_FMAC4 soap_get_PointerTo_ns1__BeginCalibrate(struct soap*, _ns1__BeginCalibrate **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__BeginCalibrate
#define soap_read_PointerTo_ns1__BeginCalibrate(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__BeginCalibrate(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetInspectionInfo
#define SOAP_TYPE_PointerTo_ns1__GetInspectionInfo (120)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetInspectionInfo(struct soap*, _ns1__GetInspectionInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetInspectionInfo(struct soap*, const char *, int, _ns1__GetInspectionInfo *const*, const char *);
SOAP_FMAC3 _ns1__GetInspectionInfo ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetInspectionInfo(struct soap*, const char*, _ns1__GetInspectionInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetInspectionInfo(struct soap*, _ns1__GetInspectionInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetInspectionInfo
#define soap_write_PointerTo_ns1__GetInspectionInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetInspectionInfo(soap, data),0) || soap_put_PointerTo_ns1__GetInspectionInfo(soap, data, "ns1:GetInspectionInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetInspectionInfo ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetInspectionInfo(struct soap*, _ns1__GetInspectionInfo **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetInspectionInfo
#define soap_read_PointerTo_ns1__GetInspectionInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetInspectionInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__UploadRealtimeData
#define SOAP_TYPE_PointerTo_ns1__UploadRealtimeData (116)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__UploadRealtimeData(struct soap*, _ns1__UploadRealtimeData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__UploadRealtimeData(struct soap*, const char *, int, _ns1__UploadRealtimeData *const*, const char *);
SOAP_FMAC3 _ns1__UploadRealtimeData ** SOAP_FMAC4 soap_in_PointerTo_ns1__UploadRealtimeData(struct soap*, const char*, _ns1__UploadRealtimeData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__UploadRealtimeData(struct soap*, _ns1__UploadRealtimeData *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__UploadRealtimeData
#define soap_write_PointerTo_ns1__UploadRealtimeData(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__UploadRealtimeData(soap, data),0) || soap_put_PointerTo_ns1__UploadRealtimeData(soap, data, "ns1:UploadRealtimeData", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__UploadRealtimeData ** SOAP_FMAC4 soap_get_PointerTo_ns1__UploadRealtimeData(struct soap*, _ns1__UploadRealtimeData **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__UploadRealtimeData
#define soap_read_PointerTo_ns1__UploadRealtimeData(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__UploadRealtimeData(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__UploadSelfTestData
#define SOAP_TYPE_PointerTo_ns1__UploadSelfTestData (112)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__UploadSelfTestData(struct soap*, _ns1__UploadSelfTestData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__UploadSelfTestData(struct soap*, const char *, int, _ns1__UploadSelfTestData *const*, const char *);
SOAP_FMAC3 _ns1__UploadSelfTestData ** SOAP_FMAC4 soap_in_PointerTo_ns1__UploadSelfTestData(struct soap*, const char*, _ns1__UploadSelfTestData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__UploadSelfTestData(struct soap*, _ns1__UploadSelfTestData *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__UploadSelfTestData
#define soap_write_PointerTo_ns1__UploadSelfTestData(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__UploadSelfTestData(soap, data),0) || soap_put_PointerTo_ns1__UploadSelfTestData(soap, data, "ns1:UploadSelfTestData", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__UploadSelfTestData ** SOAP_FMAC4 soap_get_PointerTo_ns1__UploadSelfTestData(struct soap*, _ns1__UploadSelfTestData **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__UploadSelfTestData
#define soap_read_PointerTo_ns1__UploadSelfTestData(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__UploadSelfTestData(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__EndInspect
#define SOAP_TYPE_PointerTo_ns1__EndInspect (108)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__EndInspect(struct soap*, _ns1__EndInspect *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__EndInspect(struct soap*, const char *, int, _ns1__EndInspect *const*, const char *);
SOAP_FMAC3 _ns1__EndInspect ** SOAP_FMAC4 soap_in_PointerTo_ns1__EndInspect(struct soap*, const char*, _ns1__EndInspect **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__EndInspect(struct soap*, _ns1__EndInspect *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__EndInspect
#define soap_write_PointerTo_ns1__EndInspect(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__EndInspect(soap, data),0) || soap_put_PointerTo_ns1__EndInspect(soap, data, "ns1:EndInspect", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__EndInspect ** SOAP_FMAC4 soap_get_PointerTo_ns1__EndInspect(struct soap*, _ns1__EndInspect **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__EndInspect
#define soap_read_PointerTo_ns1__EndInspect(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__EndInspect(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__StopInspect
#define SOAP_TYPE_PointerTo_ns1__StopInspect (104)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__StopInspect(struct soap*, _ns1__StopInspect *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__StopInspect(struct soap*, const char *, int, _ns1__StopInspect *const*, const char *);
SOAP_FMAC3 _ns1__StopInspect ** SOAP_FMAC4 soap_in_PointerTo_ns1__StopInspect(struct soap*, const char*, _ns1__StopInspect **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__StopInspect(struct soap*, _ns1__StopInspect *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__StopInspect
#define soap_write_PointerTo_ns1__StopInspect(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__StopInspect(soap, data),0) || soap_put_PointerTo_ns1__StopInspect(soap, data, "ns1:StopInspect", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__StopInspect ** SOAP_FMAC4 soap_get_PointerTo_ns1__StopInspect(struct soap*, _ns1__StopInspect **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__StopInspect
#define soap_read_PointerTo_ns1__StopInspect(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__StopInspect(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__WJTakePhoto
#define SOAP_TYPE_PointerTo_ns1__WJTakePhoto (100)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__WJTakePhoto(struct soap*, _ns1__WJTakePhoto *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__WJTakePhoto(struct soap*, const char *, int, _ns1__WJTakePhoto *const*, const char *);
SOAP_FMAC3 _ns1__WJTakePhoto ** SOAP_FMAC4 soap_in_PointerTo_ns1__WJTakePhoto(struct soap*, const char*, _ns1__WJTakePhoto **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__WJTakePhoto(struct soap*, _ns1__WJTakePhoto *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__WJTakePhoto
#define soap_write_PointerTo_ns1__WJTakePhoto(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__WJTakePhoto(soap, data),0) || soap_put_PointerTo_ns1__WJTakePhoto(soap, data, "ns1:WJTakePhoto", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__WJTakePhoto ** SOAP_FMAC4 soap_get_PointerTo_ns1__WJTakePhoto(struct soap*, _ns1__WJTakePhoto **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__WJTakePhoto
#define soap_read_PointerTo_ns1__WJTakePhoto(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__WJTakePhoto(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__TakePhoto
#define SOAP_TYPE_PointerTo_ns1__TakePhoto (96)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__TakePhoto(struct soap*, _ns1__TakePhoto *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__TakePhoto(struct soap*, const char *, int, _ns1__TakePhoto *const*, const char *);
SOAP_FMAC3 _ns1__TakePhoto ** SOAP_FMAC4 soap_in_PointerTo_ns1__TakePhoto(struct soap*, const char*, _ns1__TakePhoto **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__TakePhoto(struct soap*, _ns1__TakePhoto *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__TakePhoto
#define soap_write_PointerTo_ns1__TakePhoto(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__TakePhoto(soap, data),0) || soap_put_PointerTo_ns1__TakePhoto(soap, data, "ns1:TakePhoto", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__TakePhoto ** SOAP_FMAC4 soap_get_PointerTo_ns1__TakePhoto(struct soap*, _ns1__TakePhoto **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__TakePhoto
#define soap_read_PointerTo_ns1__TakePhoto(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__TakePhoto(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetLimit
#define SOAP_TYPE_PointerTo_ns1__GetLimit (92)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetLimit(struct soap*, _ns1__GetLimit *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetLimit(struct soap*, const char *, int, _ns1__GetLimit *const*, const char *);
SOAP_FMAC3 _ns1__GetLimit ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetLimit(struct soap*, const char*, _ns1__GetLimit **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetLimit(struct soap*, _ns1__GetLimit *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetLimit
#define soap_write_PointerTo_ns1__GetLimit(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetLimit(soap, data),0) || soap_put_PointerTo_ns1__GetLimit(soap, data, "ns1:GetLimit", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetLimit ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetLimit(struct soap*, _ns1__GetLimit **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetLimit
#define soap_read_PointerTo_ns1__GetLimit(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetLimit(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__BeginInspect
#define SOAP_TYPE_PointerTo_ns1__BeginInspect (88)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__BeginInspect(struct soap*, _ns1__BeginInspect *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__BeginInspect(struct soap*, const char *, int, _ns1__BeginInspect *const*, const char *);
SOAP_FMAC3 _ns1__BeginInspect ** SOAP_FMAC4 soap_in_PointerTo_ns1__BeginInspect(struct soap*, const char*, _ns1__BeginInspect **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__BeginInspect(struct soap*, _ns1__BeginInspect *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__BeginInspect
#define soap_write_PointerTo_ns1__BeginInspect(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__BeginInspect(soap, data),0) || soap_put_PointerTo_ns1__BeginInspect(soap, data, "ns1:BeginInspect", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__BeginInspect ** SOAP_FMAC4 soap_get_PointerTo_ns1__BeginInspect(struct soap*, _ns1__BeginInspect **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__BeginInspect
#define soap_read_PointerTo_ns1__BeginInspect(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__BeginInspect(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__EndRecord
#define SOAP_TYPE_PointerTo_ns1__EndRecord (84)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__EndRecord(struct soap*, _ns1__EndRecord *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__EndRecord(struct soap*, const char *, int, _ns1__EndRecord *const*, const char *);
SOAP_FMAC3 _ns1__EndRecord ** SOAP_FMAC4 soap_in_PointerTo_ns1__EndRecord(struct soap*, const char*, _ns1__EndRecord **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__EndRecord(struct soap*, _ns1__EndRecord *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__EndRecord
#define soap_write_PointerTo_ns1__EndRecord(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__EndRecord(soap, data),0) || soap_put_PointerTo_ns1__EndRecord(soap, data, "ns1:EndRecord", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__EndRecord ** SOAP_FMAC4 soap_get_PointerTo_ns1__EndRecord(struct soap*, _ns1__EndRecord **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__EndRecord
#define soap_read_PointerTo_ns1__EndRecord(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__EndRecord(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__BeginRecord
#define SOAP_TYPE_PointerTo_ns1__BeginRecord (80)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__BeginRecord(struct soap*, _ns1__BeginRecord *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__BeginRecord(struct soap*, const char *, int, _ns1__BeginRecord *const*, const char *);
SOAP_FMAC3 _ns1__BeginRecord ** SOAP_FMAC4 soap_in_PointerTo_ns1__BeginRecord(struct soap*, const char*, _ns1__BeginRecord **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__BeginRecord(struct soap*, _ns1__BeginRecord *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__BeginRecord
#define soap_write_PointerTo_ns1__BeginRecord(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__BeginRecord(soap, data),0) || soap_put_PointerTo_ns1__BeginRecord(soap, data, "ns1:BeginRecord", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__BeginRecord ** SOAP_FMAC4 soap_get_PointerTo_ns1__BeginRecord(struct soap*, _ns1__BeginRecord **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__BeginRecord
#define soap_read_PointerTo_ns1__BeginRecord(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__BeginRecord(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__AbortInspect
#define SOAP_TYPE_PointerTo_ns1__AbortInspect (76)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AbortInspect(struct soap*, _ns1__AbortInspect *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AbortInspect(struct soap*, const char *, int, _ns1__AbortInspect *const*, const char *);
SOAP_FMAC3 _ns1__AbortInspect ** SOAP_FMAC4 soap_in_PointerTo_ns1__AbortInspect(struct soap*, const char*, _ns1__AbortInspect **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AbortInspect(struct soap*, _ns1__AbortInspect *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__AbortInspect
#define soap_write_PointerTo_ns1__AbortInspect(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__AbortInspect(soap, data),0) || soap_put_PointerTo_ns1__AbortInspect(soap, data, "ns1:AbortInspect", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__AbortInspect ** SOAP_FMAC4 soap_get_PointerTo_ns1__AbortInspect(struct soap*, _ns1__AbortInspect **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__AbortInspect
#define soap_read_PointerTo_ns1__AbortInspect(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__AbortInspect(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetInspectQueueByPlateID
#define SOAP_TYPE_PointerTo_ns1__GetInspectQueueByPlateID (72)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetInspectQueueByPlateID(struct soap*, _ns1__GetInspectQueueByPlateID *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetInspectQueueByPlateID(struct soap*, const char *, int, _ns1__GetInspectQueueByPlateID *const*, const char *);
SOAP_FMAC3 _ns1__GetInspectQueueByPlateID ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetInspectQueueByPlateID(struct soap*, const char*, _ns1__GetInspectQueueByPlateID **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetInspectQueueByPlateID(struct soap*, _ns1__GetInspectQueueByPlateID *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetInspectQueueByPlateID
#define soap_write_PointerTo_ns1__GetInspectQueueByPlateID(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetInspectQueueByPlateID(soap, data),0) || soap_put_PointerTo_ns1__GetInspectQueueByPlateID(soap, data, "ns1:GetInspectQueueByPlateID", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetInspectQueueByPlateID ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetInspectQueueByPlateID(struct soap*, _ns1__GetInspectQueueByPlateID **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetInspectQueueByPlateID
#define soap_read_PointerTo_ns1__GetInspectQueueByPlateID(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetInspectQueueByPlateID(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__GetInspectQueueByDate
#define SOAP_TYPE_PointerTo_ns1__GetInspectQueueByDate (68)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetInspectQueueByDate(struct soap*, _ns1__GetInspectQueueByDate *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetInspectQueueByDate(struct soap*, const char *, int, _ns1__GetInspectQueueByDate *const*, const char *);
SOAP_FMAC3 _ns1__GetInspectQueueByDate ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetInspectQueueByDate(struct soap*, const char*, _ns1__GetInspectQueueByDate **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetInspectQueueByDate(struct soap*, _ns1__GetInspectQueueByDate *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetInspectQueueByDate
#define soap_write_PointerTo_ns1__GetInspectQueueByDate(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__GetInspectQueueByDate(soap, data),0) || soap_put_PointerTo_ns1__GetInspectQueueByDate(soap, data, "ns1:GetInspectQueueByDate", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetInspectQueueByDate ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetInspectQueueByDate(struct soap*, _ns1__GetInspectQueueByDate **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetInspectQueueByDate
#define soap_read_PointerTo_ns1__GetInspectQueueByDate(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__GetInspectQueueByDate(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__Sync
#define SOAP_TYPE_PointerTo_ns1__Sync (64)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Sync(struct soap*, _ns1__Sync *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Sync(struct soap*, const char *, int, _ns1__Sync *const*, const char *);
SOAP_FMAC3 _ns1__Sync ** SOAP_FMAC4 soap_in_PointerTo_ns1__Sync(struct soap*, const char*, _ns1__Sync **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Sync(struct soap*, _ns1__Sync *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__Sync
#define soap_write_PointerTo_ns1__Sync(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_ns1__Sync(soap, data),0) || soap_put_PointerTo_ns1__Sync(soap, data, "ns1:Sync", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__Sync ** SOAP_FMAC4 soap_get_PointerTo_ns1__Sync(struct soap*, _ns1__Sync **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__Sync
#define soap_read_PointerTo_ns1__Sync(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__Sync(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__RetValue
#define SOAP_TYPE_PointerTons1__RetValue (62)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__RetValue(struct soap*, ns1__RetValue *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__RetValue(struct soap*, const char *, int, ns1__RetValue *const*, const char *);
SOAP_FMAC3 ns1__RetValue ** SOAP_FMAC4 soap_in_PointerTons1__RetValue(struct soap*, const char*, ns1__RetValue **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__RetValue(struct soap*, ns1__RetValue *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__RetValue
#define soap_write_PointerTons1__RetValue(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons1__RetValue(soap, data),0) || soap_put_PointerTons1__RetValue(soap, data, "ns1:RetValue", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__RetValue ** SOAP_FMAC4 soap_get_PointerTons1__RetValue(struct soap*, ns1__RetValue **, const char*, const char*);

#ifndef soap_read_PointerTons1__RetValue
#define soap_read_PointerTons1__RetValue(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__RetValue(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__wstring
#define SOAP_TYPE_PointerTostd__wstring (60)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__wstring(struct soap*, std::wstring *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__wstring(struct soap*, const char *, int, std::wstring *const*, const char *);
SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_in_PointerTostd__wstring(struct soap*, const char*, std::wstring **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__wstring(struct soap*, std::wstring *const*, const char*, const char*);

#ifndef soap_write_PointerTostd__wstring
#define soap_write_PointerTostd__wstring(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__wstring(soap, data),0) || soap_put_PointerTostd__wstring(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_get_PointerTostd__wstring(struct soap*, std::wstring **, const char*, const char*);

#ifndef soap_read_PointerTostd__wstring
#define soap_read_PointerTostd__wstring(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__wstring(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__QName(soap, data),0) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_string(soap, data),0) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

/* End of soapH.h */
