/* service[1].h
   Generated by wsdl2h 2.8.21 from service[1].wsdl and typemap.dat
   2019-11-16 05:45:28 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2000-2014 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on service[1].h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 -j to generate improved proxy and server classes.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following licenses:
GPL or Genivia's license for commercial use.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://www.gc8848.com/                                                   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to remove STL dependency)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://www.gc8848.com/"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://www.gc8848.com/"
//gsoap ns1   schema namespace:	http://www.gc8848.com/
//gsoap ns1   schema elementForm:	qualified
//gsoap ns1   schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


//  Forward declaration of class ns1__RetValue.
class ns1__RetValue;

//  Forward declaration of class _ns1__Sync.
class _ns1__Sync;

//  Forward declaration of class _ns1__SyncResponse.
class _ns1__SyncResponse;

//  Forward declaration of class _ns1__GetInspectQueueByDate.
class _ns1__GetInspectQueueByDate;

//  Forward declaration of class _ns1__GetInspectQueueByDateResponse.
class _ns1__GetInspectQueueByDateResponse;

//  Forward declaration of class _ns1__GetInspectQueueByPlateID.
class _ns1__GetInspectQueueByPlateID;

//  Forward declaration of class _ns1__GetInspectQueueByPlateIDResponse.
class _ns1__GetInspectQueueByPlateIDResponse;

//  Forward declaration of class _ns1__AbortInspect.
class _ns1__AbortInspect;

//  Forward declaration of class _ns1__AbortInspectResponse.
class _ns1__AbortInspectResponse;

//  Forward declaration of class _ns1__BeginRecord.
class _ns1__BeginRecord;

//  Forward declaration of class _ns1__BeginRecordResponse.
class _ns1__BeginRecordResponse;

//  Forward declaration of class _ns1__EndRecord.
class _ns1__EndRecord;

//  Forward declaration of class _ns1__EndRecordResponse.
class _ns1__EndRecordResponse;

//  Forward declaration of class _ns1__BeginInspect.
class _ns1__BeginInspect;

//  Forward declaration of class _ns1__BeginInspectResponse.
class _ns1__BeginInspectResponse;

//  Forward declaration of class _ns1__GetLimit.
class _ns1__GetLimit;

//  Forward declaration of class _ns1__GetLimitResponse.
class _ns1__GetLimitResponse;

//  Forward declaration of class _ns1__TakePhoto.
class _ns1__TakePhoto;

//  Forward declaration of class _ns1__TakePhotoResponse.
class _ns1__TakePhotoResponse;

//  Forward declaration of class _ns1__WJTakePhoto.
class _ns1__WJTakePhoto;

//  Forward declaration of class _ns1__WJTakePhotoResponse.
class _ns1__WJTakePhotoResponse;

//  Forward declaration of class _ns1__StopInspect.
class _ns1__StopInspect;

//  Forward declaration of class _ns1__StopInspectResponse.
class _ns1__StopInspectResponse;

//  Forward declaration of class _ns1__EndInspect.
class _ns1__EndInspect;

//  Forward declaration of class _ns1__EndInspectResponse.
class _ns1__EndInspectResponse;

//  Forward declaration of class _ns1__UploadSelfTestData.
class _ns1__UploadSelfTestData;

//  Forward declaration of class _ns1__UploadSelfTestDataResponse.
class _ns1__UploadSelfTestDataResponse;

//  Forward declaration of class _ns1__UploadRealtimeData.
class _ns1__UploadRealtimeData;

//  Forward declaration of class _ns1__UploadRealtimeDataResponse.
class _ns1__UploadRealtimeDataResponse;

//  Forward declaration of class _ns1__GetInspectionInfo.
class _ns1__GetInspectionInfo;

//  Forward declaration of class _ns1__GetInspectionInfoResponse.
class _ns1__GetInspectionInfoResponse;

//  Forward declaration of class _ns1__BeginCalibrate.
class _ns1__BeginCalibrate;

//  Forward declaration of class _ns1__BeginCalibrateResponse.
class _ns1__BeginCalibrateResponse;

//  Forward declaration of class _ns1__UploadCalibrateData.
class _ns1__UploadCalibrateData;

//  Forward declaration of class _ns1__UploadCalibrateDataResponse.
class _ns1__UploadCalibrateDataResponse;

//  Forward declaration of class _ns1__EndCalibrate.
class _ns1__EndCalibrate;

//  Forward declaration of class _ns1__EndCalibrateResponse.
class _ns1__EndCalibrateResponse;

//  Forward declaration of class _ns1__TestPhoto.
class _ns1__TestPhoto;

//  Forward declaration of class _ns1__TestPhotoResponse.
class _ns1__TestPhotoResponse;

//  Forward declaration of class _ns1__FuelEvaporationInspect.
class _ns1__FuelEvaporationInspect;

//  Forward declaration of class _ns1__FuelEvaporationInspectResponse.
class _ns1__FuelEvaporationInspectResponse;

//  Forward declaration of class _ns1__GetInspectParams.
class _ns1__GetInspectParams;

//  Forward declaration of class _ns1__GetInspectParamsResponse.
class _ns1__GetInspectParamsResponse;

//  Forward declaration of class _ns1__GetOtherInspectQueueByPlateID.
class _ns1__GetOtherInspectQueueByPlateID;

//  Forward declaration of class _ns1__GetOtherInspectQueueByPlateIDResponse.
class _ns1__GetOtherInspectQueueByPlateIDResponse;

//  Forward declaration of class _ns1__GetOtherInspectQueueByDate.
class _ns1__GetOtherInspectQueueByDate;

//  Forward declaration of class _ns1__GetOtherInspectQueueByDateResponse.
class _ns1__GetOtherInspectQueueByDateResponse;

//  Forward declaration of class _ns1__OBDInspect.
class _ns1__OBDInspect;

//  Forward declaration of class _ns1__OBDInspectResponse.
class _ns1__OBDInspectResponse;

//  Forward declaration of class _ns1__OBDTXCheck.
class _ns1__OBDTXCheck;

//  Forward declaration of class _ns1__OBDTXCheckResponse.
class _ns1__OBDTXCheckResponse;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://www.gc8848.com/                                                   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://www.gc8848.com/                                                   *
 *                                                                            *
\******************************************************************************/

/// @brief "http://www.gc8848.com/":RetValue is a complexType.
///
/// class ns1__RetValue operations:
/// - soap_new_ns1__RetValue(soap*) allocate
/// - soap_new_ns1__RetValue(soap*, int num) allocate array
/// - soap_new_req_ns1__RetValue(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__RetValue(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__RetValue(soap*, ns1__RetValue*) deserialize from a stream
/// - int soap_write_ns1__RetValue(soap, ns1__RetValue*) serialize to a stream
class ns1__RetValue
{ public:
/// Element "ErrNum" of XSD type xs:int.
    int                                  ErrNum                         1;	///< Required element.
/// Element "ErrMsg" of XSD type xs:string.
    std::wstring*                        ErrMsg                         0;	///< Optional element.
/// Element "InternalErrNum" of XSD type xs:int.
    int                                  InternalErrNum                 1;	///< Required element.
/// Element "InternalErrMsg" of XSD type xs:string.
    std::wstring*                        InternalErrMsg                 0;	///< Optional element.
/// Element "Value" of XSD type xs:string.
    std::wstring*                        Value                          0;	///< Optional element.
/// Element "TipMessage" of XSD type xs:string.
    std::wstring*                        TipMessage                     0;	///< Optional element.
/// Element "Memo" of XSD type xs:string.
    std::wstring*                        Memo                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.gc8848.com/":Sync
/// @brief "http://www.gc8848.com/":Sync is a complexType.
///
/// class _ns1__Sync operations:
/// - soap_new__ns1__Sync(soap*) allocate
/// - soap_new__ns1__Sync(soap*, int num) allocate array
/// - soap_new_req__ns1__Sync(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__Sync(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__Sync(soap*, _ns1__Sync*) deserialize from a stream
/// - int soap_write__ns1__Sync(soap, _ns1__Sync*) serialize to a stream
class _ns1__Sync
{ public:
/// Element "Memo" of XSD type xs:string.
    std::wstring*                        Memo                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.gc8848.com/":SyncResponse
/// @brief "http://www.gc8848.com/":SyncResponse is a complexType.
///
/// class _ns1__SyncResponse operations:
/// - soap_new__ns1__SyncResponse(soap*) allocate
/// - soap_new__ns1__SyncResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__SyncResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__SyncResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__SyncResponse(soap*, _ns1__SyncResponse*) deserialize from a stream
/// - int soap_write__ns1__SyncResponse(soap, _ns1__SyncResponse*) serialize to a stream
class _ns1__SyncResponse
{ public:
/// Element "SyncResult" of XSD type "http://www.gc8848.com/":RetValue.
    ns1__RetValue*                       SyncResult                     1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.gc8848.com/":GetInspectQueueByDate
/// @brief "http://www.gc8848.com/":GetInspectQueueByDate is a complexType.
///
/// class _ns1__GetInspectQueueByDate operations:
/// - soap_new__ns1__GetInspectQueueByDate(soap*) allocate
/// - soap_new__ns1__GetInspectQueueByDate(soap*, int num) allocate array
/// - soap_new_req__ns1__GetInspectQueueByDate(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__GetInspectQueueByDate(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__GetInspectQueueByDate(soap*, _ns1__GetInspectQueueByDate*) deserialize from a stream
/// - int soap_write__ns1__GetInspectQueueByDate(soap, _ns1__GetInspectQueueByDate*) serialize to a stream
class _ns1__GetInspectQueueByDate
{ public:
/// Element "FromDate" of XSD type xs:string.
    std::wstring*                        FromDate                       0;	///< Optional element.
/// Element "ToDate" of XSD type xs:string.
    std::wstring*                        ToDate                         0;	///< Optional element.
/// Element "Memo" of XSD type xs:string.
    std::wstring*                        Memo                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.gc8848.com/":GetInspectQueueByDateResponse
/// @brief "http://www.gc8848.com/":GetInspectQueueByDateResponse is a complexType.
///
/// class _ns1__GetInspectQueueByDateResponse operations:
/// - soap_new__ns1__GetInspectQueueByDateResponse(soap*) allocate
/// - soap_new__ns1__GetInspectQueueByDateResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__GetInspectQueueByDateResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__GetInspectQueueByDateResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__GetInspectQueueByDateResponse(soap*, _ns1__GetInspectQueueByDateResponse*) deserialize from a stream
/// - int soap_write__ns1__GetInspectQueueByDateResponse(soap, _ns1__GetInspectQueueByDateResponse*) serialize to a stream
class _ns1__GetInspectQueueByDateResponse
{ public:
/// Element "GetInspectQueueByDateResult" of XSD type "http://www.gc8848.com/":RetValue.
    ns1__RetValue*                       GetInspectQueueByDateResult    1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.gc8848.com/":GetInspectQueueByPlateID
/// @brief "http://www.gc8848.com/":GetInspectQueueByPlateID is a complexType.
///
/// class _ns1__GetInspectQueueByPlateID operations:
/// - soap_new__ns1__GetInspectQueueByPlateID(soap*) allocate
/// - soap_new__ns1__GetInspectQueueByPlateID(soap*, int num) allocate array
/// - soap_new_req__ns1__GetInspectQueueByPlateID(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__GetInspectQueueByPlateID(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__GetInspectQueueByPlateID(soap*, _ns1__GetInspectQueueByPlateID*) deserialize from a stream
/// - int soap_write__ns1__GetInspectQueueByPlateID(soap, _ns1__GetInspectQueueByPlateID*) serialize to a stream
class _ns1__GetInspectQueueByPlateID
{ public:
/// Element "PlateID" of XSD type xs:string.
    std::wstring*                        PlateID                        0;	///< Optional element.
/// Element "PlateType" of XSD type xs:int.
    int                                  PlateType                      1;	///< Required element.
/// Element "Memo" of XSD type xs:string.
    std::wstring*                        Memo                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.gc8848.com/":GetInspectQueueByPlateIDResponse
/// @brief "http://www.gc8848.com/":GetInspectQueueByPlateIDResponse is a complexType.
///
/// class _ns1__GetInspectQueueByPlateIDResponse operations:
/// - soap_new__ns1__GetInspectQueueByPlateIDResponse(soap*) allocate
/// - soap_new__ns1__GetInspectQueueByPlateIDResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__GetInspectQueueByPlateIDResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__GetInspectQueueByPlateIDResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__GetInspectQueueByPlateIDResponse(soap*, _ns1__GetInspectQueueByPlateIDResponse*) deserialize from a stream
/// - int soap_write__ns1__GetInspectQueueByPlateIDResponse(soap, _ns1__GetInspectQueueByPlateIDResponse*) serialize to a stream
class _ns1__GetInspectQueueByPlateIDResponse
{ public:
/// Element "GetInspectQueueByPlateIDResult" of XSD type "http://www.gc8848.com/":RetValue.
    ns1__RetValue*                       GetInspectQueueByPlateIDResult 1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.gc8848.com/":AbortInspect
/// @brief "http://www.gc8848.com/":AbortInspect is a complexType.
///
/// class _ns1__AbortInspect operations:
/// - soap_new__ns1__AbortInspect(soap*) allocate
/// - soap_new__ns1__AbortInspect(soap*, int num) allocate array
/// - soap_new_req__ns1__AbortInspect(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__AbortInspect(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__AbortInspect(soap*, _ns1__AbortInspect*) deserialize from a stream
/// - int soap_write__ns1__AbortInspect(soap, _ns1__AbortInspect*) serialize to a stream
class _ns1__AbortInspect
{ public:
/// Element "InspectID" of XSD type xs:string.
    std::wstring*                        InspectID                      0;	///< Optional element.
/// Element "Reason" of XSD type xs:int.
    int                                  Reason                         1;	///< Required element.
/// Element "Memo" of XSD type xs:string.
    std::wstring*                        Memo                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.gc8848.com/":AbortInspectResponse
/// @brief "http://www.gc8848.com/":AbortInspectResponse is a complexType.
///
/// class _ns1__AbortInspectResponse operations:
/// - soap_new__ns1__AbortInspectResponse(soap*) allocate
/// - soap_new__ns1__AbortInspectResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__AbortInspectResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__AbortInspectResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__AbortInspectResponse(soap*, _ns1__AbortInspectResponse*) deserialize from a stream
/// - int soap_write__ns1__AbortInspectResponse(soap, _ns1__AbortInspectResponse*) serialize to a stream
class _ns1__AbortInspectResponse
{ public:
/// Element "AbortInspectResult" of XSD type "http://www.gc8848.com/":RetValue.
    ns1__RetValue*                       AbortInspectResult             1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.gc8848.com/":BeginRecord
/// @brief "http://www.gc8848.com/":BeginRecord is a complexType.
///
/// class _ns1__BeginRecord operations:
/// - soap_new__ns1__BeginRecord(soap*) allocate
/// - soap_new__ns1__BeginRecord(soap*, int num) allocate array
/// - soap_new_req__ns1__BeginRecord(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__BeginRecord(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__BeginRecord(soap*, _ns1__BeginRecord*) deserialize from a stream
/// - int soap_write__ns1__BeginRecord(soap, _ns1__BeginRecord*) serialize to a stream
class _ns1__BeginRecord
{ public:
/// Element "LineID" of XSD type xs:long.
    LONG64                               LineID                         1;	///< Required element.
/// Element "InspectID" of XSD type xs:string.
    std::wstring*                        InspectID                      0;	///< Optional element.
/// Element "Memo" of XSD type xs:string.
    std::wstring*                        Memo                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.gc8848.com/":BeginRecordResponse
/// @brief "http://www.gc8848.com/":BeginRecordResponse is a complexType.
///
/// class _ns1__BeginRecordResponse operations:
/// - soap_new__ns1__BeginRecordResponse(soap*) allocate
/// - soap_new__ns1__BeginRecordResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__BeginRecordResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__BeginRecordResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__BeginRecordResponse(soap*, _ns1__BeginRecordResponse*) deserialize from a stream
/// - int soap_write__ns1__BeginRecordResponse(soap, _ns1__BeginRecordResponse*) serialize to a stream
class _ns1__BeginRecordResponse
{ public:
/// Element "BeginRecordResult" of XSD type "http://www.gc8848.com/":RetValue.
    ns1__RetValue*                       BeginRecordResult              1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.gc8848.com/":EndRecord
/// @brief "http://www.gc8848.com/":EndRecord is a complexType.
///
/// class _ns1__EndRecord operations:
/// - soap_new__ns1__EndRecord(soap*) allocate
/// - soap_new__ns1__EndRecord(soap*, int num) allocate array
/// - soap_new_req__ns1__EndRecord(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__EndRecord(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__EndRecord(soap*, _ns1__EndRecord*) deserialize from a stream
/// - int soap_write__ns1__EndRecord(soap, _ns1__EndRecord*) serialize to a stream
class _ns1__EndRecord
{ public:
/// Element "InspectID" of XSD type xs:string.
    std::wstring*                        InspectID                      0;	///< Optional element.
/// Element "Memo" of XSD type xs:string.
    std::wstring*                        Memo                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.gc8848.com/":EndRecordResponse
/// @brief "http://www.gc8848.com/":EndRecordResponse is a complexType.
///
/// class _ns1__EndRecordResponse operations:
/// - soap_new__ns1__EndRecordResponse(soap*) allocate
/// - soap_new__ns1__EndRecordResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__EndRecordResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__EndRecordResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__EndRecordResponse(soap*, _ns1__EndRecordResponse*) deserialize from a stream
/// - int soap_write__ns1__EndRecordResponse(soap, _ns1__EndRecordResponse*) serialize to a stream
class _ns1__EndRecordResponse
{ public:
/// Element "EndRecordResult" of XSD type "http://www.gc8848.com/":RetValue.
    ns1__RetValue*                       EndRecordResult                1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.gc8848.com/":BeginInspect
/// @brief "http://www.gc8848.com/":BeginInspect is a complexType.
///
/// class _ns1__BeginInspect operations:
/// - soap_new__ns1__BeginInspect(soap*) allocate
/// - soap_new__ns1__BeginInspect(soap*, int num) allocate array
/// - soap_new_req__ns1__BeginInspect(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__BeginInspect(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__BeginInspect(soap*, _ns1__BeginInspect*) deserialize from a stream
/// - int soap_write__ns1__BeginInspect(soap, _ns1__BeginInspect*) serialize to a stream
class _ns1__BeginInspect
{ public:
/// Element "LineID" of XSD type xs:long.
    LONG64                               LineID                         1;	///< Required element.
/// Element "InspectID" of XSD type xs:string.
    std::wstring*                        InspectID                      0;	///< Optional element.
/// Element "DriverID" of XSD type xs:long.
    LONG64                               DriverID                       1;	///< Required element.
/// Element "OperatorID" of XSD type xs:long.
    LONG64                               OperatorID                     1;	///< Required element.
/// Element "InspectParam" of XSD type xs:string.
    std::wstring*                        InspectParam                   0;	///< Optional element.
/// Element "Memo" of XSD type xs:string.
    std::wstring*                        Memo                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.gc8848.com/":BeginInspectResponse
/// @brief "http://www.gc8848.com/":BeginInspectResponse is a complexType.
///
/// class _ns1__BeginInspectResponse operations:
/// - soap_new__ns1__BeginInspectResponse(soap*) allocate
/// - soap_new__ns1__BeginInspectResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__BeginInspectResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__BeginInspectResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__BeginInspectResponse(soap*, _ns1__BeginInspectResponse*) deserialize from a stream
/// - int soap_write__ns1__BeginInspectResponse(soap, _ns1__BeginInspectResponse*) serialize to a stream
class _ns1__BeginInspectResponse
{ public:
/// Element "BeginInspectResult" of XSD type "http://www.gc8848.com/":RetValue.
    ns1__RetValue*                       BeginInspectResult             1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.gc8848.com/":GetLimit
/// @brief "http://www.gc8848.com/":GetLimit is a complexType.
///
/// class _ns1__GetLimit operations:
/// - soap_new__ns1__GetLimit(soap*) allocate
/// - soap_new__ns1__GetLimit(soap*, int num) allocate array
/// - soap_new_req__ns1__GetLimit(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__GetLimit(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__GetLimit(soap*, _ns1__GetLimit*) deserialize from a stream
/// - int soap_write__ns1__GetLimit(soap, _ns1__GetLimit*) serialize to a stream
class _ns1__GetLimit
{ public:
/// Element "InspectID" of XSD type xs:string.
    std::wstring*                        InspectID                      0;	///< Optional element.
/// Element "Memo" of XSD type xs:string.
    std::wstring*                        Memo                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.gc8848.com/":GetLimitResponse
/// @brief "http://www.gc8848.com/":GetLimitResponse is a complexType.
///
/// class _ns1__GetLimitResponse operations:
/// - soap_new__ns1__GetLimitResponse(soap*) allocate
/// - soap_new__ns1__GetLimitResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__GetLimitResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__GetLimitResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__GetLimitResponse(soap*, _ns1__GetLimitResponse*) deserialize from a stream
/// - int soap_write__ns1__GetLimitResponse(soap, _ns1__GetLimitResponse*) serialize to a stream
class _ns1__GetLimitResponse
{ public:
/// Element "GetLimitResult" of XSD type "http://www.gc8848.com/":RetValue.
    ns1__RetValue*                       GetLimitResult                 1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.gc8848.com/":TakePhoto
/// @brief "http://www.gc8848.com/":TakePhoto is a complexType.
///
/// class _ns1__TakePhoto operations:
/// - soap_new__ns1__TakePhoto(soap*) allocate
/// - soap_new__ns1__TakePhoto(soap*, int num) allocate array
/// - soap_new_req__ns1__TakePhoto(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__TakePhoto(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__TakePhoto(soap*, _ns1__TakePhoto*) deserialize from a stream
/// - int soap_write__ns1__TakePhoto(soap, _ns1__TakePhoto*) serialize to a stream
class _ns1__TakePhoto
{ public:
/// Element "LineID" of XSD type xs:long.
    LONG64                               LineID                         1;	///< Required element.
/// Element "InspectID" of XSD type xs:string.
    std::wstring*                        InspectID                      0;	///< Optional element.
/// Element "PicCode" of XSD type xs:int.
    int                                  PicCode                        1;	///< Required element.
/// Element "Memo" of XSD type xs:string.
    std::wstring*                        Memo                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.gc8848.com/":TakePhotoResponse
/// @brief "http://www.gc8848.com/":TakePhotoResponse is a complexType.
///
/// class _ns1__TakePhotoResponse operations:
/// - soap_new__ns1__TakePhotoResponse(soap*) allocate
/// - soap_new__ns1__TakePhotoResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__TakePhotoResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__TakePhotoResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__TakePhotoResponse(soap*, _ns1__TakePhotoResponse*) deserialize from a stream
/// - int soap_write__ns1__TakePhotoResponse(soap, _ns1__TakePhotoResponse*) serialize to a stream
class _ns1__TakePhotoResponse
{ public:
/// Element "TakePhotoResult" of XSD type "http://www.gc8848.com/":RetValue.
    ns1__RetValue*                       TakePhotoResult                1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.gc8848.com/":WJTakePhoto
/// @brief "http://www.gc8848.com/":WJTakePhoto is a complexType.
///
/// class _ns1__WJTakePhoto operations:
/// - soap_new__ns1__WJTakePhoto(soap*) allocate
/// - soap_new__ns1__WJTakePhoto(soap*, int num) allocate array
/// - soap_new_req__ns1__WJTakePhoto(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__WJTakePhoto(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__WJTakePhoto(soap*, _ns1__WJTakePhoto*) deserialize from a stream
/// - int soap_write__ns1__WJTakePhoto(soap, _ns1__WJTakePhoto*) serialize to a stream
class _ns1__WJTakePhoto
{ public:
/// Element "ChannelID" of XSD type xs:long.
    LONG64                               ChannelID                      1;	///< Required element.
/// Element "InspectID" of XSD type xs:string.
    std::wstring*                        InspectID                      0;	///< Optional element.
/// Element "PicCode" of XSD type xs:int.
    int                                  PicCode                        1;	///< Required element.
/// Element "Memo" of XSD type xs:string.
    std::wstring*                        Memo                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.gc8848.com/":WJTakePhotoResponse
/// @brief "http://www.gc8848.com/":WJTakePhotoResponse is a complexType.
///
/// class _ns1__WJTakePhotoResponse operations:
/// - soap_new__ns1__WJTakePhotoResponse(soap*) allocate
/// - soap_new__ns1__WJTakePhotoResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__WJTakePhotoResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__WJTakePhotoResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__WJTakePhotoResponse(soap*, _ns1__WJTakePhotoResponse*) deserialize from a stream
/// - int soap_write__ns1__WJTakePhotoResponse(soap, _ns1__WJTakePhotoResponse*) serialize to a stream
class _ns1__WJTakePhotoResponse
{ public:
/// Element "WJTakePhotoResult" of XSD type "http://www.gc8848.com/":RetValue.
    ns1__RetValue*                       WJTakePhotoResult              1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.gc8848.com/":StopInspect
/// @brief "http://www.gc8848.com/":StopInspect is a complexType.
///
/// class _ns1__StopInspect operations:
/// - soap_new__ns1__StopInspect(soap*) allocate
/// - soap_new__ns1__StopInspect(soap*, int num) allocate array
/// - soap_new_req__ns1__StopInspect(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__StopInspect(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__StopInspect(soap*, _ns1__StopInspect*) deserialize from a stream
/// - int soap_write__ns1__StopInspect(soap, _ns1__StopInspect*) serialize to a stream
class _ns1__StopInspect
{ public:
/// Element "InspectID" of XSD type xs:string.
    std::wstring*                        InspectID                      0;	///< Optional element.
/// Element "Memo" of XSD type xs:string.
    std::wstring*                        Memo                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.gc8848.com/":StopInspectResponse
/// @brief "http://www.gc8848.com/":StopInspectResponse is a complexType.
///
/// class _ns1__StopInspectResponse operations:
/// - soap_new__ns1__StopInspectResponse(soap*) allocate
/// - soap_new__ns1__StopInspectResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__StopInspectResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__StopInspectResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__StopInspectResponse(soap*, _ns1__StopInspectResponse*) deserialize from a stream
/// - int soap_write__ns1__StopInspectResponse(soap, _ns1__StopInspectResponse*) serialize to a stream
class _ns1__StopInspectResponse
{ public:
/// Element "StopInspectResult" of XSD type "http://www.gc8848.com/":RetValue.
    ns1__RetValue*                       StopInspectResult              1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.gc8848.com/":EndInspect
/// @brief "http://www.gc8848.com/":EndInspect is a complexType.
///
/// class _ns1__EndInspect operations:
/// - soap_new__ns1__EndInspect(soap*) allocate
/// - soap_new__ns1__EndInspect(soap*, int num) allocate array
/// - soap_new_req__ns1__EndInspect(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__EndInspect(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__EndInspect(soap*, _ns1__EndInspect*) deserialize from a stream
/// - int soap_write__ns1__EndInspect(soap, _ns1__EndInspect*) serialize to a stream
class _ns1__EndInspect
{ public:
/// Element "InspectID" of XSD type xs:string.
    std::wstring*                        InspectID                      0;	///< Optional element.
/// Element "Result" of XSD type xs:string.
    std::wstring*                        Result                         0;	///< Optional element.
/// Element "Memo" of XSD type xs:string.
    std::wstring*                        Memo                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.gc8848.com/":EndInspectResponse
/// @brief "http://www.gc8848.com/":EndInspectResponse is a complexType.
///
/// class _ns1__EndInspectResponse operations:
/// - soap_new__ns1__EndInspectResponse(soap*) allocate
/// - soap_new__ns1__EndInspectResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__EndInspectResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__EndInspectResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__EndInspectResponse(soap*, _ns1__EndInspectResponse*) deserialize from a stream
/// - int soap_write__ns1__EndInspectResponse(soap, _ns1__EndInspectResponse*) serialize to a stream
class _ns1__EndInspectResponse
{ public:
/// Element "EndInspectResult" of XSD type "http://www.gc8848.com/":RetValue.
    ns1__RetValue*                       EndInspectResult               1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.gc8848.com/":UploadSelfTestData
/// @brief "http://www.gc8848.com/":UploadSelfTestData is a complexType.
///
/// class _ns1__UploadSelfTestData operations:
/// - soap_new__ns1__UploadSelfTestData(soap*) allocate
/// - soap_new__ns1__UploadSelfTestData(soap*, int num) allocate array
/// - soap_new_req__ns1__UploadSelfTestData(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__UploadSelfTestData(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__UploadSelfTestData(soap*, _ns1__UploadSelfTestData*) deserialize from a stream
/// - int soap_write__ns1__UploadSelfTestData(soap, _ns1__UploadSelfTestData*) serialize to a stream
class _ns1__UploadSelfTestData
{ public:
/// Element "LineID" of XSD type xs:long.
    LONG64                               LineID                         1;	///< Required element.
/// Element "ResultData" of XSD type xs:string.
    std::wstring*                        ResultData                     0;	///< Optional element.
/// Element "Memo" of XSD type xs:string.
    std::wstring*                        Memo                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.gc8848.com/":UploadSelfTestDataResponse
/// @brief "http://www.gc8848.com/":UploadSelfTestDataResponse is a complexType.
///
/// class _ns1__UploadSelfTestDataResponse operations:
/// - soap_new__ns1__UploadSelfTestDataResponse(soap*) allocate
/// - soap_new__ns1__UploadSelfTestDataResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__UploadSelfTestDataResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__UploadSelfTestDataResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__UploadSelfTestDataResponse(soap*, _ns1__UploadSelfTestDataResponse*) deserialize from a stream
/// - int soap_write__ns1__UploadSelfTestDataResponse(soap, _ns1__UploadSelfTestDataResponse*) serialize to a stream
class _ns1__UploadSelfTestDataResponse
{ public:
/// Element "UploadSelfTestDataResult" of XSD type "http://www.gc8848.com/":RetValue.
    ns1__RetValue*                       UploadSelfTestDataResult       1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.gc8848.com/":UploadRealtimeData
/// @brief "http://www.gc8848.com/":UploadRealtimeData is a complexType.
///
/// class _ns1__UploadRealtimeData operations:
/// - soap_new__ns1__UploadRealtimeData(soap*) allocate
/// - soap_new__ns1__UploadRealtimeData(soap*, int num) allocate array
/// - soap_new_req__ns1__UploadRealtimeData(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__UploadRealtimeData(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__UploadRealtimeData(soap*, _ns1__UploadRealtimeData*) deserialize from a stream
/// - int soap_write__ns1__UploadRealtimeData(soap, _ns1__UploadRealtimeData*) serialize to a stream
class _ns1__UploadRealtimeData
{ public:
/// Element "InspectID" of XSD type xs:string.
    std::wstring*                        InspectID                      0;	///< Optional element.
/// Element "RealtimeData" of XSD type xs:string.
    std::wstring*                        RealtimeData                   0;	///< Optional element.
/// Element "Memo" of XSD type xs:string.
    std::wstring*                        Memo                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.gc8848.com/":UploadRealtimeDataResponse
/// @brief "http://www.gc8848.com/":UploadRealtimeDataResponse is a complexType.
///
/// class _ns1__UploadRealtimeDataResponse operations:
/// - soap_new__ns1__UploadRealtimeDataResponse(soap*) allocate
/// - soap_new__ns1__UploadRealtimeDataResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__UploadRealtimeDataResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__UploadRealtimeDataResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__UploadRealtimeDataResponse(soap*, _ns1__UploadRealtimeDataResponse*) deserialize from a stream
/// - int soap_write__ns1__UploadRealtimeDataResponse(soap, _ns1__UploadRealtimeDataResponse*) serialize to a stream
class _ns1__UploadRealtimeDataResponse
{ public:
/// Element "UploadRealtimeDataResult" of XSD type "http://www.gc8848.com/":RetValue.
    ns1__RetValue*                       UploadRealtimeDataResult       1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.gc8848.com/":GetInspectionInfo
/// @brief "http://www.gc8848.com/":GetInspectionInfo is a complexType.
///
/// class _ns1__GetInspectionInfo operations:
/// - soap_new__ns1__GetInspectionInfo(soap*) allocate
/// - soap_new__ns1__GetInspectionInfo(soap*, int num) allocate array
/// - soap_new_req__ns1__GetInspectionInfo(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__GetInspectionInfo(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__GetInspectionInfo(soap*, _ns1__GetInspectionInfo*) deserialize from a stream
/// - int soap_write__ns1__GetInspectionInfo(soap, _ns1__GetInspectionInfo*) serialize to a stream
class _ns1__GetInspectionInfo
{ public:
/// Element "Memo" of XSD type xs:string.
    std::wstring*                        Memo                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.gc8848.com/":GetInspectionInfoResponse
/// @brief "http://www.gc8848.com/":GetInspectionInfoResponse is a complexType.
///
/// class _ns1__GetInspectionInfoResponse operations:
/// - soap_new__ns1__GetInspectionInfoResponse(soap*) allocate
/// - soap_new__ns1__GetInspectionInfoResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__GetInspectionInfoResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__GetInspectionInfoResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__GetInspectionInfoResponse(soap*, _ns1__GetInspectionInfoResponse*) deserialize from a stream
/// - int soap_write__ns1__GetInspectionInfoResponse(soap, _ns1__GetInspectionInfoResponse*) serialize to a stream
class _ns1__GetInspectionInfoResponse
{ public:
/// Element "GetInspectionInfoResult" of XSD type "http://www.gc8848.com/":RetValue.
    ns1__RetValue*                       GetInspectionInfoResult        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.gc8848.com/":BeginCalibrate
/// @brief "http://www.gc8848.com/":BeginCalibrate is a complexType.
///
/// class _ns1__BeginCalibrate operations:
/// - soap_new__ns1__BeginCalibrate(soap*) allocate
/// - soap_new__ns1__BeginCalibrate(soap*, int num) allocate array
/// - soap_new_req__ns1__BeginCalibrate(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__BeginCalibrate(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__BeginCalibrate(soap*, _ns1__BeginCalibrate*) deserialize from a stream
/// - int soap_write__ns1__BeginCalibrate(soap, _ns1__BeginCalibrate*) serialize to a stream
class _ns1__BeginCalibrate
{ public:
/// Element "LineID" of XSD type xs:long.
    LONG64                               LineID                         1;	///< Required element.
/// Element "Memo" of XSD type xs:string.
    std::wstring*                        Memo                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.gc8848.com/":BeginCalibrateResponse
/// @brief "http://www.gc8848.com/":BeginCalibrateResponse is a complexType.
///
/// class _ns1__BeginCalibrateResponse operations:
/// - soap_new__ns1__BeginCalibrateResponse(soap*) allocate
/// - soap_new__ns1__BeginCalibrateResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__BeginCalibrateResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__BeginCalibrateResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__BeginCalibrateResponse(soap*, _ns1__BeginCalibrateResponse*) deserialize from a stream
/// - int soap_write__ns1__BeginCalibrateResponse(soap, _ns1__BeginCalibrateResponse*) serialize to a stream
class _ns1__BeginCalibrateResponse
{ public:
/// Element "BeginCalibrateResult" of XSD type "http://www.gc8848.com/":RetValue.
    ns1__RetValue*                       BeginCalibrateResult           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.gc8848.com/":UploadCalibrateData
/// @brief "http://www.gc8848.com/":UploadCalibrateData is a complexType.
///
/// class _ns1__UploadCalibrateData operations:
/// - soap_new__ns1__UploadCalibrateData(soap*) allocate
/// - soap_new__ns1__UploadCalibrateData(soap*, int num) allocate array
/// - soap_new_req__ns1__UploadCalibrateData(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__UploadCalibrateData(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__UploadCalibrateData(soap*, _ns1__UploadCalibrateData*) deserialize from a stream
/// - int soap_write__ns1__UploadCalibrateData(soap, _ns1__UploadCalibrateData*) serialize to a stream
class _ns1__UploadCalibrateData
{ public:
/// Element "LineID" of XSD type xs:long.
    LONG64                               LineID                         1;	///< Required element.
/// Element "ResultData" of XSD type xs:string.
    std::wstring*                        ResultData                     0;	///< Optional element.
/// Element "Memo" of XSD type xs:string.
    std::wstring*                        Memo                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.gc8848.com/":UploadCalibrateDataResponse
/// @brief "http://www.gc8848.com/":UploadCalibrateDataResponse is a complexType.
///
/// class _ns1__UploadCalibrateDataResponse operations:
/// - soap_new__ns1__UploadCalibrateDataResponse(soap*) allocate
/// - soap_new__ns1__UploadCalibrateDataResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__UploadCalibrateDataResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__UploadCalibrateDataResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__UploadCalibrateDataResponse(soap*, _ns1__UploadCalibrateDataResponse*) deserialize from a stream
/// - int soap_write__ns1__UploadCalibrateDataResponse(soap, _ns1__UploadCalibrateDataResponse*) serialize to a stream
class _ns1__UploadCalibrateDataResponse
{ public:
/// Element "UploadCalibrateDataResult" of XSD type "http://www.gc8848.com/":RetValue.
    ns1__RetValue*                       UploadCalibrateDataResult      1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.gc8848.com/":EndCalibrate
/// @brief "http://www.gc8848.com/":EndCalibrate is a complexType.
///
/// class _ns1__EndCalibrate operations:
/// - soap_new__ns1__EndCalibrate(soap*) allocate
/// - soap_new__ns1__EndCalibrate(soap*, int num) allocate array
/// - soap_new_req__ns1__EndCalibrate(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__EndCalibrate(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__EndCalibrate(soap*, _ns1__EndCalibrate*) deserialize from a stream
/// - int soap_write__ns1__EndCalibrate(soap, _ns1__EndCalibrate*) serialize to a stream
class _ns1__EndCalibrate
{ public:
/// Element "LineID" of XSD type xs:long.
    LONG64                               LineID                         1;	///< Required element.
/// Element "Result" of XSD type xs:string.
    std::wstring*                        Result                         0;	///< Optional element.
/// Element "Memo" of XSD type xs:string.
    std::wstring*                        Memo                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.gc8848.com/":EndCalibrateResponse
/// @brief "http://www.gc8848.com/":EndCalibrateResponse is a complexType.
///
/// class _ns1__EndCalibrateResponse operations:
/// - soap_new__ns1__EndCalibrateResponse(soap*) allocate
/// - soap_new__ns1__EndCalibrateResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__EndCalibrateResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__EndCalibrateResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__EndCalibrateResponse(soap*, _ns1__EndCalibrateResponse*) deserialize from a stream
/// - int soap_write__ns1__EndCalibrateResponse(soap, _ns1__EndCalibrateResponse*) serialize to a stream
class _ns1__EndCalibrateResponse
{ public:
/// Element "EndCalibrateResult" of XSD type "http://www.gc8848.com/":RetValue.
    ns1__RetValue*                       EndCalibrateResult             1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.gc8848.com/":TestPhoto
/// @brief "http://www.gc8848.com/":TestPhoto is a complexType.
///
/// class _ns1__TestPhoto operations:
/// - soap_new__ns1__TestPhoto(soap*) allocate
/// - soap_new__ns1__TestPhoto(soap*, int num) allocate array
/// - soap_new_req__ns1__TestPhoto(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__TestPhoto(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__TestPhoto(soap*, _ns1__TestPhoto*) deserialize from a stream
/// - int soap_write__ns1__TestPhoto(soap, _ns1__TestPhoto*) serialize to a stream
class _ns1__TestPhoto
{ public:
/// Element "LineID" of XSD type xs:long.
    LONG64                               LineID                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.gc8848.com/":TestPhotoResponse
/// @brief "http://www.gc8848.com/":TestPhotoResponse is a complexType.
///
/// class _ns1__TestPhotoResponse operations:
/// - soap_new__ns1__TestPhotoResponse(soap*) allocate
/// - soap_new__ns1__TestPhotoResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__TestPhotoResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__TestPhotoResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__TestPhotoResponse(soap*, _ns1__TestPhotoResponse*) deserialize from a stream
/// - int soap_write__ns1__TestPhotoResponse(soap, _ns1__TestPhotoResponse*) serialize to a stream
class _ns1__TestPhotoResponse
{ public:
/// Element "TestPhotoResult" of XSD type "http://www.gc8848.com/":RetValue.
    ns1__RetValue*                       TestPhotoResult                1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.gc8848.com/":FuelEvaporationInspect
/// @brief "http://www.gc8848.com/":FuelEvaporationInspect is a complexType.
///
/// class _ns1__FuelEvaporationInspect operations:
/// - soap_new__ns1__FuelEvaporationInspect(soap*) allocate
/// - soap_new__ns1__FuelEvaporationInspect(soap*, int num) allocate array
/// - soap_new_req__ns1__FuelEvaporationInspect(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__FuelEvaporationInspect(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__FuelEvaporationInspect(soap*, _ns1__FuelEvaporationInspect*) deserialize from a stream
/// - int soap_write__ns1__FuelEvaporationInspect(soap, _ns1__FuelEvaporationInspect*) serialize to a stream
class _ns1__FuelEvaporationInspect
{ public:
/// Element "ChannelID" of XSD type xs:long.
    LONG64                               ChannelID                      1;	///< Required element.
/// Element "InspectID" of XSD type xs:string.
    std::wstring*                        InspectID                      0;	///< Optional element.
/// Element "RYZFData" of XSD type xs:string.
    std::wstring*                        RYZFData                       0;	///< Optional element.
/// Element "Memo" of XSD type xs:string.
    std::wstring*                        Memo                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.gc8848.com/":FuelEvaporationInspectResponse
/// @brief "http://www.gc8848.com/":FuelEvaporationInspectResponse is a complexType.
///
/// class _ns1__FuelEvaporationInspectResponse operations:
/// - soap_new__ns1__FuelEvaporationInspectResponse(soap*) allocate
/// - soap_new__ns1__FuelEvaporationInspectResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__FuelEvaporationInspectResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__FuelEvaporationInspectResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__FuelEvaporationInspectResponse(soap*, _ns1__FuelEvaporationInspectResponse*) deserialize from a stream
/// - int soap_write__ns1__FuelEvaporationInspectResponse(soap, _ns1__FuelEvaporationInspectResponse*) serialize to a stream
class _ns1__FuelEvaporationInspectResponse
{ public:
/// Element "FuelEvaporationInspectResult" of XSD type "http://www.gc8848.com/":RetValue.
    ns1__RetValue*                       FuelEvaporationInspectResult   1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.gc8848.com/":GetInspectParams
/// @brief "http://www.gc8848.com/":GetInspectParams is a complexType.
///
/// class _ns1__GetInspectParams operations:
/// - soap_new__ns1__GetInspectParams(soap*) allocate
/// - soap_new__ns1__GetInspectParams(soap*, int num) allocate array
/// - soap_new_req__ns1__GetInspectParams(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__GetInspectParams(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__GetInspectParams(soap*, _ns1__GetInspectParams*) deserialize from a stream
/// - int soap_write__ns1__GetInspectParams(soap, _ns1__GetInspectParams*) serialize to a stream
class _ns1__GetInspectParams
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.gc8848.com/":GetInspectParamsResponse
/// @brief "http://www.gc8848.com/":GetInspectParamsResponse is a complexType.
///
/// class _ns1__GetInspectParamsResponse operations:
/// - soap_new__ns1__GetInspectParamsResponse(soap*) allocate
/// - soap_new__ns1__GetInspectParamsResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__GetInspectParamsResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__GetInspectParamsResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__GetInspectParamsResponse(soap*, _ns1__GetInspectParamsResponse*) deserialize from a stream
/// - int soap_write__ns1__GetInspectParamsResponse(soap, _ns1__GetInspectParamsResponse*) serialize to a stream
class _ns1__GetInspectParamsResponse
{ public:
/// Element "GetInspectParamsResult" of XSD type "http://www.gc8848.com/":RetValue.
    ns1__RetValue*                       GetInspectParamsResult         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.gc8848.com/":GetOtherInspectQueueByPlateID
/// @brief "http://www.gc8848.com/":GetOtherInspectQueueByPlateID is a complexType.
///
/// class _ns1__GetOtherInspectQueueByPlateID operations:
/// - soap_new__ns1__GetOtherInspectQueueByPlateID(soap*) allocate
/// - soap_new__ns1__GetOtherInspectQueueByPlateID(soap*, int num) allocate array
/// - soap_new_req__ns1__GetOtherInspectQueueByPlateID(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__GetOtherInspectQueueByPlateID(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__GetOtherInspectQueueByPlateID(soap*, _ns1__GetOtherInspectQueueByPlateID*) deserialize from a stream
/// - int soap_write__ns1__GetOtherInspectQueueByPlateID(soap, _ns1__GetOtherInspectQueueByPlateID*) serialize to a stream
class _ns1__GetOtherInspectQueueByPlateID
{ public:
/// Element "PlateID" of XSD type xs:string.
    std::wstring*                        PlateID                        0;	///< Optional element.
/// Element "PlateType" of XSD type xs:int.
    int                                  PlateType                      1;	///< Required element.
/// Element "QueueType" of XSD type xs:string.
    std::wstring*                        QueueType                      0;	///< Optional element.
/// Element "Memo" of XSD type xs:string.
    std::wstring*                        Memo                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.gc8848.com/":GetOtherInspectQueueByPlateIDResponse
/// @brief "http://www.gc8848.com/":GetOtherInspectQueueByPlateIDResponse is a complexType.
///
/// class _ns1__GetOtherInspectQueueByPlateIDResponse operations:
/// - soap_new__ns1__GetOtherInspectQueueByPlateIDResponse(soap*) allocate
/// - soap_new__ns1__GetOtherInspectQueueByPlateIDResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__GetOtherInspectQueueByPlateIDResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__GetOtherInspectQueueByPlateIDResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__GetOtherInspectQueueByPlateIDResponse(soap*, _ns1__GetOtherInspectQueueByPlateIDResponse*) deserialize from a stream
/// - int soap_write__ns1__GetOtherInspectQueueByPlateIDResponse(soap, _ns1__GetOtherInspectQueueByPlateIDResponse*) serialize to a stream
class _ns1__GetOtherInspectQueueByPlateIDResponse
{ public:
/// Element "GetOtherInspectQueueByPlateIDResult" of XSD type "http://www.gc8848.com/":RetValue.
    ns1__RetValue*                       GetOtherInspectQueueByPlateIDResult 1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.gc8848.com/":GetOtherInspectQueueByDate
/// @brief "http://www.gc8848.com/":GetOtherInspectQueueByDate is a complexType.
///
/// class _ns1__GetOtherInspectQueueByDate operations:
/// - soap_new__ns1__GetOtherInspectQueueByDate(soap*) allocate
/// - soap_new__ns1__GetOtherInspectQueueByDate(soap*, int num) allocate array
/// - soap_new_req__ns1__GetOtherInspectQueueByDate(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__GetOtherInspectQueueByDate(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__GetOtherInspectQueueByDate(soap*, _ns1__GetOtherInspectQueueByDate*) deserialize from a stream
/// - int soap_write__ns1__GetOtherInspectQueueByDate(soap, _ns1__GetOtherInspectQueueByDate*) serialize to a stream
class _ns1__GetOtherInspectQueueByDate
{ public:
/// Element "FromDate" of XSD type xs:string.
    std::wstring*                        FromDate                       0;	///< Optional element.
/// Element "ToDate" of XSD type xs:string.
    std::wstring*                        ToDate                         0;	///< Optional element.
/// Element "QueueType" of XSD type xs:string.
    std::wstring*                        QueueType                      0;	///< Optional element.
/// Element "Memo" of XSD type xs:string.
    std::wstring*                        Memo                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.gc8848.com/":GetOtherInspectQueueByDateResponse
/// @brief "http://www.gc8848.com/":GetOtherInspectQueueByDateResponse is a complexType.
///
/// class _ns1__GetOtherInspectQueueByDateResponse operations:
/// - soap_new__ns1__GetOtherInspectQueueByDateResponse(soap*) allocate
/// - soap_new__ns1__GetOtherInspectQueueByDateResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__GetOtherInspectQueueByDateResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__GetOtherInspectQueueByDateResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__GetOtherInspectQueueByDateResponse(soap*, _ns1__GetOtherInspectQueueByDateResponse*) deserialize from a stream
/// - int soap_write__ns1__GetOtherInspectQueueByDateResponse(soap, _ns1__GetOtherInspectQueueByDateResponse*) serialize to a stream
class _ns1__GetOtherInspectQueueByDateResponse
{ public:
/// Element "GetOtherInspectQueueByDateResult" of XSD type "http://www.gc8848.com/":RetValue.
    ns1__RetValue*                       GetOtherInspectQueueByDateResult 1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.gc8848.com/":OBDInspect
/// @brief "http://www.gc8848.com/":OBDInspect is a complexType.
///
/// class _ns1__OBDInspect operations:
/// - soap_new__ns1__OBDInspect(soap*) allocate
/// - soap_new__ns1__OBDInspect(soap*, int num) allocate array
/// - soap_new_req__ns1__OBDInspect(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__OBDInspect(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__OBDInspect(soap*, _ns1__OBDInspect*) deserialize from a stream
/// - int soap_write__ns1__OBDInspect(soap, _ns1__OBDInspect*) serialize to a stream
class _ns1__OBDInspect
{ public:
/// Element "LineID" of XSD type xs:long.
    LONG64                               LineID                         1;	///< Required element.
/// Element "InspectID" of XSD type xs:string.
    std::wstring*                        InspectID                      0;	///< Optional element.
/// Element "sOBDData" of XSD type xs:string.
    std::wstring*                        sOBDData                       0;	///< Optional element.
/// Element "Memo" of XSD type xs:string.
    std::wstring*                        Memo                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.gc8848.com/":OBDInspectResponse
/// @brief "http://www.gc8848.com/":OBDInspectResponse is a complexType.
///
/// class _ns1__OBDInspectResponse operations:
/// - soap_new__ns1__OBDInspectResponse(soap*) allocate
/// - soap_new__ns1__OBDInspectResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__OBDInspectResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__OBDInspectResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__OBDInspectResponse(soap*, _ns1__OBDInspectResponse*) deserialize from a stream
/// - int soap_write__ns1__OBDInspectResponse(soap, _ns1__OBDInspectResponse*) serialize to a stream
class _ns1__OBDInspectResponse
{ public:
/// Element "OBDInspectResult" of XSD type "http://www.gc8848.com/":RetValue.
    ns1__RetValue*                       OBDInspectResult               1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.gc8848.com/":OBDTXCheck
/// @brief "http://www.gc8848.com/":OBDTXCheck is a complexType.
///
/// class _ns1__OBDTXCheck operations:
/// - soap_new__ns1__OBDTXCheck(soap*) allocate
/// - soap_new__ns1__OBDTXCheck(soap*, int num) allocate array
/// - soap_new_req__ns1__OBDTXCheck(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__OBDTXCheck(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__OBDTXCheck(soap*, _ns1__OBDTXCheck*) deserialize from a stream
/// - int soap_write__ns1__OBDTXCheck(soap, _ns1__OBDTXCheck*) serialize to a stream
class _ns1__OBDTXCheck
{ public:
/// Element "VIN" of XSD type xs:string.
    std::wstring*                        VIN                            0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://www.gc8848.com/":OBDTXCheckResponse
/// @brief "http://www.gc8848.com/":OBDTXCheckResponse is a complexType.
///
/// class _ns1__OBDTXCheckResponse operations:
/// - soap_new__ns1__OBDTXCheckResponse(soap*) allocate
/// - soap_new__ns1__OBDTXCheckResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__OBDTXCheckResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__OBDTXCheckResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__OBDTXCheckResponse(soap*, _ns1__OBDTXCheckResponse*) deserialize from a stream
/// - int soap_write__ns1__OBDTXCheckResponse(soap, _ns1__OBDTXCheckResponse*) serialize to a stream
class _ns1__OBDTXCheckResponse
{ public:
/// Element "OBDTXCheckResult" of XSD type "http://www.gc8848.com/":RetValue.
    ns1__RetValue*                       OBDTXCheckResult               1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://www.gc8848.com/                                                   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://www.gc8848.com/                                                   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/

// This service supports SOAP 1.2 namespaces:
#import "soap12.h"

//gsoap ns1  service name:	ServiceSoap 
//gsoap ns1  service type:	ServiceSoap 
//gsoap ns1  service port:	http://192.168.40.2:9002/gcservice/service.asmx 
//gsoap ns1  service namespace:	http://www.gc8848.com/ 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Service Bindings

  - @ref ServiceSoap

@section Service_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page ServiceSoap Binding "ServiceSoap"

@section ServiceSoap_operations Operations of Binding "ServiceSoap"

  - @ref __ns1__Sync

  - @ref __ns1__GetInspectQueueByDate

  - @ref __ns1__GetInspectQueueByPlateID

  - @ref __ns1__AbortInspect

  - @ref __ns1__BeginRecord

  - @ref __ns1__EndRecord

  - @ref __ns1__BeginInspect

  - @ref __ns1__GetLimit

  - @ref __ns1__TakePhoto

  - @ref __ns1__WJTakePhoto

  - @ref __ns1__StopInspect

  - @ref __ns1__EndInspect

  - @ref __ns1__UploadSelfTestData

  - @ref __ns1__UploadRealtimeData

  - @ref __ns1__GetInspectionInfo

  - @ref __ns1__BeginCalibrate

  - @ref __ns1__UploadCalibrateData

  - @ref __ns1__EndCalibrate

  - @ref __ns1__TestPhoto

  - @ref __ns1__FuelEvaporationInspect

  - @ref __ns1__GetInspectParams

  - @ref __ns1__GetOtherInspectQueueByPlateID

  - @ref __ns1__GetOtherInspectQueueByDate

  - @ref __ns1__OBDInspect

  - @ref __ns1__OBDTXCheck

  - @ref __ns1__Sync_

  - @ref __ns1__GetInspectQueueByDate_

  - @ref __ns1__GetInspectQueueByPlateID_

  - @ref __ns1__AbortInspect_

  - @ref __ns1__BeginRecord_

  - @ref __ns1__EndRecord_

  - @ref __ns1__BeginInspect_

  - @ref __ns1__GetLimit_

  - @ref __ns1__TakePhoto_

  - @ref __ns1__WJTakePhoto_

  - @ref __ns1__StopInspect_

  - @ref __ns1__EndInspect_

  - @ref __ns1__UploadSelfTestData_

  - @ref __ns1__UploadRealtimeData_

  - @ref __ns1__GetInspectionInfo_

  - @ref __ns1__BeginCalibrate_

  - @ref __ns1__UploadCalibrateData_

  - @ref __ns1__EndCalibrate_

  - @ref __ns1__TestPhoto_

  - @ref __ns1__FuelEvaporationInspect_

  - @ref __ns1__GetInspectParams_

  - @ref __ns1__GetOtherInspectQueueByPlateID_

  - @ref __ns1__GetOtherInspectQueueByDate_

  - @ref __ns1__OBDInspect_

  - @ref __ns1__OBDTXCheck_

@section ServiceSoap_ports Endpoints of Binding "ServiceSoap"

  - http://192.168.40.2:9002/gcservice/service.asmx

@note Multiple service bindings collected as one, use wsdl2h option -Nname to produce a separate service for each binding


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   ServiceSoap                                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__Sync                                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__Sync" of service binding "ServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://www.gc8848.com/Sync"

  - Addressing input action: "http://www.gc8848.com/Sync"

  - Addressing output action: "http://www.gc8848.com/SyncResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__Sync(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__Sync*                         ns1__Sync,
    // output parameters:
    _ns1__SyncResponse                 &ns1__SyncResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__Sync(
    struct soap *soap,
    // input parameters:
    _ns1__Sync*                         ns1__Sync,
    // output parameters:
    _ns1__SyncResponse                 &ns1__SyncResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapProxy.h):
@code
  class ServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapService.h):
@code
  class ServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	Sync SOAP
//gsoap ns1  service method-style:	Sync document
//gsoap ns1  service method-encoding:	Sync literal
//gsoap ns1  service method-input-action:	Sync http://www.gc8848.com/Sync
//gsoap ns1  service method-output-action:	Sync http://www.gc8848.com/SyncResponse
int __ns1__Sync(
    _ns1__Sync*                         ns1__Sync,	///< Input parameter
    _ns1__SyncResponse                 &ns1__SyncResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetInspectQueueByDate                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetInspectQueueByDate" of service binding "ServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://www.gc8848.com/GetInspectQueueByDate"

  - Addressing input action: "http://www.gc8848.com/GetInspectQueueByDate"

  - Addressing output action: "http://www.gc8848.com/GetInspectQueueByDateResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetInspectQueueByDate(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetInspectQueueByDate*        ns1__GetInspectQueueByDate,
    // output parameters:
    _ns1__GetInspectQueueByDateResponse&ns1__GetInspectQueueByDateResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetInspectQueueByDate(
    struct soap *soap,
    // input parameters:
    _ns1__GetInspectQueueByDate*        ns1__GetInspectQueueByDate,
    // output parameters:
    _ns1__GetInspectQueueByDateResponse&ns1__GetInspectQueueByDateResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapProxy.h):
@code
  class ServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapService.h):
@code
  class ServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetInspectQueueByDate SOAP
//gsoap ns1  service method-style:	GetInspectQueueByDate document
//gsoap ns1  service method-encoding:	GetInspectQueueByDate literal
//gsoap ns1  service method-input-action:	GetInspectQueueByDate http://www.gc8848.com/GetInspectQueueByDate
//gsoap ns1  service method-output-action:	GetInspectQueueByDate http://www.gc8848.com/GetInspectQueueByDateResponse
int __ns1__GetInspectQueueByDate(
    _ns1__GetInspectQueueByDate*        ns1__GetInspectQueueByDate,	///< Input parameter
    _ns1__GetInspectQueueByDateResponse&ns1__GetInspectQueueByDateResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetInspectQueueByPlateID                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetInspectQueueByPlateID" of service binding "ServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://www.gc8848.com/GetInspectQueueByPlateID"

  - Addressing input action: "http://www.gc8848.com/GetInspectQueueByPlateID"

  - Addressing output action: "http://www.gc8848.com/GetInspectQueueByPlateIDResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetInspectQueueByPlateID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetInspectQueueByPlateID*     ns1__GetInspectQueueByPlateID,
    // output parameters:
    _ns1__GetInspectQueueByPlateIDResponse&ns1__GetInspectQueueByPlateIDResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetInspectQueueByPlateID(
    struct soap *soap,
    // input parameters:
    _ns1__GetInspectQueueByPlateID*     ns1__GetInspectQueueByPlateID,
    // output parameters:
    _ns1__GetInspectQueueByPlateIDResponse&ns1__GetInspectQueueByPlateIDResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapProxy.h):
@code
  class ServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapService.h):
@code
  class ServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetInspectQueueByPlateID SOAP
//gsoap ns1  service method-style:	GetInspectQueueByPlateID document
//gsoap ns1  service method-encoding:	GetInspectQueueByPlateID literal
//gsoap ns1  service method-input-action:	GetInspectQueueByPlateID http://www.gc8848.com/GetInspectQueueByPlateID
//gsoap ns1  service method-output-action:	GetInspectQueueByPlateID http://www.gc8848.com/GetInspectQueueByPlateIDResponse
int __ns1__GetInspectQueueByPlateID(
    _ns1__GetInspectQueueByPlateID*     ns1__GetInspectQueueByPlateID,	///< Input parameter
    _ns1__GetInspectQueueByPlateIDResponse&ns1__GetInspectQueueByPlateIDResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__AbortInspect                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__AbortInspect" of service binding "ServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://www.gc8848.com/AbortInspect"

  - Addressing input action: "http://www.gc8848.com/AbortInspect"

  - Addressing output action: "http://www.gc8848.com/AbortInspectResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__AbortInspect(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__AbortInspect*                 ns1__AbortInspect,
    // output parameters:
    _ns1__AbortInspectResponse         &ns1__AbortInspectResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__AbortInspect(
    struct soap *soap,
    // input parameters:
    _ns1__AbortInspect*                 ns1__AbortInspect,
    // output parameters:
    _ns1__AbortInspectResponse         &ns1__AbortInspectResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapProxy.h):
@code
  class ServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapService.h):
@code
  class ServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	AbortInspect SOAP
//gsoap ns1  service method-style:	AbortInspect document
//gsoap ns1  service method-encoding:	AbortInspect literal
//gsoap ns1  service method-input-action:	AbortInspect http://www.gc8848.com/AbortInspect
//gsoap ns1  service method-output-action:	AbortInspect http://www.gc8848.com/AbortInspectResponse
int __ns1__AbortInspect(
    _ns1__AbortInspect*                 ns1__AbortInspect,	///< Input parameter
    _ns1__AbortInspectResponse         &ns1__AbortInspectResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__BeginRecord                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__BeginRecord" of service binding "ServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://www.gc8848.com/BeginRecord"

  - Addressing input action: "http://www.gc8848.com/BeginRecord"

  - Addressing output action: "http://www.gc8848.com/BeginRecordResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__BeginRecord(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__BeginRecord*                  ns1__BeginRecord,
    // output parameters:
    _ns1__BeginRecordResponse          &ns1__BeginRecordResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__BeginRecord(
    struct soap *soap,
    // input parameters:
    _ns1__BeginRecord*                  ns1__BeginRecord,
    // output parameters:
    _ns1__BeginRecordResponse          &ns1__BeginRecordResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapProxy.h):
@code
  class ServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapService.h):
@code
  class ServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	BeginRecord SOAP
//gsoap ns1  service method-style:	BeginRecord document
//gsoap ns1  service method-encoding:	BeginRecord literal
//gsoap ns1  service method-input-action:	BeginRecord http://www.gc8848.com/BeginRecord
//gsoap ns1  service method-output-action:	BeginRecord http://www.gc8848.com/BeginRecordResponse
int __ns1__BeginRecord(
    _ns1__BeginRecord*                  ns1__BeginRecord,	///< Input parameter
    _ns1__BeginRecordResponse          &ns1__BeginRecordResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__EndRecord                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__EndRecord" of service binding "ServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://www.gc8848.com/EndRecord"

  - Addressing input action: "http://www.gc8848.com/EndRecord"

  - Addressing output action: "http://www.gc8848.com/EndRecordResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__EndRecord(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__EndRecord*                    ns1__EndRecord,
    // output parameters:
    _ns1__EndRecordResponse            &ns1__EndRecordResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__EndRecord(
    struct soap *soap,
    // input parameters:
    _ns1__EndRecord*                    ns1__EndRecord,
    // output parameters:
    _ns1__EndRecordResponse            &ns1__EndRecordResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapProxy.h):
@code
  class ServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapService.h):
@code
  class ServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	EndRecord SOAP
//gsoap ns1  service method-style:	EndRecord document
//gsoap ns1  service method-encoding:	EndRecord literal
//gsoap ns1  service method-input-action:	EndRecord http://www.gc8848.com/EndRecord
//gsoap ns1  service method-output-action:	EndRecord http://www.gc8848.com/EndRecordResponse
int __ns1__EndRecord(
    _ns1__EndRecord*                    ns1__EndRecord,	///< Input parameter
    _ns1__EndRecordResponse            &ns1__EndRecordResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__BeginInspect                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__BeginInspect" of service binding "ServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://www.gc8848.com/BeginInspect"

  - Addressing input action: "http://www.gc8848.com/BeginInspect"

  - Addressing output action: "http://www.gc8848.com/BeginInspectResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__BeginInspect(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__BeginInspect*                 ns1__BeginInspect,
    // output parameters:
    _ns1__BeginInspectResponse         &ns1__BeginInspectResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__BeginInspect(
    struct soap *soap,
    // input parameters:
    _ns1__BeginInspect*                 ns1__BeginInspect,
    // output parameters:
    _ns1__BeginInspectResponse         &ns1__BeginInspectResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapProxy.h):
@code
  class ServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapService.h):
@code
  class ServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	BeginInspect SOAP
//gsoap ns1  service method-style:	BeginInspect document
//gsoap ns1  service method-encoding:	BeginInspect literal
//gsoap ns1  service method-input-action:	BeginInspect http://www.gc8848.com/BeginInspect
//gsoap ns1  service method-output-action:	BeginInspect http://www.gc8848.com/BeginInspectResponse
int __ns1__BeginInspect(
    _ns1__BeginInspect*                 ns1__BeginInspect,	///< Input parameter
    _ns1__BeginInspectResponse         &ns1__BeginInspectResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetLimit                                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetLimit" of service binding "ServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://www.gc8848.com/GetLimit"

  - Addressing input action: "http://www.gc8848.com/GetLimit"

  - Addressing output action: "http://www.gc8848.com/GetLimitResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetLimit(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetLimit*                     ns1__GetLimit,
    // output parameters:
    _ns1__GetLimitResponse             &ns1__GetLimitResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetLimit(
    struct soap *soap,
    // input parameters:
    _ns1__GetLimit*                     ns1__GetLimit,
    // output parameters:
    _ns1__GetLimitResponse             &ns1__GetLimitResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapProxy.h):
@code
  class ServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapService.h):
@code
  class ServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetLimit SOAP
//gsoap ns1  service method-style:	GetLimit document
//gsoap ns1  service method-encoding:	GetLimit literal
//gsoap ns1  service method-input-action:	GetLimit http://www.gc8848.com/GetLimit
//gsoap ns1  service method-output-action:	GetLimit http://www.gc8848.com/GetLimitResponse
int __ns1__GetLimit(
    _ns1__GetLimit*                     ns1__GetLimit,	///< Input parameter
    _ns1__GetLimitResponse             &ns1__GetLimitResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__TakePhoto                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__TakePhoto" of service binding "ServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://www.gc8848.com/TakePhoto"

  - Addressing input action: "http://www.gc8848.com/TakePhoto"

  - Addressing output action: "http://www.gc8848.com/TakePhotoResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__TakePhoto(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__TakePhoto*                    ns1__TakePhoto,
    // output parameters:
    _ns1__TakePhotoResponse            &ns1__TakePhotoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__TakePhoto(
    struct soap *soap,
    // input parameters:
    _ns1__TakePhoto*                    ns1__TakePhoto,
    // output parameters:
    _ns1__TakePhotoResponse            &ns1__TakePhotoResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapProxy.h):
@code
  class ServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapService.h):
@code
  class ServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	TakePhoto SOAP
//gsoap ns1  service method-style:	TakePhoto document
//gsoap ns1  service method-encoding:	TakePhoto literal
//gsoap ns1  service method-input-action:	TakePhoto http://www.gc8848.com/TakePhoto
//gsoap ns1  service method-output-action:	TakePhoto http://www.gc8848.com/TakePhotoResponse
int __ns1__TakePhoto(
    _ns1__TakePhoto*                    ns1__TakePhoto,	///< Input parameter
    _ns1__TakePhotoResponse            &ns1__TakePhotoResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__WJTakePhoto                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__WJTakePhoto" of service binding "ServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://www.gc8848.com/WJTakePhoto"

  - Addressing input action: "http://www.gc8848.com/WJTakePhoto"

  - Addressing output action: "http://www.gc8848.com/WJTakePhotoResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__WJTakePhoto(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__WJTakePhoto*                  ns1__WJTakePhoto,
    // output parameters:
    _ns1__WJTakePhotoResponse          &ns1__WJTakePhotoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__WJTakePhoto(
    struct soap *soap,
    // input parameters:
    _ns1__WJTakePhoto*                  ns1__WJTakePhoto,
    // output parameters:
    _ns1__WJTakePhotoResponse          &ns1__WJTakePhotoResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapProxy.h):
@code
  class ServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapService.h):
@code
  class ServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	WJTakePhoto SOAP
//gsoap ns1  service method-style:	WJTakePhoto document
//gsoap ns1  service method-encoding:	WJTakePhoto literal
//gsoap ns1  service method-input-action:	WJTakePhoto http://www.gc8848.com/WJTakePhoto
//gsoap ns1  service method-output-action:	WJTakePhoto http://www.gc8848.com/WJTakePhotoResponse
int __ns1__WJTakePhoto(
    _ns1__WJTakePhoto*                  ns1__WJTakePhoto,	///< Input parameter
    _ns1__WJTakePhotoResponse          &ns1__WJTakePhotoResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__StopInspect                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__StopInspect" of service binding "ServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://www.gc8848.com/StopInspect"

  - Addressing input action: "http://www.gc8848.com/StopInspect"

  - Addressing output action: "http://www.gc8848.com/StopInspectResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__StopInspect(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__StopInspect*                  ns1__StopInspect,
    // output parameters:
    _ns1__StopInspectResponse          &ns1__StopInspectResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__StopInspect(
    struct soap *soap,
    // input parameters:
    _ns1__StopInspect*                  ns1__StopInspect,
    // output parameters:
    _ns1__StopInspectResponse          &ns1__StopInspectResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapProxy.h):
@code
  class ServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapService.h):
@code
  class ServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	StopInspect SOAP
//gsoap ns1  service method-style:	StopInspect document
//gsoap ns1  service method-encoding:	StopInspect literal
//gsoap ns1  service method-input-action:	StopInspect http://www.gc8848.com/StopInspect
//gsoap ns1  service method-output-action:	StopInspect http://www.gc8848.com/StopInspectResponse
int __ns1__StopInspect(
    _ns1__StopInspect*                  ns1__StopInspect,	///< Input parameter
    _ns1__StopInspectResponse          &ns1__StopInspectResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__EndInspect                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__EndInspect" of service binding "ServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://www.gc8848.com/EndInspect"

  - Addressing input action: "http://www.gc8848.com/EndInspect"

  - Addressing output action: "http://www.gc8848.com/EndInspectResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__EndInspect(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__EndInspect*                   ns1__EndInspect,
    // output parameters:
    _ns1__EndInspectResponse           &ns1__EndInspectResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__EndInspect(
    struct soap *soap,
    // input parameters:
    _ns1__EndInspect*                   ns1__EndInspect,
    // output parameters:
    _ns1__EndInspectResponse           &ns1__EndInspectResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapProxy.h):
@code
  class ServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapService.h):
@code
  class ServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	EndInspect SOAP
//gsoap ns1  service method-style:	EndInspect document
//gsoap ns1  service method-encoding:	EndInspect literal
//gsoap ns1  service method-input-action:	EndInspect http://www.gc8848.com/EndInspect
//gsoap ns1  service method-output-action:	EndInspect http://www.gc8848.com/EndInspectResponse
int __ns1__EndInspect(
    _ns1__EndInspect*                   ns1__EndInspect,	///< Input parameter
    _ns1__EndInspectResponse           &ns1__EndInspectResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__UploadSelfTestData                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__UploadSelfTestData" of service binding "ServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://www.gc8848.com/UploadSelfTestData"

  - Addressing input action: "http://www.gc8848.com/UploadSelfTestData"

  - Addressing output action: "http://www.gc8848.com/UploadSelfTestDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__UploadSelfTestData(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__UploadSelfTestData*           ns1__UploadSelfTestData,
    // output parameters:
    _ns1__UploadSelfTestDataResponse   &ns1__UploadSelfTestDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__UploadSelfTestData(
    struct soap *soap,
    // input parameters:
    _ns1__UploadSelfTestData*           ns1__UploadSelfTestData,
    // output parameters:
    _ns1__UploadSelfTestDataResponse   &ns1__UploadSelfTestDataResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapProxy.h):
@code
  class ServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapService.h):
@code
  class ServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	UploadSelfTestData SOAP
//gsoap ns1  service method-style:	UploadSelfTestData document
//gsoap ns1  service method-encoding:	UploadSelfTestData literal
//gsoap ns1  service method-input-action:	UploadSelfTestData http://www.gc8848.com/UploadSelfTestData
//gsoap ns1  service method-output-action:	UploadSelfTestData http://www.gc8848.com/UploadSelfTestDataResponse
int __ns1__UploadSelfTestData(
    _ns1__UploadSelfTestData*           ns1__UploadSelfTestData,	///< Input parameter
    _ns1__UploadSelfTestDataResponse   &ns1__UploadSelfTestDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__UploadRealtimeData                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__UploadRealtimeData" of service binding "ServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://www.gc8848.com/UploadRealtimeData"

  - Addressing input action: "http://www.gc8848.com/UploadRealtimeData"

  - Addressing output action: "http://www.gc8848.com/UploadRealtimeDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__UploadRealtimeData(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__UploadRealtimeData*           ns1__UploadRealtimeData,
    // output parameters:
    _ns1__UploadRealtimeDataResponse   &ns1__UploadRealtimeDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__UploadRealtimeData(
    struct soap *soap,
    // input parameters:
    _ns1__UploadRealtimeData*           ns1__UploadRealtimeData,
    // output parameters:
    _ns1__UploadRealtimeDataResponse   &ns1__UploadRealtimeDataResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapProxy.h):
@code
  class ServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapService.h):
@code
  class ServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	UploadRealtimeData SOAP
//gsoap ns1  service method-style:	UploadRealtimeData document
//gsoap ns1  service method-encoding:	UploadRealtimeData literal
//gsoap ns1  service method-input-action:	UploadRealtimeData http://www.gc8848.com/UploadRealtimeData
//gsoap ns1  service method-output-action:	UploadRealtimeData http://www.gc8848.com/UploadRealtimeDataResponse
int __ns1__UploadRealtimeData(
    _ns1__UploadRealtimeData*           ns1__UploadRealtimeData,	///< Input parameter
    _ns1__UploadRealtimeDataResponse   &ns1__UploadRealtimeDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetInspectionInfo                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetInspectionInfo" of service binding "ServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://www.gc8848.com/GetInspectionInfo"

  - Addressing input action: "http://www.gc8848.com/GetInspectionInfo"

  - Addressing output action: "http://www.gc8848.com/GetInspectionInfoResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetInspectionInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetInspectionInfo*            ns1__GetInspectionInfo,
    // output parameters:
    _ns1__GetInspectionInfoResponse    &ns1__GetInspectionInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetInspectionInfo(
    struct soap *soap,
    // input parameters:
    _ns1__GetInspectionInfo*            ns1__GetInspectionInfo,
    // output parameters:
    _ns1__GetInspectionInfoResponse    &ns1__GetInspectionInfoResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapProxy.h):
@code
  class ServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapService.h):
@code
  class ServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetInspectionInfo SOAP
//gsoap ns1  service method-style:	GetInspectionInfo document
//gsoap ns1  service method-encoding:	GetInspectionInfo literal
//gsoap ns1  service method-input-action:	GetInspectionInfo http://www.gc8848.com/GetInspectionInfo
//gsoap ns1  service method-output-action:	GetInspectionInfo http://www.gc8848.com/GetInspectionInfoResponse
int __ns1__GetInspectionInfo(
    _ns1__GetInspectionInfo*            ns1__GetInspectionInfo,	///< Input parameter
    _ns1__GetInspectionInfoResponse    &ns1__GetInspectionInfoResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__BeginCalibrate                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__BeginCalibrate" of service binding "ServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://www.gc8848.com/BeginCalibrate"

  - Addressing input action: "http://www.gc8848.com/BeginCalibrate"

  - Addressing output action: "http://www.gc8848.com/BeginCalibrateResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__BeginCalibrate(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__BeginCalibrate*               ns1__BeginCalibrate,
    // output parameters:
    _ns1__BeginCalibrateResponse       &ns1__BeginCalibrateResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__BeginCalibrate(
    struct soap *soap,
    // input parameters:
    _ns1__BeginCalibrate*               ns1__BeginCalibrate,
    // output parameters:
    _ns1__BeginCalibrateResponse       &ns1__BeginCalibrateResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapProxy.h):
@code
  class ServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapService.h):
@code
  class ServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	BeginCalibrate SOAP
//gsoap ns1  service method-style:	BeginCalibrate document
//gsoap ns1  service method-encoding:	BeginCalibrate literal
//gsoap ns1  service method-input-action:	BeginCalibrate http://www.gc8848.com/BeginCalibrate
//gsoap ns1  service method-output-action:	BeginCalibrate http://www.gc8848.com/BeginCalibrateResponse
int __ns1__BeginCalibrate(
    _ns1__BeginCalibrate*               ns1__BeginCalibrate,	///< Input parameter
    _ns1__BeginCalibrateResponse       &ns1__BeginCalibrateResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__UploadCalibrateData                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__UploadCalibrateData" of service binding "ServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://www.gc8848.com/UploadCalibrateData"

  - Addressing input action: "http://www.gc8848.com/UploadCalibrateData"

  - Addressing output action: "http://www.gc8848.com/UploadCalibrateDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__UploadCalibrateData(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__UploadCalibrateData*          ns1__UploadCalibrateData,
    // output parameters:
    _ns1__UploadCalibrateDataResponse  &ns1__UploadCalibrateDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__UploadCalibrateData(
    struct soap *soap,
    // input parameters:
    _ns1__UploadCalibrateData*          ns1__UploadCalibrateData,
    // output parameters:
    _ns1__UploadCalibrateDataResponse  &ns1__UploadCalibrateDataResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapProxy.h):
@code
  class ServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapService.h):
@code
  class ServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	UploadCalibrateData SOAP
//gsoap ns1  service method-style:	UploadCalibrateData document
//gsoap ns1  service method-encoding:	UploadCalibrateData literal
//gsoap ns1  service method-input-action:	UploadCalibrateData http://www.gc8848.com/UploadCalibrateData
//gsoap ns1  service method-output-action:	UploadCalibrateData http://www.gc8848.com/UploadCalibrateDataResponse
int __ns1__UploadCalibrateData(
    _ns1__UploadCalibrateData*          ns1__UploadCalibrateData,	///< Input parameter
    _ns1__UploadCalibrateDataResponse  &ns1__UploadCalibrateDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__EndCalibrate                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__EndCalibrate" of service binding "ServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://www.gc8848.com/EndCalibrate"

  - Addressing input action: "http://www.gc8848.com/EndCalibrate"

  - Addressing output action: "http://www.gc8848.com/EndCalibrateResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__EndCalibrate(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__EndCalibrate*                 ns1__EndCalibrate,
    // output parameters:
    _ns1__EndCalibrateResponse         &ns1__EndCalibrateResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__EndCalibrate(
    struct soap *soap,
    // input parameters:
    _ns1__EndCalibrate*                 ns1__EndCalibrate,
    // output parameters:
    _ns1__EndCalibrateResponse         &ns1__EndCalibrateResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapProxy.h):
@code
  class ServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapService.h):
@code
  class ServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	EndCalibrate SOAP
//gsoap ns1  service method-style:	EndCalibrate document
//gsoap ns1  service method-encoding:	EndCalibrate literal
//gsoap ns1  service method-input-action:	EndCalibrate http://www.gc8848.com/EndCalibrate
//gsoap ns1  service method-output-action:	EndCalibrate http://www.gc8848.com/EndCalibrateResponse
int __ns1__EndCalibrate(
    _ns1__EndCalibrate*                 ns1__EndCalibrate,	///< Input parameter
    _ns1__EndCalibrateResponse         &ns1__EndCalibrateResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__TestPhoto                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__TestPhoto" of service binding "ServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://www.gc8848.com/TestPhoto"

  - Addressing input action: "http://www.gc8848.com/TestPhoto"

  - Addressing output action: "http://www.gc8848.com/TestPhotoResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__TestPhoto(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__TestPhoto*                    ns1__TestPhoto,
    // output parameters:
    _ns1__TestPhotoResponse            &ns1__TestPhotoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__TestPhoto(
    struct soap *soap,
    // input parameters:
    _ns1__TestPhoto*                    ns1__TestPhoto,
    // output parameters:
    _ns1__TestPhotoResponse            &ns1__TestPhotoResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapProxy.h):
@code
  class ServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapService.h):
@code
  class ServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	TestPhoto SOAP
//gsoap ns1  service method-style:	TestPhoto document
//gsoap ns1  service method-encoding:	TestPhoto literal
//gsoap ns1  service method-input-action:	TestPhoto http://www.gc8848.com/TestPhoto
//gsoap ns1  service method-output-action:	TestPhoto http://www.gc8848.com/TestPhotoResponse
int __ns1__TestPhoto(
    _ns1__TestPhoto*                    ns1__TestPhoto,	///< Input parameter
    _ns1__TestPhotoResponse            &ns1__TestPhotoResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__FuelEvaporationInspect                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__FuelEvaporationInspect" of service binding "ServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://www.gc8848.com/FuelEvaporationInspect"

  - Addressing input action: "http://www.gc8848.com/FuelEvaporationInspect"

  - Addressing output action: "http://www.gc8848.com/FuelEvaporationInspectResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__FuelEvaporationInspect(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__FuelEvaporationInspect*       ns1__FuelEvaporationInspect,
    // output parameters:
    _ns1__FuelEvaporationInspectResponse&ns1__FuelEvaporationInspectResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__FuelEvaporationInspect(
    struct soap *soap,
    // input parameters:
    _ns1__FuelEvaporationInspect*       ns1__FuelEvaporationInspect,
    // output parameters:
    _ns1__FuelEvaporationInspectResponse&ns1__FuelEvaporationInspectResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapProxy.h):
@code
  class ServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapService.h):
@code
  class ServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	FuelEvaporationInspect SOAP
//gsoap ns1  service method-style:	FuelEvaporationInspect document
//gsoap ns1  service method-encoding:	FuelEvaporationInspect literal
//gsoap ns1  service method-input-action:	FuelEvaporationInspect http://www.gc8848.com/FuelEvaporationInspect
//gsoap ns1  service method-output-action:	FuelEvaporationInspect http://www.gc8848.com/FuelEvaporationInspectResponse
int __ns1__FuelEvaporationInspect(
    _ns1__FuelEvaporationInspect*       ns1__FuelEvaporationInspect,	///< Input parameter
    _ns1__FuelEvaporationInspectResponse&ns1__FuelEvaporationInspectResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetInspectParams                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetInspectParams" of service binding "ServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://www.gc8848.com/GetInspectParams"

  - Addressing input action: "http://www.gc8848.com/GetInspectParams"

  - Addressing output action: "http://www.gc8848.com/GetInspectParamsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetInspectParams(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetInspectParams*             ns1__GetInspectParams,
    // output parameters:
    _ns1__GetInspectParamsResponse     &ns1__GetInspectParamsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetInspectParams(
    struct soap *soap,
    // input parameters:
    _ns1__GetInspectParams*             ns1__GetInspectParams,
    // output parameters:
    _ns1__GetInspectParamsResponse     &ns1__GetInspectParamsResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapProxy.h):
@code
  class ServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapService.h):
@code
  class ServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetInspectParams SOAP
//gsoap ns1  service method-style:	GetInspectParams document
//gsoap ns1  service method-encoding:	GetInspectParams literal
//gsoap ns1  service method-input-action:	GetInspectParams http://www.gc8848.com/GetInspectParams
//gsoap ns1  service method-output-action:	GetInspectParams http://www.gc8848.com/GetInspectParamsResponse
int __ns1__GetInspectParams(
    _ns1__GetInspectParams*             ns1__GetInspectParams,	///< Input parameter
    _ns1__GetInspectParamsResponse     &ns1__GetInspectParamsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetOtherInspectQueueByPlateID                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetOtherInspectQueueByPlateID" of service binding "ServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://www.gc8848.com/GetOtherInspectQueueByPlateID"

  - Addressing input action: "http://www.gc8848.com/GetOtherInspectQueueByPlateID"

  - Addressing output action: "http://www.gc8848.com/GetOtherInspectQueueByPlateIDResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetOtherInspectQueueByPlateID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetOtherInspectQueueByPlateID* ns1__GetOtherInspectQueueByPlateID,
    // output parameters:
    _ns1__GetOtherInspectQueueByPlateIDResponse&ns1__GetOtherInspectQueueByPlateIDResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetOtherInspectQueueByPlateID(
    struct soap *soap,
    // input parameters:
    _ns1__GetOtherInspectQueueByPlateID* ns1__GetOtherInspectQueueByPlateID,
    // output parameters:
    _ns1__GetOtherInspectQueueByPlateIDResponse&ns1__GetOtherInspectQueueByPlateIDResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapProxy.h):
@code
  class ServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapService.h):
@code
  class ServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetOtherInspectQueueByPlateID SOAP
//gsoap ns1  service method-style:	GetOtherInspectQueueByPlateID document
//gsoap ns1  service method-encoding:	GetOtherInspectQueueByPlateID literal
//gsoap ns1  service method-input-action:	GetOtherInspectQueueByPlateID http://www.gc8848.com/GetOtherInspectQueueByPlateID
//gsoap ns1  service method-output-action:	GetOtherInspectQueueByPlateID http://www.gc8848.com/GetOtherInspectQueueByPlateIDResponse
int __ns1__GetOtherInspectQueueByPlateID(
    _ns1__GetOtherInspectQueueByPlateID* ns1__GetOtherInspectQueueByPlateID,	///< Input parameter
    _ns1__GetOtherInspectQueueByPlateIDResponse&ns1__GetOtherInspectQueueByPlateIDResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetOtherInspectQueueByDate                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetOtherInspectQueueByDate" of service binding "ServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://www.gc8848.com/GetOtherInspectQueueByDate"

  - Addressing input action: "http://www.gc8848.com/GetOtherInspectQueueByDate"

  - Addressing output action: "http://www.gc8848.com/GetOtherInspectQueueByDateResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetOtherInspectQueueByDate(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetOtherInspectQueueByDate*   ns1__GetOtherInspectQueueByDate,
    // output parameters:
    _ns1__GetOtherInspectQueueByDateResponse&ns1__GetOtherInspectQueueByDateResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetOtherInspectQueueByDate(
    struct soap *soap,
    // input parameters:
    _ns1__GetOtherInspectQueueByDate*   ns1__GetOtherInspectQueueByDate,
    // output parameters:
    _ns1__GetOtherInspectQueueByDateResponse&ns1__GetOtherInspectQueueByDateResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapProxy.h):
@code
  class ServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapService.h):
@code
  class ServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetOtherInspectQueueByDate SOAP
//gsoap ns1  service method-style:	GetOtherInspectQueueByDate document
//gsoap ns1  service method-encoding:	GetOtherInspectQueueByDate literal
//gsoap ns1  service method-input-action:	GetOtherInspectQueueByDate http://www.gc8848.com/GetOtherInspectQueueByDate
//gsoap ns1  service method-output-action:	GetOtherInspectQueueByDate http://www.gc8848.com/GetOtherInspectQueueByDateResponse
int __ns1__GetOtherInspectQueueByDate(
    _ns1__GetOtherInspectQueueByDate*   ns1__GetOtherInspectQueueByDate,	///< Input parameter
    _ns1__GetOtherInspectQueueByDateResponse&ns1__GetOtherInspectQueueByDateResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__OBDInspect                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__OBDInspect" of service binding "ServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://www.gc8848.com/OBDInspect"

  - Addressing input action: "http://www.gc8848.com/OBDInspect"

  - Addressing output action: "http://www.gc8848.com/OBDInspectResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__OBDInspect(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__OBDInspect*                   ns1__OBDInspect,
    // output parameters:
    _ns1__OBDInspectResponse           &ns1__OBDInspectResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__OBDInspect(
    struct soap *soap,
    // input parameters:
    _ns1__OBDInspect*                   ns1__OBDInspect,
    // output parameters:
    _ns1__OBDInspectResponse           &ns1__OBDInspectResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapProxy.h):
@code
  class ServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapService.h):
@code
  class ServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	OBDInspect SOAP
//gsoap ns1  service method-style:	OBDInspect document
//gsoap ns1  service method-encoding:	OBDInspect literal
//gsoap ns1  service method-input-action:	OBDInspect http://www.gc8848.com/OBDInspect
//gsoap ns1  service method-output-action:	OBDInspect http://www.gc8848.com/OBDInspectResponse
int __ns1__OBDInspect(
    _ns1__OBDInspect*                   ns1__OBDInspect,	///< Input parameter
    _ns1__OBDInspectResponse           &ns1__OBDInspectResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__OBDTXCheck                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__OBDTXCheck" of service binding "ServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://www.gc8848.com/OBDTXCheck"

  - Addressing input action: "http://www.gc8848.com/OBDTXCheck"

  - Addressing output action: "http://www.gc8848.com/OBDTXCheckResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__OBDTXCheck(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__OBDTXCheck*                   ns1__OBDTXCheck,
    // output parameters:
    _ns1__OBDTXCheckResponse           &ns1__OBDTXCheckResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__OBDTXCheck(
    struct soap *soap,
    // input parameters:
    _ns1__OBDTXCheck*                   ns1__OBDTXCheck,
    // output parameters:
    _ns1__OBDTXCheckResponse           &ns1__OBDTXCheckResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapProxy.h):
@code
  class ServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapService.h):
@code
  class ServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	OBDTXCheck SOAP
//gsoap ns1  service method-style:	OBDTXCheck document
//gsoap ns1  service method-encoding:	OBDTXCheck literal
//gsoap ns1  service method-input-action:	OBDTXCheck http://www.gc8848.com/OBDTXCheck
//gsoap ns1  service method-output-action:	OBDTXCheck http://www.gc8848.com/OBDTXCheckResponse
int __ns1__OBDTXCheck(
    _ns1__OBDTXCheck*                   ns1__OBDTXCheck,	///< Input parameter
    _ns1__OBDTXCheckResponse           &ns1__OBDTXCheckResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__Sync_                                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__Sync_" of service binding "ServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://www.gc8848.com/Sync"

  - Addressing input action: "http://www.gc8848.com/Sync"

  - Addressing output action: "http://www.gc8848.com/SyncResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__Sync_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__Sync*                         ns1__Sync,
    // output parameters:
    _ns1__SyncResponse                 &ns1__SyncResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__Sync_(
    struct soap *soap,
    // input parameters:
    _ns1__Sync*                         ns1__Sync,
    // output parameters:
    _ns1__SyncResponse                 &ns1__SyncResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapProxy.h):
@code
  class ServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapService.h):
@code
  class ServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	Sync_ SOAP
//gsoap ns1  service method-style:	Sync_ document
//gsoap ns1  service method-encoding:	Sync_ literal
//gsoap ns1  service method-input-action:	Sync_ http://www.gc8848.com/Sync
//gsoap ns1  service method-output-action:	Sync_ http://www.gc8848.com/SyncResponse
int __ns1__Sync_(
    _ns1__Sync*                         ns1__Sync,	///< Input parameter
    _ns1__SyncResponse                 &ns1__SyncResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetInspectQueueByDate_                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetInspectQueueByDate_" of service binding "ServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://www.gc8848.com/GetInspectQueueByDate"

  - Addressing input action: "http://www.gc8848.com/GetInspectQueueByDate"

  - Addressing output action: "http://www.gc8848.com/GetInspectQueueByDateResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetInspectQueueByDate_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetInspectQueueByDate*        ns1__GetInspectQueueByDate,
    // output parameters:
    _ns1__GetInspectQueueByDateResponse&ns1__GetInspectQueueByDateResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetInspectQueueByDate_(
    struct soap *soap,
    // input parameters:
    _ns1__GetInspectQueueByDate*        ns1__GetInspectQueueByDate,
    // output parameters:
    _ns1__GetInspectQueueByDateResponse&ns1__GetInspectQueueByDateResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapProxy.h):
@code
  class ServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapService.h):
@code
  class ServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetInspectQueueByDate_ SOAP
//gsoap ns1  service method-style:	GetInspectQueueByDate_ document
//gsoap ns1  service method-encoding:	GetInspectQueueByDate_ literal
//gsoap ns1  service method-input-action:	GetInspectQueueByDate_ http://www.gc8848.com/GetInspectQueueByDate
//gsoap ns1  service method-output-action:	GetInspectQueueByDate_ http://www.gc8848.com/GetInspectQueueByDateResponse
int __ns1__GetInspectQueueByDate_(
    _ns1__GetInspectQueueByDate*        ns1__GetInspectQueueByDate,	///< Input parameter
    _ns1__GetInspectQueueByDateResponse&ns1__GetInspectQueueByDateResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetInspectQueueByPlateID_                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetInspectQueueByPlateID_" of service binding "ServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://www.gc8848.com/GetInspectQueueByPlateID"

  - Addressing input action: "http://www.gc8848.com/GetInspectQueueByPlateID"

  - Addressing output action: "http://www.gc8848.com/GetInspectQueueByPlateIDResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetInspectQueueByPlateID_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetInspectQueueByPlateID*     ns1__GetInspectQueueByPlateID,
    // output parameters:
    _ns1__GetInspectQueueByPlateIDResponse&ns1__GetInspectQueueByPlateIDResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetInspectQueueByPlateID_(
    struct soap *soap,
    // input parameters:
    _ns1__GetInspectQueueByPlateID*     ns1__GetInspectQueueByPlateID,
    // output parameters:
    _ns1__GetInspectQueueByPlateIDResponse&ns1__GetInspectQueueByPlateIDResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapProxy.h):
@code
  class ServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapService.h):
@code
  class ServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetInspectQueueByPlateID_ SOAP
//gsoap ns1  service method-style:	GetInspectQueueByPlateID_ document
//gsoap ns1  service method-encoding:	GetInspectQueueByPlateID_ literal
//gsoap ns1  service method-input-action:	GetInspectQueueByPlateID_ http://www.gc8848.com/GetInspectQueueByPlateID
//gsoap ns1  service method-output-action:	GetInspectQueueByPlateID_ http://www.gc8848.com/GetInspectQueueByPlateIDResponse
int __ns1__GetInspectQueueByPlateID_(
    _ns1__GetInspectQueueByPlateID*     ns1__GetInspectQueueByPlateID,	///< Input parameter
    _ns1__GetInspectQueueByPlateIDResponse&ns1__GetInspectQueueByPlateIDResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__AbortInspect_                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__AbortInspect_" of service binding "ServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://www.gc8848.com/AbortInspect"

  - Addressing input action: "http://www.gc8848.com/AbortInspect"

  - Addressing output action: "http://www.gc8848.com/AbortInspectResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__AbortInspect_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__AbortInspect*                 ns1__AbortInspect,
    // output parameters:
    _ns1__AbortInspectResponse         &ns1__AbortInspectResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__AbortInspect_(
    struct soap *soap,
    // input parameters:
    _ns1__AbortInspect*                 ns1__AbortInspect,
    // output parameters:
    _ns1__AbortInspectResponse         &ns1__AbortInspectResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapProxy.h):
@code
  class ServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapService.h):
@code
  class ServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	AbortInspect_ SOAP
//gsoap ns1  service method-style:	AbortInspect_ document
//gsoap ns1  service method-encoding:	AbortInspect_ literal
//gsoap ns1  service method-input-action:	AbortInspect_ http://www.gc8848.com/AbortInspect
//gsoap ns1  service method-output-action:	AbortInspect_ http://www.gc8848.com/AbortInspectResponse
int __ns1__AbortInspect_(
    _ns1__AbortInspect*                 ns1__AbortInspect,	///< Input parameter
    _ns1__AbortInspectResponse         &ns1__AbortInspectResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__BeginRecord_                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__BeginRecord_" of service binding "ServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://www.gc8848.com/BeginRecord"

  - Addressing input action: "http://www.gc8848.com/BeginRecord"

  - Addressing output action: "http://www.gc8848.com/BeginRecordResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__BeginRecord_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__BeginRecord*                  ns1__BeginRecord,
    // output parameters:
    _ns1__BeginRecordResponse          &ns1__BeginRecordResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__BeginRecord_(
    struct soap *soap,
    // input parameters:
    _ns1__BeginRecord*                  ns1__BeginRecord,
    // output parameters:
    _ns1__BeginRecordResponse          &ns1__BeginRecordResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapProxy.h):
@code
  class ServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapService.h):
@code
  class ServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	BeginRecord_ SOAP
//gsoap ns1  service method-style:	BeginRecord_ document
//gsoap ns1  service method-encoding:	BeginRecord_ literal
//gsoap ns1  service method-input-action:	BeginRecord_ http://www.gc8848.com/BeginRecord
//gsoap ns1  service method-output-action:	BeginRecord_ http://www.gc8848.com/BeginRecordResponse
int __ns1__BeginRecord_(
    _ns1__BeginRecord*                  ns1__BeginRecord,	///< Input parameter
    _ns1__BeginRecordResponse          &ns1__BeginRecordResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__EndRecord_                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__EndRecord_" of service binding "ServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://www.gc8848.com/EndRecord"

  - Addressing input action: "http://www.gc8848.com/EndRecord"

  - Addressing output action: "http://www.gc8848.com/EndRecordResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__EndRecord_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__EndRecord*                    ns1__EndRecord,
    // output parameters:
    _ns1__EndRecordResponse            &ns1__EndRecordResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__EndRecord_(
    struct soap *soap,
    // input parameters:
    _ns1__EndRecord*                    ns1__EndRecord,
    // output parameters:
    _ns1__EndRecordResponse            &ns1__EndRecordResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapProxy.h):
@code
  class ServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapService.h):
@code
  class ServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	EndRecord_ SOAP
//gsoap ns1  service method-style:	EndRecord_ document
//gsoap ns1  service method-encoding:	EndRecord_ literal
//gsoap ns1  service method-input-action:	EndRecord_ http://www.gc8848.com/EndRecord
//gsoap ns1  service method-output-action:	EndRecord_ http://www.gc8848.com/EndRecordResponse
int __ns1__EndRecord_(
    _ns1__EndRecord*                    ns1__EndRecord,	///< Input parameter
    _ns1__EndRecordResponse            &ns1__EndRecordResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__BeginInspect_                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__BeginInspect_" of service binding "ServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://www.gc8848.com/BeginInspect"

  - Addressing input action: "http://www.gc8848.com/BeginInspect"

  - Addressing output action: "http://www.gc8848.com/BeginInspectResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__BeginInspect_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__BeginInspect*                 ns1__BeginInspect,
    // output parameters:
    _ns1__BeginInspectResponse         &ns1__BeginInspectResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__BeginInspect_(
    struct soap *soap,
    // input parameters:
    _ns1__BeginInspect*                 ns1__BeginInspect,
    // output parameters:
    _ns1__BeginInspectResponse         &ns1__BeginInspectResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapProxy.h):
@code
  class ServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapService.h):
@code
  class ServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	BeginInspect_ SOAP
//gsoap ns1  service method-style:	BeginInspect_ document
//gsoap ns1  service method-encoding:	BeginInspect_ literal
//gsoap ns1  service method-input-action:	BeginInspect_ http://www.gc8848.com/BeginInspect
//gsoap ns1  service method-output-action:	BeginInspect_ http://www.gc8848.com/BeginInspectResponse
int __ns1__BeginInspect_(
    _ns1__BeginInspect*                 ns1__BeginInspect,	///< Input parameter
    _ns1__BeginInspectResponse         &ns1__BeginInspectResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetLimit_                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetLimit_" of service binding "ServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://www.gc8848.com/GetLimit"

  - Addressing input action: "http://www.gc8848.com/GetLimit"

  - Addressing output action: "http://www.gc8848.com/GetLimitResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetLimit_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetLimit*                     ns1__GetLimit,
    // output parameters:
    _ns1__GetLimitResponse             &ns1__GetLimitResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetLimit_(
    struct soap *soap,
    // input parameters:
    _ns1__GetLimit*                     ns1__GetLimit,
    // output parameters:
    _ns1__GetLimitResponse             &ns1__GetLimitResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapProxy.h):
@code
  class ServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapService.h):
@code
  class ServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetLimit_ SOAP
//gsoap ns1  service method-style:	GetLimit_ document
//gsoap ns1  service method-encoding:	GetLimit_ literal
//gsoap ns1  service method-input-action:	GetLimit_ http://www.gc8848.com/GetLimit
//gsoap ns1  service method-output-action:	GetLimit_ http://www.gc8848.com/GetLimitResponse
int __ns1__GetLimit_(
    _ns1__GetLimit*                     ns1__GetLimit,	///< Input parameter
    _ns1__GetLimitResponse             &ns1__GetLimitResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__TakePhoto_                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__TakePhoto_" of service binding "ServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://www.gc8848.com/TakePhoto"

  - Addressing input action: "http://www.gc8848.com/TakePhoto"

  - Addressing output action: "http://www.gc8848.com/TakePhotoResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__TakePhoto_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__TakePhoto*                    ns1__TakePhoto,
    // output parameters:
    _ns1__TakePhotoResponse            &ns1__TakePhotoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__TakePhoto_(
    struct soap *soap,
    // input parameters:
    _ns1__TakePhoto*                    ns1__TakePhoto,
    // output parameters:
    _ns1__TakePhotoResponse            &ns1__TakePhotoResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapProxy.h):
@code
  class ServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapService.h):
@code
  class ServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	TakePhoto_ SOAP
//gsoap ns1  service method-style:	TakePhoto_ document
//gsoap ns1  service method-encoding:	TakePhoto_ literal
//gsoap ns1  service method-input-action:	TakePhoto_ http://www.gc8848.com/TakePhoto
//gsoap ns1  service method-output-action:	TakePhoto_ http://www.gc8848.com/TakePhotoResponse
int __ns1__TakePhoto_(
    _ns1__TakePhoto*                    ns1__TakePhoto,	///< Input parameter
    _ns1__TakePhotoResponse            &ns1__TakePhotoResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__WJTakePhoto_                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__WJTakePhoto_" of service binding "ServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://www.gc8848.com/WJTakePhoto"

  - Addressing input action: "http://www.gc8848.com/WJTakePhoto"

  - Addressing output action: "http://www.gc8848.com/WJTakePhotoResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__WJTakePhoto_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__WJTakePhoto*                  ns1__WJTakePhoto,
    // output parameters:
    _ns1__WJTakePhotoResponse          &ns1__WJTakePhotoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__WJTakePhoto_(
    struct soap *soap,
    // input parameters:
    _ns1__WJTakePhoto*                  ns1__WJTakePhoto,
    // output parameters:
    _ns1__WJTakePhotoResponse          &ns1__WJTakePhotoResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapProxy.h):
@code
  class ServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapService.h):
@code
  class ServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	WJTakePhoto_ SOAP
//gsoap ns1  service method-style:	WJTakePhoto_ document
//gsoap ns1  service method-encoding:	WJTakePhoto_ literal
//gsoap ns1  service method-input-action:	WJTakePhoto_ http://www.gc8848.com/WJTakePhoto
//gsoap ns1  service method-output-action:	WJTakePhoto_ http://www.gc8848.com/WJTakePhotoResponse
int __ns1__WJTakePhoto_(
    _ns1__WJTakePhoto*                  ns1__WJTakePhoto,	///< Input parameter
    _ns1__WJTakePhotoResponse          &ns1__WJTakePhotoResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__StopInspect_                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__StopInspect_" of service binding "ServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://www.gc8848.com/StopInspect"

  - Addressing input action: "http://www.gc8848.com/StopInspect"

  - Addressing output action: "http://www.gc8848.com/StopInspectResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__StopInspect_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__StopInspect*                  ns1__StopInspect,
    // output parameters:
    _ns1__StopInspectResponse          &ns1__StopInspectResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__StopInspect_(
    struct soap *soap,
    // input parameters:
    _ns1__StopInspect*                  ns1__StopInspect,
    // output parameters:
    _ns1__StopInspectResponse          &ns1__StopInspectResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapProxy.h):
@code
  class ServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapService.h):
@code
  class ServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	StopInspect_ SOAP
//gsoap ns1  service method-style:	StopInspect_ document
//gsoap ns1  service method-encoding:	StopInspect_ literal
//gsoap ns1  service method-input-action:	StopInspect_ http://www.gc8848.com/StopInspect
//gsoap ns1  service method-output-action:	StopInspect_ http://www.gc8848.com/StopInspectResponse
int __ns1__StopInspect_(
    _ns1__StopInspect*                  ns1__StopInspect,	///< Input parameter
    _ns1__StopInspectResponse          &ns1__StopInspectResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__EndInspect_                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__EndInspect_" of service binding "ServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://www.gc8848.com/EndInspect"

  - Addressing input action: "http://www.gc8848.com/EndInspect"

  - Addressing output action: "http://www.gc8848.com/EndInspectResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__EndInspect_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__EndInspect*                   ns1__EndInspect,
    // output parameters:
    _ns1__EndInspectResponse           &ns1__EndInspectResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__EndInspect_(
    struct soap *soap,
    // input parameters:
    _ns1__EndInspect*                   ns1__EndInspect,
    // output parameters:
    _ns1__EndInspectResponse           &ns1__EndInspectResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapProxy.h):
@code
  class ServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapService.h):
@code
  class ServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	EndInspect_ SOAP
//gsoap ns1  service method-style:	EndInspect_ document
//gsoap ns1  service method-encoding:	EndInspect_ literal
//gsoap ns1  service method-input-action:	EndInspect_ http://www.gc8848.com/EndInspect
//gsoap ns1  service method-output-action:	EndInspect_ http://www.gc8848.com/EndInspectResponse
int __ns1__EndInspect_(
    _ns1__EndInspect*                   ns1__EndInspect,	///< Input parameter
    _ns1__EndInspectResponse           &ns1__EndInspectResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__UploadSelfTestData_                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__UploadSelfTestData_" of service binding "ServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://www.gc8848.com/UploadSelfTestData"

  - Addressing input action: "http://www.gc8848.com/UploadSelfTestData"

  - Addressing output action: "http://www.gc8848.com/UploadSelfTestDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__UploadSelfTestData_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__UploadSelfTestData*           ns1__UploadSelfTestData,
    // output parameters:
    _ns1__UploadSelfTestDataResponse   &ns1__UploadSelfTestDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__UploadSelfTestData_(
    struct soap *soap,
    // input parameters:
    _ns1__UploadSelfTestData*           ns1__UploadSelfTestData,
    // output parameters:
    _ns1__UploadSelfTestDataResponse   &ns1__UploadSelfTestDataResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapProxy.h):
@code
  class ServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapService.h):
@code
  class ServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	UploadSelfTestData_ SOAP
//gsoap ns1  service method-style:	UploadSelfTestData_ document
//gsoap ns1  service method-encoding:	UploadSelfTestData_ literal
//gsoap ns1  service method-input-action:	UploadSelfTestData_ http://www.gc8848.com/UploadSelfTestData
//gsoap ns1  service method-output-action:	UploadSelfTestData_ http://www.gc8848.com/UploadSelfTestDataResponse
int __ns1__UploadSelfTestData_(
    _ns1__UploadSelfTestData*           ns1__UploadSelfTestData,	///< Input parameter
    _ns1__UploadSelfTestDataResponse   &ns1__UploadSelfTestDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__UploadRealtimeData_                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__UploadRealtimeData_" of service binding "ServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://www.gc8848.com/UploadRealtimeData"

  - Addressing input action: "http://www.gc8848.com/UploadRealtimeData"

  - Addressing output action: "http://www.gc8848.com/UploadRealtimeDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__UploadRealtimeData_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__UploadRealtimeData*           ns1__UploadRealtimeData,
    // output parameters:
    _ns1__UploadRealtimeDataResponse   &ns1__UploadRealtimeDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__UploadRealtimeData_(
    struct soap *soap,
    // input parameters:
    _ns1__UploadRealtimeData*           ns1__UploadRealtimeData,
    // output parameters:
    _ns1__UploadRealtimeDataResponse   &ns1__UploadRealtimeDataResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapProxy.h):
@code
  class ServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapService.h):
@code
  class ServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	UploadRealtimeData_ SOAP
//gsoap ns1  service method-style:	UploadRealtimeData_ document
//gsoap ns1  service method-encoding:	UploadRealtimeData_ literal
//gsoap ns1  service method-input-action:	UploadRealtimeData_ http://www.gc8848.com/UploadRealtimeData
//gsoap ns1  service method-output-action:	UploadRealtimeData_ http://www.gc8848.com/UploadRealtimeDataResponse
int __ns1__UploadRealtimeData_(
    _ns1__UploadRealtimeData*           ns1__UploadRealtimeData,	///< Input parameter
    _ns1__UploadRealtimeDataResponse   &ns1__UploadRealtimeDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetInspectionInfo_                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetInspectionInfo_" of service binding "ServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://www.gc8848.com/GetInspectionInfo"

  - Addressing input action: "http://www.gc8848.com/GetInspectionInfo"

  - Addressing output action: "http://www.gc8848.com/GetInspectionInfoResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetInspectionInfo_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetInspectionInfo*            ns1__GetInspectionInfo,
    // output parameters:
    _ns1__GetInspectionInfoResponse    &ns1__GetInspectionInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetInspectionInfo_(
    struct soap *soap,
    // input parameters:
    _ns1__GetInspectionInfo*            ns1__GetInspectionInfo,
    // output parameters:
    _ns1__GetInspectionInfoResponse    &ns1__GetInspectionInfoResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapProxy.h):
@code
  class ServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapService.h):
@code
  class ServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetInspectionInfo_ SOAP
//gsoap ns1  service method-style:	GetInspectionInfo_ document
//gsoap ns1  service method-encoding:	GetInspectionInfo_ literal
//gsoap ns1  service method-input-action:	GetInspectionInfo_ http://www.gc8848.com/GetInspectionInfo
//gsoap ns1  service method-output-action:	GetInspectionInfo_ http://www.gc8848.com/GetInspectionInfoResponse
int __ns1__GetInspectionInfo_(
    _ns1__GetInspectionInfo*            ns1__GetInspectionInfo,	///< Input parameter
    _ns1__GetInspectionInfoResponse    &ns1__GetInspectionInfoResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__BeginCalibrate_                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__BeginCalibrate_" of service binding "ServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://www.gc8848.com/BeginCalibrate"

  - Addressing input action: "http://www.gc8848.com/BeginCalibrate"

  - Addressing output action: "http://www.gc8848.com/BeginCalibrateResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__BeginCalibrate_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__BeginCalibrate*               ns1__BeginCalibrate,
    // output parameters:
    _ns1__BeginCalibrateResponse       &ns1__BeginCalibrateResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__BeginCalibrate_(
    struct soap *soap,
    // input parameters:
    _ns1__BeginCalibrate*               ns1__BeginCalibrate,
    // output parameters:
    _ns1__BeginCalibrateResponse       &ns1__BeginCalibrateResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapProxy.h):
@code
  class ServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapService.h):
@code
  class ServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	BeginCalibrate_ SOAP
//gsoap ns1  service method-style:	BeginCalibrate_ document
//gsoap ns1  service method-encoding:	BeginCalibrate_ literal
//gsoap ns1  service method-input-action:	BeginCalibrate_ http://www.gc8848.com/BeginCalibrate
//gsoap ns1  service method-output-action:	BeginCalibrate_ http://www.gc8848.com/BeginCalibrateResponse
int __ns1__BeginCalibrate_(
    _ns1__BeginCalibrate*               ns1__BeginCalibrate,	///< Input parameter
    _ns1__BeginCalibrateResponse       &ns1__BeginCalibrateResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__UploadCalibrateData_                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__UploadCalibrateData_" of service binding "ServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://www.gc8848.com/UploadCalibrateData"

  - Addressing input action: "http://www.gc8848.com/UploadCalibrateData"

  - Addressing output action: "http://www.gc8848.com/UploadCalibrateDataResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__UploadCalibrateData_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__UploadCalibrateData*          ns1__UploadCalibrateData,
    // output parameters:
    _ns1__UploadCalibrateDataResponse  &ns1__UploadCalibrateDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__UploadCalibrateData_(
    struct soap *soap,
    // input parameters:
    _ns1__UploadCalibrateData*          ns1__UploadCalibrateData,
    // output parameters:
    _ns1__UploadCalibrateDataResponse  &ns1__UploadCalibrateDataResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapProxy.h):
@code
  class ServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapService.h):
@code
  class ServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	UploadCalibrateData_ SOAP
//gsoap ns1  service method-style:	UploadCalibrateData_ document
//gsoap ns1  service method-encoding:	UploadCalibrateData_ literal
//gsoap ns1  service method-input-action:	UploadCalibrateData_ http://www.gc8848.com/UploadCalibrateData
//gsoap ns1  service method-output-action:	UploadCalibrateData_ http://www.gc8848.com/UploadCalibrateDataResponse
int __ns1__UploadCalibrateData_(
    _ns1__UploadCalibrateData*          ns1__UploadCalibrateData,	///< Input parameter
    _ns1__UploadCalibrateDataResponse  &ns1__UploadCalibrateDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__EndCalibrate_                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__EndCalibrate_" of service binding "ServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://www.gc8848.com/EndCalibrate"

  - Addressing input action: "http://www.gc8848.com/EndCalibrate"

  - Addressing output action: "http://www.gc8848.com/EndCalibrateResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__EndCalibrate_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__EndCalibrate*                 ns1__EndCalibrate,
    // output parameters:
    _ns1__EndCalibrateResponse         &ns1__EndCalibrateResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__EndCalibrate_(
    struct soap *soap,
    // input parameters:
    _ns1__EndCalibrate*                 ns1__EndCalibrate,
    // output parameters:
    _ns1__EndCalibrateResponse         &ns1__EndCalibrateResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapProxy.h):
@code
  class ServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapService.h):
@code
  class ServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	EndCalibrate_ SOAP
//gsoap ns1  service method-style:	EndCalibrate_ document
//gsoap ns1  service method-encoding:	EndCalibrate_ literal
//gsoap ns1  service method-input-action:	EndCalibrate_ http://www.gc8848.com/EndCalibrate
//gsoap ns1  service method-output-action:	EndCalibrate_ http://www.gc8848.com/EndCalibrateResponse
int __ns1__EndCalibrate_(
    _ns1__EndCalibrate*                 ns1__EndCalibrate,	///< Input parameter
    _ns1__EndCalibrateResponse         &ns1__EndCalibrateResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__TestPhoto_                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__TestPhoto_" of service binding "ServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://www.gc8848.com/TestPhoto"

  - Addressing input action: "http://www.gc8848.com/TestPhoto"

  - Addressing output action: "http://www.gc8848.com/TestPhotoResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__TestPhoto_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__TestPhoto*                    ns1__TestPhoto,
    // output parameters:
    _ns1__TestPhotoResponse            &ns1__TestPhotoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__TestPhoto_(
    struct soap *soap,
    // input parameters:
    _ns1__TestPhoto*                    ns1__TestPhoto,
    // output parameters:
    _ns1__TestPhotoResponse            &ns1__TestPhotoResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapProxy.h):
@code
  class ServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapService.h):
@code
  class ServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	TestPhoto_ SOAP
//gsoap ns1  service method-style:	TestPhoto_ document
//gsoap ns1  service method-encoding:	TestPhoto_ literal
//gsoap ns1  service method-input-action:	TestPhoto_ http://www.gc8848.com/TestPhoto
//gsoap ns1  service method-output-action:	TestPhoto_ http://www.gc8848.com/TestPhotoResponse
int __ns1__TestPhoto_(
    _ns1__TestPhoto*                    ns1__TestPhoto,	///< Input parameter
    _ns1__TestPhotoResponse            &ns1__TestPhotoResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__FuelEvaporationInspect_                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__FuelEvaporationInspect_" of service binding "ServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://www.gc8848.com/FuelEvaporationInspect"

  - Addressing input action: "http://www.gc8848.com/FuelEvaporationInspect"

  - Addressing output action: "http://www.gc8848.com/FuelEvaporationInspectResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__FuelEvaporationInspect_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__FuelEvaporationInspect*       ns1__FuelEvaporationInspect,
    // output parameters:
    _ns1__FuelEvaporationInspectResponse&ns1__FuelEvaporationInspectResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__FuelEvaporationInspect_(
    struct soap *soap,
    // input parameters:
    _ns1__FuelEvaporationInspect*       ns1__FuelEvaporationInspect,
    // output parameters:
    _ns1__FuelEvaporationInspectResponse&ns1__FuelEvaporationInspectResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapProxy.h):
@code
  class ServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapService.h):
@code
  class ServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	FuelEvaporationInspect_ SOAP
//gsoap ns1  service method-style:	FuelEvaporationInspect_ document
//gsoap ns1  service method-encoding:	FuelEvaporationInspect_ literal
//gsoap ns1  service method-input-action:	FuelEvaporationInspect_ http://www.gc8848.com/FuelEvaporationInspect
//gsoap ns1  service method-output-action:	FuelEvaporationInspect_ http://www.gc8848.com/FuelEvaporationInspectResponse
int __ns1__FuelEvaporationInspect_(
    _ns1__FuelEvaporationInspect*       ns1__FuelEvaporationInspect,	///< Input parameter
    _ns1__FuelEvaporationInspectResponse&ns1__FuelEvaporationInspectResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetInspectParams_                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetInspectParams_" of service binding "ServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://www.gc8848.com/GetInspectParams"

  - Addressing input action: "http://www.gc8848.com/GetInspectParams"

  - Addressing output action: "http://www.gc8848.com/GetInspectParamsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetInspectParams_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetInspectParams*             ns1__GetInspectParams,
    // output parameters:
    _ns1__GetInspectParamsResponse     &ns1__GetInspectParamsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetInspectParams_(
    struct soap *soap,
    // input parameters:
    _ns1__GetInspectParams*             ns1__GetInspectParams,
    // output parameters:
    _ns1__GetInspectParamsResponse     &ns1__GetInspectParamsResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapProxy.h):
@code
  class ServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapService.h):
@code
  class ServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetInspectParams_ SOAP
//gsoap ns1  service method-style:	GetInspectParams_ document
//gsoap ns1  service method-encoding:	GetInspectParams_ literal
//gsoap ns1  service method-input-action:	GetInspectParams_ http://www.gc8848.com/GetInspectParams
//gsoap ns1  service method-output-action:	GetInspectParams_ http://www.gc8848.com/GetInspectParamsResponse
int __ns1__GetInspectParams_(
    _ns1__GetInspectParams*             ns1__GetInspectParams,	///< Input parameter
    _ns1__GetInspectParamsResponse     &ns1__GetInspectParamsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetOtherInspectQueueByPlateID_                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetOtherInspectQueueByPlateID_" of service binding "ServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://www.gc8848.com/GetOtherInspectQueueByPlateID"

  - Addressing input action: "http://www.gc8848.com/GetOtherInspectQueueByPlateID"

  - Addressing output action: "http://www.gc8848.com/GetOtherInspectQueueByPlateIDResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetOtherInspectQueueByPlateID_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetOtherInspectQueueByPlateID* ns1__GetOtherInspectQueueByPlateID,
    // output parameters:
    _ns1__GetOtherInspectQueueByPlateIDResponse&ns1__GetOtherInspectQueueByPlateIDResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetOtherInspectQueueByPlateID_(
    struct soap *soap,
    // input parameters:
    _ns1__GetOtherInspectQueueByPlateID* ns1__GetOtherInspectQueueByPlateID,
    // output parameters:
    _ns1__GetOtherInspectQueueByPlateIDResponse&ns1__GetOtherInspectQueueByPlateIDResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapProxy.h):
@code
  class ServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapService.h):
@code
  class ServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetOtherInspectQueueByPlateID_ SOAP
//gsoap ns1  service method-style:	GetOtherInspectQueueByPlateID_ document
//gsoap ns1  service method-encoding:	GetOtherInspectQueueByPlateID_ literal
//gsoap ns1  service method-input-action:	GetOtherInspectQueueByPlateID_ http://www.gc8848.com/GetOtherInspectQueueByPlateID
//gsoap ns1  service method-output-action:	GetOtherInspectQueueByPlateID_ http://www.gc8848.com/GetOtherInspectQueueByPlateIDResponse
int __ns1__GetOtherInspectQueueByPlateID_(
    _ns1__GetOtherInspectQueueByPlateID* ns1__GetOtherInspectQueueByPlateID,	///< Input parameter
    _ns1__GetOtherInspectQueueByPlateIDResponse&ns1__GetOtherInspectQueueByPlateIDResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetOtherInspectQueueByDate_                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetOtherInspectQueueByDate_" of service binding "ServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://www.gc8848.com/GetOtherInspectQueueByDate"

  - Addressing input action: "http://www.gc8848.com/GetOtherInspectQueueByDate"

  - Addressing output action: "http://www.gc8848.com/GetOtherInspectQueueByDateResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetOtherInspectQueueByDate_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetOtherInspectQueueByDate*   ns1__GetOtherInspectQueueByDate,
    // output parameters:
    _ns1__GetOtherInspectQueueByDateResponse&ns1__GetOtherInspectQueueByDateResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetOtherInspectQueueByDate_(
    struct soap *soap,
    // input parameters:
    _ns1__GetOtherInspectQueueByDate*   ns1__GetOtherInspectQueueByDate,
    // output parameters:
    _ns1__GetOtherInspectQueueByDateResponse&ns1__GetOtherInspectQueueByDateResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapProxy.h):
@code
  class ServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapService.h):
@code
  class ServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetOtherInspectQueueByDate_ SOAP
//gsoap ns1  service method-style:	GetOtherInspectQueueByDate_ document
//gsoap ns1  service method-encoding:	GetOtherInspectQueueByDate_ literal
//gsoap ns1  service method-input-action:	GetOtherInspectQueueByDate_ http://www.gc8848.com/GetOtherInspectQueueByDate
//gsoap ns1  service method-output-action:	GetOtherInspectQueueByDate_ http://www.gc8848.com/GetOtherInspectQueueByDateResponse
int __ns1__GetOtherInspectQueueByDate_(
    _ns1__GetOtherInspectQueueByDate*   ns1__GetOtherInspectQueueByDate,	///< Input parameter
    _ns1__GetOtherInspectQueueByDateResponse&ns1__GetOtherInspectQueueByDateResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__OBDInspect_                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__OBDInspect_" of service binding "ServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://www.gc8848.com/OBDInspect"

  - Addressing input action: "http://www.gc8848.com/OBDInspect"

  - Addressing output action: "http://www.gc8848.com/OBDInspectResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__OBDInspect_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__OBDInspect*                   ns1__OBDInspect,
    // output parameters:
    _ns1__OBDInspectResponse           &ns1__OBDInspectResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__OBDInspect_(
    struct soap *soap,
    // input parameters:
    _ns1__OBDInspect*                   ns1__OBDInspect,
    // output parameters:
    _ns1__OBDInspectResponse           &ns1__OBDInspectResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapProxy.h):
@code
  class ServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapService.h):
@code
  class ServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	OBDInspect_ SOAP
//gsoap ns1  service method-style:	OBDInspect_ document
//gsoap ns1  service method-encoding:	OBDInspect_ literal
//gsoap ns1  service method-input-action:	OBDInspect_ http://www.gc8848.com/OBDInspect
//gsoap ns1  service method-output-action:	OBDInspect_ http://www.gc8848.com/OBDInspectResponse
int __ns1__OBDInspect_(
    _ns1__OBDInspect*                   ns1__OBDInspect,	///< Input parameter
    _ns1__OBDInspectResponse           &ns1__OBDInspectResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__OBDTXCheck_                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__OBDTXCheck_" of service binding "ServiceSoap".

  - SOAP document/literal style messaging

  - Action: "http://www.gc8848.com/OBDTXCheck"

  - Addressing input action: "http://www.gc8848.com/OBDTXCheck"

  - Addressing output action: "http://www.gc8848.com/OBDTXCheckResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__OBDTXCheck_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__OBDTXCheck*                   ns1__OBDTXCheck,
    // output parameters:
    _ns1__OBDTXCheckResponse           &ns1__OBDTXCheckResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__OBDTXCheck_(
    struct soap *soap,
    // input parameters:
    _ns1__OBDTXCheck*                   ns1__OBDTXCheck,
    // output parameters:
    _ns1__OBDTXCheckResponse           &ns1__OBDTXCheckResponse
  );
@endcode

C++ proxy class (defined in soapServiceSoapProxy.h):
@code
  class ServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServiceSoapService.h):
@code
  class ServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	OBDTXCheck_ SOAP
//gsoap ns1  service method-style:	OBDTXCheck_ document
//gsoap ns1  service method-encoding:	OBDTXCheck_ literal
//gsoap ns1  service method-input-action:	OBDTXCheck_ http://www.gc8848.com/OBDTXCheck
//gsoap ns1  service method-output-action:	OBDTXCheck_ http://www.gc8848.com/OBDTXCheckResponse
int __ns1__OBDTXCheck_(
    _ns1__OBDTXCheck*                   ns1__OBDTXCheck,	///< Input parameter
    _ns1__OBDTXCheckResponse           &ns1__OBDTXCheckResponse	///< Output parameter
);

/**

@page ServiceSoap Binding "ServiceSoap"

@section ServiceSoap_policy_enablers Policy Enablers of Binding "ServiceSoap"

Based on policies, this service imports

  - WS-Policy reminders and enablers:
    - WS-Addressing 1.0 (2005/08, accepts 2004/08):
	@code
	#import "wsa5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-Addressing (2004/08):
	@code
	#import "wsa.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-ReliableMessaging 1.0:
	@code
	#import "wsrm5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-ReliableMessaging 1.1:
	@code
	#import "wsrm.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.0 (accepts 1.1):
	@code
	#import "wsse.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.1 (accepts 1.0):
	@code
	#import "wsse11.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - HTTP Digest Authentication:
	@code
	#include "plugin/httpda.h"
	soap_register_plugin(soap, soap_http_da); // register the HTTP DA plugin in your code
	// See the user guide gsoap/doc/httpda/html/index.html
	@endcode
*/


/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read in XML and deserialized from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

Data can be serialized in XML and written to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section ns1 Top-level root elements of schema "http://www.gc8848.com/"

  - <Sync> @ref _ns1__Sync
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__Sync(struct soap*, _ns1__Sync*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__Sync(struct soap*, _ns1__Sync*);
    @endcode

  - <SyncResponse> @ref _ns1__SyncResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SyncResponse(struct soap*, _ns1__SyncResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SyncResponse(struct soap*, _ns1__SyncResponse*);
    @endcode

  - <GetInspectQueueByDate> @ref _ns1__GetInspectQueueByDate
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetInspectQueueByDate(struct soap*, _ns1__GetInspectQueueByDate*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetInspectQueueByDate(struct soap*, _ns1__GetInspectQueueByDate*);
    @endcode

  - <GetInspectQueueByDateResponse> @ref _ns1__GetInspectQueueByDateResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetInspectQueueByDateResponse(struct soap*, _ns1__GetInspectQueueByDateResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetInspectQueueByDateResponse(struct soap*, _ns1__GetInspectQueueByDateResponse*);
    @endcode

  - <GetInspectQueueByPlateID> @ref _ns1__GetInspectQueueByPlateID
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetInspectQueueByPlateID(struct soap*, _ns1__GetInspectQueueByPlateID*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetInspectQueueByPlateID(struct soap*, _ns1__GetInspectQueueByPlateID*);
    @endcode

  - <GetInspectQueueByPlateIDResponse> @ref _ns1__GetInspectQueueByPlateIDResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetInspectQueueByPlateIDResponse(struct soap*, _ns1__GetInspectQueueByPlateIDResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetInspectQueueByPlateIDResponse(struct soap*, _ns1__GetInspectQueueByPlateIDResponse*);
    @endcode

  - <AbortInspect> @ref _ns1__AbortInspect
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__AbortInspect(struct soap*, _ns1__AbortInspect*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__AbortInspect(struct soap*, _ns1__AbortInspect*);
    @endcode

  - <AbortInspectResponse> @ref _ns1__AbortInspectResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__AbortInspectResponse(struct soap*, _ns1__AbortInspectResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__AbortInspectResponse(struct soap*, _ns1__AbortInspectResponse*);
    @endcode

  - <BeginRecord> @ref _ns1__BeginRecord
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__BeginRecord(struct soap*, _ns1__BeginRecord*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__BeginRecord(struct soap*, _ns1__BeginRecord*);
    @endcode

  - <BeginRecordResponse> @ref _ns1__BeginRecordResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__BeginRecordResponse(struct soap*, _ns1__BeginRecordResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__BeginRecordResponse(struct soap*, _ns1__BeginRecordResponse*);
    @endcode

  - <EndRecord> @ref _ns1__EndRecord
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__EndRecord(struct soap*, _ns1__EndRecord*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__EndRecord(struct soap*, _ns1__EndRecord*);
    @endcode

  - <EndRecordResponse> @ref _ns1__EndRecordResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__EndRecordResponse(struct soap*, _ns1__EndRecordResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__EndRecordResponse(struct soap*, _ns1__EndRecordResponse*);
    @endcode

  - <BeginInspect> @ref _ns1__BeginInspect
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__BeginInspect(struct soap*, _ns1__BeginInspect*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__BeginInspect(struct soap*, _ns1__BeginInspect*);
    @endcode

  - <BeginInspectResponse> @ref _ns1__BeginInspectResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__BeginInspectResponse(struct soap*, _ns1__BeginInspectResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__BeginInspectResponse(struct soap*, _ns1__BeginInspectResponse*);
    @endcode

  - <GetLimit> @ref _ns1__GetLimit
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetLimit(struct soap*, _ns1__GetLimit*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetLimit(struct soap*, _ns1__GetLimit*);
    @endcode

  - <GetLimitResponse> @ref _ns1__GetLimitResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetLimitResponse(struct soap*, _ns1__GetLimitResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetLimitResponse(struct soap*, _ns1__GetLimitResponse*);
    @endcode

  - <TakePhoto> @ref _ns1__TakePhoto
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__TakePhoto(struct soap*, _ns1__TakePhoto*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__TakePhoto(struct soap*, _ns1__TakePhoto*);
    @endcode

  - <TakePhotoResponse> @ref _ns1__TakePhotoResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__TakePhotoResponse(struct soap*, _ns1__TakePhotoResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__TakePhotoResponse(struct soap*, _ns1__TakePhotoResponse*);
    @endcode

  - <WJTakePhoto> @ref _ns1__WJTakePhoto
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__WJTakePhoto(struct soap*, _ns1__WJTakePhoto*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__WJTakePhoto(struct soap*, _ns1__WJTakePhoto*);
    @endcode

  - <WJTakePhotoResponse> @ref _ns1__WJTakePhotoResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__WJTakePhotoResponse(struct soap*, _ns1__WJTakePhotoResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__WJTakePhotoResponse(struct soap*, _ns1__WJTakePhotoResponse*);
    @endcode

  - <StopInspect> @ref _ns1__StopInspect
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__StopInspect(struct soap*, _ns1__StopInspect*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__StopInspect(struct soap*, _ns1__StopInspect*);
    @endcode

  - <StopInspectResponse> @ref _ns1__StopInspectResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__StopInspectResponse(struct soap*, _ns1__StopInspectResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__StopInspectResponse(struct soap*, _ns1__StopInspectResponse*);
    @endcode

  - <EndInspect> @ref _ns1__EndInspect
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__EndInspect(struct soap*, _ns1__EndInspect*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__EndInspect(struct soap*, _ns1__EndInspect*);
    @endcode

  - <EndInspectResponse> @ref _ns1__EndInspectResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__EndInspectResponse(struct soap*, _ns1__EndInspectResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__EndInspectResponse(struct soap*, _ns1__EndInspectResponse*);
    @endcode

  - <UploadSelfTestData> @ref _ns1__UploadSelfTestData
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__UploadSelfTestData(struct soap*, _ns1__UploadSelfTestData*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__UploadSelfTestData(struct soap*, _ns1__UploadSelfTestData*);
    @endcode

  - <UploadSelfTestDataResponse> @ref _ns1__UploadSelfTestDataResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__UploadSelfTestDataResponse(struct soap*, _ns1__UploadSelfTestDataResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__UploadSelfTestDataResponse(struct soap*, _ns1__UploadSelfTestDataResponse*);
    @endcode

  - <UploadRealtimeData> @ref _ns1__UploadRealtimeData
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__UploadRealtimeData(struct soap*, _ns1__UploadRealtimeData*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__UploadRealtimeData(struct soap*, _ns1__UploadRealtimeData*);
    @endcode

  - <UploadRealtimeDataResponse> @ref _ns1__UploadRealtimeDataResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__UploadRealtimeDataResponse(struct soap*, _ns1__UploadRealtimeDataResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__UploadRealtimeDataResponse(struct soap*, _ns1__UploadRealtimeDataResponse*);
    @endcode

  - <GetInspectionInfo> @ref _ns1__GetInspectionInfo
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetInspectionInfo(struct soap*, _ns1__GetInspectionInfo*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetInspectionInfo(struct soap*, _ns1__GetInspectionInfo*);
    @endcode

  - <GetInspectionInfoResponse> @ref _ns1__GetInspectionInfoResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetInspectionInfoResponse(struct soap*, _ns1__GetInspectionInfoResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetInspectionInfoResponse(struct soap*, _ns1__GetInspectionInfoResponse*);
    @endcode

  - <BeginCalibrate> @ref _ns1__BeginCalibrate
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__BeginCalibrate(struct soap*, _ns1__BeginCalibrate*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__BeginCalibrate(struct soap*, _ns1__BeginCalibrate*);
    @endcode

  - <BeginCalibrateResponse> @ref _ns1__BeginCalibrateResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__BeginCalibrateResponse(struct soap*, _ns1__BeginCalibrateResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__BeginCalibrateResponse(struct soap*, _ns1__BeginCalibrateResponse*);
    @endcode

  - <UploadCalibrateData> @ref _ns1__UploadCalibrateData
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__UploadCalibrateData(struct soap*, _ns1__UploadCalibrateData*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__UploadCalibrateData(struct soap*, _ns1__UploadCalibrateData*);
    @endcode

  - <UploadCalibrateDataResponse> @ref _ns1__UploadCalibrateDataResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__UploadCalibrateDataResponse(struct soap*, _ns1__UploadCalibrateDataResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__UploadCalibrateDataResponse(struct soap*, _ns1__UploadCalibrateDataResponse*);
    @endcode

  - <EndCalibrate> @ref _ns1__EndCalibrate
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__EndCalibrate(struct soap*, _ns1__EndCalibrate*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__EndCalibrate(struct soap*, _ns1__EndCalibrate*);
    @endcode

  - <EndCalibrateResponse> @ref _ns1__EndCalibrateResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__EndCalibrateResponse(struct soap*, _ns1__EndCalibrateResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__EndCalibrateResponse(struct soap*, _ns1__EndCalibrateResponse*);
    @endcode

  - <TestPhoto> @ref _ns1__TestPhoto
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__TestPhoto(struct soap*, _ns1__TestPhoto*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__TestPhoto(struct soap*, _ns1__TestPhoto*);
    @endcode

  - <TestPhotoResponse> @ref _ns1__TestPhotoResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__TestPhotoResponse(struct soap*, _ns1__TestPhotoResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__TestPhotoResponse(struct soap*, _ns1__TestPhotoResponse*);
    @endcode

  - <FuelEvaporationInspect> @ref _ns1__FuelEvaporationInspect
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__FuelEvaporationInspect(struct soap*, _ns1__FuelEvaporationInspect*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__FuelEvaporationInspect(struct soap*, _ns1__FuelEvaporationInspect*);
    @endcode

  - <FuelEvaporationInspectResponse> @ref _ns1__FuelEvaporationInspectResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__FuelEvaporationInspectResponse(struct soap*, _ns1__FuelEvaporationInspectResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__FuelEvaporationInspectResponse(struct soap*, _ns1__FuelEvaporationInspectResponse*);
    @endcode

  - <GetInspectParams> @ref _ns1__GetInspectParams
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetInspectParams(struct soap*, _ns1__GetInspectParams*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetInspectParams(struct soap*, _ns1__GetInspectParams*);
    @endcode

  - <GetInspectParamsResponse> @ref _ns1__GetInspectParamsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetInspectParamsResponse(struct soap*, _ns1__GetInspectParamsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetInspectParamsResponse(struct soap*, _ns1__GetInspectParamsResponse*);
    @endcode

  - <GetOtherInspectQueueByPlateID> @ref _ns1__GetOtherInspectQueueByPlateID
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetOtherInspectQueueByPlateID(struct soap*, _ns1__GetOtherInspectQueueByPlateID*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetOtherInspectQueueByPlateID(struct soap*, _ns1__GetOtherInspectQueueByPlateID*);
    @endcode

  - <GetOtherInspectQueueByPlateIDResponse> @ref _ns1__GetOtherInspectQueueByPlateIDResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetOtherInspectQueueByPlateIDResponse(struct soap*, _ns1__GetOtherInspectQueueByPlateIDResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetOtherInspectQueueByPlateIDResponse(struct soap*, _ns1__GetOtherInspectQueueByPlateIDResponse*);
    @endcode

  - <GetOtherInspectQueueByDate> @ref _ns1__GetOtherInspectQueueByDate
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetOtherInspectQueueByDate(struct soap*, _ns1__GetOtherInspectQueueByDate*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetOtherInspectQueueByDate(struct soap*, _ns1__GetOtherInspectQueueByDate*);
    @endcode

  - <GetOtherInspectQueueByDateResponse> @ref _ns1__GetOtherInspectQueueByDateResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetOtherInspectQueueByDateResponse(struct soap*, _ns1__GetOtherInspectQueueByDateResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetOtherInspectQueueByDateResponse(struct soap*, _ns1__GetOtherInspectQueueByDateResponse*);
    @endcode

  - <OBDInspect> @ref _ns1__OBDInspect
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__OBDInspect(struct soap*, _ns1__OBDInspect*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__OBDInspect(struct soap*, _ns1__OBDInspect*);
    @endcode

  - <OBDInspectResponse> @ref _ns1__OBDInspectResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__OBDInspectResponse(struct soap*, _ns1__OBDInspectResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__OBDInspectResponse(struct soap*, _ns1__OBDInspectResponse*);
    @endcode

  - <OBDTXCheck> @ref _ns1__OBDTXCheck
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__OBDTXCheck(struct soap*, _ns1__OBDTXCheck*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__OBDTXCheck(struct soap*, _ns1__OBDTXCheck*);
    @endcode

  - <OBDTXCheckResponse> @ref _ns1__OBDTXCheckResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__OBDTXCheckResponse(struct soap*, _ns1__OBDTXCheckResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__OBDTXCheckResponse(struct soap*, _ns1__OBDTXCheckResponse*);
    @endcode

*/

/* End of service[1].h */
