/* soapDataInterfaceSoapProxy.h
   Generated by gSOAP 2.8.21 from DataInterface.h

Copyright(C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapDataInterfaceSoapProxy_H
#define soapDataInterfaceSoapProxy_H
#include "soapH.h"

class SOAP_CMAC DataInterfaceSoapProxy : public soap
{ public:
	/// Endpoint URL of service 'DataInterfaceSoapProxy' (change as needed)
	const char *soap_endpoint;
	/// Variables globally declared in DataInterface.h (non-static)
	/// Constructor
	DataInterfaceSoapProxy();
	/// Construct from another engine state
	DataInterfaceSoapProxy(const struct soap&);
	/// Constructor with endpoint URL
	DataInterfaceSoapProxy(const char *url);
	/// Constructor with engine input+output mode control
	DataInterfaceSoapProxy(soap_mode iomode);
	/// Constructor with URL and input+output mode control
	DataInterfaceSoapProxy(const char *url, soap_mode iomode);
	/// Constructor with engine input and output mode control
	DataInterfaceSoapProxy(soap_mode imode, soap_mode omode);
	/// Destructor frees deserialized data
	virtual	~DataInterfaceSoapProxy();
	/// Initializer used by constructors
	virtual	void DataInterfaceSoapProxy_init(soap_mode imode, soap_mode omode);
	/// Delete all deserialized data (with soap_destroy and soap_end)
	virtual	void destroy();
	/// Delete all deserialized data and reset to default
	virtual	void reset();
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Get SOAP Header structure (NULL when absent)
	virtual	const SOAP_ENV__Header *soap_header();
	/// Get SOAP Fault structure (NULL when absent)
	virtual	const SOAP_ENV__Fault *soap_fault();
	/// Get SOAP Fault string (NULL when absent)
	virtual	const char *soap_fault_string();
	/// Get SOAP Fault detail as string (NULL when absent)
	virtual	const char *soap_fault_detail();
	/// Close connection (normally automatic, except for send_X ops)
	virtual	int soap_close_socket();
	/// Force close connection (can kill a thread blocked on IO)
	virtual	int soap_force_close_socket();
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
#ifndef WITH_COMPAT
	virtual	void soap_stream_fault(std::ostream&);
#endif

	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif

	/// Web service operation 'Common' (returns error code or SOAP_OK)
	virtual	int Common(_ns1__Common *ns1__Common, _ns1__CommonResponse &ns1__CommonResponse) { return this->Common(NULL, NULL, ns1__Common, ns1__CommonResponse); }
	virtual	int Common(const char *endpoint, const char *soap_action, _ns1__Common *ns1__Common, _ns1__CommonResponse &ns1__CommonResponse);

	/// Web service operation 'UploadAppearanceData' (returns error code or SOAP_OK)
	virtual	int UploadAppearanceData(_ns1__UploadAppearanceData *ns1__UploadAppearanceData, _ns1__UploadAppearanceDataResponse &ns1__UploadAppearanceDataResponse) { return this->UploadAppearanceData(NULL, NULL, ns1__UploadAppearanceData, ns1__UploadAppearanceDataResponse); }
	virtual	int UploadAppearanceData(const char *endpoint, const char *soap_action, _ns1__UploadAppearanceData *ns1__UploadAppearanceData, _ns1__UploadAppearanceDataResponse &ns1__UploadAppearanceDataResponse);

	/// Web service operation 'GetOBDDeviceId' (returns error code or SOAP_OK)
	virtual	int GetOBDDeviceId(_ns1__GetOBDDeviceId *ns1__GetOBDDeviceId, _ns1__GetOBDDeviceIdResponse &ns1__GetOBDDeviceIdResponse) { return this->GetOBDDeviceId(NULL, NULL, ns1__GetOBDDeviceId, ns1__GetOBDDeviceIdResponse); }
	virtual	int GetOBDDeviceId(const char *endpoint, const char *soap_action, _ns1__GetOBDDeviceId *ns1__GetOBDDeviceId, _ns1__GetOBDDeviceIdResponse &ns1__GetOBDDeviceIdResponse);

	/// Web service operation 'Common' (returns error code or SOAP_OK)
	virtual	int Common_(_ns1__Common *ns1__Common, _ns1__CommonResponse &ns1__CommonResponse) { return this->Common_(NULL, NULL, ns1__Common, ns1__CommonResponse); }
	virtual	int Common_(const char *endpoint, const char *soap_action, _ns1__Common *ns1__Common, _ns1__CommonResponse &ns1__CommonResponse);

	/// Web service operation 'UploadAppearanceData' (returns error code or SOAP_OK)
	virtual	int UploadAppearanceData_(_ns1__UploadAppearanceData *ns1__UploadAppearanceData, _ns1__UploadAppearanceDataResponse &ns1__UploadAppearanceDataResponse) { return this->UploadAppearanceData_(NULL, NULL, ns1__UploadAppearanceData, ns1__UploadAppearanceDataResponse); }
	virtual	int UploadAppearanceData_(const char *endpoint, const char *soap_action, _ns1__UploadAppearanceData *ns1__UploadAppearanceData, _ns1__UploadAppearanceDataResponse &ns1__UploadAppearanceDataResponse);

	/// Web service operation 'GetOBDDeviceId' (returns error code or SOAP_OK)
	virtual	int GetOBDDeviceId_(_ns1__GetOBDDeviceId *ns1__GetOBDDeviceId, _ns1__GetOBDDeviceIdResponse &ns1__GetOBDDeviceIdResponse) { return this->GetOBDDeviceId_(NULL, NULL, ns1__GetOBDDeviceId, ns1__GetOBDDeviceIdResponse); }
	virtual	int GetOBDDeviceId_(const char *endpoint, const char *soap_action, _ns1__GetOBDDeviceId *ns1__GetOBDDeviceId, _ns1__GetOBDDeviceIdResponse &ns1__GetOBDDeviceIdResponse);
};
#endif
