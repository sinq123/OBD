/* deviceSwap.h
   Generated by wsdl2h 2.8.21 from deviceSwap.wsdl and typemap.dat
   2019-12-27 05:18:52 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2000-2014 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on deviceSwap.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 -j to generate improved proxy and server classes.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following licenses:
GPL or Genivia's license for commercial use.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://iface.server.webservice.zkyt.com/                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to remove STL dependency)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://iface.server.webservice.zkyt.com/"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://iface.server.webservice.zkyt.com/"
//gsoap ns1   schema namespace:	http://iface.server.webservice.zkyt.com/
//gsoap ns1   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


//  Forward declaration of class ns1__getSqm.
class ns1__getSqm;

//  Forward declaration of class ns1__getSqmResponse.
class ns1__getSqmResponse;

//  Forward declaration of class ns1__jdcjk.
class ns1__jdcjk;

//  Forward declaration of class ns1__jdcjkResponse.
class ns1__jdcjkResponse;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://iface.server.webservice.zkyt.com/                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://iface.server.webservice.zkyt.com/                                 *
 *                                                                            *
\******************************************************************************/

/// @brief "http://iface.server.webservice.zkyt.com/":getSqm is a complexType.
///
/// class ns1__getSqm operations:
/// - soap_new_ns1__getSqm(soap*) allocate
/// - soap_new_ns1__getSqm(soap*, int num) allocate array
/// - soap_new_req_ns1__getSqm(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__getSqm(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__getSqm(soap*, ns1__getSqm*) deserialize from a stream
/// - int soap_write_ns1__getSqm(soap, ns1__getSqm*) serialize to a stream
class ns1__getSqm
{ public:
/// Element "jcxbh" of XSD type xs:string.
    std::wstring*                        jcxbh                          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":getSqmResponse is a complexType.
///
/// class ns1__getSqmResponse operations:
/// - soap_new_ns1__getSqmResponse(soap*) allocate
/// - soap_new_ns1__getSqmResponse(soap*, int num) allocate array
/// - soap_new_req_ns1__getSqmResponse(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__getSqmResponse(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__getSqmResponse(soap*, ns1__getSqmResponse*) deserialize from a stream
/// - int soap_write_ns1__getSqmResponse(soap, ns1__getSqmResponse*) serialize to a stream
class ns1__getSqmResponse
{ public:
/// Element "return" of XSD type xs:string.
    std::wstring*                        return_                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":jdcjk is a complexType.
///
/// class ns1__jdcjk operations:
/// - soap_new_ns1__jdcjk(soap*) allocate
/// - soap_new_ns1__jdcjk(soap*, int num) allocate array
/// - soap_new_req_ns1__jdcjk(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__jdcjk(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__jdcjk(soap*, ns1__jdcjk*) deserialize from a stream
/// - int soap_write_ns1__jdcjk(soap, ns1__jdcjk*) serialize to a stream
class ns1__jdcjk
{ public:
/// Element "sqm" of XSD type xs:string.
    std::wstring*                        sqm                            0;	///< Optional element.
/// Element "jklx" of XSD type xs:string.
    std::wstring*                        jklx                           0;	///< Optional element.
/// Element "jhsj" of XSD type xs:string.
    std::wstring*                        jhsj                           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://iface.server.webservice.zkyt.com/":jdcjkResponse is a complexType.
///
/// class ns1__jdcjkResponse operations:
/// - soap_new_ns1__jdcjkResponse(soap*) allocate
/// - soap_new_ns1__jdcjkResponse(soap*, int num) allocate array
/// - soap_new_req_ns1__jdcjkResponse(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__jdcjkResponse(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__jdcjkResponse(soap*, ns1__jdcjkResponse*) deserialize from a stream
/// - int soap_write_ns1__jdcjkResponse(soap, ns1__jdcjkResponse*) serialize to a stream
class ns1__jdcjkResponse
{ public:
/// Element "return" of XSD type xs:string.
    std::wstring*                        return_                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://iface.server.webservice.zkyt.com/                                 *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":getSqm of XSD type "http://iface.server.webservice.zkyt.com/":getSqm.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":getSqmResponse of XSD type "http://iface.server.webservice.zkyt.com/":getSqmResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":jdcjk of XSD type "http://iface.server.webservice.zkyt.com/":jdcjk.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://iface.server.webservice.zkyt.com/":jdcjkResponse of XSD type "http://iface.server.webservice.zkyt.com/":jdcjkResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://iface.server.webservice.zkyt.com/                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	DeviceSwapIfaceImplServiceSoapBinding 
//gsoap ns1  service type:	DeviceSwapIface 
//gsoap ns1  service port:	http://172.16.128.6:8118/jk/services/deviceSwap 
//gsoap ns1  service namespace:	http://iface.server.webservice.zkyt.com/ 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage DeviceSwapIfaceImplService Definitions

@section DeviceSwapIfaceImplService_bindings Service Bindings

  - @ref DeviceSwapIfaceImplServiceSoapBinding

@section DeviceSwapIfaceImplService_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page DeviceSwapIfaceImplServiceSoapBinding Binding "DeviceSwapIfaceImplServiceSoapBinding"

@section DeviceSwapIfaceImplServiceSoapBinding_operations Operations of Binding "DeviceSwapIfaceImplServiceSoapBinding"

  - @ref __ns1__getSqm

  - @ref __ns1__jdcjk

@section DeviceSwapIfaceImplServiceSoapBinding_ports Endpoints of Binding "DeviceSwapIfaceImplServiceSoapBinding"

  - http://172.16.128.6:8118/jk/services/deviceSwap

@note Use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   DeviceSwapIfaceImplServiceSoapBinding                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getSqm                                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getSqm" of service binding "DeviceSwapIfaceImplServiceSoapBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getSqm(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__getSqm*                        ns1__getSqm_,
    // output parameters:
    ns1__getSqmResponse                &ns1__getSqmResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getSqm(
    struct soap *soap,
    // input parameters:
    ns1__getSqm*                        ns1__getSqm_,
    // output parameters:
    ns1__getSqmResponse                &ns1__getSqmResponse_
  );
@endcode

C++ proxy class (defined in soapDeviceSwapIfaceImplServiceSoapBindingProxy.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceSwapIfaceImplServiceSoapBindingService.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getSqm SOAP
//gsoap ns1  service method-style:	getSqm document
//gsoap ns1  service method-encoding:	getSqm literal
//gsoap ns1  service method-action:	getSqm ""
//gsoap ns1  service method-output-action:	getSqm Response
int __ns1__getSqm(
    ns1__getSqm*                        ns1__getSqm_,	///< Input parameter
    ns1__getSqmResponse                &ns1__getSqmResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__jdcjk                                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__jdcjk" of service binding "DeviceSwapIfaceImplServiceSoapBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__jdcjk(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__jdcjk*                         ns1__jdcjk_,
    // output parameters:
    ns1__jdcjkResponse                 &ns1__jdcjkResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__jdcjk(
    struct soap *soap,
    // input parameters:
    ns1__jdcjk*                         ns1__jdcjk_,
    // output parameters:
    ns1__jdcjkResponse                 &ns1__jdcjkResponse_
  );
@endcode

C++ proxy class (defined in soapDeviceSwapIfaceImplServiceSoapBindingProxy.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDeviceSwapIfaceImplServiceSoapBindingService.h):
@code
  class DeviceSwapIfaceImplServiceSoapBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	jdcjk SOAP
//gsoap ns1  service method-style:	jdcjk document
//gsoap ns1  service method-encoding:	jdcjk literal
//gsoap ns1  service method-action:	jdcjk ""
//gsoap ns1  service method-output-action:	jdcjk Response
int __ns1__jdcjk(
    ns1__jdcjk*                         ns1__jdcjk_,	///< Input parameter
    ns1__jdcjkResponse                 &ns1__jdcjkResponse_	///< Output parameter
);

/**

@page DeviceSwapIfaceImplServiceSoapBinding Binding "DeviceSwapIfaceImplServiceSoapBinding"

@section DeviceSwapIfaceImplServiceSoapBinding_policy_enablers Policy Enablers of Binding "DeviceSwapIfaceImplServiceSoapBinding"

Based on policies, this service imports

  - WS-Policy reminders and enablers:
    - WS-Addressing 1.0 (2005/08, accepts 2004/08):
	@code
	#import "wsa5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-Addressing (2004/08):
	@code
	#import "wsa.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-ReliableMessaging 1.0:
	@code
	#import "wsrm5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-ReliableMessaging 1.1:
	@code
	#import "wsrm.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.0 (accepts 1.1):
	@code
	#import "wsse.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.1 (accepts 1.0):
	@code
	#import "wsse11.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - HTTP Digest Authentication:
	@code
	#include "plugin/httpda.h"
	soap_register_plugin(soap, soap_http_da); // register the HTTP DA plugin in your code
	// See the user guide gsoap/doc/httpda/html/index.html
	@endcode
*/


/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read in XML and deserialized from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

Data can be serialized in XML and written to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section ns1 Top-level root elements of schema "http://iface.server.webservice.zkyt.com/"

  - <getSqm> (use wsdl2h option -g to auto-generate)

  - <getSqmResponse> (use wsdl2h option -g to auto-generate)

  - <jdcjk> (use wsdl2h option -g to auto-generate)

  - <jdcjkResponse> (use wsdl2h option -g to auto-generate)

*/

/* End of deviceSwap.h */
